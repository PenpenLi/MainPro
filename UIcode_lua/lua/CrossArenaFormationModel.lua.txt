local auraArr={}
local curAura
local confirmCallback, updateCallback
local formationTypeList

local formationsData = {}
local orders = {1,2,3}

----------------------------------formation相关
local formationType
local formationArr
local otherFormationArr
local raceId = 0
local downHeroDic={}
local upHeroArray={}
local downHeroArray={}
local fight = 0
local curAura
local LimitLevel = 0

local function GetCurUpHeroFight(heroes)
	local allFight=0
	for i, data in pairs(heroes) do  
		if(data.heroId~=0)then
			local heroInfo=appData:checkItem("HeroItem",tostring(data.uid or data.srcUid))
			allFight=allFight+GetHeroFight(heroInfo)
		end
	end
	return allFight
end

function ChangeRepeatHero(heroId,active)
    local changedHero={}
	local tbl=ResTblContainer:GetTable(Hero.actorTbl)
	local relationId=tbl:GetInt(heroId,Hero.relationId)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do  
    		local relationId_i=tbl:GetInt(data.heroId,Hero.relationId)
    		if(data.heroId==heroId or (relationId ~= 0 and relationId == relationId_i))then
				data.isRepeat=active
				table.insert(changedHero,data)
			end
		end 
	end
	return changedHero
end

--计算光环数量
local function DoCheckAuraNum(heroes,raceId,num)
	local isEnough=false
	local col=0
	if heroes==nil or #heroes==0 then
		return false
	end
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i,data in pairs(heroes) do
		if(data.heroId~=0) then
			local race= tbl:GetInt(data.heroId,HeroBase.group)
			if(raceId==race) then
				col=col+1
			end
		end
	end
	if(col>=num)then
		isEnough=true
	end
	return isEnough
end

local function CrossCalcAura(heroes)
    local validAura = nil
    --光环
	for i,data in pairs(auraArr) do
		local result=SplitString(data.condition,";")
		local isAllOK=true
		for  i = 0,result.Length-1 do
			local str=SplitString(result[i],",")
			local raceId=tonumber(str[0])
			local num=tonumber(str[1])
			local isEnough=DoCheckAuraNum(heroes,raceId,num)
			if(isEnough==false)then
				isAllOK=false
				break
			end
		end
		data.isOn=isAllOK
		if(isAllOK==true) then
		    validAura=data
			break
		end
	end
	return validAura
end

local function AddOrderByPbOrder(formationData, order)
	formationData.fightOrder = order
	local pos = 0
	for i,v in ipairs(orders) do
		if v == order then
			pos = i
			break
		end
	end
	if pos ~= 0 then
		table.remove(orders,pos)
		table.sort(orders, 
			function(a,b)
				return a<b
			end)
	end
end

local function AddOrder(formationData)
	formationData.fightOrder = orders[1]
	table.remove(orders,1)
	table.sort(orders, 
		function(a,b)
			return a<b
		end)
end

local function RemoveOrder(formationData)
	local order = formationData.fightOrder
	formationData.fightOrder = 0
	table.insert(orders,order)
	table.sort(orders, 
	function(a,b)
		return a<b
	end)
end

local function GetFormationHeroByPos(heroes, pos)
	if heroes and #heroes ~= 0 then
		for i,v in ipairs(heroes) do
			if v.pos == pos then
				return v
			end
		end
	end
	return nil
end

local function UpdateFormationHero(hero,newHero)
	if newHero then
		hero.uid = newHero.uid
		hero.heroId = newHero.heroId
		hero.pos = newHero.pos
		hero.formationType = newHero.formationType or hero.formationType
		hero.formationIdx = newHero.formationIdx or hero.formationIdx
	else
		hero.uid = 0
		hero.heroId = 0
	end
end

local function UpdateFormationHeroes(index,newHeroes)
	local formationData = formationsData[index]
	for i,v in ipairs(formationData.heroes) do
		local hero = GetFormationHeroByPos(newHeroes, v.pos)
		UpdateFormationHero(v,hero)
	end
	formationData.combat = GetCurUpHeroFight(formationData.heroes)
	formationData.aura = CrossCalcAura(formationData.heroes)
end

local function InitFormationData(index,formationType)
	local formationData = {}
	formationData.heroes = {}
	local pb = appData:checkItem("Formation", tostring(formationType))
	if pb and pb.heroIds and #pb.heroIds ~= 0 then
		for  i = 1,6 do
			local hero = {
				pos = i,
				formationType = formationType,
				formationIdx = index
			}
			local heroInfo = GetFormationHeroByPos(pb.heroIds,i)
			if heroInfo==nil then
				hero.uid = 0
				hero.heroId = 0
			else
				hero.uid = heroInfo.uid
				hero.heroId = heroInfo.heroId
			end
			table.insert(formationData.heroes, hero)
		end
		formationData.combat = GetCurUpHeroFight(formationData.heroes)
		formationData.aura = CrossCalcAura(formationData.heroes)
	else
		for  i = 1,6 do
			local hero = {
				pos = i,
				formationType = formationType,
				formationIdx = index,
				uid = 0,
				heroId = 0
			}
			table.insert(formationData.heroes, hero)
		end
		formationData.combat = 0
		formationData.aura = nil
	end
	if pb and pb.order then
		AddOrderByPbOrder(formationData, pb.order)
	else
		AddOrder(formationData)
	end
	formationData.formationType = formationType
	formationData.formationIdx = index
	return formationData
end

local function CheckHeroRepeat(hero,exceptHero,formation)
	local tbl = ResTblContainer:GetTable(Hero.actorTbl)
	local heroRelationId = tbl:GetInt(hero.heroId,Hero.relationId)
	for i,v in ipairs(formation.heroes) do
		local relationId = tbl:GetInt(v.heroId,Hero.relationId)
		if v.uid ~= exceptHero.uid and v.heroId ~= 0 and hero.heroId ~= 0 and (hero.heroId == v.heroId or (heroRelationId == relationId and (heroRelationId ~= 0 and relationId ~= 0))) then
			return true
		end
	end
	return false
end

local function CheckCrossFormationTeamEmpty(team)
	for i,v in ipairs(team.heroes) do
		if v.heroId ~= 0 then
			return false
		end
	end
	return true
end

local function CheckCrossFormation()
	for i,team in ipairs(formationsData) do
		if team.heroes == nil or #team.heroes == 0 or CheckCrossFormationTeamEmpty(team) then
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("CrossFormation_NoReady"))
			return false
		end
	end
	if #orders~=0 then
		CsBridge.hintUILayer:ShowHintBox(Language:getStr("CrossFormation_NoOrder"))
		return false
	end
	return true
end

function OnCommand_InitCrossFormationData(objs)
	confirmCallback = objs[0]
	updateCallback = objs[1]
	formationTypeList = objs[2]

	formationsData = {}
	orders = {1,2,3}
	auraArr = {}
	for i, data in pairs(global_auraArr) do  
		local newData={}
		newData.id=data.id
		newData.title=data.title
		newData.icon=data.icon
		newData.des=data.desp
		newData.condition=data.cond
		newData.isOn=false
		newData.pos=i
		newData.condDesp=data.condDesp
		table.insert(auraArr,newData)
	end
	for i,v in ipairs(formationTypeList) do
		table.insert(formationsData,InitFormationData(i,v))
	end
	self:SendNotification("RefreshCrossFormationView",formationsData)
end

function OnCommand_UpdateTeamData(objs)
	local formationPos = objs[0]
	local formationType = objs[1]
	local index = objs[2]
	UpdateFormation(formationPos,formationType,index)
end

function OnCommand_ExchangeHero(objs)
	local dragData = objs[0]
	local dropData = objs[1]
	local callBack = objs[2]
	local dragFormation = formationsData[dragData.formationIdx]
	local dropFormation = formationsData[dropData.formationIdx]

	--check up hero empty
	if dragData.formationIdx ~= dropData.formationIdx then
		local hasHeroArr = table.choose(dragFormation.heroes, function(k, v)
			return v.heroId ~= 0
		end)
		if table.count(hasHeroArr) == 1 and dropData.heroId == 0 then
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("noUpHero"))
			callBack()
			return
		end

		--check repeat hero
		if CheckHeroRepeat(dragData,dropData,dropFormation) or CheckHeroRepeat(dropData,dragData,dragFormation) then
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("heroRepeat"))
			callBack()
			return
		end
	end
	local temp = {
		uid = dragData.uid,
		heroId = dragData.heroId
	}
	dragData.uid = dropData.uid
	dragData.heroId = dropData.heroId
	dropData.uid = temp.uid
	dropData.heroId = temp.heroId

	dragFormation.combat=GetCurUpHeroFight(dragFormation.heroes)
	dragFormation.aura=CrossCalcAura(dragFormation.heroes)
	self:SendNotification("RefreshTeam",dragFormation)
	dropFormation.combat=GetCurUpHeroFight(dropFormation.heroes)
	dropFormation.aura=CrossCalcAura(dropFormation.heroes)
	self:SendNotification("RefreshTeam",dropFormation)
end

function DoSureAction(isClose)
	local formations = {}
	for i,team in ipairs(formationsData) do
		local formation = {}
		formation.id = team.formationType
		formation.heroIds={}
		for i,hero in ipairs(team.heroes) do
			if hero.uid~=0 then
				local data = {}
				data.uid = hero.uid
				data.heroId = hero.heroId
				data.pos = hero.pos
				table.insert(formation.heroIds,data)
			end
		end
		formation.order = team.fightOrder
		table.insert(formations,formation)
	end
	confirmCallback(formations,isClose)
end

function OnCommand_CrossFight(objs)
	if CheckCrossFormation() then
		DoSureAction()
	end
end

function OnCommand_SaveFormation(objs)
	if CheckCrossFormation() then
		DoSureAction()
	end
end

function OnCommand_AddOrder(objs)
	local index = objs[0]
	AddOrder(formationsData[index])
	self:SendNotification("RefreshTeam",formationsData[index])
end

function OnCommand_RemoveOrder(objs)
	local index = objs[0]
	RemoveOrder(formationsData[index])
	self:SendNotification("RefreshTeam",formationsData[index])
end

function OnCommand_OpenFormationView(objs)
	local data=objs[0]
    local index = objs[1]
	local formationType = data.formationType
	formationArr = {}
	otherFormationArr = {}
	for i,v in ipairs(formationsData) do
		if i == index+1 then
			table.insertto(formationArr, v.heroes)
		else
			table.insertto(otherFormationArr, v.heroes)
		end
	end
	CsBridge.CacheAssetsByModule(self.Module,function()
		local view=CsBridge.OpenView("CrossArenaFormationView","CrossArenaFormationModel",true,true)
        view:SetParamDataList(formationType,nil,
			function (formationPos)
				local formationIdx = index+1
				UpdateFormationHeroes(formationIdx, formationPos)
				self:SendNotification("RefreshTeam", formationsData[index+1])
            end,1,false)
    end, "CrossArenaFormationView","HeroItemSlot")
end
------------------------------formation view--------------------------------
function OnCommand_InitData(objs)
	---forma
	formationType=objs[0]
    raceId=objs[1]
    PackData()
    for i, data in pairs(upHeroArray) do 
	    if(data.heroId~=0)then
		    ChangeRepeatHero(data.heroId,true)
	    end
	end
	downHeroArray = RefreshAllDownHero()
	fight = GetCurUpHeroFight(upHeroArray)
    curAura=CrossCalcAura(upHeroArray)
	self:SendNotification("InitData", upHeroArray, downHeroArray, fight,auraArr,curAura)
end

function RefreshAllDownHero()
	local dataArray={}
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do 
    		local race=tbl:GetInt(data.heroId,HeroBase.group)
		    if(raceId==0)then
    			table.insert(dataArray,data)
			elseif(raceId==race)then
    			table.insert(dataArray,data)
    		end
		end 
	end
	table.sort(dataArray, SortHeroByQuality)
    return dataArray
end

function PackData()
    downHeroDic={}
	local pbs=appData:checkAllItems("HeroItem")
	if(pbs~=nil)then
	    local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
		for  i = 0,pbs.Length-1 do
            local pb=pbs[i]
            if GetHeroAllLevel(pb.grade,pb.level) >= LimitLevel then
                local newData={}
                newData.uid=pb.uid
                newData.heroId=pb.heroId
                newData.level=pb.level
                newData.grade=pb.grade
                local quality = tbl:GetInt(pb.heroId,HeroBase.quality)
                newData.quality=quality
				newData.IsSelected=ContainItem(formationArr,pb.uid,function(hero)
					return hero.uid == pb.uid
				end)
                newData.isRepeat=false
                newData.distillationStar = pb.distillationStar
				newData.distillationLevel = pb.distillationLevel
				newData.breakLevel = pb.breakLevel
				newData.showDuty = ContainItem(otherFormationArr,pb.uid,function(hero)
					return hero.uid == pb.uid
				end)
                local kv={[pb.uid]=newData}
                table.insert(downHeroDic,kv)
            end
		end
	end
	upHeroArray={}
	for i = 1,6 do
		local data=GetFormationHeroByPos(formationArr,i)
		local newData={
			pos = data.pos,
			srcUid = data.uid,
			heroId = data.heroId,
			level = data.level,
			grade = data.grade
		}
		table.insert(upHeroArray,newData)
	end
end

function OnCommand_ScreenHero(objs)
    raceId = objs[0]
	downHeroArray = RefreshAllDownHero()
	self:SendNotification("ScreenHero", downHeroArray)
end

function OnCommand_DownHero(objs)
    local index=objs[0]
    local changedHero={}
	local upHero=upHeroArray[index]
	if(upHero.heroId~=0)then
		local heros=ChangeRepeatHero(upHero.heroId,false)
		for i=1,#heros do
		    table.insert(changedHero,heros[i])
		end
		for i, kv in pairs(downHeroDic) do  
    		for key, data in pairs(kv) do  
    			if(key==upHero.srcUid)then
					data.IsSelected=false
	    			break
	    		end
    		end
    	end
    	--置0
		upHero.srcUid=0
		upHero.heroId=0
		
	end
	fight=GetCurUpHeroFight(upHeroArray)
	curAura=CrossCalcAura(upHeroArray)
	self:SendNotification("DownHero", changedHero,upHero,fight,curAura)
end

function OnCommand_SelectHeroEffect(objs)
	if objs[1].m_data.showDuty then
        -- local str = curSelectRecordFightType == FightType.Light and "HeroInGloryRoad_2" or "HeroInGloryRoad_1"
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HeroInCrossFormation"))
        return
    end
    local uid = objs[0]
    local pos = 0
    for i=1,#upHeroArray do
        if upHeroArray[i].heroId==0 then
            pos=i
            break
        end
    end
    self:SendNotification("SelectHeroEffect",uid,pos,objs[1])
end

--上阵
function OnCommand_UpHero(objs)
    local downHero=objs[0]
    local upHero
    local changedHero={}
    downHero.IsSelected=true
	for i,data in pairs(upHeroArray) do
		if(data.heroId==0)then
			data.srcUid=downHero.uid
			data.heroId=downHero.heroId
			data.level=downHero.level
			data.grade=downHero.grade
			data.distillationStar=downHero.distillationStar
			data.distillationLevel=downHero.distillationLevel
			data.breakLevel=downHero.breakLevel
			local heros= ChangeRepeatHero(data.heroId,true)
			for i=1,#heros do
		        table.insert(changedHero,heros[i])
		    end
		    upHero=data
		    break
		end
	end
	fight=GetCurUpHeroFight(upHeroArray)
	curAura=CrossCalcAura(upHeroArray)
	self:SendNotification("UpHero",changedHero,upHero,fight,curAura)
end

function DoOnExit()
	auraArr = nil
	curAura = nil
	confirmCallback = nil
	updateCallback = nil
	formationTypeList = nil
	formationsData = nil
	orders = nil
	formationType = nil
	formationArr = nil
	otherFormationArr = nil
	raceId = nil
	downHeroDic = nil
	upHeroArray = nil
	downHeroArray = nil
	fight = nil
	curAura = nil
	LimitLevel = nil
end