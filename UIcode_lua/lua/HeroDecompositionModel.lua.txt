local luaIRewardUtils=require "RewardUtils"
local commonHeroBagUtils = require('CommonHeroBagUtils')

--decompose logic
local maxSelectedCount = 10
local curSelectedCount = 0
local tbl

local curHeroArr 
local allHeroArr 
local curSelectHeroArr

local curRace = 0

local rewards 

local materialIds

--preview logic
local showBtn = false
local previewRewards
local heroBreakConsumeData

function DoInit()
    tbl=ResTblContainer:GetTable(HeroLevelUp.actorTbl)
    materialIds = GetMaterialIds() 
end

function InitProperties()

end

function OnCommand_InitDecompositionData(objs)
    curSelectHeroArr = nil
    curHeroArr = nil
    allHeroArr = nil
    curSelectedCount = 0
    curRace = 0
    rewards = nil
    GetAllHeroData()
    InitSelectHeroData()
    curHeroArr = allHeroArr
    self:SendNotification("InitScreen",curRace)
    curRace = 0
    self:SendNotification("RefreshDecompositionView",curHeroArr,curSelectHeroArr)
    self:SendNotification("RefreshPreviewBtn",true)
    self:SendNotification("RefreshQuickBtn",Language:getStr("HeroDecomposition_PutOnAll"))
end

--Add：获取heroesData
function GetAllHeroData()
    allHeroArr = {}
    local pbs = appData:checkAllItems("HeroItem")
    if pbs ~= nil then
        for i=0, pbs.Length-1 do
            local hero = {
                uid = pbs[i].uid,
                heroId = pbs[i].heroId,
                grade = pbs[i].grade,
                level = pbs[i].level,
                showDuty = CheckHeroInDuty(pbs[i],GetNoDelHeroLockDuty()),
                duty = pbs[i].duty,
                distillationStar = pbs[i].distillationStar or 0,
                distillationLevel = pbs[i].distillationLevel or 0,
                breakLevel = pbs[i].breakLevel or 0,
            }
            hero.isComposeMaterial = IsComposeMaterial(hero.heroId)
            table.insert(allHeroArr,hero)
        end
        table.sort(allHeroArr, SortHeroByDefault)
    end
end

function InitSelectHeroData()
    curSelectHeroArr = {}
    for i=1,maxSelectedCount do
        local selectHero = {
            heroId = 0
        }
        table.insert(curSelectHeroArr, selectHero)
    end
end

function OnCommand_SelectHeroEffect(objs)
    local heroData = objs[0].m_data
    local heroIndex = objs[0].m_index
    if ShowSoulDesImprintView(heroData,self) then
        return
    end
    if curSelectedCount>=maxSelectedCount then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HeroDecomposition_MaxSelect"))
        return
    end
    if DownHeroFromFormation(self,heroData,heroIndex) then
        return
    end
    self:SendNotification("SelectHeroEffect",objs[0],curSelectedCount+1)
end

function OnCommand_SelectHero(objs)
    SelectHero(objs[0]+1)
end

function SelectHero(index)
    if curSelectedCount>=maxSelectedCount then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HeroDecomposition_MaxSelect"))
        return
    end
    local curHero = curHeroArr[index]
    if ShowSoulDesImprintView(curHero,self) then
        return
    end
    if curSelectedCount == 0 then
        self:SendNotification("RefreshPreviewBtn",false)
    end
    curSelectedCount=curSelectedCount + 1
    local curHero = curHeroArr[index]
    local curSelectHero = curSelectHeroArr[curSelectedCount]
    curSelectHero.uid = curHero.uid
    curSelectHero.heroId = curHero.heroId
    curSelectHero.grade = curHero.grade
    curSelectHero.level = curHero.level
    curSelectHero.distillationLevel = curHero.distillationLevel
    curSelectHero.distillationStar = curHero.distillationStar
    curSelectHero.breakLevel = curHero.breakLevel
    curSelectHero.isComposeMaterial = curHero.isComposeMaterial
    curSelectHero.anim = true
    if curSelectedCount>=maxSelectedCount then
        self:SendNotification("RefreshQuickBtn",Language:getStr("HeroDecomposition_PutOffAll"))
    end
    self:SendNotification("SelectHero",index-1)
    self:SendNotification("RefreshSelectView",curSelectHero)
end

function OnCommand_CancelSelectHero(objs)
    CancelSelectHero(objs[0])
end

function CancelSelectHero(heroData)
    if curSelectedCount<=0 or heroData.heroId == 0 then
        return
    end
    if curSelectedCount >= maxSelectedCount then
        self:SendNotification("RefreshQuickBtn",Language:getStr("HeroDecomposition_PutOffAll"))
    end
    local uid = heroData.uid
    local index = GetHeroSelectedIndex(heroData)
    RemoveHeroSelected(index)
    curSelectedCount=curSelectedCount - 1
    if curSelectedCount == 0 then
        self:SendNotification("RefreshPreviewBtn",true)
    end
    if curSelectedCount < maxSelectedCount then
        self:SendNotification("RefreshQuickBtn",Language:getStr("HeroDecomposition_PutOnAll"))
    end
    self:SendNotification("CancelSelectHero",allHeroArr[GetHeroIndex(uid)])
end

function OnCommand_QuickOperation(objs)
    if curSelectedCount < maxSelectedCount then
        QuickSelect()
    else
        QuickCancel()
    end
end

function OnCommand_Decomposition(objs)
    if curSelectedCount==0 then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HeroDecomposition_NoPreview"))
        return
    end
    local showWarning = false
    for i=1,curSelectedCount do
        if curSelectHeroArr[i].isComposeMaterial then
            showWarning = true
            break
        end
    end

    if showWarning then
        CsBridge.messageManager:FristConfirmBox("HeroDecompose_Confirm",Language:getStr("HeroDecompose_Confirm_Title"),Language:getStr("HeroDecompose_Confirm"),Language:getStr("local_cancel"),nil,Language:getStr("local_confirm"),function()
            local req = {}
            req.uidList={}
            for i=1,curSelectedCount do
                table.insert(req.uidList,curSelectHeroArr[i].uid)
            end
            HttpRequest("deComposeHero", "DeComposeHeroReq", "DeComposeHeroResp", req, OnDecomposition)            
        end)
    else
        local req = {}
        req.uidList={}
        for i=1,curSelectedCount do
            table.insert(req.uidList,curSelectHeroArr[i].uid)
        end
        HttpRequest("deComposeHero", "DeComposeHeroReq", "DeComposeHeroResp", req, OnDecomposition)        
    end
end

function OnDecomposition(resp)
    if resp~=nil then
        rewards = resp.results
        GetAllHeroData()
        curHeroArr = allHeroArr
        self:SendNotification("DecompositionEnd",curSelectedCount,allHeroArr)
        ClearHeroSelected()
        curSelectedCount = 0
    end
end

function OnCommand_ShowDecompositionEffectEnd(objs)
    local confirmCbk = function()
        self:SendNotification("RefreshPreviewBtn",true)
        self:SendNotification("RefreshQuickBtn",Language:getStr("HeroDecomposition_PutOnAll"))
        ScreenHero()
    end
    PopRewardView(self, rewards, confirmCbk)
end

function QuickSelect()
    local emptyNum = maxSelectedCount-curSelectedCount
    for i=1,#curHeroArr do
        if emptyNum <= 0 then
            return
        end
        local curSelectHero = curHeroArr[i]
        local pbHero = GetPbHero(curSelectHero)
        if pbHero.isSoulImprinted or pbHero.isEmblem then

        else
            if GetHeroSelectedIndex(curSelectHero) == 0 and not CheckHeroInDuty(curSelectHero,GetNoDelHeroLockDuty()) then
                SelectHero(i)
                emptyNum = emptyNum-1
            end
        end
    end
end

function QuickCancel()
    for i=curSelectedCount,1,-1 do
        CancelSelectHero(curSelectHeroArr[i])
    end
end

function GetHeroSelectedIndex(heroData)
    for index,data in ipairs(curSelectHeroArr) do
        if heroData.uid==data.uid then
            return index
        end
    end
    return 0
end

function RemoveHeroSelected(index)
    for i=index,curSelectedCount-1 do
        curSelectHeroArr[i].uid = curSelectHeroArr[i+1].uid
        curSelectHeroArr[i].heroId = curSelectHeroArr[i+1].heroId
        curSelectHeroArr[i].grade = curSelectHeroArr[i+1].grade
        curSelectHeroArr[i].level = curSelectHeroArr[i+1].level
        curSelectHeroArr[i].distillationLevel = curSelectHeroArr[i+1].distillationLevel
        curSelectHeroArr[i].distillationStar = curSelectHeroArr[i+1].distillationStar
        curSelectHeroArr[i].breakLevel = curSelectHeroArr[i+1].breakLevel
        curSelectHeroArr[i].isComposeMaterial = curSelectHeroArr[i+1].isComposeMaterial
        curSelectHeroArr[i].anim = false
        self:SendNotification("RefreshSelectView",curSelectHeroArr[i])
    end
    curSelectHeroArr[curSelectedCount].uid = 0
    curSelectHeroArr[curSelectedCount].heroId = 0
    curSelectHeroArr[curSelectedCount].grade = 0
    curSelectHeroArr[curSelectedCount].level = 0
    curSelectHeroArr[curSelectedCount].distillationLevel = 0
    curSelectHeroArr[curSelectedCount].distillationStar = 0
    curSelectHeroArr[curSelectedCount].breakLevel = 0
    curSelectHeroArr[curSelectedCount].isComposeMaterial = false
    curSelectHeroArr[curSelectedCount].anim = false
    self:SendNotification("RefreshSelectView",curSelectHeroArr[curSelectedCount])
end

function ClearHeroSelected()
    for i=curSelectedCount,1,-1 do
        curSelectHeroArr[i].uid = 0
        curSelectHeroArr[i].heroId = 0
        curSelectHeroArr[i].grade = 0
        curSelectHeroArr[i].level = 0
        curSelectHeroArr[i].distillationLevel = 0
        curSelectHeroArr[i].distillationStar = 0
        curSelectHeroArr[i].breakLevel = 0
        curSelectHeroArr[i].isComposeMaterial = false
        curSelectHeroArr[i].anim = false
        self:SendNotification("RefreshSelectView",curSelectHeroArr[i])
    end
end

function GetHeroIndex(uid)
    for i,data in ipairs(allHeroArr) do
        if data.uid == uid then
            return i
        end
    end
    return 0
end

function OnCommand_ScreenHero(objs)
    local race = objs[0]
    if curRace == race then
        return
    end
    local direct = race - curRace < 0
    curRace = race
    self:SendNotification("ScreenAnim",curRace,direct)
    ScreenHero()
end

function OnCommand_RefreshHero(objs)
    GetAllHeroData()
    ScreenHero()
end

function ScreenHero()
    curHeroArr = {}
    for i,hero in ipairs(allHeroArr) do
        local raceInfo = ResTblContainer:GetPropToInt(hero.heroId, HeroBase.group, HeroBase.actorTbl)
        if curRace == 0 then
            table.insert(curHeroArr, hero)
        elseif curRace == raceInfo then
            table.insert(curHeroArr, hero)
        end
    end
    self:SendNotification("ScreenHero", curHeroArr)
end

function SortHeroByDefault(a,b)
    if a.showDuty ~= b.showDuty then
        return b.showDuty
    end
    local qualityA = ResTblContainer:GetPropToInt(a.heroId, HeroBase.quality, HeroBase.actorTbl)
    local qualityB = ResTblContainer:GetPropToInt(b.heroId, HeroBase.quality, HeroBase.actorTbl)
    if a.distillationStar ~= nil then
		qualityA = qualityA + a.distillationStar
    end
    if b.distillationStar ~= nil then
        qualityB = qualityB + b.distillationStar
    end
    if qualityA ~= qualityB then
        return qualityA < qualityB
    end
    if a.grade ~= b.grade then
        return a.grade < b. grade
    end
    if a.level ~= b.level then
        return a.level < b.level
    end
    return a.heroId < b.heroId
end

function IsComposeMaterial(heroId)
    return materialIds[heroId] == true
end

function GetMaterialIds()
    local ids = GetIds(HeroRefine.tblName)
    local materials = {}
    local tbl=ResTblContainer:GetTable(HeroRefine.tblName)
    for i=0,ids.Length-1 do
        local infos = tbl:GetRow(ids[i],HeroRefine.mainId,HeroRefine.subId1,HeroRefine.subId2)
        local data = {
            tonumber(infos[0]),
            tonumber(SplitString(infos[1],",")[0]),
            tonumber(SplitString(infos[2],",")[0])
        }
        for i,v in ipairs(data) do
            if materials[v] == nil then
                materials[v] = true
            end
        end
    end
    return materials
end

--preview logic
function OnCommand_DecompositionPreview(objs)
    if curSelectedCount==0 then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HeroDecomposition_NoPreview"))
        return
    end
    previewRewards = LoadDecompositionData()
    CsBridge.CacheAssetsByModule(self.Module,
	function()
        CsBridge.OpenView("HeroDecompositionDetailsView","HeroDecompositionModel",false,true)
	end, "HeroDecompositionDetailsView","ItemSlot")
end

function OnCommand_InitPreviewData(objs)
    self:SendNotification("RefreshPreviewView",previewRewards)
end

---是否拥有觉醒的数据
local function IsHaveDistillationData(heroId, star)
    return global_heroDistillationDic[heroId] and global_heroDistillationDic[heroId][star]
end

---获取觉醒材料返还
local function GetDistillationResBack(heroId, distillationStar, quality)
    local totalStepStonCoin = 0
    local hadArr = {}
    local heroIdArr = GetBreakMainHeroIdArr(heroId)
    local curStar = distillationStar + quality
    for i = 1, #heroIdArr do
        local caculHeroId = heroIdArr[i]
        for tempQuality = quality, DISTILL_QUALITY, -1 do
            for tempStar = distillationStar, 1, -1 do
                local tempAllStar = tempStar + tempQuality
                if tempAllStar <= curStar and not IsHadItem(hadArr, tempAllStar) and IsHaveDistillationData(caculHeroId, tempAllStar)
                        and IsHaveDistillationData(caculHeroId, tempAllStar) then
                    totalStepStonCoin = totalStepStonCoin + global_heroDistillationDic[caculHeroId][tempAllStar].count
                    table.insert(hadArr, tempAllStar)
                end
            end
        end
    end

    return totalStepStonCoin
end

function LoadDecompositionData()
    local rewardItems = {}
    local totalStepStonCoin = 0
    local totalSoulCoin = 0
    local totalcoin = 0
    local totalRuneDust = 0
    for i=1,curSelectedCount do
        local curSelectHero = curSelectHeroArr[i]
        local quality = GetHeroQualityByHeroId(curSelectHero.heroId)
        local rewardStr = ResTblContainer:GetPropToStr(quality,HeroDecomposition.resultStr,HeroDecomposition.tblName)
        local rewards = GetRewardFromTbl(rewardStr)
        for i,reward in ipairs(rewards) do
            MergeReward(reward,rewardItems)
        end
        ---品阶材料返还
        for j = curSelectHero.grade,1,-1 do
            totalStepStonCoin = totalStepStonCoin+ResTblContainer:GetPropToInt(j,HeroEvelution.stepStoneCoin,HeroEvelution.actorTbl)
        end
        ---觉醒材料返还
        totalStepStonCoin = totalStepStonCoin + GetDistillationResBack(curSelectHero.heroId, curSelectHero.distillationStar, quality)
        ---突破材料返还
        if quality > DISTILL_QUALITY then
            local breakHeroIds = GetBreakHeroIdArr(quality, curSelectHero.heroId)
            for j = 1, #breakHeroIds do
                local cucalHeroId = breakHeroIds[j]
                local breakConsumes = GetRewardFromTbl(ResTblContainer:GetPropToStr(cucalHeroId, HeroBreak.other, HeroBreak.tblName))
                for k, v in ipairs(breakConsumes) do
                    totalStepStonCoin = totalStepStonCoin + v.count
                end
            end
        end
        ---觉醒升级材料返还
        for j = 1,curSelectHero.distillationLevel do
            local infos = ResTblContainer:GetRowFromTbl(HeroDistillationLevel.tblName,tostring(j),HeroDistillationLevel.coin,HeroDistillationLevel.soulCoin)
            totalcoin = totalcoin+tonumber(infos[0])
            totalSoulCoin = totalSoulCoin+tonumber(infos[1])
        end
        ---突破升级材料返还
        if heroBreakConsumeData == nil then
            heroBreakConsumeData = GetHeroBreakDataFromTbl()
        end
        for tempQuality = DISTILL_QUALITY + 1, quality do
            local lastLevel = 0
            for level = lastLevel + 1, curSelectHero.breakLevel do
                local qualityBreakArr = heroBreakConsumeData[tempQuality]
                if qualityBreakArr and qualityBreakArr[level] then
                    totalcoin = totalcoin + qualityBreakArr[level].coin
                    totalSoulCoin = totalSoulCoin + qualityBreakArr[level].soulCoin
                    lastLevel = level
                end
            end
            if lastLevel < table.count(heroBreakConsumeData[tempQuality]) then
                break
            end
        end
        ---基础等级升级材料返还
        local levelId = global_heroLevelUpDic[curSelectHero.grade.."-"..curSelectHero.level].id
        for j = 1,levelId do
            local infos=tbl:GetRow(tostring(j),HeroLevelUp.soulCoin,HeroLevelUp.coin)
            totalSoulCoin=totalSoulCoin+tonumber(infos[0])
            totalcoin=totalcoin+tonumber(infos[1])
        end
        local rune = appData:checkItem("HeroItem",curSelectHero.uid).rune
        if rune ~= nil then
            local runeLevel = rune[1]
            while runeLevel ~= 1 do
                local rewards = GetRewardFromTbl(ResTblContainer:GetPropToStr(runeLevel-1,Rune.upgradeConsumption,Rune.tblName))
                totalcoin=totalcoin+rewards[1].count
                totalRuneDust=totalRuneDust+rewards[2].count
                runeLevel = runeLevel-1
            end
        end
    end
    if totalStepStonCoin~=0 then
        local reward = {}
        reward.typeId=1
        reward.id=4
        reward.count=math.ceil(totalStepStonCoin)
        MergeReward(reward,rewardItems)
    end
    if totalcoin~=0 then
        local reward = {}
        reward.typeId=1
        reward.id=1
        reward.count=math.ceil(totalcoin)
        MergeReward(reward,rewardItems)
    end
    if totalSoulCoin~=0 then
        local reward = {}
        reward.typeId=1
        reward.id=3
        reward.count=math.ceil(totalSoulCoin)
        MergeReward(reward,rewardItems)
    end
    if totalRuneDust~=0 then
        local reward = {}
        reward.typeId = 1
        reward.id = ResourceEnum.Rune
        reward.count=math.ceil(totalRuneDust)
        MergeReward(reward,rewardItems)
    end
    return rewardItems
end

function DoOnExit()

    maxSelectedCount = nil
    curSelectedCount = nil
    tbl = nil

    curHeroArr  = nil
    allHeroArr  = nil
    curSelectHeroArr = nil

    curRace = nil

    rewards  = nil

    materialIds = nil

    showBtn  = nil
    previewRewards = nil
    heroBreakConsumeData = nil
end