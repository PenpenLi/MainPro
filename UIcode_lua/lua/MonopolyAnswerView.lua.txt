local actData
local selectedIndex
local bgImg
local titleArtTxt
local questionTxt
local answerGrid
local trueRewardGrid
local falseRewardGrid
local countdownTxt
local rightId
local myAnswerId
local sureBtn
local answersInfo

function DoInit()
	self.Anim = 0
	self.Shadow = CS.Client.Library.ShadowType.None
	InitUI()
end 
function InitUI()
	bgImg = self:GetGameObjectAtPath("banner/bgImg")
	titleArtTxt = self:GetComponentAtPath("banner/TitleArtImg",CLS_LOCALIZE)
	questionTxt = self:GetComponentAtPath("question/questionTxt",CLS_TEXT)
	answerGrid = self:GetComponentAtPath("AnswerSV/ScrollRect/Viewport/Grid",CLS_UI_ITEM_GRID)
	trueRewardGrid = self:GetComponentAtPath("reward/TrueRewardGrid",CLS_UI_ITEM_GRID)
	falseRewardGrid = self:GetComponentAtPath("reward/FalseRewardGrid",CLS_UI_ITEM_GRID)
	countdownTxt = self:GetComponentAtPath("banner/countdownTxt" ,CLS_TEXT)
	sureBtn = self:GetComponentAtPath("SureBtn" ,CLS_BUTTON_ARCHLY)
end
function OnAnimationFinished()
	CsBridge.IconData.SetRawImageByName(bgImg,"ui_bg_activity_zltz")
	SetServerActivityArtFontByImage(titleArtTxt,"ui_bg_activity_zltz")
	self:SendCommand("SetAnswerRewards")
	self:SendCommand("AnimationFinished")
end
function SetParamDataList(objs)
	if objs ~= nil then

	end
end

local function SetAnswerImg()
	
end

function OnNotification_SetActivityData(obj)
	actData = obj[0]
	selectedIndex = nil
	myAnswerId = actData.isOver
	if myAnswerId then
		sureBtn.Gray = true
	else
		sureBtn.Gray = false

	end
	self:SendCommand("GetQuestionInfo",actData.id)
end

function OnNotification_SetQuestionInfo(objs)
	local question = objs[0]
	answersInfo = objs[1]
	rightId = tonumber(objs[2])
	questionTxt.text = question
	answerGrid:RefreshItemSlots(answersInfo,self.gameObject,"AnswerItemSlot")
end

function OnNotification_SetRewards(objs)
	local rightAward = objs[0]
	local wrongAward = objs[1]
	trueRewardGrid:RefreshItemSlots(rightAward,self.gameObject,"ItemSlot")
	falseRewardGrid:RefreshItemSlots(wrongAward,self.gameObject,"ItemSlot")
end

function OnAnswerItemSlotBindValue(slot,data)
	local answerTxt = slot:GetComponentAtPath("answerTxt",CLS_TEXT)
	local answerImg = slot.transform:Find("signImg"):GetComponent("UnityEngine.UI.Image")
	answerTxt.text = data
	answerImg.gameObject:SetActive(false)
	local id = slot.m_index + 1
	if myAnswerId then
		if myAnswerId == id or rightId == id then
			answerImg.gameObject:SetActive(true)
			if rightId == id then
				CsBridge.IconData.SetIconByName(answerImg.gameObject,"new_com_gou")
			else
				CsBridge.IconData.SetIconByName(answerImg.gameObject,"new_com_cuo")
			end
		end
	end
end

function OnGridAnswerItemSlotClick(itemSlot)
	local allItems = answerGrid:GetAllItems()
	for i = 0, allItems.Length - 1 do
		local item = allItems[i]
		if item == itemSlot then
			selectedIndex = i+1
			item.IsSelected = true
		else
			item.IsSelected = false
		end
	end
end

function OnRuleBtnClick(sender)
	ShowHelpTip(self,INSTRUCTION_MONOPOLY_QUES)
end

function OnNotification_RefreshActCountdown(objs)
	local existTime = objs[0]
	if actData then
		local remainTime = CheckTimeRemain(actData.createdTime + existTime*1000)
		countdownTxt.text = remainTime
	end
end

function OnFalseRewardGridItemSlotClick(obj)
	local item = obj.m_data
	if item.typeId == 3 then
		return
	end
    CsBridge.CacheAssetsByModule(self.Module,
	function()
		local item = obj.m_data
		local view = CsBridge.OpenView("ItemTipView", "ItemTipModel",false,true)
		local rewardTmp={}
		rewardTmp.id=item.id
		rewardTmp.typeId=item.typeId
		rewardTmp.count=1
		if item.typeId == 0 then
			rewardTmp.attrs = item.attrs
		end 
		if item.typeId == 4 then
			rewardTmp.level = item.level
		end 
		view:SetParamDataList(rewardTmp,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end,"ItemTipView")
end

function OnTrueRewardGridItemSlotClick(obj)
	local item = obj.m_data
	if item.typeId == 3 then
		return
	end
    CsBridge.CacheAssetsByModule(self.Module,
	function()
		local item = obj.m_data
		local view = CsBridge.OpenView("ItemTipView", "ItemTipModel",false,true)
		local rewardTmp={}
		rewardTmp.id=item.id
		rewardTmp.typeId=item.typeId
		rewardTmp.count=1
		if item.typeId == 0 then
			rewardTmp.attrs = item.attrs
		end 
		if item.typeId == 4 then
			rewardTmp.level = item.level
		end 
		view:SetParamDataList(rewardTmp,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end,"ItemTipView")
end

function OnNotification_SetIsOver(objs)
	myAnswerId = objs[0]
	if myAnswerId then
		sureBtn.Gray = true
	end
	answerGrid:RefreshItemSlots(answersInfo,self.gameObject,"AnswerItemSlot")
end

function OnSureBtnClick(sender)
	if myAnswerId then
		CsBridge.hintUILayer:ShowHintBox(Language:getStr("Monopoly_HasSubmitAnswer"))
	else
		if selectedIndex then
			actData.answer = selectedIndex
			self:SendCommand("SubmitAnswer",actData)
		end
	end
end

function OnNotification_CloseActivityView(obj)
	self:HideView(self.gameObject.name)
end

function BeoforeReturnBack()
    self:HideView(self.gameObject.name)
end

function DoExit()
	actData = nil
	selectedIndex = nil
	bgImg = nil
	titleArtTxt = nil
	questionTxt = nil
	answerGrid = nil
	trueRewardGrid = nil
	falseRewardGrid = nil
	countdownTxt = nil
	rightId = nil
end