local downHeroArray={}
local upHeroArray={}
local fight=0
local auraArr={}
local curAura

local formationHeros={}

local txt_titleName
local txt_enterName
local txt_fight
local startBtn_GO
local saveBtn_GO
local heroGrid
local upHeroGrid
local togGroup
local togs
local skipBtn
local skipCheckObj
local raceFlag
local aura
local none_GO

local raceId = 0
local sortId = 1
local formationType=0
local GoToBattle
local GoToSaveFormation
local formView=0
local canSkip=false
local skipChecked = false
local heroEffect

local draggingItem

local exchanged = false
local hasItemSlot = false
local cnt=0
local battled = false

local enable = true

function DoInit()
    self.Shadow = 1
    MsgCenter:Subscribe(Notify_OnBattle, DoEnterBattle);
end

function SetParamDataList(objs)
	formationType=objs[0]
    GoToBattle=objs[1]
	GoToSaveFormation = objs[2]
	if(objs.Length>=4)then
		formView=objs[3]
	end
	if(objs.Length>=5)then
	    canSkip=objs[4]
	end
end

function doInitUI()
    txt_titleName = self:GetComponentAtPath("BGS/TitleTxt" ,CLS_TEXT)
    txt_fight = self:GetComponentAtPath("UP/numberTxt" ,CLS_TEXT)
    heroGrid = self:GetComponentAtPath("heroSV/ScrollRect/Viewport/Grid" ,CLS_UI_ITEM_GRID)
    upHeroGrid = self:GetComponentAtPath("UP/UpHeroGrid" ,CLS_UI_ITEM_GRID)
	startBtn_GO = self:GetGameObjectAtPath("BUTTON/StartBtn")
	saveBtn_GO = self:GetGameObjectAtPath("SaveBtn")
	local typeTog = self.transform:Find("TOG")
    togGroup = typeTog:GetComponent("ToggleGroupArchly")
    togs={}
	for i=0, typeTog.childCount-1 do
		local type = typeTog:GetChild(i):GetComponent("ToggleArchly")
		table.insert(togs, type)
	end
	skipBtn = self:GetGameObjectAtPath("skip")
	skipCheckObj= skipBtn.transform:GetGameObjectAtPath("iconImg")
	raceFlag=self.transform:Find("TOG/raceTog")
	aura=self:GetComponentAtPath("UP/aureole/icon01Img" ,CLS_IMAGE)
	heroEffect=self.transform:Find("HeroBase")
	none_GO = self:GetGameObjectAtPath("None")
end

function ShowTitle()
	startBtn_GO:SetSelfActive(formView~=1)
	saveBtn_GO:SetSelfActive(formView~=0)
	if(formView==1)then
		txt_titleName.text=tostring(Language:getStr("uiStr_3"))
		CsBridge.UnityHelper.SetUILocalPosition(saveBtn_GO.transform,0,saveBtn_GO.transform.localPosition.y)
	else
		txt_titleName.text=tostring(Language:getStr("uiStr_1"))
		CsBridge.UnityHelper.SetUILocalPosition(saveBtn_GO.transform,-206,saveBtn_GO.transform.localPosition.y)
	end
end

local initialized = false
function OnAnimationFinished()
    if not initialized then
        initialized = true
        doInitUI()
    end
	hasItemSlot = false
	cnt = 0
	ShowTitle()
	self:SendCommand("InitData",formationType,raceId)
end

function OnNotification_InitData(objs)
    upHeroArray = objs[0]
    downHeroArray = objs[1]
    fight = objs[2]
    auraArr=objs[3]
    curAura=objs[4]
    if(canSkip)then
        skipBtn:SetActive(true)
        if(skipChecked)then
            skipCheckObj:SetActive(true)
        else
            skipCheckObj:SetActive(false)
        end
    else
        skipBtn:SetActive(false)
    end
	txt_fight.text=tostring(fight)
	none_GO:SetSelfActive(downHeroArray==nil or #downHeroArray==0)
    heroGrid:RefreshItemSlots(downHeroArray,self.gameObject,"HeroItemSlot")
	upHeroGrid:RefreshItemSlots(upHeroArray,self.gameObject,"HeroItemSlot")
	ShowAura()
	hasItemSlot = true
end

function OnTogallClick(sender)
	ScreenHeroView(0)
end 

function OnTog01Click(sender)
	ScreenHeroView(1)
end 

function OnTog02Click(sender)
	ScreenHeroView(2)
end 

function OnTog03Click(sender)
	ScreenHeroView(3)
end 

function OnTog04Click(sender)
	ScreenHeroView(4)
end 

function OnTog05Click(sender)
	ScreenHeroView(5)
end 

function OnTog06Click(sender)
	ScreenHeroView(6)
end 

function ScreenHeroView(race)
	if not togs[race+1].isOn then
		--move animation
		local offset = 10
		if raceId > race then
			offset = -offset
		end
		raceId = race
		togs[raceId+1].isOn = true
		local targetX = togs[raceId+1].transform.localPosition.x
		local t1 = CsBridge.TweenUtils.MoveTo(raceFlag,targetX+offset,raceFlag.localPosition.y,0.15,function()
			local t2 = CsBridge.TweenUtils.MoveTo(raceFlag,targetX,raceFlag.localPosition.y,0.05)
			t2:DoPlay()
		end)
		t1:DoPlay()
		self:SendCommand("ScreenHero",raceId)
	end 
end

function OnNotification_ScreenHero(objs)
    downHeroArray = objs[0]
    heroGrid:RefreshItemSlots(downHeroArray,self.gameObject,"HeroItemSlot")
	none_GO:SetSelfActive(downHeroArray==nil or #downHeroArray==0)
end

function IsSetAnchor()
    return true
end

function OnMaskClick(sender)
    DoClose()
end

function OncloseBtnClick(sender)
    DoClose()
end

function DoClose()
    self:HideView(self.gameObject.name,true)
end

--点击上面格子
function OnUpHeroGridHeroItemSlotClick(obj)
	local data=obj:GetItemData().data
	if(data.heroId~=0)then
		self:SendCommand("DownHero",data.pos)
	end
end

function OnNotification_DownHero(objs)
    ChangedHeros(objs[0],objs[1],objs[2],objs[3])
end

function ChangedHeros(changedHero,changedUpHero,fight,validAura)
    curAura=validAura
    txt_fight.text=tostring(fight)
    upHeroGrid:SingleRefreshSlot(changedUpHero)
    for i=1,#changedHero do
        heroGrid:SingleRefreshSlot(changedHero[i])
    end
    ShowAura()
end

--检测上阵位是否已经满了
function CheckUpFull()
	local isCanUp=false
	for i,data in pairs(upHeroArray) do
		if(data.heroId==0)then
			isCanUp=true
			break
		end
	end
	return isCanUp
end

--点击下面格子
function OnGridHeroItemSlotClick(obj)
	local data=obj:GetItemData().data
	if ShowSoulImprintedTip(data) then
		return
	end
	if(data.IsSelected==false)then--未上阵
		--是否已经上阵满了
		if data.dead==true then
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("Hero_Dead"))
			return
		end
		local isCanUp=CheckUpFull()
		if(isCanUp==false)then
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("heroFull"))
			return
		end

		local result = ""
		if formationType==5 then
			result = CheckHeroInLockStateName(data,HeroDuty.CROSS_2,HeroDuty.CROSS_3)
		end
		if formationType==6 then
			result = CheckHeroInLockStateName(data,HeroDuty.CROSS_1,HeroDuty.CROSS_3)
		end
		if formationType==7 then
			result = CheckHeroInLockStateName(data,HeroDuty.CROSS_1,HeroDuty.CROSS_2)
		end
		if formationType==FormationTypeEnum.FormationType_GloryRoad_1 then
			result = CheckHeroInLockStateName(data,HeroDuty.GloryRoad_2)
		end
		if formationType==FormationTypeEnum.FormationType_GloryRoad_2 then
			result = CheckHeroInLockStateName(data,HeroDuty.GloryRoad_1)
		end
		if formationType==FormationTypeEnum.FormationType_BraveArena_1 then
			result = CheckHeroInLockStateName(data,HeroDuty.League_2,HeroDuty.League_3)
		end
		if formationType==FormationTypeEnum.FormationType_BraveArena_2 then
			result = CheckHeroInLockStateName(data,HeroDuty.League_1,HeroDuty.League_3)
		end
		if formationType==FormationTypeEnum.FormationType_BraveArena_3 then
			result = CheckHeroInLockStateName(data,HeroDuty.League_1,HeroDuty.League_2)
		end
		
		if result ~= nil then
			if (formationType==FormationTypeEnum.FormationType_Cross_One 
				or formationType==FormationTypeEnum.FormationType_Cross_Two
				or formationType==FormationTypeEnum.FormationType_Cross_Three) 
			then
				CsBridge.hintUILayer:ShowHintBox(Language:getStr(result))			
				return
			end
			if (formationType==FormationTypeEnum.FormationType_BraveArena_1 
				or formationType==FormationTypeEnum.FormationType_BraveArena_2
				or formationType==FormationTypeEnum.FormationType_BraveArena_3) 
			then
				CsBridge.hintUILayer:ShowHintBox(Language:getStr(result))
				return
			end
		end
		
		if(data.isRepeat==true)then--重复英雄
			CsBridge.hintUILayer:ShowHintBox(Language:getStr("heroRepeat"))
			return
		end
		self:SendCommand("SelectHeroEffect",data.uid,obj)
	else--已经上阵,点击下阵
		local upHero=GetUpHeroInfo(data.uid)
		if(upHero~=nil)then
			self:SendCommand("DownHero",upHero.pos)
		end
	end
end

function OnNotification_SelectHeroEffect(objs)
	local uid = objs[0]
	local pos = objs[1]
	local slot = objs[2]
	if enable then
		ShowHeroEffect(slot.m_data,slot.transform.position,upHeroGrid.transform:GetChild(pos-1).position,
		function()
			self:SendCommand("UpHero",slot.m_data)
		end)
	end
end 

function ShowHeroEffect(hero,startPos,endPos,onFinish)
	enable = false
	heroEffect.gameObject:SetSelfActive(true)
	heroEffect.position = startPos
	BindHeroBaseValue(heroEffect,hero)
	local t = CsBridge.TweenUtils.MoveToByWorld(heroEffect,endPos.x,endPos.y,0.2,
		function()
			enable=true
			heroEffect.gameObject:SetSelfActive(false)
			onFinish()
		end)
	t:DoPlay()
end 

--获取对应已上阵英雄数据
function GetUpHeroInfo(_uid)
	for i, data in pairs(upHeroArray) do  
		if(data.srcUid==_uid)then
			return data
		end
	end
	return nil
end

function OnNotification_UpHero(objs)
    local changedUpHero=objs[1]
    changedUpHero.anim=true
    ChangedHeros(objs[0],objs[1],objs[2],objs[3])
    changedUpHero.anim=false
end

--点击进入战斗
function OnStartBtnClick(sender)
	local isOwnUpHero=CheckOwnUpHero()
	if(isOwnUpHero==false) then
		CsBridge.hintUILayer:ShowHintBox(Language:getStr("noUpHero"))
		return
	end

	local heroIds={}
	for i,data in pairs(upHeroArray) do
		if(data.heroId~=0)then
			local newData={}
			newData.pos=data.pos
			newData.uid=data.srcUid
			newData.heroId=data.heroId
			table.insert(heroIds,newData)
		end
	end
	self:HideView(self.gameObject.name, false)
	if _G.ShowLoadResCount then
		_G.LoadResCount = 2.1
		CsBridge.messageManager:FristConfirmBox("LoadConfirm",Language:getStr("LoadConfirm"),string.format(Language:getStr("Load_Confirm"),tostring(_G.LoadResCount)),Language:getStr("local_cancel"),function()
			CS.UnityEngine.Application.Quit()
		end,Language:getStr("local_confirm"),function()
			GoToBattle(heroIds)
		end)
	else
		GoToBattle(heroIds)
	end
end

function OnSaveBtnClick(sender)
	local isOwnUpHero=CheckOwnUpHero()
	if(isOwnUpHero==false) then
		CsBridge.hintUILayer:ShowHintBox(Language:getStr("noUpHero"))
		return
	end

	local heroIds={}
	for i,data in pairs(upHeroArray) do
		if(data.heroId~=0)then
			local newData={}
			newData.pos=data.pos
			newData.uid=data.srcUid
			newData.heroId=data.heroId
			table.insert(heroIds,newData)
		end
	end
	self:HideView(self.gameObject.name,true)
	GoToSaveFormation(heroIds)
end

--检测是否至少有一个上阵英雄
function CheckOwnUpHero()
	local isOwnUpHero=false
	for i,data in pairs(upHeroArray) do
		if(data.heroId~=0)
		then
			isOwnUpHero=true
			break
		end
	end
	return isOwnUpHero
end

function OnHeroItemSlotBeginDrag(obj)
	local btn = obj:GetComponent(CLS_BUTTON_ARCHLY)
	btn:StopRunningClickAnim()
	btn.ClickAnim = false

	local data = obj:GetComponent("ItemSlot"):GetItemData().data
	if data.heroId == 0 then
		return
	end 
	local dragObj = obj:GetComponent("TestDrag").dragObj 
	SetDragItem(dragObj, data)
	CsBridge.UnityHelper.SetAnchoredPosition(dragObj.gameObject,obj.transform.localPosition.x,obj.transform.localPosition.y)
	dragObj:SetActive(true)
	BindHeroBaseValue(obj.transform:Find("HeroBase").gameObject,nil)
	draggingItem = obj
end 

function OnHeroItemSlotEndDrag(obj)
	local btn = obj:GetComponent(CLS_BUTTON_ARCHLY)
	btn.ClickAnim = true

	local data = obj:GetComponent("ItemSlot").m_data
	if data.heroId == 0 then
		return
	end
	if draggingItem ~= nil then
		draggingItem = nil
	end 
	if dropItem ~= nil then
		local dragIndex = obj:GetComponent("ItemSlot").m_index
		local dragData = obj:GetComponent("ItemSlot").m_data
		local dropIndex = dropItem.m_index
		local dropData = dropItem.m_data

		upHeroGrid:RefreshSlot(dragData, dropIndex)
		upHeroGrid:RefreshSlot(dropData, dragIndex)
		local temp = dragData.pos
		dragData.pos = dropData.pos
		dropData.pos = temp
		upHeroArray[dropIndex+1] = dragData
		upHeroArray[dragIndex+1] = dropData
		dropItem = nil
		exchanged = true
	else
		BindHeroBaseValue(obj.transform:Find("HeroBase").gameObject, data)
	end 
end 

function OnHeroItemSlotDrop(obj)
	if obj.name == "HeroItemSlot" then
		if obj ~= draggingItem then
			dropItem = obj:GetComponent("ItemSlot")
		end
	end 
end

function SetDragItem(obj, data)
	BindHeroBaseValue(obj.transform:Find("HeroBase").gameObject,data)
end 

function ShowAura()
    if(curAura == nil) then
        CsBridge.IconData.SetIconByName(aura.gameObject,"new_com_guanghuan11")
    else
        CsBridge.IconData.SetIconByName(aura.gameObject,curAura.icon)
    end
end

function OnaureoleClick(sender)
	CsBridge.CacheAssetsByModule(self.Module,
    function()
		local view = CsBridge.OpenView("aureoleView","FormationModel",true,true)
		view:SetParamDataList(auraArr, curAura)
		view.transform.parent:SetAsLastSibling()
	end, "aureoleView","aureoleItemSlot")
end

function OnskipClick(sender)
    if(canSkip) then
        skipChecked = not skipChecked
        skipCheckObj:SetActive(skipChecked)
    end
end

function CheckHasItemSlot()
    if (hasItemSlot) then
	    cnt=cnt+1
		if (cnt > 1) then
		    return true
		else
		    return false
		end
	else
	    cnt = 0
	    return false
	end
end

function HeroExchanged()
    return exchanged
end

function OnClose()
	heroGrid:ClearItems()
end

function DoExit()
	MsgCenter:Unsubscribe(Notify_OnBattle, DoEnterBattle);
	self.Module=nil
	downHeroArray = nil
	upHeroArray = nil
	fight = nil
	auraArr = nil
	curAura = nil
	formationHeros = nil
	txt_titleName = nil
	txt_enterName = nil
	txt_fight = nil
	startBtn_GO = nil
	saveBtn_GO = nil
	heroGrid = nil
	upHeroGrid = nil
	togGroup = nil
	togs = nil
	skipBtn = nil
	skipCheckObj = nil
	raceFlag = nil
	aura = nil
	none_GO = nil
	raceId = nil
	sortId = nil
	formationType = nil
	GoToBattle = nil
	GoToSaveFormation = nil
	formView = nil
	canSkip = nil
	skipChecked = nil
	heroEffect = nil
	draggingItem = nil
	exchanged = nil
	hasItemSlot = nil
	cnt = nil
	battled = nil
	enable = nil
end

function DoEnterBattle(obj)
    battled = true
end

function ResetBattleStatus()
    battled = false
end

function FinishStartBattle()
    return battled
end