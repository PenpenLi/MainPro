ResTable={}
ResTable.__index = ResTable

local localizeTblPrefix = "local_"
local localizeKeyPrefix = "local_"
local localizedStr = "localizedStr"
local localizedKey = "localKey"

function ResTable:New(tblName)
    local o = {}
    setmetatable(o, self)
    o.colNames = {}
	o.tblName=tblName
	o.isLocalizeTbl = string.startswith(tblName,localizeTblPrefix)
    o.isLocal={}
	o.key={}
	o.indexCol=nil
	return o
end

function ResTable:IsLocalizeTbl()
    return self.isLocalizeTbl
end

function ResTable:SetLocalTbl(localTbl)
    self.localTbl=localTbl
end

function ResTable:AssignCol(colName,col,isKey)
    if self[colName] == nil then
        table.insert(self.colNames, colName)
    end
	self[colName]=col
	if not self.isLocalizeTbl then
		for i=0,col.Length - 1 do
		    local val = col[i]
			if (string.startswith(val, localizeKeyPrefix)) then
			    self.isLocal[val] = true
			else
			    self.isLocal[val] = false
			end
	    end
	end
	if (isKey) then
	    self.indexCol=colName
	    for k,v in pairs(col) do
		    self.key[v]=k
		end
	end
end

function ResTable:TblName()
    return self.tblName
end

function ResTable:Clear()
	self.tblName=nil
	self.isLocalizeTbl = false
    self.isLocal={}    
	for i = 1,table.getn(self.colNames) do
	    self[self.colNames[i]] = nil
	end
	self.colNames = {}
	o.key={}
end

function ResTable:IsLocalStr(val)
    if (not self.isLocalizeTbl) and self.isLocal[val] then
	    return true
	else
	    return false
	end
end

function ResTable:GetCol(colName)
    local result = {}
	local idx = 0
	local v
	for i=0,self[colName].Length-1 do
	    v=self[colName][i]
	    if v==nil or v == "" then
		    result[idx]=""
		else
		    if((not self.isLocalizeTbl) and self:IsLocalStr(v)) then
			    result[idx]=Language:getStr(v)
		    else
			    result[idx] = v
		     end
		end
		idx = idx + 1
	end
	result.Length=idx
	return result
end

function ResTable:HasKey(key)
    local idKey=tostring(key)
    local index=self.key[idKey]
	return index ~= nil
end

function ResTable:Get(key,colName)
    local idKey=tostring(key)
    local index=self.key[idKey]
	if(index ~= nil) then
	    local col = self[colName]
		if(col ~= nil) then
		    local v = col[index]
			if(v ~= nil and v ~= "") then
			    if((not self.isLocalizeTbl) and self:IsLocalStr(v)) then
				    return Language:getStr(v)
				else
				    return v
				end
			else
			    return ""
			end
		else
		    return ""
		end
	else
	    return ""
	end
end

function ResTable:GetInt(key,colName)
    local val=self:Get(key,colName)
	if val ~= nil and val ~= "" then
        return tonumber(val)
	else
	    return 0
	end
end

function ResTable:GetFloat(key,colName)
    local val=self:Get(key,colName)
	if val ~= nil and val ~= "" then
        return tonumber(val)
	else
	    return 0
	end
end

function ResTable:GetRowAll(key)
    local result={}
	local idKey=tostring(key)
	local index=self.key[idKey]
	local idx=0
	if index ~= nil then
		local colName
		local val
		local col
	    for i=1,#self.colNames do
		    colName = self.colNames[i]
			if(colName ~= self.indexCol) then
			    col=self[colName]
				if(col~=nil) then
				    val=col[index]
					if(val~=nil and val ~= "") then
		                if((not self.isLocalizeTbl) and self:IsLocalStr(val)) then
						    result[idx]=Language:getStr(val)
		                else
			                result[idx] = val
		                end
					else
					    result[idx]=""
					end
				else
				    result[idx]=""
				end
			    idx=idx+1
			end
		end
	else
	    local colName
	    for i=1,#self.colNames do
		    colName = self.colNames[i]
			if(colName ~= self.indexCol) then
			    result[idx]=""
				idx=idx+1
			end
		end
	end
	result.Length=idx
	return result
end

function ResTable:GetRow(key,...)
    local result={}
	local idKey = tostring(key)
	local index=self.key[idKey]
	local idx=0
	if index ~= nil then
		local colName
		local val
		local col
	    for k,colName in pairs{...} do
			col=self[colName]
			if(col~=nil) then
				val=col[index]
				if(val~=nil and val ~= "") then
		            if((not self.isLocalizeTbl) and self:IsLocalStr(val)) then
			            result[idx]=Language:getStr(val)
		            else
			            result[idx] = val
		            end
				else
					result[idx]=""
				end
			else
				result[idx]=""
			end
			idx=idx+1
		end
	else
	    local colName
	    for k,v in pairs{...} do
			result[idx]=""
		    idx=idx+1
		end
	end
	result.Length=idx
	return result
end

function ResTable:GetLocalVal(v)
    if self.isLocalizeTbl then
	    return self:Get(v,localizedStr)
	else
	    return v
	end
end

return ResTable