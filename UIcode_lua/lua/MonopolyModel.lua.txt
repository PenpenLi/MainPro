local iconRoot --Áé©ÂÆ∂Â§¥ÂÉèÊ°Ü
local modelPos = 1--Áé©ÂÆ∂‰ΩçÁΩÆ
local endPos = 60--‰∏ÄËΩÆÁªìÊùü‰ΩçÁΩÆ
local stepReward = {} --Ê≠•Êï∞Â•ñÂä±
local finalReward = {} --ÈÄöÂÖ≥Â•ñÂä±
local reqReward = {}--Â•ñÂä±ÁºìÂ≠ò
local slotsData = {} --Âú∞ÂõæÁÇπ‰Ωç
local stepType = 0--ÊäïÊé∑È™∞Â≠êÁ±ªÂûã
local costNum = 0
local EventTable = {--ÊúçÂä°Âô®ËøîÂõûÁöÑÂ•áÈÅá‰∫ã‰ª∂keyÂØπÂ∫îÁöÑ‰∫ã‰ª∂id
	["event_1"] = MonoPolyActivity.MonopolyBox,
	["event_2"] = MonoPolyActivity.MonopolyAnswer,
	["event_3"] = MonoPolyActivity.MonopolyShop,
	["event_4"] = MonoPolyActivity.MonopolyFight,
	["event_5"] = MonoPolyActivity.MonopolyChallenge,
}
local isAuto
local TIMER_TICKER = "MonopolyActivityTimer"

--È°∂ÈÉ®Á≤æÂäõËµÑÊ∫êÂà∑Êñ∞
local function RefreshMoneyBanner()
	local playerInfo = appData:checkData("PlayerInfo")
	local num = playerInfo.zillionaire
	self:SendNotification("RefreshEnergy",num)
end

--Âà∑Êñ∞ÈÅ•ÊéßÈ™∞Â≠êÊ∂àËÄó
local function RefreshCostNum(payDiceCount)
	local tbl = ResTblContainer:GetTable("Remote")
	local numMixTbl = tbl.numMix
	local numMaxTbl = tbl.numMax
	local index = 0
	local nextNum = payDiceCount+1
	for i = 0,numMixTbl.Length - 1 do
		if nextNum >= tonumber(numMixTbl[i]) and nextNum <= tonumber(numMaxTbl[i]) then
			index = i
			break
		end
	end
	costNum = tbl.price[index]
	self:SendNotification("RefreshCostNum",costNum)
end

--ËÆæÁΩÆÂ§¥ÂÉè‰ΩçÁΩÆ
local function SetHeroPos(pos)
	self:SendNotification("ScrollToCenter",pos)
	modelPos = pos
	local stageSlot = slotsData[modelPos]
	local pox = stageSlot.transform.localPosition.x
	local poy = stageSlot.transform.localPosition.y+70
	CsBridge.UnityHelper.SetAnchoredPosition(iconRoot.gameObject,pox,poy)
	CsBridge.UnityHelper.SetlocalScale(iconRoot.gameObject,0.7,0.7,0.7)
end

--Âà∑Êñ∞Â•áÈÅáicon
local function UpdateActivityIconCountDown(iconData)
	local tbl = ResTblContainer:GetTable("ZillionaireFortuitous")
	Timer:AddNonstopTicker(TIMER_TICKER,function()
		local tempTab = {}
		local flag = false
		for _,v in pairs(iconData) do
			local existTime = tbl:Get(v.id,"time")
			local tempTime = 0
			for k,data in pairs(v.actData) do
				if tempTime < data.createdTime then
					tempTime = data.createdTime
				end
			end
			local remainTime = CheckTimeRemain(tempTime + existTime*1000)
			if remainTime ~= "" then--ÊâÄÊúâ‰∫ã‰ª∂ÂÄíËÆ°Êó∂ÈÉΩÁªìÊùüÂêéÁßªÈô§Ê¥ªÂä®ÊåâÈíÆ
				table.insert(tempTab,v)
			else
				flag = true
			end
		end
		if flag then
			iconData = tempTab
			self:SendNotification("RefreshActivityIconView",iconData)
		end
        self:SendNotification("RefreshActivityIconCountDown",iconData)
	end,1)
end

--Â•áÈÅá‰∫ã‰ª∂‰ø°ÊÅØÂ§ÑÁêÜ
local function InitMonopolyActData()
	local zillionaireInfo = appData:checkData("ZillionaireInfo")
	local iconData = {}--Â∑≤Ëß¶ÂèëÁöÑÂ•áÈÅá‰∫ã‰ª∂
	local eventPoint = zillionaireInfo.eventPoint--ÂΩìÂâçÂú∞ÂõæÁÇπ‰ΩçÂØπÂ∫îÁöÑÂ•áÈÅá‰∫ã‰ª∂

	local tbl = ResTblContainer:GetTable("ZillionaireFortuitous")
	for key,val in pairs(zillionaireInfo) do
		local isEvent = string.find(key,"event_")
		if isEvent then
			local count = #val
			local id = EventTable[key]
			local tempTime = 0
			local existTime = tbl:Get(id,"time")
			for k,v in pairs(val) do
				if tempTime < v.createdTime then
					tempTime = v.createdTime
				end
			end
			local endTime = tempTime + existTime*1000
			table.insert(iconData,{count = count,actData = val,id = id,endTime = endTime})
		end
	end
	table.sort(iconData,function(a,b)
		if a.endTime ~= b.endTime then
			return a.endTime > b.endTime
		end
	end)
	
	self:SendNotification("RefreshActivityIconView",iconData)
	self:SendNotification("RefreshMap",eventPoint,zillionaireInfo.location)
	UpdateActivityIconCountDown(iconData)
end

--ÂàùÂßãÂåñÂú∞Âõæ
local function DoInitMap()
	-- body
	local zillionaireInfo = appData:checkData("ZillionaireInfo")
	if zillionaireInfo then
		RefreshMoneyBanner()
		local mapId = zillionaireInfo.id--Âú∞Âõæid
		local tbl = ResTblContainer:GetTable("ZillionaireCustoms")
		local mapStr = tbl:Get(mapId,"mapId")
		local mapinfos = string.split(mapStr, ",")
		self:SendNotification("RefreshBgImage",mapinfos[0],mapinfos[1])

		local eventPoint = zillionaireInfo.eventPoint
		local tbl = ResTblContainer:GetTable("ZillionaireFortuitous")
		for k,v in pairs(eventPoint) do
			local icon = tbl:Get(v.id,"iconImg")
			eventPoint[k].icon = icon
		end
		InitMonopolyActData()
		RefreshCostNum(zillionaireInfo.payDiceCount)
		SetHeroPos(zillionaireInfo.location)
	end
end

--ËØ∑Ê±ÇÂú∞Âõæ‰ø°ÊÅØ
local function DoReqInfo()
	local req={}
    req.useless=1
    HttpRequest("zillionaireCheck", "ZillionaireCheckReq", "ZillionaireCheckResp", req, function(resp)
        if resp then
        	DoInitMap()
        end
    end)
end

local function GetAwards()
	if isAuto and stepType == 0 then
		for _,reward in pairs(reqReward) do
			local flag = false
			for k,v in pairs(stepReward) do
				if v.id == reward.id then
					stepReward[k].count = stepReward[k].count + reward.count
					flag = true
					break
				end
			end
			if not flag then

				table.insert(stepReward,reward)
			end
		end
	else
		stepReward = reqReward
	end
	PopRewardView(self,stepReward)
end

--Â§¥ÂÉèÊ°ÜÁßªÂä®
local function MoveToPos(pos)
	if modelPos < pos then
		modelPos = modelPos + 1
		local stageSlot = slotsData[modelPos]
		local pox = stageSlot.transform.localPosition.x
		local poy = stageSlot.transform.localPosition.y+70
		local t1 = CsBridge.TweenUtils.MoveToByAnchored(iconRoot.transform, pox, poy, 0.5, function()
	        MoveToPos(pos)
	    end)
	    t1:DoPlay()
	else--ÁßªÂä®ÂÆåÊàê
		if pos == endPos then--‰∏ÄËΩÆÁªìÊùü
			pos = 1
			DoReqInfo()
			local rewardTab = {}
			for k,v in pairs(finalReward) do--ÊúÄÁªàÂ•ñÂä±
				table.insert(rewardTab,v)
			end
			for k,v in pairs(stepReward) do--Ê≠•Êï∞Â•ñÂä±
				table.insert(rewardTab,v)
			end
			CsBridge.CacheAssetsByModule( self.Module,
			function()
			    local view = CsBridge.OpenView("MonopolyFinalAwardView", "MonopolyModel",false,true)
		        view:SetParamDataList(rewardTab)
		    end, "MonopolyFinalAwardView", "ItemSlot")
		    self:SendNotification("RefreshThrowBtn",true)
		else
			local zillionaireInfo = appData:checkData("ZillionaireInfo")
			local eventPoint = zillionaireInfo.eventPoint
			local qyId = nil--ÊòØÂê¶Ëß¶ÂèëÂ•áÈÅá‰∫ã‰ª∂
			local tbl = ResTblContainer:GetTable("ZillionaireFortuitous")
			local showIcon
			for k,v in pairs(eventPoint) do
				local icon = tbl:Get(v.id,"iconImg")
				eventPoint[k].icon = icon
				if v.location == pos then
					qyId = v.id
					showIcon = icon
				end
			end
			if qyId then
				self:SendNotification("TriggerIncident",showIcon,eventPoint)
			else
				if isAuto and stepType == 0 then
					self:SendNotification("AutoThrow")
				else
					GetAwards()
					stepReward = {}
				end
				self:SendNotification("RefreshMap",eventPoint,zillionaireInfo.location)
				self:SendNotification("RefreshThrowBtn",true)
			end
		end
	end
end

function OnCommand_InitMonopolyActData(objs)
	-- body
	InitMonopolyActData()
	GetAwards()
	stepReward = {}
	self:SendNotification("RefreshThrowBtn",true)
end

--ËÆæÁΩÆÂú∞Âõæ
function OnCommand_InitMap(objs)
	iconRoot = objs[0]
	slotsData = objs[1]
	DoReqInfo()
end

local function CheckEnergyEnoug()
	-- body
	local tbl = ResTblContainer:GetTable(UIOpenBase.actorTbl)
	local itemId = tbl:Get(UI_OPEN_TYPE_MONOPOLY,UIOpenBase.addCountItemId)
    local itemData = appData:checkItem("PackItem",tostring(itemId))
	local count = 0
	if itemData ~= nil then
		count = itemData.count
	end
    ShowExchangeView(self,2,tonumber(itemId),count,function()
    	RefreshMoneyBanner()
    end)
end

--Ë¥≠‰π∞Á≤æÂäõÈÅìÂÖ∑
function OnCommand_BuyEnergyItem()
	CheckEnergyEnoug()
end

--ÊòØÂê¶ËÆæÁΩÆËá™Âä®ÊäïÊé∑
function OnCommand_AutoThrow(objs)
	isAuto = objs[0]
	if isAuto then
		stepReward = {}
	end
end

--ÊâìÂºÄÂ•áÈÅáÊ¥ªÂä®ÁïåÈù¢
function OnCommand_OpenActivityView(objs)
	local actData = objs[0]
	actData.refreshCallback = DoReqInfo
	self:ShowModule("MonopolyActivityModule",{actData})
end

--Â§¥ÂÉèÊ°Ü‰ΩçÁΩÆÂà∑Êñ∞
local function RefreshIconPos(pos)
	self:SendNotification("RefreshThrowBtn",false)
	if pos == 1 then
		pos = endPos
	end
	self:SendNotification("ScrollToCenter",pos)
	MoveToPos(pos)
end

--ÊäïÊé∑È™∞Â≠êüé≤
function OnCommand_ThrowPoint(objs)
	local req = {}
	req.step = objs[0]
	stepType = objs[0]
	if stepType ~= 0 then
		if not CheckResEnough(ResourceEnum.Gem,tonumber(costNum),true) then
			self:ShowModule("PayModule",nil,false)
			return
		elseif not CheckResEnough(ResourceEnum.Zillionaire,GetConstValue("ExpendVigor"),true) then
			CheckEnergyEnoug()
			return
		end
	else
		if not CheckResEnough(ResourceEnum.Zillionaire,GetConstValue("ExpendVigor"),true) then
			CheckEnergyEnoug()
			return
		end
	end
	reqReward = {}
	HttpRequest("zillionaireDice","ZillionaireDiceReq","ZillionaireDiceResp",req,function(resp)
		if resp then
			reqReward = resp.stepReward
			finalReward = resp.finalReward
			local zillionaireInfo = appData:checkData("ZillionaireInfo")
			local movePos = zillionaireInfo.location - modelPos
			if zillionaireInfo.location == 1 then
				movePos = endPos - modelPos
			end
			self:SendNotification("PlaySpine",movePos,zillionaireInfo.location)
			RefreshMoneyBanner()
			RefreshCostNum(zillionaireInfo.payDiceCount)
		end
	end)
end

function OnCommand_RefreshIconPos(objs)
	local location = objs[0]
	RefreshIconPos(location)
end

function DoOnExit()
	iconRoot = nil
	stepReward = nil
	finalReward = nil
	slotsData = nil
end