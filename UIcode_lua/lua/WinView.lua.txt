local loadedRewardUtils = require "RewardUtils"

local winSpine
local dropGrid, hpTxt, hpObj
local battleInfo={}

function DoInit()
	self.Shadow = 2
	dropGrid = self:GetComponentAtPath("Center/ScrollRect/Viewport/DropGrid",CLS_UI_ITEM_GRID)
	winSpine = self:GetComponentAtPath("SpineGO/WinSpine",CLS_SKELETONGRAPHIC)
	hpObj = self:GetGameObjectAtPath("Center/Desc")
	hpTxt = self:GetComponentAtPath("Center/Desc/contentTxt",CLS_TEXT)
end

function SetData(data)
	battleInfo=data
end

function OnOpen()
	winSpine:PlayAnimation("apear",false,nil,
	function ()
		winSpine:PlayAnimation("stand",true,nil,nil)
	end)
	CsBridge.audioManager:PlayUI(ResTblContainer:GetPropToStr(1,sound.name,sound.tblName))
end

function OnAnimationFinished()
	if battleInfo.battleEndInfo==nil then
		return 
	end
	if battleInfo.battleEndInfo.dropItems~=nil then
		dropGrid:RefreshItemSlots(MergeRewards(battleInfo.battleEndInfo.dropItems),self.gameObject,"ItemSlot")
	end
	
	if battleInfo.battleEndInfo.type == 1000 then
		hpObj:SetActive(true)
		local hurtValue = battleInfo.battleEndInfo.hurt
		hpTxt.text = tostring(hurtValue)
	elseif battleInfo.battleEndInfo.type == 33 then
		hpObj:SetActive(true)
		local hurtValue = battleInfo.battleEndInfo.hurt
		hpTxt.text = GetValueAbbreviation(hurtValue)

		local hpRoot = hpTxt.transform.parent
		local detailBtnTrans = self.transform:Find("Center/DetailBtn")
		hpRoot.gameObject:SetGlobalPositionY(detailBtnTrans.position.y)
	else
		hpObj:SetActive(false)
	end

	if battleInfo.battleEndInfo.randomReward~=nil and battleInfo.isRecord~=true then
		CsBridge.CacheAssetsByModule(self.Module,
		function()
			local view = CsBridge.OpenView("RandomRewardView", "WinModel",false,true)
			view:SetData(battleInfo.battleEndInfo.randomReward)
		end,"RandomRewardView")
	end
end

function OnDropGridItemSlotClick(obj)
	local item = obj.m_data
	if item.typeId == 3 then
		return
	end
	CsBridge.CacheAssetsByModule(self.Module,
	function()
		local item = obj.m_data
		local view = CsBridge.OpenView("ItemTipView", "ItemTipModel",false,true)
		local rewardTmp={}
		rewardTmp.id=item.id
		rewardTmp.typeId=item.typeId
		rewardTmp.count=1
		if item.typeId == 0 then
			rewardTmp.attrs = item.attrs
		end 
		if item.typeId == 4 then
			rewardTmp.level = item.level
		end 
		view:SetParamDataList(rewardTmp,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end,"ItemTipView")
end 

function OnEquipBtnClick(sender)
	-- body
end

function OnLevelUpBtnClick(sender)
	-- body
end

function OnSummonBtnClick(sender)
	-- body
end

function OnDetailBtnClick(sender)
	ShowBattleRecordView({battleInfo},self)
end

local function Close(onClose)
	self:HideView(self.gameObject.name)
	if onClose then
		onClose()
	end
end

function OnCloseBtnClick(sender)
	Close(battleInfo.onClose)
end

function OnMaskClick()
	Close(battleInfo.onClose)
end

function DoExit()
	winSpine = nil
	dropGrid = nil
	hpTxt = nil
	hpObj = nil
	battleInfo = nil
end