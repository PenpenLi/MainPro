 
local utils = require "HeroBagUtils"
local ScreenUtils = require "ScreenUtils"

local heroGrid

local raceTogGroup
local raceTogArr 
local raceFlag

local sortBtnObj 
local sortName

local addCountObj
local heroBagNumtxt
local waitExtendHeroBagNumAnim = false

local heroTogGroup

local isInit = false

local hasItemSlot = false
local cnt = 0

local noneObj

function DoInit()
	self.Shadow = 1
end

local function InitUI()

	heroTogGroup = self:GetComponentAtPath("TopLeft/HeroTogGroup",CLS_TOGGLE_GROUP_ARCHLY)

	raceTogGroup = self:GetComponentAtPath("Center/RaceTogGroup",CLS_TOGGLE_GROUP_ARCHLY)
	raceTogArr = {}
	local raceTogGroupTrans = raceTogGroup.transform
	for i=1,raceTogGroupTrans.childCount-1 do
		local tog = raceTogGroupTrans:GetChild(i):GetComponent(CLS_TOGGLE_ARCHLY)
		tog.ClickAnim = true
		if i >= 2 then
			tog.SubImg = tog.transform:GetComponentAtPath("icon01Img",CLS_IMAGE)
		end
		table.insert(raceTogArr, tog)
	end 
	raceFlag = raceTogGroupTrans:Find("RaceFlag")

	sortBtnObj = self:GetGameObjectAtPath("BottomLeft/SortBtn")
	sortName = sortBtnObj.transform:GetComponentAtPath("nameTxt",CLS_TEXT)

	addCountObj = self:GetGameObjectAtPath("BottomRight/AddCount")
	heroBagNumtxt = addCountObj.transform:GetComponentAtPath("HeroBagNumTxt",CLS_TEXT)

	heroGrid= self:GetComponentAtPath("Center/HeroSV/ScrollRect/Viewport/HeroGrid",CLS_UI_ITEM_GRID)
	noneObj = self:GetGameObjectAtPath("None")
end

function OnAnimationFinished()
	if not isInit then
		InitUI()
		isInit = true
	end
	hasItemSlot = false
	cnt = 0
	ScreenUtils.InitScreenUI(raceTogGroup,raceTogArr,raceFlag)
	self:SendCommand("InitHeroBagData")
end

function Active()
	ScreenUtils.InitScreenUI(raceTogGroup,raceTogArr,raceFlag)
	self:SendCommand("UpdateHeroBagView")
end

function OnClose() 
	ScreenUtils.Clear()
end

function DoExit()
	isInit = nil
	utils = nil
	ScreenUtils = nil
	heroGrid = nil
	raceTogGroup = nil
	raceTogArr = nil
	raceFlag = nil
	sortBtnObj = nil 
	sortName = nil
	addCountObj = nil
	heroBagNumtxt = nil
	waitExtendHeroBagNumAnim = nil
	heroTogGroup = nil
	hasItemSlot = nil
	cnt = nil
	noneObj = nil
end

local function RefreshHeroBagCountAndSortView(show)
	sortBtnObj:SetSelfActive(show)
	addCountObj:SetSelfActive(show)
end

function OnNotification_RefreshHeroBagPageTypeView(objs)
	local type, name = objs[0], objs[1]
	heroTogGroup:SetToggleOn(type - 1)
	sortName.text = name
end

function OnNotification_RefreshHeroBagView(objs)
	local curHeroArr, showCountAndSort = objs[0], objs[1]
	RefreshHeroBagCountAndSortView(showCountAndSort)
	heroGrid:RefreshItemSlots(curHeroArr, self.gameObject, "HeroItemSlot")
	hasItemSlot = true
	noneObj:SetSelfActive(curHeroArr == nil or #curHeroArr <=0)
end 

function OnNotification_RefreshHeroBagScreenViewByRaceType(objs)
	local curHeroArr = objs[0]
	heroGrid:RefreshItemSlots(curHeroArr, self.gameObject, "HeroItemSlot")
	noneObj:SetSelfActive(curHeroArr == nil or #curHeroArr <=0)
end

function OnNotification_RefreshHeroBagScreenViewBySortType(objs)
	local curHeroArr, name = objs[0], objs[1]
	heroGrid:RefreshItemSlots(curHeroArr, self.gameObject, "HeroItemSlot")
	sortName.text = name
	noneObj:SetSelfActive(curHeroArr == nil or #curHeroArr <=0)
end

function OnNotification_RefreshHeroBagCount(objs)
	local add = objs[2]
	if add then
		waitExtendHeroBagNumAnim = true
		TextChangeColorAnim(heroBagNumtxt,function()
			heroBagNumtxt.text = tostring(objs[0]).."/"..tostring(objs[1])
			waitExtendHeroBagNumAnim = false
		end)
	else
		heroBagNumtxt.text = tostring(objs[0]).."/"..tostring(objs[1])
	end 
end

function OnNotification_RefreshHeroBagRedTip(objs)
	local redHeros = objs[0]
	for i,redHero in ipairs(redHeros) do
		heroGrid:SingleRefreshSlot(redHero)
	end
end

function OnHeroTogGroupClick(isOn, index)
	if not isOn then
		return
	end
	self:SendCommand("OpenHeroBagPage",index+1)
end

function OnSortBtnClick(sender)
	self:SendCommand("ChangeHeroBagBySortType")
end 

function OnHeroGridHeroItemSlotClick(obj)
	self:SendCommand("HeroShow",obj.m_index)
end

function OnAddBtnClick(sender)
	if not waitExtendHeroBagNumAnim then
		self:SendCommand("ExtendHeroBag")
	end
end

function OnRaceTogGroupClick(isOn, index)
	ScreenUtils.TogGroupClick(isOn, index)
end

function OnCloseBtnClick(sender)
	self:ReturnBack()
end

function OnMaskClick(sender)
	self:ReturnBack()
end

function CheckHasItemSlot()
    if (hasItemSlot) then
	    cnt=cnt+1
		if (cnt > 1) then
		    return true
		else
		    return false
		end
	else
	    cnt = 0
	    return false
	end
end