local loadedChallengeLevelItemSlot=require "ChallengeLevelItemSlot"

local challengeLevelGrid
local count_Lab
local time_Lab

local challengeGroup

local initIndex = 1

local TICKER_INITCHALLENGEDATA = "ticker_InitChallengeData_ChallengeView"
local TICKER_ONDOUNHIDE = "ticker_OnDoUnhide_ChallengeView"

function DoInit()
	self.Shadow = 1
end 

function IsSetAnchor()
	return true
end

function InitUI()
	challengeLevelGrid=self:GetComponentAtPath("Center/ScrollRect/Viewport/ChallengeLevelGrid",CLS_UI_ITEM_GRID)
	count_Lab=self:GetComponentAtPath("Center/CountTxt",CLS_TEXT)
    time_Lab=self:GetComponentAtPath("Center/TimeTxt",CLS_TEXT)
    
    challengeGroup=self:GetComponentAtPath("Center/ChallengeTogGroup",CLS_TOGGLE_GROUP_ARCHLY)
end

function OnLinked(data)
	local params=tonumber(data)
	initIndex=params
end

function OnAnimationFinished()
	if not isInit then
		InitUI()
		isInit = true
	end 
	self:SendCommand("InitChallengeData")
end 

function OnNotification_InitChallengeData(objs)
    challengeGroup:SetAllTogglesOff()
	challengeGroup:SetToggleOn(initIndex)
	Timer:AddTicker(TICKER_INITCHALLENGEDATA,GetReloadTimestamp(GetCommonReloadTime()* 3600000),function (targetTime)
		if self == nil or self.Module == nil then
			return
		end
		if time_Lab==nil then
			return
		end
		local timeStr = CheckTimeRemain(targetTime,false)
		time_Lab.text=timeStr
	end,function ()
		self:SendCommand("ReloadChallengeView")
	end,nil)
end

function OnChallengeTogGroupClick(isOn,index)
    if not isOn then
        return 
	end
    self:SendCommand("ChallengeTypeChanged",index)
end

function OnNotification_ChallengeTypeChanged(objs)
    local challengeLevels = objs[0]
    challengeLevelGrid:RefreshItemSlots(challengeLevels,self.gameObject,"ChallengeLevelItemSlot")
end

function OnNotification_KeyRemainsChange(objs)
	local remains=objs[0]
	local normalMaxCount = objs[1]
    count_Lab.text=remains.."/"..normalMaxCount
end

function OnDoUnhide()
    self:SendCommand("ReloadChallengeView")
	Timer:AddTicker(TICKER_ONDOUNHIDE,GetReloadTimestamp(GetCommonReloadTime()* 3600000),function (targetTime)
		if self == nil or self.Module == nil then
			return
		end
		if time_Lab==nil then
			return
		end
		local timeStr = CheckTimeRemain(targetTime,false)
		time_Lab.text=timeStr
	end,function ()
		self:SendCommand("ReloadChallengeView")
	end,nil)
end

function OnChallengeLevelGridChallengeBtnClick(obj)
    local data=obj.m_data
    self:SendCommand("OpenFormationView",data)
end

function OnRewardGridItemBtnClick(obj)
	CsBridge.CacheAssetsByModule(self.Module,function()
		itemData=obj.m_data
		local view = CsBridge.OpenView("ItemTipView","ItemTipModel",false,true)
		local reward = {
			id = itemData.id,
			typeId = itemData.typeId,
			count = itemData.count
		}
		view:SetParamDataList(reward,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end, "ItemTipView")
end

function OnRewardGridItemSlotClick(obj)
	local item = obj.m_data
	if item.typeId == 3 then
		return
	end
	CsBridge.CacheAssetsByModule(self.Module,
	function()
		local item = obj.m_data
		local view = CsBridge.OpenView("ItemTipView", "ItemTipModel",false,true)
		local rewardTmp={}
		rewardTmp.id=item.id
		rewardTmp.typeId=item.typeId
		rewardTmp.count=1
		if item.typeId == 0 then
			rewardTmp.attrs = item.attrs
		end 
		if item.typeId == 4 then
			rewardTmp.level = item.level
		end 
		view:SetParamDataList(rewardTmp,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end,"ItemTipView")
end

function OnRuleBtnClick(sendr)
    self:SendCommand("ShowHelpView")
end

function OnAddBtnClick(sender)
	self:SendCommand("OpenExchangeItemView")
end

function OnCloseBtnClick(sender)
	Timer:StopTicker(TICKER_INITCHALLENGEDATA)
	Timer:StopTicker(TICKER_ONDOUNHIDE)
    self:ReturnBack() 
end

function OnClose()
	Timer:StopTicker(TICKER_INITCHALLENGEDATA)
	Timer:StopTicker(TICKER_ONDOUNHIDE)
end

function DoExit()
	self.Module=nil
	Timer:StopTicker(TICKER_INITCHALLENGEDATA)
	Timer:StopTicker(TICKER_ONDOUNHIDE)
	loadedChallengeLevelItemSlot=nil
	challengeLevelGrid = nil
	count_Lab = nil
	time_Lab = nil
	challengeGroup = nil
	initIndex = nil
	TICKER_INITCHALLENGEDATA = nil
	TICKER_ONDOUNHIDE = nil
end

