local loadedShopItemSlot = require "ShopItemSlot"
require "ShopTypeItemSlot"

local TAB_COUNT = 5
local currentTabIndex = 0
local shopToggles
local itemsGrid, itemsGridSmaller
local itemsScroll, itemsScrollSmaller
local rightPanel, refreshPanel
local priceImgObject, balanceTxt
local refreshTimeTxt, refreshPriceImg, refreshPriceTxt
local refreshRootObj
local resTipsRootObj, resDescTxt
local emptyTipsObj

local shopTypeGrid

local currentItemData
local currentShopConfig
local hasItemSlot = false
local cnt = 0
local autoConfirm = false
local shopped = false
local sendBuyCount = 1

local consumeArr

local TICKER_NAME = "ticker_ShopView"

function DoInit()
    self.Shadow = 1
    InitUI()
    MsgCenter:Subscribe(CsBridge.SysMsgDef.Notify_SingleDataChanged, OnSingleDataChanged)
end

function IsSetAnchor()
    return true
end

function InitUI()

    shopTypeGrid = self:GetComponentAtPath("ShopTypeSV/ScrollRect/Viewport/ShopTypeGrid", CLS_UI_ITEM_GRID)

    path = "TipsMask"
    tipsMaskObj = self:GetGameObjectAtPath(path)

    path = "itemSV/ScrollRect/Viewport/ShopGrid"
    itemsGrid = self:GetComponentAtPath(path, CLS_UI_ITEM_GRID)
    path = "itemSV/ScrollRect"
    itemsScroll = self:GetGameObjectAtPath(path)

    path = "RightPanel"
    rightPanel = self:GetGameObjectAtPath(path)
    local rightPanelTrans = rightPanel.transform

    consumeArr = {
        {
            obj = rightPanelTrans:GetGameObjectAtPath("top/ResBanner"),
            img = rightPanelTrans:GetGameObjectAtPath("top/ResBanner/iconImg"),
            txt = rightPanelTrans:GetComponentAtPath("top/ResBanner/numTxt", CLS_TEXT)
        },
        {
            obj = rightPanelTrans:GetGameObjectAtPath("top/ResBanner2"),
            img = rightPanelTrans:GetGameObjectAtPath("top/ResBanner2/iconImg"),
            txt = rightPanelTrans:GetComponentAtPath("top/ResBanner2/numTxt", CLS_TEXT)
        }
    }

    path = "top/Tips"
    resTipsRootObj = rightPanelTrans:GetGameObjectAtPath(path)
    path = "top/Tips/descTxt"
    resDescTxt = rightPanelTrans:GetComponentAtPath(path, CLS_TEXT)

    path = "itemSV/ScrollRect/Viewport/ShopGridShorter"
    itemsGridSmaller = rightPanelTrans:GetComponentAtPath(path, CLS_UI_ITEM_GRID)
    path = "itemSV/ScrollRect"
    itemsScrollSmaller = rightPanelTrans:GetGameObjectAtPath(path)

    path = "BottomPanel"
    local refreshPanelTrans = self.transform:Find(path)
    refreshPanel = refreshPanelTrans.gameObject

    path = "Countdown"
    refreshRootObj = refreshPanelTrans:GetGameObjectAtPath(path)

    path = "Countdown/timeTxt"
    refreshTimeTxt = refreshPanelTrans:GetComponentAtPath(path, CLS_TEXT)

    path = "RefreshBtn/priceImg"
    refreshPriceImg = refreshPanelTrans:GetComponentAtPath(path, CLS_IMAGE)

    path = "RefreshBtn/priceTxt"
    refreshPriceTxt = refreshPanelTrans:GetComponentAtPath(path, CLS_TEXT);

    path = "Nothing"
    emptyTipsObj = self:GetGameObjectAtPath(path)
end

function OnOpen()
end

function SetParamDataList(objs)
    currentTabIndex = objs[0]
end

function OnAnimationFinished()
    hasItemSlot = false
    cnt = 0
    TryInitToggles()
end

function TryInitToggles()
    self:SendCommand("GetShopBaseViewData", currentTabIndex)
end

function OnNotification_GetShopBaseViewData(objs)
    local shopArr = objs[0]
    shopTypeGrid:RefreshItemSlots(shopArr, self.gameObject, "ShopTypeItemSlot")
end

function OnNotification_CheckShopEnabled(objs)
    local shopEnabled = objs[0]
    if shopEnabled then
        RefreshView()
        local endTime = CsBridge.timeManager.ServerTime * 2
        Timer:AddTicker(TICKER_NAME,endTime,RefreshCountdown,OnTimerFinished)
    else
        Timer:StopTicker(TICKER_NAME)
        ClearView()
    end

end

function OnTimerFinished()

end

function OnSingleDataChanged(obj)
    if obj == "ShopItem" then
        RefreshView()
    end
end

function OnNotification_RefreshShopView(objs)
    local viewData = objs[1]
    DoRefreshView(viewData)
    shopped = true
end

function DoRefreshView(viewData)
    local shopConfig = viewData.shopConfig
    currentShopConfig = shopConfig

    local showResPanel = #shopConfig.consumes > 0
    itemsScroll:SetActive(not showResPanel)
    rightPanel:SetActive(showResPanel)
    if showResPanel then
        ShowShopResPanel(shopConfig.consumes)
    end

    local showRefreshPanel = shopConfig.refreshType > 0
    refreshPanel:SetActive(showRefreshPanel)
    if showRefreshPanel then
        local priceText = "0"
        if not shopConfig.freeRefresh then
            priceText = tostring(shopConfig.refreshPrice)
        end
        refreshPriceTxt.text = priceText
        SetIconByResourceId(refreshPriceImg.gameObject, shopConfig.refreshPriceType)
    end

    local showCountdownPanel = shopConfig.refreshInterval > 0
    refreshRootObj:SetActive(showCountdownPanel)
    if showCountdownPanel then
        refreshTimeTxt.text = shopConfig.restTime
        local endTime = CsBridge.timeManager.ServerTime * 2
        Timer:AddTicker(TICKER_NAME,endTime,RefreshCountdown,OnTimerFinished)
    end

    local itemsData = viewData.itemList or {}
    if itemsData then
        local grid = itemsGrid
        if showResPanel then
            grid = itemsGridSmaller
        end
        grid:RefreshItemSlots(itemsData, self.gameObject, "ShopItemSlot")
    end

    emptyTipsObj:SetActive(false)
    hasItemSlot = true
end

function ShowShopResPanel(consumes)
    for i, v in ipairs(consumeArr) do
        v.obj:SetSelfActive(false)
    end
    for i, consume in ipairs(consumes) do
        ShowOneConsume(consumeArr[i].img, consumeArr[i].txt, consume)
        consumeArr[i].obj:SetSelfActive(true)
    end
end

function OnShopGridItemClick(obj)
    local itemData = obj.m_data
    self:SendCommand("OpenTipView", itemData)
end

function OnShopGridShorterItemClick(obj)
    OnShopGridItemClick(obj)
end

function OnShopGridBuyBtnClick(obj)
    currentItemData = obj.m_data
    self:SendCommand("BuyItem", currentItemData, autoConfirm)
end

function OnShopGridShorterBuyBtnClick(obj)
    OnShopGridBuyBtnClick(obj)
end

function DoBuyItem()
    self:HideView("DealView")
    self:SendCommand("BuyItem", currentItemData, sendBuyCount)
end

function OnNotification_RefreshSingleShopType(objs)
    local shop = objs[0]
    shopTypeGrid:SingleRefreshSlot(shop)
end

function OnShopTypeGridShopTypeItemSlotClick(obj)
    local data = obj.m_data
    self:SendCommand("SelectShopType", data)
end

function OnRefreshBtnClick(obj)
    self:SendCommand("RefreshShopItemList")
end

function RefreshView()
    self:SendCommand("RefreshShop")
end

function RefreshCountdown()
    if self == nil or self.Module == nil then
        return
    end
    self:SendCommand("RefreshShopTime")
end

function OnNotification_RefreshShopTime(objs)
    local viewData = objs[1]
    DoRefreshTime(viewData)
end

function DoRefreshTime(viewData)
    local shopConfig = viewData.shopConfig

    local showRefreshPanel = shopConfig.refreshType > 0
    refreshPanel:SetActive(showRefreshPanel)
    if showRefreshPanel then
        local priceText = "0"
        if not shopConfig.freeRefresh then
            priceText = tostring(shopConfig.refreshPrice)
        end
        refreshPriceTxt.text = priceText
        SetIconByResourceId(refreshPriceImg.gameObject, shopConfig.refreshPriceType)
    end

    local showCountdownPanel = shopConfig.refreshInterval > 0
    refreshRootObj:SetActive(showCountdownPanel)
    if showCountdownPanel then
        refreshTimeTxt.text = shopConfig.restTime
    end

end

function OnResBannerClick(sender)
    ShowTip(self, currentShopConfig.consumes[1].typeId, currentShopConfig.consumes[1].id)
end

function OnResBanner2Click(sender)
    ShowTip(self, currentShopConfig.consumes[2].typeId, currentShopConfig.consumes[2].id)
end

function OnTipsMaskClick(sender)
    resTipsRootObj:PlayViewAnimation(
            function()
                resTipsRootObj:SetActive(false)
            end,
            CS.Client.Library.ViewAnimantion.Fade);
    tipsMaskObj:SetActive(false)
end

function OnCloseBtnClick(sender)
    Close()
end

function ClearView()
    itemsScroll:SetActive(false)
    rightPanel:SetActive(false)
    refreshPanel:SetActive(false)
    itemsGrid:ClearItems()
    itemsGridSmaller:ClearItems()
    emptyTipsObj:SetActive(true)
end

function Close()
    Timer:StopTicker(TICKER_NAME)
    self:ReturnBack()
end

function CheckHasItemSlot()
    if (hasItemSlot) then
        cnt = cnt + 1
        if (cnt > 1) then
            return true
        else
            return false
        end
    else
        cnt = 0
        return false
    end
end

function AutoConfirm()
    autoConfirm = true
    shopped = false
end

function FinishShop()
    return shopped
end

function OnClose()
    Timer:StopTicker(TICKER_NAME)
end

function DoExit()
    MsgCenter:Unsubscribe(CsBridge.SysMsgDef.Notify_SingleDataChanged, OnSingleDataChanged)
    Timer:StopTicker(TICKER_NAME)
    self.Module = nil
    TAB_COUNT = nil
    currentTabIndex = nil
    shopToggles = nil
    itemsGrid = nil
    itemsGridSmaller = nil
    itemsScroll = nil
    itemsScrollSmaller = nil
    rightPanel = nil
    refreshPanel = nil
    priceImgObject = nil
    balanceTxt = nil
    refreshTimeTxt = nil
    refreshPriceImg = nil
    refreshPriceTxt = nil
    refreshRootObj = nil
    resTipsRootObj = nil
    resDescTxt = nil
    emptyTipsObj = nil

    shopTypeGrid = nil

    currentItemData = nil
    currentShopConfig = nil
    hasItemSlot = nil
    cnt = nil
    autoConfirm = nil
    shopped = nil
    sendBuyCount = nil

    consumeArr = nil
    TICKER_NAME = nil
end