--[[
	file: DailyDiscountActivityView.lua
	author: hangang
	description:View for daily discount activity
]]

local titleImgObj, titleTxt, countdownTxt, descTxt
local itemsGrid
local titleArtTxt

local viewData

function DoInit()
	self.Shadow = CS.Client.Library.ShadowType.None
	InitUI()
end 

function InitUI()
	local selfTrans = self.transform
	local path = "Title/titleImg"
	titleImgObj = self:GetGameObjectAtPath(path)

	path = "Title/countdownTxt"
	countdownTxt = self:GetComponentAtPath(path ,CLS_TEXT)

	path = "Title/titleTxt"
	titleTxt = self:GetComponentAtPath(path ,CLS_TEXT)

	path = "Description/descTxt"
	descTxt = self:GetComponentAtPath(path ,CLS_TEXT)

	path = "ItemSV/ScrollRect/Viewport/Grid"
	itemsGrid = self:GetComponentAtPath(path ,CLS_UI_ITEM_GRID)

	titleArtTxt = self:GetComponentAtPath("Title/TitleArtImg",CLS_LOCALIZE)
end

function OnNotification_RefreshActivityView(objs)
	if self.gameObject.activeInHierarchy then
		viewData = objs[0]
		RefreshView(viewData)
	end
end

function RefreshView(data)
	titleTxt.text = ""
	if data.title and data.title~="" then
		titleTxt.text = data.title
	else
		SetServerActivityArtFontByImage(titleArtTxt,data.image)
	end
	countdownTxt.text = data.restTime
	descTxt.text = data.desc
	CsBridge.IconData.SetRawImageByName(titleImgObj, data.image)
	itemsGrid:RefreshItemSlots(data.itemList, self.gameObject, "DailyDiscountItemSlot")
end

function OnNotification_RefreshCountdown(objs)
	local data = objs[0]
	RefreshCountdown(data)
end

function RefreshCountdown(countdownData)
	if not viewData then--not ready
		return
	end

	local currentActivityID = viewData.id
	for activityID, restTime in pairs(countdownData) do
		if activityID == currentActivityID then
			countdownTxt.text = restTime
			return
		end
	end
end

function OnDailyDiscountItemSlotBindValue(slot, data)
	local slotTrans = slot.transform

	path = "countTxt"
	local restTxt = slotTrans:GetComponentAtPath(path, CLS_TEXT)
	restTxt.text = data.rest

	path = "priceTxt"
	local priceTxt = slotTrans:GetComponentAtPath(path, CLS_TEXT)
	priceTxt.text = data.showPrice

	path = "vipExpTxt"
	local vipExpTxt = slotTrans:GetComponentAtPath(path, CLS_TEXT)
	vipExpTxt.text = data.vipExp

	path = "BuyBtn"
	local enabledBtn = slotTrans:GetComponentAtPath(path, CLS_BUTTON_ARCHLY)
	enabledBtn.interactable = data.showBuyBtn

	path = "ItemGrid"
	local rewardGrid = slotTrans:GetComponentAtPath(path,CLS_UI_ITEM_GRID)
	rewardGrid:RefreshItemSlots(data.rewards, self.gameObject, "ItemSlot")
end

function OnItemGridItemSlotClick(obj)
	local itemData = obj.m_data
    self:SendCommand("OpenTipView", itemData)
end

function OnGridBuyBtnClick(obj)
	local slotData = obj.m_data
	if slotData.showBuyBtn then
		self:SendCommand("BuyDailyDiscountItem", slotData.data)
	else		
		local hint=CS.Client.Library.HintUILayer.instance
		hint:ShowHintBox(Language:getStr("HasMaxCount"))
	end
end

function OnNotification_CloseActivityView(obj)
	self:HideView(self.gameObject.name)
end

function DoExit()
	titleImgObj = nil
	titleTxt = nil
	countdownTxt = nil
	descTxt = nil
	itemsGrid = nil
	titleArtTxt = nil
	viewData = nil
end