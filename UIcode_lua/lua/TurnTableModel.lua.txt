--
-- 版权所有：archly
-- Author: dyl
-- Date: 2018-06-29 11:19:07

local RefreshType = {
    Auto = 1,
    Manual = 2
}

local lotteryArr 
local luckyCoin
local nextRefreshTime
local hasFreeRefresh = false
local LUCKY_COIN_ID = 1017

local recordArr

local lotteryDataFromTbl
local tenthOpenVip
local Lottery

function DoInit()
    tenthOpenVip = GetTenthOpenVipFromTbl()
end

function InitProperties()
end

function OnCommand_InitTurnTableData(objs)
    InitTurnTable(RefreshType.Auto)
end

function InitTurnTable(type)
    local req = {
        id = type
    }
    HttpRequest("refreshLottery","RefreshLotteryReq","RefreshLotteryResp",req,function(resp)
        if resp.result == 0 then
            UpdateLotteryInfo(true)
            UpdateLuckyCoin()
            self:SendNotification("RefreshTurnTableView",lotteryArr,luckyCoin,nextRefreshTime,hasFreeRefresh)
        end
    end)
end

function UpdateLotteryInfo(anim)
    lotteryArr = {}
    local lotteryInfo = appData:checkData("LotteryInfo")
    local drawItems = lotteryInfo.drawItems
    for i,item in ipairs(drawItems) do
        local lottery = {}
        lottery.id = item.id
        local reward = item.rewardItem
        lottery.reward = {
            typeId = reward.typeId,
            id = reward.id,
            count = reward.count
        }
        lottery.disable = item.disable
        lottery.anim = anim
        table.insert(lotteryArr,lottery)
    end
    local DAY_SENCOND_CONST = 24 * 3600000;
    nextRefreshTime = lotteryInfo.lastRefreshTime + DAY_SENCOND_CONST
    hasFreeRefresh = lotteryInfo.hasFreeRefresh
end

function UpdateSingleLotteryInfo(reward)
    local updateLottery = GetLotteryByReward(reward)
    if updateLottery ~= nil then
        local drawItems = appData:checkData("LotteryInfo").drawItems
        for i,item in ipairs(drawItems) do
            if item.id == updateLottery.id then
                updateLottery.disable = item.disable 
                break
            end
        end
    end
    return updateLottery
end

function UpdateLuckyCoin()
    local pb = appData:checkItem("PackItem",LUCKY_COIN_ID)
    luckyCoin = pb ~= nil and pb.count or 0
end

function OnCommand_Lottery(objs)
    local count = objs[0]
    local price = objs[1]
    if not CheckVipEnough(count) or not CheckPackItemEnough(LUCKY_COIN_ID,price,true) then
        return
    end
    local req = {
        count = count
    }
    HttpRequest("drawLottery","DrawLotteryReq","DrawLotteryResp",req,function(resp)
        if resp ~= nil then
            local updateRewards = {}
            if resp.rewardItems ~= nil then
                for i,reward in ipairs(resp.rewardItems) do
                    local updateReward = UpdateSingleLotteryInfo(reward)
                    if updateReward ~= nil then
                        table.insert(updateRewards, updateReward)
                    end
                end
            end
            UpdateLuckyCoin()
            self:SendNotification("ShowTableLotteryAnim",updateRewards[1],function()
                ShowRewardReceivedTip(self,resp.rewardItems,function()
                    self:SendNotification("UpdateSingleItemSlot",updateRewards)
                    self:SendNotification("UpdateLuckyCoin",luckyCoin)
                    CheckAndShowConditionPackageView(self,GetConditionReqData(ConditionPackageType.Lottery))
                end,false)
            end,count)
        end
    end)
end

function OnCommand_ManualRefreshTurnTable(objs)
    InitTurnTable(RefreshType.Manual)
    MsgCenter:Broadcast(Notify_SetUpdateEffect)
end

function OnCommand_AutoRefreshTurnTable(objs)
    InitTurnTable(RefreshType.Auto)
end

function OnCommand_BuyLuckyCoin(objs)
    ShowBuyView(self,ItemTypeEnum.Item,LUCKY_COIN_ID,nil,ResourceEnum.Gem,GetConstValue("luckyStarPrice"),function()
        UpdateLuckyCoin()
        self:SendNotification("UpdateLuckyCoin",luckyCoin)
    end)
end

function OnCommand_InitTurnTableRecordData(objs)
    UpdateTurnTableRecord()
end

function OnCommand_RevertRefreshTimer(objs)
    self:SendNotification("RefreshTimer",nextRefreshTime,hasFreeRefresh)
end

function UpdateTurnTableRecord()
    local req = {
        id = 0
    }
    HttpRequest("getLotteryHitRecord","GetLotteryHitRecordReq","GetLotteryHitRecordResp",req,function(resp)
        recordArr = {}
        if resp ~= nil and resp.records ~= nil then            
            for i,v in ipairs(resp.records) do
                local record = {}
                record.reward = {
                    typeId = v.type,
                    id = v.id,
                    count = 1,
                }
                record.count = v.count
                record.nick = v.nick
                record.ext = v.ext
                record.zone = v.zone
                table.insert(recordArr, record)
            end         
        end
        self:SendNotification("RefreshTurnTableRecordView",recordArr)
    end)
end

function GetLotteryDataFromTbl()
    if Lottery == nil then
        Lottery = {}
        Lottery.tblName = "Lottery"
        Lottery.id = "id"
        Lottery.rewardStr = "rewardStr"
    end
    local tbl = {}
    local ids = GetIds(Lottery.tblName)
    local tbl=ResTblContainer:GetTable(Lottery.tblName)
    for i=0,ids.Length-1 do
        local id = tonumber(ids[i])
        tbl[id] = {}
        local rewardStr = tbl:Get(id,Lottery.rewardStr)
        local result = SplitString(rewardStr,",")
        local reward = {
            typeId = tonumber(result[0]),
            id = tonumber(result[1]),
            count = tonumber(result[2])
        }
        tbl[id].reward = reward
    end
    return tbl
end

function GetTenthOpenVipFromTbl()
    local openVip = 0
    local tbl=ResTblContainer:GetTable(VipTbl.tblName)
    local vips = tbl:GetCol(VipTbl.vip)
    for i=0,vips.Length-1 do
        local v = tonumber(vips[i])
        local isOpen = tbl:GetInt(v,VipTbl.wishing)
        if isOpen == 1 then
            openVip = v
            break
        end
    end
    return openVip
end

function GetLotteryByReward(reward)
    for i,lottery in ipairs(lotteryArr) do
        if lottery.reward.typeId == reward.typeId and lottery.reward.id == reward.id and lottery.reward.count == reward.count then
            return lottery
        end
    end
    return nil
end

function CheckVipEnough(count)
    if count == 1 then
        return true
    end
    local ret = false
    local vip = appData:checkData("PlayerInfo").vip
    ret = vip >= tenthOpenVip
    if not ret then
        CsBridge.hintUILayer:ShowHintBox(string.format(Language:getStr("Not_TurnTable_Tenth"), tenthOpenVip), 2)
    end
    return ret
end

function DoOnExit()
    RefreshType = nil

    lotteryArr  = nil
    luckyCoin = nil
    nextRefreshTime = nil
    hasFreeRefresh = nil
    LUCKY_COIN_ID = nil

    recordArr = nil

    lotteryDataFromTbl = nil
    tenthOpenVip = nil
    Lottery = nil
end