require "MiningMapItemSlot"

---@type UnityEngine.UI.InputField 输入框
local pageInput
---@type Client.Library.ButtonArchly 首页按钮
local firstPageBtn

---@type Client.Library.ButtonArchly
local leftPageBtn
---@type Client.Library.ButtonArchly
local rightPageBtn
---@type UnityEngine.Transform
local leftPageBtnTrans
---@type UnityEngine.Transform
local rightPageBtnTrans

---@type UnityEngine.Transform
local pageParentTrans
---@type UnityEngine.Transform
local leftPageTrans
---@type UnityEngine.Transform
local centerPageTrans
---@type UnityEngine.Transform
local rightPageTrans

---@type UnityEngine.GameObject
local technologyRedObj
---@type UnityEngine.GameObject
local myCaveRedObj
---@type UnityEngine.TextMesh
local myFreeCaveNumberTxt

---@type table
local leftPageContentArr = {}
---@type table
local rightPageContentArr = {}
---@type table
local centerPageContentArr = {}

---@type number 分页的宽度
local itemWidth
---@type number 移动的时间
local MOVE_DUR_TIME = 0.3
---@type number 第一页的页码
local FIRST_PAGE_INDEX = 1

---@type number 当前地图页码
local curMapPageIndex = FIRST_PAGE_INDEX
---@type number 最大地图页码
local maxMapPageIndex = FIRST_PAGE_INDEX
---@type number 页码改变的目标页码
local nextPageIndex = FIRST_PAGE_INDEX

local ZERO_POS = 0

---移动多少算翻页
local changePosX = CsBridge.UnityHelper.GetMainCameraSize() / 3

---@type table 地图本地表
local mapArr = nil

---@type Client.Library.ViewBase
local selfViewBase
---@type UnityEngine.Transform
local selfTrans

---获取组件
local function GetPageComponent(resultTable, trans)
    for i = 1, 8 do
        local itemGrid = trans:GetChild(i - 1):GetComponent(CLS_UI_ITEM_GRID)
        table.insert(resultTable, itemGrid)
    end
end

---获取到分页的组件
local function FindPageTrans()
    leftPageTrans = selfTrans:Find("MiningMapParent/LeftPage")
    centerPageTrans = selfTrans:Find("MiningMapParent/CenterPage")
    rightPageTrans = selfTrans:Find("MiningMapParent/RightPage")
end

---初始化
function DoInit()
    selfViewBase = self
    selfTrans = self.transform
    pageInput = selfViewBase:GetComponentAtPath("Bottom/PageIndex", "UnityEngine.UI.InputField")
    firstPageBtn = selfViewBase:GetComponentAtPath("Bottom/FirstPageBtn", CLS_BUTTON_ARCHLY)
    leftPageBtn = selfViewBase:GetComponentAtPath("LeftPageBtn", CLS_BUTTON_ARCHLY)
    rightPageBtn = selfViewBase:GetComponentAtPath("RightPageBtn", CLS_BUTTON_ARCHLY)
    leftPageBtnTrans = leftPageBtn.transform
    rightPageBtnTrans = rightPageBtn.transform
    pageParentTrans = selfTrans:Find("MiningMapParent")
    FindPageTrans()
    GetPageComponent(leftPageContentArr, leftPageTrans)
    GetPageComponent(centerPageContentArr, centerPageTrans)
    GetPageComponent(rightPageContentArr, rightPageTrans)
    itemWidth = pageParentTrans.rect.width
    technologyRedObj = selfViewBase:GetGameObjectAtPath("Bottom/TechnologyBtn/NewFlag")
    myCaveRedObj = selfViewBase:GetGameObjectAtPath("Bottom/MyMiningCaveBtn/NewFlag")
    myFreeCaveNumberTxt = selfViewBase:GetComponentAtPath("MyFreeCaveNumber", CLS_TEXT)
end

---清理地图上面的items
local function ClearPageGridItem(contentTable)
    if contentTable then
        for i = 1, #contentTable do
            contentTable[i]:ClearItems()
        end
    end
end

---生产一个spine
local function InstantiateSpineItem(spineParentTrans)
    CsBridge.CacheAssetsByGroup(self.Module.ModuleName, function()
        local spineGo = CsBridge.objectCache:CreateObject("MiningMapItemSpine", true, spineParentTrans)
    end, "MiningMapItemSpine")
end

---spine动画
local function SpineItemLife(itemGrid, itemData)
    ---@type Client.Library.ItemSlot
    local item = itemGrid:GetAllItems()
    if item ~= nil and item.Length > 0 then
        local itemTrans = item[0].transform
        ---@type UnityEngine.Transform
        local spineParentTrans = itemTrans:Find("spParent")
        local spineTrans = spineParentTrans:Find("MiningMapItemSpine")
        if itemData.showProtect == true then
            if spineTrans == nil then
                InstantiateSpineItem(spineParentTrans)
            end
        else
            if spineTrans then
                CS.UnityEngine.GameObject.Destroy(spineTrans.gameObject)
            end
        end
    end
end

---设置地图上面的item
local function SetPageGridItem(contentTable, itemList)
    if itemList ~= nil and #itemList > 0 then
        for i = 1, #itemList do
            local contentItem = contentTable[i]
            local item = itemList[i]
            if item ~= nil then
                local itemTbl = { item }
                contentItem:RefreshItemSlots(itemTbl, selfViewBase.gameObject, "MiningMapItemSlot")
                SpineItemLife(contentItem, item)
            end
        end
        for i = #itemList + 1, #contentTable do
            contentTable[i]:ClearItems()
        end
    end
end

---刷新地图页的数据
local function ReFreshPageViewData()
    local leftPageIndex = curMapPageIndex - 1
    local rightPageIndex = curMapPageIndex + 1
    if mapArr[curMapPageIndex] ~= nil then
        if leftPageIndex > 0 then
            SetPageGridItem(leftPageContentArr, mapArr[leftPageIndex])
        end
        if rightPageIndex <= maxMapPageIndex then
            SetPageGridItem(rightPageContentArr, mapArr[rightPageIndex])
        end
        SetPageGridItem(centerPageContentArr, mapArr[curMapPageIndex])
    else
        ClearPageGridItem(centerPageContentArr)
    end
end

---开始箭头的动画
local function StartArrAnimation()
    local OFFSET = 10
    local DUR = 0.5
    local t1 = CsBridge.TweenUtils.MoveLeftRight(rightPageBtnTrans, rightPageBtnTrans.localPosition.x - OFFSET, DUR)
    t1:DoPlay()
    local t2 = CsBridge.TweenUtils.MoveLeftRight(leftPageBtnTrans, leftPageBtnTrans.localPosition.x + OFFSET, DUR)
    t2:DoPlay()
end

---强制分页的父节点到位置0
local function ForcePageParentToZeroPos()
    pageParentTrans.localPosition = CsBridge.Vector3ForLua.CreateVector3ForLua(ZERO_POS, ZERO_POS, ZERO_POS):ToVector3()
end

---重置分页的位置
local function ReSetPagePos()
    leftPageTrans.localPosition = CsBridge.Vector3ForLua.CreateVector3ForLua(-itemWidth, ZERO_POS, ZERO_POS):ToVector3()
    centerPageTrans.localPosition = CsBridge.Vector3ForLua.CreateVector3ForLua(ZERO_POS, ZERO_POS, ZERO_POS):ToVector3()
    rightPageTrans.localPosition = CsBridge.Vector3ForLua.CreateVector3ForLua(itemWidth, ZERO_POS, ZERO_POS):ToVector3()
end

---翻页之后通知model层
local function SendCommandForPageMoved(isNextPage)
    local nextPage = true
    if isNextPage then
        nextPage = true
    else
        nextPage = false
    end
    self:SendCommand("SendCommandForPageMoved", nextPage)
end

---设置上一页下一页和首页的按钮状态
local function SetLeftAndRightBtnState(btnState)
    leftPageBtn.Gray = btnState.leftPageBtnGray
    firstPageBtn.Gray = btnState.firstPageBtnGray
    rightPageBtn.Gray = btnState.rightPageBtnGray
end

---自动移动分页的父节点到位置0
local function AutoMovePageParentToZeroPos(callback)
    CsBridge.TweenUtils.MoveTo(pageParentTrans, ZERO_POS, ZERO_POS, MOVE_DUR_TIME, function()
        if callback then
            callback()
        end
    end)
end

---自动移动要下一页
local function AutoMoveToNextPage(callback)
    CsBridge.TweenUtils.MoveTo(pageParentTrans, -itemWidth, ZERO_POS, MOVE_DUR_TIME, function()
        ReSetPagePos()
        ForcePageParentToZeroPos()
        SendCommandForPageMoved(true)
        if callback then
            callback()
        end
    end)
end

---自动移动要上一页
local function AutoMoveToPrePage(callback)
    CsBridge.TweenUtils.MoveTo(pageParentTrans, itemWidth, ZERO_POS, MOVE_DUR_TIME, function()
        ReSetPagePos()
        ForcePageParentToZeroPos()
        SendCommandForPageMoved(false)
        if callback then
            callback()
        end
    end)
end

---设置页码显示
local function SetInputValue(value)
    curMapPageIndex = tonumber(value)
    nextPageIndex = tonumber(value)
    pageInput.enabled = false
    pageInput.text = tostring(value) .. "/" .. tostring(maxMapPageIndex)
    pageInput.enabled = true
end

---刷新地图
local function RefreshMap()
    if mapArr ~= nil and #mapArr > 0 then
        maxMapPageIndex = #mapArr
        ReFreshPageViewData()
    else
        ClearPageGridItem(centerPageContentArr)
        ClearPageGridItem(leftPageContentArr)
        ClearPageGridItem(rightPageContentArr)
    end
end

---是否可以上一页
local function IsCanGoLeft()
    local result = true
    nextPageIndex = curMapPageIndex - 1
    if nextPageIndex <= 0 then
        result = false
        nextPageIndex = curMapPageIndex
    end
    return result
end

---是否可以下一页
local function IsCanGoRight()
    local result = true
    nextPageIndex = curMapPageIndex + 1
    if nextPageIndex > maxMapPageIndex then
        result = false
        nextPageIndex = curMapPageIndex
    end
    return result
end

---初始化地图
local function InitMap(newMapArr, newCurMapPageIndex, btnState)
    mapArr = newMapArr
    curMapPageIndex = newCurMapPageIndex
    nextPageIndex = newCurMapPageIndex
    maxMapPageIndex = #mapArr or 1
    SetInputValue(curMapPageIndex)
    RefreshMap()
    SetLeftAndRightBtnState(btnState)
end

---设置界面数据
function SetParamDataList(objs)
    local targetMapPageIndex = objs[0]
    self:SendCommand("SetTargetPageIndex", targetMapPageIndex)
end

---动画结束回调
function OnAnimationFinished()
    StartArrAnimation()
    self:SendCommand("OpenMiningCaveMap")
end

---隐藏之后打开回调
function Active()
    self:SendCommand("OpenMiningCaveMap")
end

---通知到达指定页面
function OnNotification_GoTargetMapPage(objs)
    InitMap(objs[0], objs[1], objs[2])
end

---刷新地图
function OnNotification_RefreshMap(objs)
    mapArr = objs[0]
    RefreshMap()
end

---初始化界面
function OnNotification_InitMainMapVIew(objs)
    local viewData = objs[0]
    InitMap(viewData.mapArr, viewData.curMapIndex, viewData.btnState)
    technologyRedObj:SetActive(viewData.haveCanOpenTechnology)
    myCaveRedObj:SetActive(viewData.haveOutPut)
    myFreeCaveNumberTxt.text = viewData.freeCaveStr
end

---刷新我的矿产红点
function OnNotification_RefreshMyCaveRed(objs)
    local show = objs[0]
    myCaveRedObj:SetActive(show)
end

---帮助按钮点击
function OnHelpBtnClick()
    self:SendCommand("ShowHelpView")
end

---关闭按钮点击
function OnCloseBtnClick()
    self:ReturnBack()
end

---首页按钮点击
function OnFirstPageBtnClick()
    self:SendCommand("GoTargetMapPage", FIRST_PAGE_INDEX)
end

---跳转到目标页码
function OnGoTargetPageBtnClick()
    self:SendCommand("GoTargetMapPage", pageInput.text)
end

---科技按钮点击
function OnTechnologyBtnClick()
    self:SendCommand("OpenTechnologyView")
end

---一键找矿点击
function OnQuickFindMiningMapBtnClick()
    self:SendCommand("OpenQuickFindMiningMapView")
end

---我的矿产按钮点击
function OnMyMiningCaveBtnClick()
    self:SendCommand("OpenMyMiningCaveView")
end

---矿上面的头像点击
function OnMapItemParentPlayerInfoClick(obj)
    local data = obj.m_data
    self:SendCommand("OpenPlayerInfoView", data)
end

---右侧按钮点击
function OnRightPageBtnClick()
    if not IsCanGoRight() then
        return
    end
    if curMapPageIndex < maxMapPageIndex then
        AutoMoveToNextPage()
    end
end

---左侧按钮点击
function OnLeftPageBtnClick()
    if not IsCanGoLeft() then
        return
    end
    if curMapPageIndex > FIRST_PAGE_INDEX then
        AutoMoveToPrePage()
    end
end

---矿点被点击
function OnMapItemParentMiningMapItemSlotClick(obj)
    local data = obj.m_data
    self:SendCommand("ShowMiningMapItemInfo", data)
end

---开始移动地图
function OnMiningMapParentBeginDrag()

end

---移动地图
function OnMiningMapParentDrag()
    if curMapPageIndex <= FIRST_PAGE_INDEX then
        if pageParentTrans.localPosition.x > ZERO_POS then
            ForcePageParentToZeroPos()
        end
    end
    if curMapPageIndex >= maxMapPageIndex then
        if pageParentTrans.localPosition.x < ZERO_POS then
            ForcePageParentToZeroPos()
        end
    end
end

---地图移动结束
function OnMiningMapParentEndDrag()
    if pageParentTrans.localPosition.x > ZERO_POS then
        if pageParentTrans.localPosition.x > changePosX then
            if not IsCanGoLeft() then
                AutoMovePageParentToZeroPos()
                return
            end
            if curMapPageIndex > FIRST_PAGE_INDEX then
                ---需要自动滑动到上一页
                AutoMoveToPrePage()
            else
                ---需要返回位置0
                AutoMovePageParentToZeroPos()
            end
        else
            ---需要返回位置0
            AutoMovePageParentToZeroPos()
        end
    else
        if pageParentTrans.localPosition.x < -changePosX then
            if not IsCanGoRight() then
                AutoMovePageParentToZeroPos()
                return
            end
            if curMapPageIndex < maxMapPageIndex then
                ---需要自动滑动到下一页
                AutoMoveToNextPage()
            else
                ---需要返回位置0
                AutoMovePageParentToZeroPos()
            end
        else
            ---需要返回位置0
            AutoMovePageParentToZeroPos()
        end
    end
end

---关闭界面回调
function OnClose()

end

---退出module回调
function DoExit()
    pageInput = nil
    firstPageBtn = nil
    leftPageBtn = nil
    rightPageBtn = nil
    leftPageBtnTrans = nil
    rightPageBtnTrans = nil
    pageParentTrans = nil
    leftPageTrans = nil
    centerPageTrans = nil
    rightPageTrans = nil
    leftPageContentArr = nil
    rightPageContentArr = nil
    centerPageContentArr = nil
    itemWidth = nil
    MOVE_DUR_TIME = nil
    curMapPageIndex = nil
    maxMapPageIndex = nil
    nextPageIndex = nil
    changePosX = nil
    mapArr = nil
    selfViewBase = nil
    selfTrans = nil
    technologyRedObj = nil
    myCaveRedObj = nil
    FIRST_PAGE_INDEX = nil
    ZERO_POS = nil
end