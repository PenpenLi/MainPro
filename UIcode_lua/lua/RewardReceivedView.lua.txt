require "HeroGetutils"

local loadedRewardUtils = require "RewardUtils"
local yield_return = (require 'cs_coroutine').yield_return

local cort
local rewardGrid, rewardScroll, itemsParent
local rewardGridLayout

local playerIconObj, gemIconObj, coinIconObj, heroIconObj, bagIconObj,againBtn_GO,againBtnText

local coinEffectTransTbl
local coinIconTrans
local coinBannerTrans
local coinBannerPos

local gemEffectTransTbl
local gemIconTrans
local gemBannerTrans
local gemBannerPos

local coinText, gemText
local playerIconImg

local iconsParentTrans
local gridCenterPos

local summonType 
local summonCount

local IsInit = false
local effectFinished = false

local rewardData
local confirmCbk
local mergeRewards = true
local againAction

--TODO:Remove this two field!
local animationFinished = true
local animatedItemCount = 0

local DURATION_EFFECT_FLY = 1.0;

function DoInit()
	self.Shadow = 1
	local viewTrans = self.transform
	rewardScroll = viewTrans:GetComponentAtPath("Dynamic/RewardSV/ScrollRect" ,CLS_SCROLL_ARCHLY)
	itemsParent = viewTrans:Find("Dynamic/RewardSV/ScrollRect/Viewport/parent")
	rewardGrid = viewTrans:GetComponentAtPath("Dynamic/RewardSV/ScrollRect/Viewport/RewardGrid" ,CLS_UI_ITEM_GRID)
	againBtn_GO = self:GetGameObjectAtPath("Dynamic/bottom/AgainBtn")
	againBtnText = self:GetComponentAtPath("Dynamic/bottom/AgainBtn/nameTxt",CLS_TEXT)
	rewardGridLayout = rewardGrid:GetComponent(CLS_GRID_LAYOUT_GROUP)
	gridCenterPos = rewardGrid.transform.parent.position	

	local coinsParent = viewTrans:Find("Dynamic/Coins")
	coinEffectTransTbl = {}
	for i = 0, coinsParent.childCount - 1 do
		coinEffectTransTbl[i + 1] = coinsParent:GetChild(i)
	end

	local gemsParent = viewTrans:Find("Dynamic/Gems")
	gemEffectTransTbl = {}
	for i = 0, gemsParent.childCount - 1 do
		gemEffectTransTbl[i + 1] = gemsParent:GetChild(i)
	end
	
	local iconsRoot = viewTrans:Find("Dynamic/Icons")
	playerIconObj = iconsRoot:Find("Player").gameObject
	gemIconObj = iconsRoot:Find("Gem").gameObject
	coinIconObj = iconsRoot:Find("Coin").gameObject
	heroIconObj = iconsRoot:Find("HeroTog").gameObject
	bagIconObj = iconsRoot:Find("BagTog").gameObject

	coinBannerTrans = coinIconObj.transform
	gemBannerTrans = gemIconObj.transform
	coinBannerPos = coinBannerTrans.position
	gemBannerPos = gemBannerTrans.position

	coinText = iconsRoot:GetComponentAtPath("Coin/NumTxt" ,CLS_TEXT)
	gemText = iconsRoot:GetComponentAtPath("Gem/NumTxt" ,CLS_TEXT)
	playerIconImg = iconsRoot:GetComponentAtPath("Player/PlayerIconMask/PlayerIcon" ,CLS_IMAGE)
	coinIconTrans = iconsRoot:Find("Coin/iconImg")
	gemIconTrans = iconsRoot:Find("Gem/iconImg")

	SetAllIconsActive(false)
end

function OnAnimationFinished()
	self.transform.parent:SetAsLastSibling()
	rewardScroll.enabled = true
	rewardGridLayout.enabled = true
	effectFinished = false
	RefreshView(rewardData)
end

function SetParamDataList(obj)
	confirmCbk = nil
	againAction = nil
	rewardData = obj[0]
	if obj.Length > 1 then
		confirmCbk = obj[1]
	end
	if obj.Length > 2 then
		mergeRewards = obj[2]
	end
	if obj.Length > 3 then
		againAction = obj[3]
	end
	if obj.Length > 4 then
		local str = obj[4] == 10 and "SummonAgainTenth" or "SummonAgainOnce"
		againBtnText.text = Language:getStr(str)
	end
	againBtn_GO:SetSelfActive(againAction~=nil)
end

function SetAllIconsActive(activated)
	playerIconObj:SetActive(activated)
	gemIconObj:SetActive(activated)
	coinIconObj:SetActive(activated)
	heroIconObj:SetActive(activated)
	bagIconObj:SetActive(activated)
end

function RefreshView(rewardItems)	
	local items = mergeRewards and MergeRewards(rewardItems) or rewardItems
	rewardGrid:RefreshItemSlots(items,self.gameObject,"ItemSlot")
	SetItemsToCenter(#items)

	animationFinished = false
	animatedItemCount = 0
	rewardGrid:ShowItemsOneByOne(OnOneFinishedCbk)
end

function OnOneFinishedCbk(itemSlot)
	local slotItems = rewardGrid:GetAllItems()
	animatedItemCount = animatedItemCount + 1
	animationFinished = animatedItemCount >= slotItems.Length

	local rareHeroQuality = 5
	local item = itemSlot.m_data
	if item.typeId == ItemTypeEnum.Hero then
		local quality = ResTblContainer:GetPropToInt(item.id,HeroBase.quality,HeroBase.actorTbl)
		if quality >= rareHeroQuality then
			ShowHeroGet(self, item, RareHeroTipsCloseCbk)
		else
			rewardGrid:ResumeShowItemSequence(OnOneFinishedCbk)
		end
	elseif item.typeId == ItemTypeEnum.Jewel then
		local rareJewelQuality = 5
		local quality = ResTblContainer:GetPropToInt(item.id,Jewel.quality,Jewel.tblName)
		if quality >= rareJewelQuality then
			ShowJewelGet(self, item, RareHeroTipsCloseCbk)
		else
			rewardGrid:ResumeShowItemSequence(OnOneFinishedCbk)
		end
	else
		rewardGrid:ResumeShowItemSequence(OnOneFinishedCbk)
	end
end

function RareHeroTipsCloseCbk()
	if self.gameObject.activeInHierarchy then
		rewardGrid:ResumeShowItemSequence(OnOneFinishedCbk)
	end
end

function OpenEffectView()
	CsBridge.CacheAssetsByModule(
		self.Module,
		function()
			local items = {}
			for k, item in pairs(rewardData) do
				table.insert(items, item)
			end
			local view = CsBridge.OpenView("RewardReceivedEffectView","RewardReceivedModel",false,true)
			view:SetParamDataList(
				items,
				function()					
					rewardGrid:ClearItems()
					self:HideView(self.gameObject.name, false)
				end,
				mergeRewards,
				function()
					if confirmCbk then
						confirmCbk()
					end
					effectFinished = true
				end)
		end, 
		"RewardReceivedEffectView",
		"ItemSlot")
end

function IsEffectFinished()
	return effectFinished
end

function OnRewardGridItemSlotClick(obj)
	local item = obj.m_data
	if item.typeId == 3 then
		ShowHeroTip(self, item.id, item.level, item.grade, item.distillationStar, item.distillationLevel, item.breakLevel)
		return
	end
	CsBridge.CacheAssetsByModule(self.Module,
	function()
		local item = obj.m_data
		local view = CsBridge.OpenView("ItemTipView", "ItemTipModel",false,true)
		local rewardTmp={}
		rewardTmp.id=item.id
		rewardTmp.typeId=item.typeId
		rewardTmp.count=1
		if item.typeId == 0 then
			rewardTmp.attrs = item.attrs
		end 
		if item.typeId == 4 then
			rewardTmp.level = item.level
		end 
		view:SetParamDataList(rewardTmp,itemBaseIndex+itemDespIndex+PropsIndex+itemSuitIndex)
		view:SendCommand("InitItemData")
	end,"ItemTipView")
end 

function OnConfirmBtnClick(sender)	
	Close()
end 

function OnAgainBtnClick(sender)
	if animationFinished then
		OpenEffectView()
		againAction()
	end	
end

function OnCloseBtnClick(sender)
	Close()
end

function Close()
	if animationFinished then
		OpenEffectView()
	end	
end

function SetItemsToCenter(itemCount)
	local gridItems = rewardGrid:GetAllItems()
	local shownItemCount = gridItems.Length	

	if itemCount <= shownItemCount and rewardGrid.gameObject.activeInHierarchy then
		rewardScroll.enabled = false
		rewardGrid:AlignItemsToCenter(gridCenterPos)
	else
		rewardScroll.enabled = true
	end
end

function OnMaskClick(sender)
	Close()
end 

function DoExit()

	loadedRewardUtils = nil
	yield_return = nil

	cort = nil
	rewardGrid = nil  
	rewardScroll = nil 
	itemsParent = nil
	rewardGridLayout = nil

	playerIconObj = nil
	gemIconObj = nil
	coinIconObj = nil
	heroIconObj = nil
	bagIconObj = nil 
	againBtn_GO = nil
	againBtnText = nil

	coinEffectTransTbl = nil
	coinIconTrans = nil
	coinBannerTrans = nil
	coinBannerPos = nil

	gemEffectTransTbl = nil
	gemIconTrans = nil
	gemBannerTrans = nil
	gemBannerPos = nil

	coinText = nil
	gemText = nil
	playerIconImg = nil

	iconsParentTrans = nil
	gridCenterPos = nil

	summonType  = nil
	summonCount = nil

	IsInit  = nil
	effectFinished  = nil

	rewardData = nil
	confirmCbk = nil
	mergeRewards = nil
	againAction = nil

	animationFinished  = nil
	animatedItemCount  = nil

	DURATION_EFFECT_FLY = nil
end