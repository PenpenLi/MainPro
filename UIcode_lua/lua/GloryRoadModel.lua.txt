--
-- 版权所有：archly
-- Author: dyl
-- Date: 2018-09-06 10:15:31

require "GloryRoadUtils"

--table data
local GloryRoadTbl = {
    tblName = "Multifight",
    id = "id",
    floor = "floor",
    stage = "stage",
    monster1 = "monster1",
    passive1 = "passive1",
    monster2 = "monster2",
    passive2 = "passive2",
    rewards = "rewards",
    firstRewards = "firstRewards"
}

local GloryRoadPrice = {
    tblName = "MultifightPrice",
    count = "count",
    price = "price"
}

local gloryRoadDataFromTbl
local gloryRoadPriceDataFromTbl

local RANK_COUNT = 50

local curGloryRoad
local curSelectGloryRoad
local curSelectStage
local curSelectRecordFightType

local isRecord = false


----------------------------------formation相关
local formationType
local formationArr=0
local raceId = 0
local downHeroDic={}
local upHeroArray={}
local formationHeros={}
local downHeroArray={}
local fight = 0
local auraArr={}
local curAura
local LimitLevel

function DoInit()
    gloryRoadDataFromTbl = GetGloryRoadDataFromTbl()
    gloryRoadPriceDataFromTbl = GetGloryRoadPriceDataFromTbl()
    LimitLevel = GetConstValue("multifightHeroLimit") or 100
    MsgCenter:Subscribe(Notify_OnBattleEnd,OnBattleEndToGloryRoad)
end

function InitProperties()
end
-------------------------------glory road view-----------------------------
function OnCommand_InitGloryRoadData(objs)
    local req = {
        id = 8
    }
    HttpRequest("initPBItem","InitPBItemReq","InitPBItemResp",req,
    function (resp)
        UpdateCurGloryRoad()
        SelectFloor(curGloryRoad.curFloor)
        self:SendNotification("RefreshGloryRoadView",curGloryRoad,curSelectGloryRoad)
    end)
end

function OnCommand_UpdateGloryRoadData(objs)
    UpdateCurGloryRoad()
    SelectFloor(curGloryRoad.curFloor)
    self:SendNotification("RefreshGloryRoadView",curGloryRoad,curSelectGloryRoad)
end

function OnCommand_SwitchFloor(objs)
    -- local direction = objs[0]
    -- SelectFloor(curSelectGloryRoad.id-direction)
    self:SendNotification("RefreshGloryRoadView",curGloryRoad,curSelectGloryRoad)
end

function OnCommand_CheckHasData(objs)
    local direction = objs[0]
    SelectFloor(curSelectGloryRoad.id-direction)
    local floor = curGloryRoad.floorArr[curSelectGloryRoad.id-direction]
    local result = floor ~= nil and floor.state or nil
    objs[1](result)
end

function SelectFloor(floor)
    curSelectGloryRoad = curGloryRoad.floorArr[floor]
end

function OnCommand_OpenRankView(objs)    
    require "LeaderboardUtils"
    OpenLeaderboard(self, PlayerLeaderboardType.GloryRoad)
end

function OnCommand_BuyExtraChance(objs)
    local vip = appData:checkData("PlayerInfo").vip
    if vip == 0 then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("VIP_GloryRoad"),2)
        return
    end
    local vipCount = ResTblContainer:GetPropToInt(vip,VipTbl.multifight,VipTbl.tblName)
    local newPayCount = curGloryRoad.payCount+1
    local price = gloryRoadPriceDataFromTbl[newPayCount]
    if newPayCount > vipCount or price == nil then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("HasMaxCount"),2)
        return
    end
    if not CheckResEnough(ResourceEnum.Gem,price,true) then
        return
    end
    CsBridge.messageManager:PopMsgBox(
        "",
        string.format(Language:getStr("Challenge_Count_Check"),price),
        Language:getStr("local_cancel"),
        nil,
        Language:getStr("local_confirm"),
        function ()
            local req = {
                type = UI_OPEN_TYPE_GLORYROAD,
                count = 1
            }
            HttpRequest("buyExtraChance", "BuyExtraChanceReq", "BuyExtraChanceResp", req,
            function (resp)
                if resp then
                    UpdateRemains()
                    self:SendNotification("UpdateGloryRoadRemain",curGloryRoad)
                end
            end)
        end)
end

function OnCommand_TryRaid(objs)
    if not CheckRemainEnough() then
        return
    end
    local req = {
        id = objs[0].id
    }
    local finishedCbk = function(resp)
        local confirmCbk = function()
            UpdateRemains()
            self:SendNotification("UpdateGloryRoadRemain",curGloryRoad)
        end
        PopRewardView(self,resp.rewardItems, confirmCbk)
    end
    HttpRequest("raidGloryRoad","RaidGloryRoadReq","RaidGloryRoadResp",req,finishedCbk)
end

function OnCommand_GoStage(objs)
    if not CheckRemainEnough() then
        return
    end
    local stage = objs[0]
    if stage.state == StageState.UnPass then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("GloryRoad_StageNeedPassed"))
        return
    end
    curSelectStage = stage
    CsBridge.CacheAssetsByModule(self.Module,function()
        CsBridge.OpenView("GloryRoadFightView","GloryRoadModel",true,true)
    end,"GloryRoadFightView")
end

function CheckRemainEnough()
    if curGloryRoad.ramins <= 0 then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("GloryRoadNotCount"),2)
        return false
    end
    return true
end

------------------------------fight view----------------------------------
function OnCommand_InitGloryRoadFightData(objs)
    self:SendNotification("RefreshGloryRoadFightView",curSelectStage)
end

function OnCommand_UpdateGloryRoadFightData(objs)
    UpdateCurGloryRoad()
    if not isRecord and curSelectStage.state == StageState.Passed then
        self:HideView("GloryRoadFightView")
        CsBridge.CacheAssetsByModule(self.Module,function()
            CsBridge.OpenView("GloryRoadPassFightView","GloryRoadModel",false,true)
        end,"GloryRoadPassFightView")
    end
    local state = curSelectRecordFightType == FightType.Light and curSelectStage.fight1.state or curSelectStage.fight2.state
    local f = curSelectRecordFightType == FightType.Light and curSelectStage.fight1 or curSelectStage.fight2
    self:SendNotification("UpdateGloryRoadFightState",f)
end

function OnCommand_TryBattle(objs)
    curSelectRecordFightType = objs[0]
    formationArr = curSelectRecordFightType == FightType.Light and 
        curGloryRoad.uids_2 or 
        curGloryRoad.uids_1
    local type = curSelectRecordFightType == FightType.Light and 
            FormationTypeEnum.FormationType_GloryRoad_1 or
            FormationTypeEnum.FormationType_GloryRoad_2
    CsBridge.CacheAssetsByModule(self.Module,function()
        local view=CsBridge.OpenView("FormationView","GloryRoadModel",true,true)
        view:SetParamDataList(type,function(formationPos)
            OnFormationReady(formationPos)
        end,nil) 
    end,"FormationView","HeroItemSlot")
end

function OnFormationReady(formationPos) 
    local req = {
        type = curSelectRecordFightType,
        formationPos = formationPos
    }
    HttpBattle("tryGloryRoad","TryGloryRoadReq",req,function(battleInfo)
        if battleInfo then
            isRecord = false
            curSelectStage.passNum = battleInfo.battleEndInfo.pass
            ShowBattleModule(battleInfo, self)
        end
    end)
end

function OnCommand_OpenGloryRoadFightRecord(objs)
    curSelectRecordFightType = objs[0]
    local req = {
        id = curSelectStage.id,
        type = curSelectRecordFightType
    }
    HttpRequest("getGloryRoadPlayer",
    "GetPassGloryRoadPlayerReq",
    "GetPassSkyTowerPlayerResp",
    req,
    function(resp)
        CsBridge.CacheAssetsByModule(self.Module,
        function()
            CsBridge.OpenView("SkyscraperRecordView","GloryRoadModel",true,true)
	        self:SendNotification("Record",resp)
        end,"SkyscraperRecordView","SkyscraperRecordItemSlot","ItemSlot")
    end)
end

function OnCommand_RecordVedio(objs)
    local req = {
        id = curSelectStage.id,
        type = curSelectRecordFightType,
        index = objs[0]
    }
    HttpBattle("getGloryRoadVideo",
    "GetPassGloryRoadVideoReq",
    req,
    function(resp)
        resp.isRecord = true
        ShowBattleModule(resp, self)
    end,true,true)
end

function OnCommand_ResetGloryRoad(objs)
    if (curSelectStage.fight1.state == FightState.UnPass) and (curSelectStage.fight2.state == FightState.UnPass) then
        CsBridge.hintUILayer:ShowHintBox(Language:getStr("GloryRoad_NotReset"),2)
        return
    end
    CsBridge.messageManager:FristConfirmBox("GloryRoadConfirmReset",Language:getStr("local_confirm"),
        Language:getStr("GloryRoadConfirmReset"),
        Language:getStr("local_cancel"),nil,
        Language:getStr("local_confirm"),function(resp)
            local req = {
                useless = 0
            }
            HttpRequest("resetGloryRoad","ResetGloryRoadReq","ResetGloryRoadResp",req,function(resp)
                UpdateCurGloryRoad()
                self:SendNotification("ResetGloryRoad",curSelectStage.fight1,curSelectStage.fight2)
            end)
        end)
end

------------------------------formation view--------------------------------
function OnCommand_InitData(objs)
    formationType=objs[0]
    raceId=objs[1]
    PackData()
    for i, data in pairs(upHeroArray) do 
	    if(data.heroId~=0)then
		    ChangeRepeatHero(data.heroId,true)
	    end
	end
	downHeroArray = RefreshAllDownHero()
	fight = GetCurUpHeroFight()
    curAura=CalcAura()
	self:SendNotification("InitData", upHeroArray, downHeroArray, fight,auraArr,curAura)
end

function RefreshAllDownHero()
	local dataArray={}
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do 
    		local race=tbl:GetInt(data.heroId,HeroBase.group)
		    if(raceId==0)then
    			table.insert(dataArray,data)
			elseif(raceId==race)then
    			table.insert(dataArray,data)
    		end
		end 
	end
	table.sort(dataArray, SortHeroByQuality)
    return dataArray
end

function GetCurUpHeroFight()
	local allFight=0
	for i, data in pairs(upHeroArray) do  
		if(data.heroId~=0)then
			local heroInfo=appData:checkItem("HeroItem",tostring(data.srcUid))
			allFight=allFight+GetHeroFight(heroInfo)
		end
	end
	return allFight
end

function PackData()
    auraArr={}
	for i, data in pairs(global_auraArr) do  
		local newData={}
		newData.id=data.id
		newData.title=data.title
		newData.icon=data.icon
		newData.des=data.desp
		newData.condition=data.cond
		newData.isOn=false
		newData.pos=i
		newData.condDesp=data.condDesp
		table.insert(auraArr,newData)
    end

    downHeroDic={}
	local pbs=appData:checkAllItems("HeroItem")
	if(pbs~=nil)then
	    local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
		for  i = 0,pbs.Length-1 do
            local pb=pbs[i]
            if GetHeroAllLevel(pb.grade,pb.level) >= LimitLevel then
                local newData={}
                newData.uid=pb.uid
                newData.heroId=pb.heroId
                newData.level=pb.level
                newData.grade=pb.grade
                local quality = tbl:GetInt(pb.heroId,HeroBase.quality)
                newData.quality=quality
                newData.IsSelected=false
                newData.isRepeat=false
                newData.distillationStar = pb.distillationStar
                newData.distillationLevel = pb.distillationLevel
                newData.breakLevel = pb.breakLevel
                newData.showDuty = ContainItem(formationArr,pb.uid)
                local kv={[pb.uid]=newData}
                table.insert(downHeroDic,kv)
            end
		end
	end
	upHeroArray={}
	--formationHeros={}
	formationHeros=appData:checkItem("Formation",tostring(formationType))
	for  i = 1,6 do
		local data=GetFormationHero(i)
		local newData={}
		if(data==nil)then
			newData.pos=i
			newData.srcUid=0
			newData.heroId=0
		else
			local downHero=GetDownHeroInfo(data.uid)
			newData.pos=data.pos
			newData.srcUid=data.uid
			if(downHero~=nil)then
				newData.heroId=downHero.heroId
				newData.level=downHero.level
				newData.grade=downHero.grade
			end
		end
		
		table.insert(upHeroArray,newData)
	end
end

function GetFormationHero(_pos)
	if(formationHeros==nil or formationHeros.heroIds==nil or next(formationHeros.heroIds)==nil)then
		return nil
	end
	for i, data in pairs(formationHeros.heroIds) do  
		if(data~=nil and data.pos==_pos)then
			return data
		end
	end
	return nil
end

--获取对应下面英雄数据
function GetDownHeroInfo(_uid)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do
			if(key==_uid)then
	    		data.IsSelected=true
				return data
	    	end
		end
	end
	return nil
end

function ChangeRepeatHero(heroId,active)
    local changedHero={}
	local tbl=ResTblContainer:GetTable(Hero.actorTbl)
	local relationId=tbl:GetInt(heroId,Hero.relationId)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do  
    		local relationId_i=tbl:GetInt(data.heroId,Hero.relationId)
    		if(data.heroId==heroId or (relationId ~= 0 and relationId == relationId_i))then
				data.isRepeat=active
				table.insert(changedHero,data)
			end
		end 
	end
	return changedHero
end

function OnCommand_ScreenHero(objs)
    raceId = objs[0]
	downHeroArray = RefreshAllDownHero()
	self:SendNotification("ScreenHero", downHeroArray)
end

function OnCommand_DownHero(objs)
    local index=objs[0]
    local changedHero={}
	local upHero=upHeroArray[index]
	if(upHero.heroId~=0)then
		local heros=ChangeRepeatHero(upHero.heroId,false)
		for i=1,#heros do
		    table.insert(changedHero,heros[i])
		end
		for i, kv in pairs(downHeroDic) do  
    		for key, data in pairs(kv) do  
    			if(key==upHero.srcUid)then
					data.IsSelected=false
	    			break
	    		end
    		end
    	end
    	--置0
		upHero.srcUid=0
		upHero.heroId=0
		
	end
	fight=GetCurUpHeroFight()
	curAura=CalcAura()
	self:SendNotification("DownHero", changedHero,upHero,fight,curAura)
end

function OnCommand_SelectHeroEffect(objs)
    if objs[1].m_data.showDuty then
        local str = curSelectRecordFightType == FightType.Light and "HeroInGloryRoad_2" or "HeroInGloryRoad_1"
        CsBridge.hintUILayer:ShowHintBox(Language:getStr(str))
        return
    end
    local uid = objs[0]
    local pos = 0
    for i=1,#upHeroArray do
        if upHeroArray[i].heroId==0 then
            pos=i
            break
        end
    end
    self:SendNotification("SelectHeroEffect",uid,pos,objs[1])
end

--上阵
function OnCommand_UpHero(objs)
    local downHero=objs[0]
    local upHero
    local changedHero={}
    downHero.IsSelected=true
	for i,data in pairs(upHeroArray) do
		if(data.heroId==0)then
			data.srcUid=downHero.uid
			data.heroId=downHero.heroId
			data.level=downHero.level
			data.grade=downHero.grade
			data.distillationStar=downHero.distillationStar
            data.distillationLevel=downHero.distillationLevel
            data.breakLevel=downHero.breakLevel
			local heros= ChangeRepeatHero(data.heroId,true)
			for i=1,#heros do
		        table.insert(changedHero,heros[i])
		    end
		    upHero=data
		    break
		end
	end
	fight=GetCurUpHeroFight()
	curAura=CalcAura()
	self:SendNotification("UpHero",changedHero,upHero,fight,curAura)
end

--计算光环数量
function DoCheckAuraNum(raceId,num)
	local isEnough=false
	local col=0
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i,data in pairs(upHeroArray) do
		if(data.heroId~=0) then
			local race= tbl:GetInt(data.heroId,HeroBase.group)
			if(raceId==race) then
				col=col+1
			end
		end
	end
	if(col>=num)then
		isEnough=true
	end
	return isEnough
end

function CalcAura()
    local validAura = nil
    --光环
	for i, data in pairs(auraArr) do
	    data.isOn=false
	end
	for i,data in pairs(auraArr) do
		local result=SplitString(data.condition,";")
		local isAllOK=true
		for  i = 0,result.Length-1 do
			local str=SplitString(result[i],",")
			local raceId=tonumber(str[0])
			local num=tonumber(str[1])
			local isEnough=DoCheckAuraNum(raceId,num)
			if(isEnough==false)then
				isAllOK=false
				break
			end
		end
		data.isOn=isAllOK
		if(isAllOK==true) then
		    validAura=data
			break
		end
	end
	return validAura
end

------------------------------pass view------------------------------------
function OnCommand_InitGloryRoadPassFightData(objs)
    self:SendNotification("RefreshGloryRoadPassFightView",GetPassNumArr(curSelectStage.passNum))
end

function GetPassNumArr(num)
    local arr = {}
    while num > 0 do
        table.insert(arr,num%10)
        num = math.modf(num/10)
    end
    return table.revert(arr)
end

------------------------------update data---------------------------------
local function UpdateFBMonsterArr(fArr,bArr,monsterArr)
    if monsterArr == nil then
        return
    end
    for i=1,2 do
        table.insert(fArr, monsterArr[i])
    end
    for i=3,#monsterArr do
        table.insert(bArr, monsterArr[i])
    end
end

function InitCurGloryRoad(pbData)
    curGloryRoad = {}
    curGloryRoad.curFloor = pbData.floor
    curGloryRoad.curStage = pbData.stage
    curGloryRoad.floorArr = {}
    for k,floorData in pairs(gloryRoadDataFromTbl.fsData) do
        local floor = {
            id = k,
            state = pbData.floor == k and 
                    FloorState.Passing or 
                    (pbData.floor > k and FloorState.Passed or FloorState.UnPass),
            stageArr = {}
        }
        for k,stageData in pairs(floorData) do
            local stage = {
                rewards = stageData.rewards,
                firstRewards = stageData.firstRewards,  
                subId = k,
                id = stageData.id,
                state = floor.state ~= FloorState.Passing and 
                        floor.state or 
                        (pbData.stage == k and 
                        StageState.Passing or 
                        (pbData.stage > k and StageState.Passed or StageState.UnPass)),
                passNum = 0
            }
            stage.fight1 = {
                state = stage.state ~= StageState.Passing and 
                        stage.state or 
                        (pbData.pass_1 and FightState.Passed or FightState.UnPass),
                monsterArr = stageData.monster1,
                passive = stageData.passive1,
                type = FightType.Light
            }
            stage.fight1.fMonsterArr = {}
            stage.fight1.bMonsterArr = {}
            UpdateFBMonsterArr(stage.fight1.fMonsterArr,stage.fight1.bMonsterArr,stage.fight1.monsterArr)

            stage.fight2 = {
                state = stage.state ~= StageState.Passing and 
                        stage.state or 
                        (pbData.pass_2 and FightState.Passed or FightState.UnPass),
                monsterArr = stageData.monster2,
                passive = stageData.passive2,
                type = FightType.Dark
            }
            stage.fight2.fMonsterArr = {}
            stage.fight2.bMonsterArr = {}
            UpdateFBMonsterArr(stage.fight2.fMonsterArr,stage.fight2.bMonsterArr,stage.fight2.monsterArr)

            stage.fightArr = {}
            table.insert(stage.fightArr, stage.fight1)
            table.insert(stage.fightArr, stage.fight2)
            table.insert(floor.stageArr,stage)
        end
        table.insert(curGloryRoad.floorArr,floor)
    end
end

function UpdateCurGloryRoad()
    local pb = appData:checkData("GloryRoadRecord")
    local curData = gloryRoadDataFromTbl.idData[pb.id]
    curData.pass_1 = pb.pass_1
    curData.pass_2 = pb.pass_2
    if curGloryRoad == nil then
        InitCurGloryRoad(curData)
    else
        local floor = curGloryRoad.floorArr[curGloryRoad.curFloor]
        floor.state = FloorState.Passed
        local stage = floor.stageArr[curGloryRoad.curStage]
        stage.state = StageState.Passed
        stage.fight1.state = FightState.Passed
        stage.fight2.state = FightState.Passed
        
        curGloryRoad.curFloor = curData.floor
        curGloryRoad.curStage = curData.stage
        floor = curGloryRoad.floorArr[curData.floor]
        floor.state = FloorState.Passing
        stage = floor.stageArr[curData.stage]
        stage.state = StageState.Passing
        stage.fight1.state = curData.pass_1 and FightState.Passed or FightState.UnPass
        stage.fight2.state = curData.pass_2 and FightState.Passed or FightState.UnPass
    end
    curGloryRoad.uids_1 = pb.uids_1
    curGloryRoad.uids_2 = pb.uids_2
    UpdateRemains(pb)
end

function UpdateRemains(pb)
    pb = pb or appData:checkData("GloryRoadRecord")
    curGloryRoad.ramins = pb.remains+pb.payRemains
    curGloryRoad.payCount = pb.payCount
end

function GetRankInfo(resp)
    local info = {}
    local rankInfos = resp.rankInfos
    if rankInfos ~= nil then
        info.rankInfos = {}
        for i,v in ipairs(rankInfos) do
            local rankInfo = {
                playerBaseInfo = v.playerBaseInfo,
                rank = v.rank
            }
            local data = gloryRoadDataFromTbl.idData[v.score]
            rankInfo.score = data.floor.."-"..data.stage
            table.insert(info.rankInfos,rankInfo)
        end
    end
    local selfRankInfo = resp.selfRankInfo
    if selfRankInfo ~= nil then
        info.selfRankInfo = {
            playerBaseInfo = selfRankInfo.playerBaseInfo,
            rank = selfRankInfo.rank
        }
        local data = gloryRoadDataFromTbl.idData[selfRankInfo.score]
        info.selfRankInfo.score = data == nil and "-" or data.floor.."-"..data.stage
    end
    return info
end

------------------------table data-----------------------------
function GetGloryRoadDataFromTbl()
    local data = {
        idData = {},
        fsData = {}
    }
    local ids = GetIds(GloryRoadTbl.tblName)
    for i=0,ids.Length-1 do
        local id = tonumber(ids[i])
        local infos = ResTblContainer:GetRowFromTbl(GloryRoadTbl.tblName,
                    tostring(id),
                    GloryRoadTbl.floor,
                    GloryRoadTbl.stage,
                    GloryRoadTbl.monster1,
                    GloryRoadTbl.passive1,
                    GloryRoadTbl.monster2,
                    GloryRoadTbl.passive2,
                    GloryRoadTbl.rewards,
                    GloryRoadTbl.firstRewards)
        local floor = tonumber(infos[0])
        local stage = tonumber(infos[1])
        local monster1 = GetMonsterFormationFromTbl(infos[2])
        local passive1 = infos[3] == "" and nil or ResTblContainer:GetPropToStr(tonumber(infos[3]),PassiveSkill.desp,PassiveSkill.actorTbl)
        local monster2 = GetMonsterFormationFromTbl(infos[4])
        local passive2 = infos[5] == "" and nil or ResTblContainer:GetPropToStr(tonumber(infos[5]),PassiveSkill.desp,PassiveSkill.actorTbl)
        local rewards = GetRewardFromTbl(infos[6])
        local firstRewards = GetRewardFromTbl(infos[7])
        data.idData[id] = {
            id = id,
            floor = floor,
            stage = stage
        }
        if data.fsData[floor] == nil then
            data.fsData[floor] = {}
        end
        data.fsData[floor][stage] = {
            id = id,
            monster1 = monster1,
            passive1 = passive1,
            monster2 = monster2,
            passive2 = passive2,
            rewards = rewards,
            firstRewards = firstRewards
        }
    end
    return data
end

function GetGloryRoadPriceDataFromTbl()
    local data = {}
    local counts = ResTblContainer:GetCol(GloryRoadPrice.tblName,GloryRoadPrice.count)
    for i=0,counts.Length-1 do
        local count = tonumber(counts[i])
        local price = ResTblContainer:GetPropToInt(count,GloryRoadPrice.price,GloryRoadPrice.tblName)
        data[count] = price
    end
    return data
end

------------------------------evet--------------------------
function OnBattleEndToGloryRoad(battleInfo)
    if (not battleInfo.isRecord or battleInfo.isRecord == nil) and battleInfo.battleEndInfo.result ~= 1 then
        CheckAndShowConditionPackageView(self,GetConditionReqData(ConditionPackageType.GloryRoad,curSelectGloryRoad.id))
    end
end

function DoOnExit()
    MsgCenter:Unsubscribe(Notify_OnBattleEnd,OnBattleEndToGloryRoad)
    self.Module = nil
    GloryRoadTbl = nil
    GloryRoadPrice = nil

    gloryRoadDataFromTbl = nil
    gloryRoadPriceDataFromTbl = nil

    RANK_COUNT = nil

    curGloryRoad = nil
    curSelectGloryRoad = nil
    curSelectStage = nil
    curSelectRecordFightType = nil

    isRecord = nil

    formationType = nil
    formationArr = nil
    raceId = nil
    downHeroDic= nil
    upHeroArray= nil
    formationHeros= nil
    downHeroArray= nil
    fight = nil
    auraArr= nil
    curAura= nil
    LimitLevel= nil
end