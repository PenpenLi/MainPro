local formationType=0
local raceId = 0

local TEMPLE_POS_NUM = 10--英灵殿上阵点位数
local NORMAL_POS_NUM = 6--正常上阵点位数

local downHeroDic={}
local upHeroArray={}
local formationHeros={}
local downHeroArray={}
local fight = 0
local auraArr={}
local curAura

function OnCommand_InitData(objs)
    formationType=objs[0]
    raceId=objs[1]
    PackData()
    for i, data in pairs(upHeroArray) do 
	    if(data.heroId~=0)then
		    ChangeRepeatHero(data.heroId,true)
	    end
	end
	downHeroArray = RefreshAllDownHero()
	fight = GetCurUpHeroFight()
	curAura=CalcAura()
	self:SendNotification("InitData", upHeroArray, downHeroArray, fight,auraArr,curAura)
end

function CheckInAutoTask(heroData)
	local dutys = CheckHeroDuty(heroData)
	if dutys ~= nil then
		if ContainItem(CheckHeroDuty(heroData),11) then
			heroData.lock = true
		end 
	end
end

function RefreshAllDownHero()
	local dataArray={}
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do 
    		local race=tbl:GetInt(data.heroId,HeroBase.group)
		    if(raceId==0)then
				--CheckInAutoTask(data)
    			table.insert(dataArray,data)
			elseif(raceId==race)then
				--CheckInAutoTask(data)
    			table.insert(dataArray,data)
    		end
		end 
	end
	table.sort(dataArray, SortHeroByQuality)
    return dataArray
end

function GetCurUpHeroFight()
	local allFight=0
	for i, data in pairs(upHeroArray) do  
		if(data.heroId~=0)then
			local heroInfo=appData:checkItem("HeroItem",tostring(data.srcUid))
			allFight=allFight+GetHeroFight(heroInfo)
		end
	end
	return allFight
end

function PackData()
    auraArr={}
	for i, data in pairs(global_auraArr) do  
		local newData={}
		newData.id=data.id
		newData.title=data.title
		newData.icon=data.icon
		newData.des=data.desp
		newData.condition=data.cond
		newData.isOn=false
		newData.pos=i
		newData.condDesp=data.condDesp
		table.insert(auraArr,newData)
    end

    downHeroDic={}
	local pbs=appData:checkAllItems("HeroItem")
	if(pbs~=nil)then
	    local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
		for  i = 0,pbs.Length-1 do
			local pb=pbs[i]
			local newData={}
			newData.uid=pb.uid
			newData.heroId=pb.heroId
			newData.level=pb.level
			newData.grade=pb.grade
			local quality = tbl:GetInt(pb.heroId,HeroBase.quality)
			newData.quality=quality
			newData.IsSelected=false
			newData.isRepeat=false
			newData.distillationStar = pb.distillationStar
			newData.distillationLevel = pb.distillationLevel
			newData.breakLevel = pb.breakLevel
			if formationType==FormationTypeEnum.FormationType_Cross_One then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.CROSS_2,HeroDuty.CROSS_3)
			elseif formationType==FormationTypeEnum.FormationType_Cross_Two then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.CROSS_1,HeroDuty.CROSS_3)
			elseif formationType==FormationTypeEnum.FormationType_Cross_Three then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.CROSS_1,HeroDuty.CROSS_2)
			elseif formationType==FormationTypeEnum.FormationType_GloryRoad_1 then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.GloryRoad_2)
			elseif formationType==FormationTypeEnum.FormationType_GloryRoad_2 then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.GloryRoad_1)
			elseif formationType==FormationTypeEnum.FormationType_BraveArena_1 then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.League_2,HeroDuty.League_3)
			elseif formationType==FormationTypeEnum.FormationType_BraveArena_2 then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.League_1,HeroDuty.League_3)
			elseif formationType==FormationTypeEnum.FormationType_BraveArena_3 then
				newData.showDuty = CheckHeroInDuty(pb,HeroDuty.League_1,HeroDuty.League_2)
			end

			local kv={[pb.uid]=newData}
			if formationType==FormationTypeEnum.FormationType_Temple then
				local needLv = GetConstValue("TempleHeroLevel")
				local level = GetHeroAllLevel(newData.grade,newData.level,newData.distillationLevel,newData.breakLevel)
				if level >= needLv then
					table.insert(downHeroDic,kv)
				end
			else
				table.insert(downHeroDic,kv)
			end
		end
	end
	upHeroArray={}
	formationHeros={}
	formationHeros=appData:checkItem("Formation",tostring(formationType))
	for  i = 1,TEMPLE_POS_NUM do
		if formationType ~= FormationTypeEnum.FormationType_Temple and i > NORMAL_POS_NUM then
			break
		end
		local data=GetFormationHero(i)
		local newData={}
		if(data==nil)then
			newData.pos=i
			newData.srcUid=0
			newData.heroId=0
		else
			local downHero=GetDownHeroInfo(data.uid)
			newData.pos=data.pos
			newData.srcUid=data.uid
			if(downHero~=nil)then
				newData.heroId=downHero.heroId
				newData.level=downHero.level
				newData.grade=downHero.grade
			end
		end
		table.insert(upHeroArray,newData)
	end
end

function GetFormationHero(_pos)
	if(formationHeros==nil or formationHeros.heroIds==nil or next(formationHeros.heroIds)==nil)then
		return nil
	end
	for i, data in pairs(formationHeros.heroIds) do  
		if(data~=nil and data.pos==_pos)then
			return data
		end
	end
	return nil
end

--获取对应下面英雄数据
function GetDownHeroInfo(_uid)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do
			if(key==_uid)then
	    		data.IsSelected=true
				return data
	    	end
		end
	end
	return nil
end

function ChangeRepeatHero(heroId,active)
    local changedHero={}
	local tbl=ResTblContainer:GetTable(Hero.actorTbl)
	local relationId=tbl:GetInt(heroId,Hero.relationId)
	for i, kv in pairs(downHeroDic) do  
    	for key, data in pairs(kv) do  
    		local relationId_i=tbl:GetInt(data.heroId,Hero.relationId)
    		if(data.heroId==heroId or (relationId ~= 0 and relationId == relationId_i))then
				data.isRepeat=active
				table.insert(changedHero,data)
			end
		end 
	end
	return changedHero
end

function OnCommand_ScreenHero(objs)
    raceId = objs[0]
	downHeroArray = RefreshAllDownHero()
	self:SendNotification("ScreenHero", downHeroArray)
end

function OnCommand_DownHero(objs)
    local index=objs[0]
    local changedHero={}
	local upHero=upHeroArray[index]
	if ShowSoulImprintedTip(upHero) then
		return
	end
	if(upHero.heroId~=0)then
		local heros=ChangeRepeatHero(upHero.heroId,false)
		for i=1,#heros do
		    table.insert(changedHero,heros[i])
		end
		for i, kv in pairs(downHeroDic) do  
    		for key, data in pairs(kv) do  
    			if(key==upHero.srcUid)then
					data.IsSelected=false
	    			break
	    		end
    		end
    	end
    	--置0
		upHero.srcUid=0
		upHero.heroId=0
		
	end
	fight=GetCurUpHeroFight()
	curAura=CalcAura()
	self:SendNotification("DownHero", changedHero,upHero,fight,curAura)
end

function OnCommand_SelectHeroEffect(objs)
    local uid = objs[0]
    local pos = 0
    for i=1,#upHeroArray do
        if upHeroArray[i].heroId==0 then
            pos=i
            break
        end
    end
    self:SendNotification("SelectHeroEffect",uid,pos,objs[1])
end

--上阵
function OnCommand_UpHero(objs)
    local downHero=objs[0]
    local upHero
    local changedHero={}
    downHero.IsSelected=true
	for i,data in pairs(upHeroArray) do
		if(data.heroId==0)then
			data.srcUid=downHero.uid
			data.heroId=downHero.heroId
			data.level=downHero.level
			data.grade=downHero.grade
			data.distillationStar=downHero.distillationStar
			data.distillationLevel=downHero.distillationLevel
			data.breakLevel=downHero.breakLevel
			local heros= ChangeRepeatHero(data.heroId,true)
			for i=1,#heros do
		        table.insert(changedHero,heros[i])
		    end
		    upHero=data
		    break
		end
	end
	fight=GetCurUpHeroFight()
	curAura=CalcAura()
	self:SendNotification("UpHero",changedHero,upHero,fight,curAura)
end

--计算光环数量
function DoCheckAuraNum(raceId,num)
	local isEnough=false
	local col=0
	local tbl=ResTblContainer:GetTable(HeroBase.actorTbl)
	for i,data in pairs(upHeroArray) do
		if(data.heroId~=0) then
			local race= tbl:GetInt(data.heroId,HeroBase.group)
			if(raceId==race) then
				col=col+1
			end
		end
	end
	if(col>=num)then
		isEnough=true
	end
	return isEnough
end

function CalcAura()
    local validAura = nil
    --光环
	for i, data in pairs(auraArr) do
	    data.isOn=false
	end
	for i,data in pairs(auraArr) do
		local result=SplitString(data.condition,";")
		local isAllOK=true
		for  i = 0,result.Length-1 do
			local str=SplitString(result[i],",")
			local raceId=tonumber(str[0])
			local num=tonumber(str[1])
			local isEnough=DoCheckAuraNum(raceId,num)
			if(isEnough==false)then
				isAllOK=false
				break
			end
		end
		data.isOn=isAllOK
		if(isAllOK==true) then
		    validAura=data
			break
		end
	end
	return validAura
end

function DoOnExit()
	formationType = nil
	raceId = nil
	downHeroDic = nil
	upHeroArray = nil
	formationHeros = nil
	downHeroArray = nil
	fight = nil
	auraArr = nil
	curAura = nil
end