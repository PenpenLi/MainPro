local MsgDef = {}
local function get_map_size( t )
	local size = 0;
	for k,v in pairs(t) do 
		size  = size + 1;
	end 
	return size;
end


--[[ 请求登陆账号--]]
MsgDef.Msg1010101 = {}

function MsgDef.Msg1010101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.accountId == nil then msg.accountId = "" end --[[(string) 账号Id--]]
	if msg.accountName == nil then msg.accountName = "" end --[[(string) 账号名称--]]
	if msg.channelId == nil then msg.channelId = 0 end --[[(int32) 渠道Id(平台传的值)--]]
	if msg.serverId == nil then msg.serverId = 0 end --[[(int32) 服务器Id--]]
	if msg.channelSign == nil then msg.channelSign = 0 end --[[(int32) 渠道标记--]]
	if msg.pkgSign == nil then msg.pkgSign = 0 end --[[(int32) 包标记(包的版本号)--]]
	if msg.md5Time == nil then msg.md5Time = 0 end --[[(int32) md5时间戳--]]
	if msg.md5Flag == nil then msg.md5Flag = "" end --[[(string) md5验证字符串--]]
	if msg.deviceId == nil then msg.deviceId = "" end --[[(string) 设备id--]]
	if msg.deviceInfo == nil then msg.deviceInfo = "" end --[[(string) 设备信息--]]
	return msg
end

function MsgDef.Msg1010101:encode(sm)
	sm:writeString(self.accountId);
	sm:writeString(self.accountName);
	sm:writeInt32(self.channelId);
	sm:writeInt32(self.serverId);
	sm:writeInt32(self.channelSign);
	sm:writeInt32(self.pkgSign);
	sm:writeInt32(self.md5Time);
	sm:writeString(self.md5Flag);
	sm:writeString(self.deviceId);
	sm:writeString(self.deviceInfo);
	return self
end

function MsgDef.Msg1010101:decode(sm)
	self.accountId = sm:readString();
	self.accountName = sm:readString();
	self.channelId = sm:readInt32();
	self.serverId = sm:readInt32();
	self.channelSign = sm:readInt32();
	self.pkgSign = sm:readInt32();
	self.md5Time = sm:readInt32();
	self.md5Flag = sm:readString();
	self.deviceId = sm:readString();
	self.deviceInfo = sm:readString();
	return self
end

function MsgDef.Msg1010101:opcode()
	return 1010101
end

--[[ 请求登陆账号(返回)--]]
MsgDef.Msg5010101 = {}
function MsgDef.Msg5010101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleIdStr = "" --[[(string) 玩家Ids--]]
	msg.loginToken = "" --[[(string) 登陆令牌--]]
	msg.zz = 0 --[[(int32) 消息版本号--]]
	msg.auth = 0 --[[(int8) 权限--]]
	msg.createTime = 0 --[[(int32) 创建时间--]]
	return msg
end

function MsgDef.Msg5010101:encode(sm)
	sm:writeString(self.roleIdStr);
	sm:writeString(self.loginToken);
	sm:writeInt32(self.zz);
	sm:writeInt8(self.auth);
	sm:writeInt32(self.createTime);
	return self
end

function MsgDef.Msg5010101:decode(sm)
	self.roleIdStr = sm:readString();
	self.loginToken = sm:readString();
	self.zz = sm:readInt32();
	self.auth = sm:readInt8();
	self.createTime = sm:readInt32();
	return self
end


function MsgDef.Msg5010101:opcode()
	return 5010101
end
--[[ 请求角色信息--]]
MsgDef.Msg1010102 = {}

function MsgDef.Msg1010102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleIdStr == nil then msg.roleIdStr = "" end --[[(string) 角色Id--]]
	return msg
end

function MsgDef.Msg1010102:encode(sm)
	sm:writeString(self.roleIdStr);
	return self
end

function MsgDef.Msg1010102:decode(sm)
	self.roleIdStr = sm:readString();
	return self
end

function MsgDef.Msg1010102:opcode()
	return 1010102
end

--[[ 请求角色信息(返回)--]]
MsgDef.Msg5010102 = {}
function MsgDef.Msg5010102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.roleName = "" --[[(string) 角色名称--]]
	msg.skins = {} --[[(map<int32,int32>) 外观(包括:)--]]
	msg.sceneId = 0 --[[(int32) 场景Id--]]
	msg.pox = 0 --[[(int32) x--]]
	msg.poy = 0 --[[(int32) y--]]
	msg.moneys = {} --[[(map<int32,int32>) 金钱字典--]]
	msg.roleIcon = 0 --[[(int32) 头像--]]
	msg.attris = {} --[[(map<int32,int32>) 属性字典--]]
	msg.activeSkillInfos = {} --[[(array<SkillInfo>) 主动技能信息--]]
	msg.gangId = 0 --[[(int64) 帮派id--]]
	msg.gangName = "" --[[(string) 帮派名字--]]
	msg.gangJob = 0 --[[(int8) 职位--]]
	msg.fashions = {} --[[(map<int32,int32>) 时装信息--]]
	msg.titles = {} --[[(map<int32,int32>) 称号信息--]]
	msg.partnerLevel = 0 --[[(int32) 伙伴等级--]]
	msg.partnerName = "" --[[(string) 伙伴名--]]
	msg.mapModelId = 0 --[[(int32) 地图id--]]
	msg.buffs = {} --[[(array<BuffInfo>) 自己的buff--]]
	msg.coupleName = "" --[[(string) 伴侣名--]]
	msg.grade = 0 --[[(int32) 婚宴档次(昵称相关)--]]
	msg.mainSvrId = 0 --[[(int32) 主服务器id--]]
	msg.petName = "" --[[(string) 宠物名--]]
	msg.xtName = "" --[[(string) 仙童名--]]
	msg.attris64 = {} --[[(map<int32,int64>) 64位属性字典--]]
	msg.wearTitle = {} --[[(array<int32>) 佩戴称号列表--]]
	return msg
end

function MsgDef.Msg5010102:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pox);
	sm:writeInt32(self.poy);
	sm:writeInt16(get_map_size(self.moneys))
	for kn,elm in ipairs(self.moneys) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.roleIcon);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.activeSkillInfos)
	for i,elm in ipairs(self.activeSkillInfos) do
		elm:encode(sm)
	end
	sm:writeInt64(self.gangId);
	sm:writeString(self.gangName);
	sm:writeInt8(self.gangJob);
	sm:writeInt16(get_map_size(self.fashions))
	for kn,elm in ipairs(self.fashions) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.titles))
	for kn,elm in ipairs(self.titles) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.partnerLevel);
	sm:writeString(self.partnerName);
	sm:writeInt32(self.mapModelId);
	sm:writeInt16(#self.buffs)
	for i,elm in ipairs(self.buffs) do
		elm:encode(sm)
	end
	sm:writeString(self.coupleName);
	sm:writeInt32(self.grade);
	sm:writeInt32(self.mainSvrId);
	sm:writeString(self.petName);
	sm:writeString(self.xtName);
	sm:writeInt16(get_map_size(self.attris64))
	for kn,elm in ipairs(self.attris64) do
		sm:writeInt32(kn);
		sm:writeInt64(elm);
	end
	sm:writeInt16(get_map_size(self.wearTitle))
	for i,elm in ipairs(self.wearTitle) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5010102:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt32();
	self.poy = sm:readInt32();
	local moneys_size = sm:readInt16()
	for i = 1,moneys_size do
		local kv = sm:readInt32();
		self.moneys[kv] = sm:readInt32();
	end
	self.roleIcon = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local activeSkillInfos_size = sm:readInt16()
	for i = 1,activeSkillInfos_size do
		local element = MsgDef.SkillInfo:create():decode(sm)
		table.insert(self.activeSkillInfos, element)
	end
	self.gangId = sm:readInt64();
	self.gangName = sm:readString();
	self.gangJob = sm:readInt8();
	local fashions_size = sm:readInt16()
	for i = 1,fashions_size do
		local kv = sm:readInt32();
		self.fashions[kv] = sm:readInt32();
	end
	local titles_size = sm:readInt16()
	for i = 1,titles_size do
		local kv = sm:readInt32();
		self.titles[kv] = sm:readInt32();
	end
	self.partnerLevel = sm:readInt32();
	self.partnerName = sm:readString();
	self.mapModelId = sm:readInt32();
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local element = MsgDef.BuffInfo:create():decode(sm)
		table.insert(self.buffs, element)
	end
	self.coupleName = sm:readString();
	self.grade = sm:readInt32();
	self.mainSvrId = sm:readInt32();
	self.petName = sm:readString();
	self.xtName = sm:readString();
	local attris64_size = sm:readInt16()
	for i = 1,attris64_size do
		local kv = sm:readInt32();
		self.attris64[kv] = sm:readInt64();
	end
	local wearTitle_size = sm:readInt16()
	for i = 1,wearTitle_size do
		local ele = sm:readInt32();
		table.insert(self.wearTitle, ele)
	end
	return self
end


function MsgDef.Msg5010102:opcode()
	return 5010102
end
--[[ 请求角色面板信息--]]
MsgDef.Msg1010103 = {}

function MsgDef.Msg1010103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1010103:encode(sm)
	return self
end

function MsgDef.Msg1010103:decode(sm)
	return self
end

function MsgDef.Msg1010103:opcode()
	return 1010103
end

--[[ 请求角色面板信息(返回)--]]
MsgDef.Msg5010103 = {}
function MsgDef.Msg5010103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.attris = {} --[[(map<int32,int32>) 32位属性map--]]
	msg.attris64 = {} --[[(map<int32,int64>) 64位属性map(攻防血)--]]
	return msg
end

function MsgDef.Msg5010103:encode(sm)
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.attris64))
	for kn,elm in ipairs(self.attris64) do
		sm:writeInt32(kn);
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5010103:decode(sm)
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local attris64_size = sm:readInt16()
	for i = 1,attris64_size do
		local kv = sm:readInt32();
		self.attris64[kv] = sm:readInt64();
	end
	return self
end


function MsgDef.Msg5010103:opcode()
	return 5010103
end
--[[ 请求断线重连--]]
MsgDef.Msg1010104 = {}

function MsgDef.Msg1010104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.loginSign == nil then msg.loginSign = "" end --[[(string) 登陆令牌--]]
	return msg
end

function MsgDef.Msg1010104:encode(sm)
	sm:writeString(self.loginSign);
	return self
end

function MsgDef.Msg1010104:decode(sm)
	self.loginSign = sm:readString();
	return self
end

function MsgDef.Msg1010104:opcode()
	return 1010104
end

--[[ 请求断线重连(返回)--]]
MsgDef.Msg5010104 = {}
function MsgDef.Msg5010104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) --]]
	msg.pox = 0 --[[(int32) --]]
	msg.poy = 0 --[[(int32) --]]
	msg.mapId = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5010104:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pox);
	sm:writeInt32(self.poy);
	sm:writeInt32(self.mapId);
	return self
end

function MsgDef.Msg5010104:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt32();
	self.poy = sm:readInt32();
	self.mapId = sm:readInt32();
	return self
end


function MsgDef.Msg5010104:opcode()
	return 5010104
end
--[[ 请求创建角色--]]
MsgDef.Msg1010201 = {}

function MsgDef.Msg1010201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.roleKey == nil then msg.roleKey = "" end --[[(string) 注册码--]]
	if msg.roleSex == nil then msg.roleSex = 0 end --[[(int32) 性别--]]
	if msg.career == nil then msg.career = 0 end --[[(int32) 职业--]]
	return msg
end

function MsgDef.Msg1010201:encode(sm)
	sm:writeString(self.roleName);
	sm:writeString(self.roleKey);
	sm:writeInt32(self.roleSex);
	sm:writeInt32(self.career);
	return self
end

function MsgDef.Msg1010201:decode(sm)
	self.roleName = sm:readString();
	self.roleKey = sm:readString();
	self.roleSex = sm:readInt32();
	self.career = sm:readInt32();
	return self
end

function MsgDef.Msg1010201:opcode()
	return 1010201
end

--[[ 请求创建角色(返回)--]]
MsgDef.Msg5010201 = {}
function MsgDef.Msg5010201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.loginSign = "" --[[(string) --]]
	msg.roleIdStr = "" --[[(string) --]]
	msg.createTime = 0 --[[(int32) 创建时间--]]
	return msg
end

function MsgDef.Msg5010201:encode(sm)
	sm:writeString(self.loginSign);
	sm:writeString(self.roleIdStr);
	sm:writeInt32(self.createTime);
	return self
end

function MsgDef.Msg5010201:decode(sm)
	self.loginSign = sm:readString();
	self.roleIdStr = sm:readString();
	self.createTime = sm:readInt32();
	return self
end


function MsgDef.Msg5010201:opcode()
	return 5010201
end
--[[ 心跳包--]]
MsgDef.Msg1010901 = {}

function MsgDef.Msg1010901:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.oneTime == nil then msg.oneTime = 0 end --[[(int32) 计算ping值使用--]]
	return msg
end

function MsgDef.Msg1010901:encode(sm)
	sm:writeInt32(self.oneTime);
	return self
end

function MsgDef.Msg1010901:decode(sm)
	self.oneTime = sm:readInt32();
	return self
end

function MsgDef.Msg1010901:opcode()
	return 1010901
end

--[[ 心跳包(返回)--]]
MsgDef.Msg5010901 = {}
function MsgDef.Msg5010901:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.serverTime = 0 --[[(int32) 服务器时间--]]
	msg.oneTime = 0 --[[(int32) 客户端服的返回--]]
	return msg
end

function MsgDef.Msg5010901:encode(sm)
	sm:writeInt32(self.serverTime);
	sm:writeInt32(self.oneTime);
	return self
end

function MsgDef.Msg5010901:decode(sm)
	self.serverTime = sm:readInt32();
	self.oneTime = sm:readInt32();
	return self
end


function MsgDef.Msg5010901:opcode()
	return 5010901
end
--[[ 测试命令消息--]]
MsgDef.Msg1019901 = {}

function MsgDef.Msg1019901:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cmdStr == nil then msg.cmdStr = "" end --[[(string) 命令行--]]
	return msg
end

function MsgDef.Msg1019901:encode(sm)
	sm:writeString(self.cmdStr);
	return self
end

function MsgDef.Msg1019901:decode(sm)
	self.cmdStr = sm:readString();
	return self
end

function MsgDef.Msg1019901:opcode()
	return 1019901
end

--[[ 测试命令消息(返回)--]]
MsgDef.Msg5019901 = {}
function MsgDef.Msg5019901:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.resultStr = "" --[[(string) 命令行结果--]]
	return msg
end

function MsgDef.Msg5019901:encode(sm)
	sm:writeString(self.resultStr);
	return self
end

function MsgDef.Msg5019901:decode(sm)
	self.resultStr = sm:readString();
	return self
end


function MsgDef.Msg5019901:opcode()
	return 5019901
end
--[[ Int64位测试--]]
MsgDef.Msg1019902 = {}

function MsgDef.Msg1019902:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.test1 == nil then msg.test1 = 0 end --[[(int32) --]]
	if msg.test2 == nil then msg.test2 = 0 end --[[(int64) --]]
	if msg.test3 == nil then msg.test3 = 0 end --[[(int16) --]]
	return msg
end

function MsgDef.Msg1019902:encode(sm)
	sm:writeInt32(self.test1);
	sm:writeInt64(self.test2);
	sm:writeInt16(self.test3);
	return self
end

function MsgDef.Msg1019902:decode(sm)
	self.test1 = sm:readInt32();
	self.test2 = sm:readInt64();
	self.test3 = sm:readInt16();
	return self
end

function MsgDef.Msg1019902:opcode()
	return 1019902
end

--[[ Int64位测试(返回)--]]
MsgDef.Msg5019902 = {}
function MsgDef.Msg5019902:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.test1 = 0 --[[(int32) --]]
	msg.test2 = 0 --[[(int64) --]]
	msg.test3 = 0 --[[(int16) --]]
	return msg
end

function MsgDef.Msg5019902:encode(sm)
	sm:writeInt32(self.test1);
	sm:writeInt64(self.test2);
	sm:writeInt16(self.test3);
	return self
end

function MsgDef.Msg5019902:decode(sm)
	self.test1 = sm:readInt32();
	self.test2 = sm:readInt64();
	self.test3 = sm:readInt16();
	return self
end


function MsgDef.Msg5019902:opcode()
	return 5019902
end
--[[ 测试消息3--]]
MsgDef.Msg1019903 = {}

function MsgDef.Msg1019903:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1019903:encode(sm)
	return self
end

function MsgDef.Msg1019903:decode(sm)
	return self
end

function MsgDef.Msg1019903:opcode()
	return 1019903
end

--[[ 测试消息3(返回)--]]
MsgDef.Msg5019903 = {}
function MsgDef.Msg5019903:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.list = {} --[[(array<int32>) --]]
	return msg
end

function MsgDef.Msg5019903:encode(sm)
	sm:writeInt16(get_map_size(self.list))
	for i,elm in ipairs(self.list) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5019903:decode(sm)
	local list_size = sm:readInt16()
	for i = 1,list_size do
		local ele = sm:readInt32();
		table.insert(self.list, ele)
	end
	return self
end


function MsgDef.Msg5019903:opcode()
	return 5019903
end
--[[ 请求切换场景--]]
MsgDef.Msg1020101 = {}

function MsgDef.Msg1020101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景Id--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.type == nil then msg.type = 0 end --[[(int16) 类型（1传送阵,2小飞鞋,3异空间,4结婚传送 5双修传送）--]]
	if msg.ext01 == nil then msg.ext01 = 0 end --[[(int32) 扩展参数1（type=1,传送阵Id）--]]
	return msg
end

function MsgDef.Msg1020101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(self.type);
	sm:writeInt32(self.ext01);
	return self
end

function MsgDef.Msg1020101:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.type = sm:readInt16();
	self.ext01 = sm:readInt32();
	return self
end

function MsgDef.Msg1020101:opcode()
	return 1020101
end

--[[ 请求切换场景(返回)--]]
MsgDef.Msg5020101 = {}
function MsgDef.Msg5020101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020101:encode(sm)
	return self
end

function MsgDef.Msg5020101:decode(sm)
	return self
end


function MsgDef.Msg5020101:opcode()
	return 5020101
end
--[[ 请求加载场景完成--]]
MsgDef.Msg1020102 = {}

function MsgDef.Msg1020102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.width == nil then msg.width = 0 end --[[(int16) 屏幕宽度--]]
	if msg.height == nil then msg.height = 0 end --[[(int16) 屏幕高度--]]
	return msg
end

function MsgDef.Msg1020102:encode(sm)
	sm:writeInt16(self.width);
	sm:writeInt16(self.height);
	return self
end

function MsgDef.Msg1020102:decode(sm)
	self.width = sm:readInt16();
	self.height = sm:readInt16();
	return self
end

function MsgDef.Msg1020102:opcode()
	return 1020102
end

--[[ 请求加载场景完成(返回)--]]
MsgDef.Msg5020102 = {}
function MsgDef.Msg5020102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020102:encode(sm)
	return self
end

function MsgDef.Msg5020102:decode(sm)
	return self
end


function MsgDef.Msg5020102:opcode()
	return 5020102
end
--[[ 请求退出异空间场景--]]
MsgDef.Msg1020103 = {}

function MsgDef.Msg1020103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	return msg
end

function MsgDef.Msg1020103:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1020103:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1020103:opcode()
	return 1020103
end

--[[ 请求退出异空间场景(返回)--]]
MsgDef.Msg5020103 = {}
function MsgDef.Msg5020103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020103:encode(sm)
	return self
end

function MsgDef.Msg5020103:decode(sm)
	return self
end


function MsgDef.Msg5020103:opcode()
	return 5020103
end
--[[ 请求切换副本关卡--]]
MsgDef.Msg1020104 = {}

function MsgDef.Msg1020104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	return msg
end

function MsgDef.Msg1020104:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1020104:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1020104:opcode()
	return 1020104
end

--[[ 请求切换副本关卡(返回)--]]
MsgDef.Msg5020104 = {}
function MsgDef.Msg5020104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020104:encode(sm)
	return self
end

function MsgDef.Msg5020104:decode(sm)
	return self
end


function MsgDef.Msg5020104:opcode()
	return 5020104
end
--[[ 请求复活--]]
MsgDef.Msg1020105 = {}

function MsgDef.Msg1020105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reviveType == nil then msg.reviveType = 0 end --[[(int32) 复活类型1-原地复活2-自动购买原地复活3-复活点复活--]]
	return msg
end

function MsgDef.Msg1020105:encode(sm)
	sm:writeInt32(self.reviveType);
	return self
end

function MsgDef.Msg1020105:decode(sm)
	self.reviveType = sm:readInt32();
	return self
end

function MsgDef.Msg1020105:opcode()
	return 1020105
end

--[[ 请求复活(返回)--]]
MsgDef.Msg5020105 = {}
function MsgDef.Msg5020105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020105:encode(sm)
	return self
end

function MsgDef.Msg5020105:decode(sm)
	return self
end


function MsgDef.Msg5020105:opcode()
	return 5020105
end
--[[ 请求修改pk模式--]]
MsgDef.Msg1020106 = {}

function MsgDef.Msg1020106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pkState == nil then msg.pkState = 0 end --[[(int32) 0-和平,1-杀戮,2-帮派,3-跨服--]]
	return msg
end

function MsgDef.Msg1020106:encode(sm)
	sm:writeInt32(self.pkState);
	return self
end

function MsgDef.Msg1020106:decode(sm)
	self.pkState = sm:readInt32();
	return self
end

function MsgDef.Msg1020106:opcode()
	return 1020106
end

--[[ 请求修改pk模式(返回)--]]
MsgDef.Msg5020106 = {}
function MsgDef.Msg5020106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020106:encode(sm)
	return self
end

function MsgDef.Msg5020106:decode(sm)
	return self
end


function MsgDef.Msg5020106:opcode()
	return 5020106
end
--[[ 请求潜能加点&洗髓--]]
MsgDef.Msg1020201 = {}

function MsgDef.Msg1020201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =1加点=2洗髓--]]
	if msg.list == nil then msg.list = {} end --[[(array<int32>) 对应三个项目的加点值--]]
	return msg
end

function MsgDef.Msg1020201:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.list))
	for i,elm in ipairs(self.list) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1020201:decode(sm)
	self.opType = sm:readInt8();
	local list_size = sm:readInt16()
	for i = 1,list_size do
		local elm = sm:readInt32();
		table.insert(self.list, elm)
	end
	return self
end

function MsgDef.Msg1020201:opcode()
	return 1020201
end

--[[ 请求潜能加点&洗髓(返回)--]]
MsgDef.Msg5020201 = {}
function MsgDef.Msg5020201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.opType = 0 --[[(int8) 操作类型--]]
	msg.potMap = {} --[[(map<int32,int32>) 已经加了的潜能点map--]]
	msg.pot = 0 --[[(int32) 当前的潜能点--]]
	return msg
end

function MsgDef.Msg5020201:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.potMap))
	for kn,elm in ipairs(self.potMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.pot);
	return self
end

function MsgDef.Msg5020201:decode(sm)
	self.opType = sm:readInt8();
	local potMap_size = sm:readInt16()
	for i = 1,potMap_size do
		local kv = sm:readInt32();
		self.potMap[kv] = sm:readInt32();
	end
	self.pot = sm:readInt32();
	return self
end


function MsgDef.Msg5020201:opcode()
	return 5020201
end
--[[ 请求头像列表--]]
MsgDef.Msg1020202 = {}

function MsgDef.Msg1020202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020202:encode(sm)
	return self
end

function MsgDef.Msg1020202:decode(sm)
	return self
end

function MsgDef.Msg1020202:opcode()
	return 1020202
end

--[[ 请求头像列表(返回)--]]
MsgDef.Msg5020202 = {}
function MsgDef.Msg5020202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.headImgs = {} --[[(array<HeadInfo>) 头像列表--]]
	return msg
end

function MsgDef.Msg5020202:encode(sm)
	sm:writeInt16(#self.headImgs)
	for i,elm in ipairs(self.headImgs) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5020202:decode(sm)
	local headImgs_size = sm:readInt16()
	for i = 1,headImgs_size do
		local element = MsgDef.HeadInfo:create():decode(sm)
		table.insert(self.headImgs, element)
	end
	return self
end


function MsgDef.Msg5020202:opcode()
	return 5020202
end
--[[ 请求头像穿戴--]]
MsgDef.Msg1020203 = {}

function MsgDef.Msg1020203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.headImgId == nil then msg.headImgId = 0 end --[[(int32) 头像配置id--]]
	return msg
end

function MsgDef.Msg1020203:encode(sm)
	sm:writeInt32(self.headImgId);
	return self
end

function MsgDef.Msg1020203:decode(sm)
	self.headImgId = sm:readInt32();
	return self
end

function MsgDef.Msg1020203:opcode()
	return 1020203
end

--[[ 请求头像穿戴(返回)--]]
MsgDef.Msg5020203 = {}
function MsgDef.Msg5020203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.headImgId = 0 --[[(int32) 头像配置id--]]
	return msg
end

function MsgDef.Msg5020203:encode(sm)
	sm:writeInt32(self.headImgId);
	return self
end

function MsgDef.Msg5020203:decode(sm)
	self.headImgId = sm:readInt32();
	return self
end


function MsgDef.Msg5020203:opcode()
	return 5020203
end
--[[ 请求人物换名--]]
MsgDef.Msg1020204 = {}

function MsgDef.Msg1020204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:改名信息;1:次数改名;2:道具改名;3:帮派改名--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 背包下标--]]
	return msg
end

function MsgDef.Msg1020204:encode(sm)
	sm:writeString(self.name);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1020204:decode(sm)
	self.name = sm:readString();
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1020204:opcode()
	return 1020204
end

--[[ 请求人物换名(返回)--]]
MsgDef.Msg5020204 = {}
function MsgDef.Msg5020204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.name = "" --[[(string) 名字--]]
	msg.index = 0 --[[(int32) 背包下标--]]
	msg.reqType = 0 --[[(int8) 0:改名信息;1:次数改名;2:道具改名--]]
	msg.leftFreeCount = 0 --[[(int8) 剩余免费改名次数--]]
	msg.changeNameCount = 0 --[[(int32) 扣元宝改名次数--]]
	msg.leftMergeFreeCount = 0 --[[(int32) 剩余合服免费改名次数--]]
	msg.leftGangMergeFreeCount = 0 --[[(int32) 剩余帮派合服免费改名次数--]]
	return msg
end

function MsgDef.Msg5020204:encode(sm)
	sm:writeString(self.name);
	sm:writeInt32(self.index);
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.leftFreeCount);
	sm:writeInt32(self.changeNameCount);
	sm:writeInt32(self.leftMergeFreeCount);
	sm:writeInt32(self.leftGangMergeFreeCount);
	return self
end

function MsgDef.Msg5020204:decode(sm)
	self.name = sm:readString();
	self.index = sm:readInt32();
	self.reqType = sm:readInt8();
	self.leftFreeCount = sm:readInt8();
	self.changeNameCount = sm:readInt32();
	self.leftMergeFreeCount = sm:readInt32();
	self.leftGangMergeFreeCount = sm:readInt32();
	return self
end


function MsgDef.Msg5020204:opcode()
	return 5020204
end
--[[ 请求人物信息--]]
MsgDef.Msg1020205 = {}

function MsgDef.Msg1020205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 服务器id =0 表示自己的服务器--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg1020205:encode(sm)
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1020205:decode(sm)
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1020205:opcode()
	return 1020205
end

--[[ 请求人物信息(返回)--]]
MsgDef.Msg5020205 = {}
function MsgDef.Msg5020205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.svrId = 0 --[[(int32) 服务器id =0 表示自己的服务器--]]
	msg.skinMap = {} --[[(map<int32,int32>) 皮肤id 对应模型id--]]
	msg.roleName = "" --[[(string) 玩家名字--]]
	msg.mbCount = 0 --[[(int32) 被膜拜次数--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.level = 0 --[[(int32) 等级--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.sex = 0 --[[(int8) 性别--]]
	msg.gangName = "" --[[(string) 帮派名字--]]
	msg.myDz = 0 --[[(int8) 自己是否对玩家点赞过 1 点赞过--]]
	return msg
end

function MsgDef.Msg5020205:encode(sm)
	sm:writeInt32(self.svrId);
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.roleName);
	sm:writeInt32(self.mbCount);
	sm:writeInt32(self.power);
	sm:writeInt32(self.level);
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.sex);
	sm:writeString(self.gangName);
	sm:writeInt8(self.myDz);
	return self
end

function MsgDef.Msg5020205:decode(sm)
	self.svrId = sm:readInt32();
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.roleName = sm:readString();
	self.mbCount = sm:readInt32();
	self.power = sm:readInt32();
	self.level = sm:readInt32();
	self.roleId = sm:readInt64();
	self.sex = sm:readInt8();
	self.gangName = sm:readString();
	self.myDz = sm:readInt8();
	return self
end


function MsgDef.Msg5020205:opcode()
	return 5020205
end
--[[ 请求场景人物操作信息--]]
MsgDef.Msg1020206 = {}

function MsgDef.Msg1020206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标人物id--]]
	return msg
end

function MsgDef.Msg1020206:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1020206:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1020206:opcode()
	return 1020206
end

--[[ 请求场景人物操作信息(返回)--]]
MsgDef.Msg5020206 = {}
function MsgDef.Msg5020206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标人物id--]]
	msg.userInfo = MsgDef.UseOptInfo:create() --[[(UseOptInfo) 用户信息--]]
	return msg
end

function MsgDef.Msg5020206:encode(sm)
	sm:writeInt64(self.tarRoleId);
	self.userInfo:encode(sm)
	return self
end

function MsgDef.Msg5020206:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.userInfo:decode(sm)
	return self
end


function MsgDef.Msg5020206:opcode()
	return 5020206
end
--[[ 请求使用小飞鞋--]]
MsgDef.Msg1020207 = {}

function MsgDef.Msg1020207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020207:encode(sm)
	return self
end

function MsgDef.Msg1020207:decode(sm)
	return self
end

function MsgDef.Msg1020207:opcode()
	return 1020207
end

--[[ 请求使用小飞鞋(返回)--]]
MsgDef.Msg5020207 = {}
function MsgDef.Msg5020207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) =1成功--]]
	msg.leftFlyCount = 0 --[[(int32) 剩余次数--]]
	return msg
end

function MsgDef.Msg5020207:encode(sm)
	sm:writeInt8(self.suc);
	sm:writeInt32(self.leftFlyCount);
	return self
end

function MsgDef.Msg5020207:decode(sm)
	self.suc = sm:readInt8();
	self.leftFlyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5020207:opcode()
	return 5020207
end
--[[ 请求我要变强各系统战力--]]
MsgDef.Msg1020301 = {}

function MsgDef.Msg1020301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020301:encode(sm)
	return self
end

function MsgDef.Msg1020301:decode(sm)
	return self
end

function MsgDef.Msg1020301:opcode()
	return 1020301
end

--[[ 请求我要变强各系统战力(返回)--]]
MsgDef.Msg5020301 = {}
function MsgDef.Msg5020301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.modulePowerMap = {} --[[(map<int32,int32>) 模块系统战力<模块,战力>--]]
	return msg
end

function MsgDef.Msg5020301:encode(sm)
	sm:writeInt16(get_map_size(self.modulePowerMap))
	for kn,elm in ipairs(self.modulePowerMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5020301:decode(sm)
	local modulePowerMap_size = sm:readInt16()
	for i = 1,modulePowerMap_size do
		local kv = sm:readInt32();
		self.modulePowerMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5020301:opcode()
	return 5020301
end
--[[ 请求成长系统阶级--]]
MsgDef.Msg1020302 = {}

function MsgDef.Msg1020302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.modelId == nil then msg.modelId = 0 end --[[(int32) 模块id--]]
	return msg
end

function MsgDef.Msg1020302:encode(sm)
	sm:writeInt32(self.modelId);
	return self
end

function MsgDef.Msg1020302:decode(sm)
	self.modelId = sm:readInt32();
	return self
end

function MsgDef.Msg1020302:opcode()
	return 1020302
end

--[[ 请求成长系统阶级(返回)--]]
MsgDef.Msg5020302 = {}
function MsgDef.Msg5020302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.modelId = 0 --[[(int32) 模块id--]]
	msg.step = 0 --[[(int32) 阶--]]
	msg.canUp = 0 --[[(int8) 是否可进阶 1:可进阶--]]
	return msg
end

function MsgDef.Msg5020302:encode(sm)
	sm:writeInt32(self.modelId);
	sm:writeInt32(self.step);
	sm:writeInt8(self.canUp);
	return self
end

function MsgDef.Msg5020302:decode(sm)
	self.modelId = sm:readInt32();
	self.step = sm:readInt32();
	self.canUp = sm:readInt8();
	return self
end


function MsgDef.Msg5020302:opcode()
	return 5020302
end
--[[ 请求开始打坐--]]
MsgDef.Msg1020401 = {}

function MsgDef.Msg1020401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020401:encode(sm)
	return self
end

function MsgDef.Msg1020401:decode(sm)
	return self
end

function MsgDef.Msg1020401:opcode()
	return 1020401
end

--[[ 请求开始打坐(返回)--]]
MsgDef.Msg5020401 = {}
function MsgDef.Msg5020401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.starTime = 0 --[[(int32) 打坐开始时间--]]
	return msg
end

function MsgDef.Msg5020401:encode(sm)
	sm:writeInt32(self.starTime);
	return self
end

function MsgDef.Msg5020401:decode(sm)
	self.starTime = sm:readInt32();
	return self
end


function MsgDef.Msg5020401:opcode()
	return 5020401
end
--[[ 请求取消打坐--]]
MsgDef.Msg1020402 = {}

function MsgDef.Msg1020402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020402:encode(sm)
	return self
end

function MsgDef.Msg1020402:decode(sm)
	return self
end

function MsgDef.Msg1020402:opcode()
	return 1020402
end

--[[ 请求取消打坐(返回)--]]
MsgDef.Msg5020402 = {}
function MsgDef.Msg5020402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020402:encode(sm)
	return self
end

function MsgDef.Msg5020402:decode(sm)
	return self
end


function MsgDef.Msg5020402:opcode()
	return 5020402
end
--[[ 请求打坐经验池累加--]]
MsgDef.Msg1020403 = {}

function MsgDef.Msg1020403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020403:encode(sm)
	return self
end

function MsgDef.Msg1020403:decode(sm)
	return self
end

function MsgDef.Msg1020403:opcode()
	return 1020403
end

--[[ 请求打坐经验池累加(返回)--]]
MsgDef.Msg5020403 = {}
function MsgDef.Msg5020403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.poolExp = 0 --[[(int32) 经验池exp总值--]]
	return msg
end

function MsgDef.Msg5020403:encode(sm)
	sm:writeInt32(self.poolExp);
	return self
end

function MsgDef.Msg5020403:decode(sm)
	self.poolExp = sm:readInt32();
	return self
end


function MsgDef.Msg5020403:opcode()
	return 5020403
end
--[[ 请求开始修炼--]]
MsgDef.Msg1020411 = {}

function MsgDef.Msg1020411:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020411:encode(sm)
	return self
end

function MsgDef.Msg1020411:decode(sm)
	return self
end

function MsgDef.Msg1020411:opcode()
	return 1020411
end

--[[ 请求开始修炼(返回)--]]
MsgDef.Msg5020411 = {}
function MsgDef.Msg5020411:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 修炼开始时间--]]
	return msg
end

function MsgDef.Msg5020411:encode(sm)
	sm:writeInt32(self.startTime);
	return self
end

function MsgDef.Msg5020411:decode(sm)
	self.startTime = sm:readInt32();
	return self
end


function MsgDef.Msg5020411:opcode()
	return 5020411
end
--[[ 请求双修--]]
MsgDef.Msg1020412 = {}

function MsgDef.Msg1020412:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:邀请双修 2:停止双修 3:自动匹配 4:停止修炼 5:开始双修--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 被邀请人id--]]
	if msg.match == nil then msg.match = 0 end --[[(int8) 1:自动匹配 0:不匹配--]]
	return msg
end

function MsgDef.Msg1020412:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.match);
	return self
end

function MsgDef.Msg1020412:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.match = sm:readInt8();
	return self
end

function MsgDef.Msg1020412:opcode()
	return 1020412
end

--[[ 请求双修(返回)--]]
MsgDef.Msg5020412 = {}
function MsgDef.Msg5020412:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.match = 0 --[[(int8) 1:自动匹配 0:不匹配--]]
	return msg
end

function MsgDef.Msg5020412:encode(sm)
	sm:writeInt8(self.match);
	return self
end

function MsgDef.Msg5020412:decode(sm)
	self.match = sm:readInt8();
	return self
end


function MsgDef.Msg5020412:opcode()
	return 5020412
end
--[[ 请求双修经验池--]]
MsgDef.Msg1020413 = {}

function MsgDef.Msg1020413:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020413:encode(sm)
	return self
end

function MsgDef.Msg1020413:decode(sm)
	return self
end

function MsgDef.Msg1020413:opcode()
	return 1020413
end

--[[ 请求双修经验池(返回)--]]
MsgDef.Msg5020413 = {}
function MsgDef.Msg5020413:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.exp = 0 --[[(int32) 经验池经验--]]
	return msg
end

function MsgDef.Msg5020413:encode(sm)
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5020413:decode(sm)
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5020413:opcode()
	return 5020413
end
--[[ 请求附近单身列表--]]
MsgDef.Msg1020414 = {}

function MsgDef.Msg1020414:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:列表 2:是否自动--]]
	if msg.auto == nil then msg.auto = 0 end --[[(int8) 自动同意双修请求 1:自动 0:非自动--]]
	return msg
end

function MsgDef.Msg1020414:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.auto);
	return self
end

function MsgDef.Msg1020414:decode(sm)
	self.reqType = sm:readInt8();
	self.auto = sm:readInt8();
	return self
end

function MsgDef.Msg1020414:opcode()
	return 1020414
end

--[[ 请求附近单身列表(返回)--]]
MsgDef.Msg5020414 = {}
function MsgDef.Msg5020414:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.repairInfos = {} --[[(array<DoubleRepairInfo>) 玩家信息列表--]]
	msg.auto = 0 --[[(int8) 自动同意双修请求 1:自动--]]
	msg.match = 0 --[[(int8) 1:自动匹配 0:取消匹配--]]
	return msg
end

function MsgDef.Msg5020414:encode(sm)
	sm:writeInt16(#self.repairInfos)
	for i,elm in ipairs(self.repairInfos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.auto);
	sm:writeInt8(self.match);
	return self
end

function MsgDef.Msg5020414:decode(sm)
	local repairInfos_size = sm:readInt16()
	for i = 1,repairInfos_size do
		local element = MsgDef.DoubleRepairInfo:create():decode(sm)
		table.insert(self.repairInfos, element)
	end
	self.auto = sm:readInt8();
	self.match = sm:readInt8();
	return self
end


function MsgDef.Msg5020414:opcode()
	return 5020414
end
--[[ 请求双修回复--]]
MsgDef.Msg1020415 = {}

function MsgDef.Msg1020415:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:同意 2:拒绝--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 邀请人id--]]
	return msg
end

function MsgDef.Msg1020415:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1020415:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1020415:opcode()
	return 1020415
end

--[[ 请求双修回复(返回)--]]
MsgDef.Msg5020415 = {}
function MsgDef.Msg5020415:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pox = 0 --[[(int16) 邀请人坐标--]]
	msg.poy = 0 --[[(int16) 邀请人坐标--]]
	msg.reqType = 0 --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg5020415:encode(sm)
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5020415:decode(sm)
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5020415:opcode()
	return 5020415
end
--[[ 请求魅力温泉显示信息--]]
MsgDef.Msg1020421 = {}

function MsgDef.Msg1020421:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020421:encode(sm)
	return self
end

function MsgDef.Msg1020421:decode(sm)
	return self
end

function MsgDef.Msg1020421:opcode()
	return 1020421
end

--[[ 请求魅力温泉显示信息(返回)--]]
MsgDef.Msg5020421 = {}
function MsgDef.Msg5020421:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.sumExp = 0 --[[(int32) 累计经验--]]
	msg.curMl = 0 --[[(int32) 当前魅力值--]]
	msg.curRanking = 0 --[[(int32) 当前排名--]]
	msg.gotAwardList = {} --[[(array<int32>) 已领取魅力奖励--]]
	msg.itemCountMap = {} --[[(map<int32,int32>) 道具数量 key-> 1:小黄鸭数量 2:肥皂数量--]]
	return msg
end

function MsgDef.Msg5020421:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.sumExp);
	sm:writeInt32(self.curMl);
	sm:writeInt32(self.curRanking);
	sm:writeInt16(get_map_size(self.gotAwardList))
	for i,elm in ipairs(self.gotAwardList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.itemCountMap))
	for kn,elm in ipairs(self.itemCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5020421:decode(sm)
	self.leftTime = sm:readInt32();
	self.sumExp = sm:readInt32();
	self.curMl = sm:readInt32();
	self.curRanking = sm:readInt32();
	local gotAwardList_size = sm:readInt16()
	for i = 1,gotAwardList_size do
		local ele = sm:readInt32();
		table.insert(self.gotAwardList, ele)
	end
	local itemCountMap_size = sm:readInt16()
	for i = 1,itemCountMap_size do
		local kv = sm:readInt32();
		self.itemCountMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5020421:opcode()
	return 5020421
end
--[[ 请求魅力温泉排行--]]
MsgDef.Msg1020422 = {}

function MsgDef.Msg1020422:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页 从1开始--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:当前 2:仙盟 3:好友--]]
	return msg
end

function MsgDef.Msg1020422:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1020422:decode(sm)
	self.page = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1020422:opcode()
	return 1020422
end

--[[ 请求魅力温泉排行(返回)--]]
MsgDef.Msg5020422 = {}
function MsgDef.Msg5020422:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sumPage = 0 --[[(int32) 总页数--]]
	msg.page = 0 --[[(int32) 当前页 从1开始--]]
	msg.rankingInfos = {} --[[(array<MlwqRankInfo>) 排名信息--]]
	msg.myRank = MsgDef.MlwqRankInfo:create() --[[(MlwqRankInfo) 我的排名--]]
	msg.reqType = 0 --[[(int8) 1:当前 2:仙盟 3:好友--]]
	return msg
end

function MsgDef.Msg5020422:encode(sm)
	sm:writeInt32(self.sumPage);
	sm:writeInt32(self.page);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	self.myRank:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5020422:decode(sm)
	self.sumPage = sm:readInt32();
	self.page = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.MlwqRankInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.myRank:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5020422:opcode()
	return 5020422
end
--[[ 请求魅力温泉收送礼物--]]
MsgDef.Msg1020423 = {}

function MsgDef.Msg1020423:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:送礼 2:赠送记录 3:收到记录--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 赠送玩家roleId--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 赠送道具--]]
	return msg
end

function MsgDef.Msg1020423:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1020423:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1020423:opcode()
	return 1020423
end

--[[ 请求魅力温泉收送礼物(返回)--]]
MsgDef.Msg5020423 = {}
function MsgDef.Msg5020423:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:送礼 2:赠送记录 3:收到记录--]]
	msg.leftPresentCount = 0 --[[(int32) 剩余赠送次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.recvGiftRecords = {} --[[(array<MlwqGiftRecord>) 收到礼物记录--]]
	msg.presentGiftRecords = {} --[[(array<MlwqGiftRecord>) 赠送礼物记录--]]
	msg.cid = 0 --[[(int32) 赠送道具--]]
	return msg
end

function MsgDef.Msg5020423:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftPresentCount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.recvGiftRecords)
	for i,elm in ipairs(self.recvGiftRecords) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.presentGiftRecords)
	for i,elm in ipairs(self.presentGiftRecords) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5020423:decode(sm)
	self.reqType = sm:readInt8();
	self.leftPresentCount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local recvGiftRecords_size = sm:readInt16()
	for i = 1,recvGiftRecords_size do
		local element = MsgDef.MlwqGiftRecord:create():decode(sm)
		table.insert(self.recvGiftRecords, element)
	end
	local presentGiftRecords_size = sm:readInt16()
	for i = 1,presentGiftRecords_size do
		local element = MsgDef.MlwqGiftRecord:create():decode(sm)
		table.insert(self.presentGiftRecords, element)
	end
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5020423:opcode()
	return 5020423
end
--[[ 请求魅力温泉魅力奖励--]]
MsgDef.Msg1020424 = {}

function MsgDef.Msg1020424:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:信息 2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1020424:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1020424:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1020424:opcode()
	return 1020424
end

--[[ 请求魅力温泉魅力奖励(返回)--]]
MsgDef.Msg5020424 = {}
function MsgDef.Msg5020424:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gotAwardList = {} --[[(array<int32>) 已领取奖励信息--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	msg.reqType = 0 --[[(int8) 1:信息 2:领取--]]
	return msg
end

function MsgDef.Msg5020424:encode(sm)
	sm:writeInt16(get_map_size(self.gotAwardList))
	for i,elm in ipairs(self.gotAwardList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5020424:decode(sm)
	local gotAwardList_size = sm:readInt16()
	for i = 1,gotAwardList_size do
		local ele = sm:readInt32();
		table.insert(self.gotAwardList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5020424:opcode()
	return 5020424
end
--[[ 请求个性设置--]]
MsgDef.Msg1020501 = {}

function MsgDef.Msg1020501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:当前个性信息 1:设置个性--]]
	if msg.pId == nil then msg.pId = 0 end --[[(int32) 个性id--]]
	return msg
end

function MsgDef.Msg1020501:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.pId);
	return self
end

function MsgDef.Msg1020501:decode(sm)
	self.reqType = sm:readInt8();
	self.pId = sm:readInt32();
	return self
end

function MsgDef.Msg1020501:opcode()
	return 1020501
end

--[[ 请求个性设置(返回)--]]
MsgDef.Msg5020501 = {}
function MsgDef.Msg5020501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curPId = 0 --[[(int32) 当前个性id--]]
	return msg
end

function MsgDef.Msg5020501:encode(sm)
	sm:writeInt32(self.curPId);
	return self
end

function MsgDef.Msg5020501:decode(sm)
	self.curPId = sm:readInt32();
	return self
end


function MsgDef.Msg5020501:opcode()
	return 5020501
end
--[[ 请求10个成长系统对应的阶数--]]
MsgDef.Msg1020502 = {}

function MsgDef.Msg1020502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020502:encode(sm)
	return self
end

function MsgDef.Msg1020502:decode(sm)
	return self
end

function MsgDef.Msg1020502:opcode()
	return 1020502
end

--[[ 请求10个成长系统对应的阶数(返回)--]]
MsgDef.Msg5020502 = {}
function MsgDef.Msg5020502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.modules = {} --[[(map<int32,int32>) key:10个成长系统对应的id，value：对应的阶数--]]
	return msg
end

function MsgDef.Msg5020502:encode(sm)
	sm:writeInt16(get_map_size(self.modules))
	for kn,elm in ipairs(self.modules) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5020502:decode(sm)
	local modules_size = sm:readInt16()
	for i = 1,modules_size do
		local kv = sm:readInt32();
		self.modules[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5020502:opcode()
	return 5020502
end
--[[ 请求10个成长系统技能等级--]]
MsgDef.Msg1020503 = {}

function MsgDef.Msg1020503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020503:encode(sm)
	return self
end

function MsgDef.Msg1020503:decode(sm)
	return self
end

function MsgDef.Msg1020503:opcode()
	return 1020503
end

--[[ 请求10个成长系统技能等级(返回)--]]
MsgDef.Msg5020503 = {}
function MsgDef.Msg5020503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.modules = {} --[[(map<int32,int32>) key=模块id+技能id，value=技能等级--]]
	return msg
end

function MsgDef.Msg5020503:encode(sm)
	sm:writeInt16(get_map_size(self.modules))
	for kn,elm in ipairs(self.modules) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5020503:decode(sm)
	local modules_size = sm:readInt16()
	for i = 1,modules_size do
		local kv = sm:readInt32();
		self.modules[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5020503:opcode()
	return 5020503
end
--[[ 人物皮肤对应的星数--]]
MsgDef.Msg1020504 = {}

function MsgDef.Msg1020504:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1020504:encode(sm)
	return self
end

function MsgDef.Msg1020504:decode(sm)
	return self
end

function MsgDef.Msg1020504:opcode()
	return 1020504
end

--[[ 人物皮肤对应的星数(返回)--]]
MsgDef.Msg5020504 = {}
function MsgDef.Msg5020504:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.map = {} --[[(map<int32,int32>) key star_pre,value星数--]]
	return msg
end

function MsgDef.Msg5020504:encode(sm)
	sm:writeInt16(get_map_size(self.map))
	for kn,elm in ipairs(self.map) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5020504:decode(sm)
	local map_size = sm:readInt16()
	for i = 1,map_size do
		local kv = sm:readInt32();
		self.map[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5020504:opcode()
	return 5020504
end
--[[ 请求副本信息(通用)--]]
MsgDef.Msg1023101 = {}

function MsgDef.Msg1023101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景Id,爬塔类的固定第一个就可以了--]]
	return msg
end

function MsgDef.Msg1023101:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1023101:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1023101:opcode()
	return 1023101
end

--[[ 请求副本信息(通用)(返回)--]]
MsgDef.Msg5023101 = {}
function MsgDef.Msg5023101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡Id--]]
	msg.saodangId = 0 --[[(int32) 当前可扫荡Id--]]
	msg.todayCount = 0 --[[(int32) 今日剩余次数--]]
	msg.lastTime = 0 --[[(int32) 上一次攻打时间--]]
	return msg
end

function MsgDef.Msg5023101:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt32(self.saodangId);
	sm:writeInt32(self.todayCount);
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5023101:decode(sm)
	self.currId = sm:readInt32();
	self.saodangId = sm:readInt32();
	self.todayCount = sm:readInt32();
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5023101:opcode()
	return 5023101
end
--[[ 请求经验副本信息--]]
MsgDef.Msg1024101 = {}

function MsgDef.Msg1024101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景Id--]]
	return msg
end

function MsgDef.Msg1024101:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1024101:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1024101:opcode()
	return 1024101
end

--[[ 请求经验副本信息(返回)--]]
MsgDef.Msg5024101 = {}
function MsgDef.Msg5024101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.firstPassAwardMap = {} --[[(map<int32,int32>) 已领取的首通奖励map key-> 关卡,value->1已领取--]]
	msg.currId = 0 --[[(int32) 当前关卡Id--]]
	msg.saodangId = 0 --[[(int32) 当前可扫荡Id--]]
	msg.todayCount = 0 --[[(int32) 今日剩余次数--]]
	msg.lastTime = 0 --[[(int32) 上一次攻打时间--]]
	return msg
end

function MsgDef.Msg5024101:encode(sm)
	sm:writeInt16(get_map_size(self.firstPassAwardMap))
	for kn,elm in ipairs(self.firstPassAwardMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.currId);
	sm:writeInt32(self.saodangId);
	sm:writeInt32(self.todayCount);
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5024101:decode(sm)
	local firstPassAwardMap_size = sm:readInt16()
	for i = 1,firstPassAwardMap_size do
		local kv = sm:readInt32();
		self.firstPassAwardMap[kv] = sm:readInt32();
	end
	self.currId = sm:readInt32();
	self.saodangId = sm:readInt32();
	self.todayCount = sm:readInt32();
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5024101:opcode()
	return 5024101
end
--[[ 请求经验副本首通奖励领取--]]
MsgDef.Msg1024102 = {}

function MsgDef.Msg1024102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.passId == nil then msg.passId = 0 end --[[(int32) 关卡id--]]
	return msg
end

function MsgDef.Msg1024102:encode(sm)
	sm:writeInt32(self.passId);
	return self
end

function MsgDef.Msg1024102:decode(sm)
	self.passId = sm:readInt32();
	return self
end

function MsgDef.Msg1024102:opcode()
	return 1024102
end

--[[ 请求经验副本首通奖励领取(返回)--]]
MsgDef.Msg5024102 = {}
function MsgDef.Msg5024102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.passId = 0 --[[(int32) 关卡id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获取的道具--]]
	return msg
end

function MsgDef.Msg5024102:encode(sm)
	sm:writeInt32(self.passId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024102:decode(sm)
	self.passId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5024102:opcode()
	return 5024102
end
--[[ 请求副本条件追踪信息--]]
MsgDef.Msg1024103 = {}

function MsgDef.Msg1024103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024103:encode(sm)
	return self
end

function MsgDef.Msg1024103:decode(sm)
	return self
end

function MsgDef.Msg1024103:opcode()
	return 1024103
end

--[[ 请求副本条件追踪信息(返回)--]]
MsgDef.Msg5024103 = {}
function MsgDef.Msg5024103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.conMap = {} --[[(map<int32,int32>) 条件Map--]]
	msg.passId = 0 --[[(int32) 关卡id--]]
	msg.firstCanAwardPassId = 0 --[[(int32) 第一次能领取的关卡id--]]
	msg.firstTime = 0 --[[(int32) 第一次进入的时间--]]
	msg.isFrist = 0 --[[(int8) =1是首次--]]
	msg.sid = 0 --[[(int32) 配置id（日常任务副本使用）--]]
	msg.curBo = 0 --[[(int32) 当前波数（日常刷塔）--]]
	return msg
end

function MsgDef.Msg5024103:encode(sm)
	sm:writeInt16(get_map_size(self.conMap))
	for kn,elm in ipairs(self.conMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.passId);
	sm:writeInt32(self.firstCanAwardPassId);
	sm:writeInt32(self.firstTime);
	sm:writeInt8(self.isFrist);
	sm:writeInt32(self.sid);
	sm:writeInt32(self.curBo);
	return self
end

function MsgDef.Msg5024103:decode(sm)
	local conMap_size = sm:readInt16()
	for i = 1,conMap_size do
		local kv = sm:readInt32();
		self.conMap[kv] = sm:readInt32();
	end
	self.passId = sm:readInt32();
	self.firstCanAwardPassId = sm:readInt32();
	self.firstTime = sm:readInt32();
	self.isFrist = sm:readInt8();
	self.sid = sm:readInt32();
	self.curBo = sm:readInt32();
	return self
end


function MsgDef.Msg5024103:opcode()
	return 5024103
end
--[[ 请求经验副本扫荡--]]
MsgDef.Msg1024104 = {}

function MsgDef.Msg1024104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024104:encode(sm)
	return self
end

function MsgDef.Msg1024104:decode(sm)
	return self
end

function MsgDef.Msg1024104:opcode()
	return 1024104
end

--[[ 请求经验副本扫荡(返回)--]]
MsgDef.Msg5024104 = {}
function MsgDef.Msg5024104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡Id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	return msg
end

function MsgDef.Msg5024104:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024104:decode(sm)
	self.currId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5024104:opcode()
	return 5024104
end
--[[ 请求剧情副本信息--]]
MsgDef.Msg1024201 = {}

function MsgDef.Msg1024201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024201:encode(sm)
	return self
end

function MsgDef.Msg1024201:decode(sm)
	return self
end

function MsgDef.Msg1024201:opcode()
	return 1024201
end

--[[ 请求剧情副本信息(返回)--]]
MsgDef.Msg5024201 = {}
function MsgDef.Msg5024201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftRestTime = 0 --[[(int32) 剩余重置时间--]]
	msg.fubenIds = {} --[[(map<int32,int32>) 能打的场景--]]
	msg.maxPassfbId = 0 --[[(int32) 最大首通副本id--]]
	msg.canFbNum = 0 --[[(int32) 可以打的副本数量--]]
	msg.minPassId = 0 --[[(int32) 最小可打关卡id--]]
	return msg
end

function MsgDef.Msg5024201:encode(sm)
	sm:writeInt32(self.leftRestTime);
	sm:writeInt16(get_map_size(self.fubenIds))
	for kn,elm in ipairs(self.fubenIds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.maxPassfbId);
	sm:writeInt32(self.canFbNum);
	sm:writeInt32(self.minPassId);
	return self
end

function MsgDef.Msg5024201:decode(sm)
	self.leftRestTime = sm:readInt32();
	local fubenIds_size = sm:readInt16()
	for i = 1,fubenIds_size do
		local kv = sm:readInt32();
		self.fubenIds[kv] = sm:readInt32();
	end
	self.maxPassfbId = sm:readInt32();
	self.canFbNum = sm:readInt32();
	self.minPassId = sm:readInt32();
	return self
end


function MsgDef.Msg5024201:opcode()
	return 5024201
end
--[[ 请求剧情副本扫荡--]]
MsgDef.Msg1024202 = {}

function MsgDef.Msg1024202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024202:encode(sm)
	return self
end

function MsgDef.Msg1024202:decode(sm)
	return self
end

function MsgDef.Msg1024202:opcode()
	return 1024202
end

--[[ 请求剧情副本扫荡(返回)--]]
MsgDef.Msg5024202 = {}
function MsgDef.Msg5024202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	return msg
end

function MsgDef.Msg5024202:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024202:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5024202:opcode()
	return 5024202
end
--[[ 请求爬塔副本信息--]]
MsgDef.Msg1024301 = {}

function MsgDef.Msg1024301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024301:encode(sm)
	return self
end

function MsgDef.Msg1024301:decode(sm)
	return self
end

function MsgDef.Msg1024301:opcode()
	return 1024301
end

--[[ 请求爬塔副本信息(返回)--]]
MsgDef.Msg5024301 = {}
function MsgDef.Msg5024301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡id--]]
	msg.saodangMaxId = 0 --[[(int32) 最大扫荡id--]]
	msg.todayLeftTime = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5024301:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt32(self.saodangMaxId);
	sm:writeInt32(self.todayLeftTime);
	return self
end

function MsgDef.Msg5024301:decode(sm)
	self.currId = sm:readInt32();
	self.saodangMaxId = sm:readInt32();
	self.todayLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5024301:opcode()
	return 5024301
end
--[[ 请求爬塔扫荡--]]
MsgDef.Msg1024302 = {}

function MsgDef.Msg1024302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024302:encode(sm)
	return self
end

function MsgDef.Msg1024302:decode(sm)
	return self
end

function MsgDef.Msg1024302:opcode()
	return 1024302
end

--[[ 请求爬塔扫荡(返回)--]]
MsgDef.Msg5024302 = {}
function MsgDef.Msg5024302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5024302:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024302:decode(sm)
	self.currId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5024302:opcode()
	return 5024302
end
--[[ 请求vip副本信息--]]
MsgDef.Msg1024311 = {}

function MsgDef.Msg1024311:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024311:encode(sm)
	return self
end

function MsgDef.Msg1024311:decode(sm)
	return self
end

function MsgDef.Msg1024311:opcode()
	return 1024311
end

--[[ 请求vip副本信息(返回)--]]
MsgDef.Msg5024311 = {}
function MsgDef.Msg5024311:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.fubenIds = {} --[[(map<int32,int32>) 副本对应可攻打次数--]]
	msg.todayLeftTime = 0 --[[(int32) 今日剩余时间--]]
	msg.saodangId = 0 --[[(int32) 可扫荡id--]]
	return msg
end

function MsgDef.Msg5024311:encode(sm)
	sm:writeInt16(get_map_size(self.fubenIds))
	for kn,elm in ipairs(self.fubenIds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt32(self.saodangId);
	return self
end

function MsgDef.Msg5024311:decode(sm)
	local fubenIds_size = sm:readInt16()
	for i = 1,fubenIds_size do
		local kv = sm:readInt32();
		self.fubenIds[kv] = sm:readInt32();
	end
	self.todayLeftTime = sm:readInt32();
	self.saodangId = sm:readInt32();
	return self
end


function MsgDef.Msg5024311:opcode()
	return 5024311
end
--[[ 请求符文塔信息--]]
MsgDef.Msg1024320 = {}

function MsgDef.Msg1024320:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024320:encode(sm)
	return self
end

function MsgDef.Msg1024320:decode(sm)
	return self
end

function MsgDef.Msg1024320:opcode()
	return 1024320
end

--[[ 请求符文塔信息(返回)--]]
MsgDef.Msg5024320 = {}
function MsgDef.Msg5024320:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.curPassId = 0 --[[(int32) 当前关卡--]]
	return msg
end

function MsgDef.Msg5024320:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curPassId);
	return self
end

function MsgDef.Msg5024320:decode(sm)
	self.sceneId = sm:readInt32();
	self.curPassId = sm:readInt32();
	return self
end


function MsgDef.Msg5024320:opcode()
	return 5024320
end
--[[ 请求进阶副本信息--]]
MsgDef.Msg1024401 = {}

function MsgDef.Msg1024401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1024401:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1024401:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1024401:opcode()
	return 1024401
end

--[[ 请求进阶副本信息(返回)--]]
MsgDef.Msg5024401 = {}
function MsgDef.Msg5024401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.passStars = {} --[[(map<int32,int32>) 副本关卡对应的星级别情况--]]
	msg.todayLeftTime = 0 --[[(int32) 今日剩余时间--]]
	msg.todayResetCount = 0 --[[(int32) 今日重置次数--]]
	msg.diffCountMap = {} --[[(map<int32,int32>) 每个难度剩余攻打次数<难度->次数>--]]
	msg.redMap = {} --[[(map<int32,int32>) key->sceneId,value->红点值--]]
	return msg
end

function MsgDef.Msg5024401:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.passStars))
	for kn,elm in ipairs(self.passStars) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt32(self.todayResetCount);
	sm:writeInt16(get_map_size(self.diffCountMap))
	for kn,elm in ipairs(self.diffCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.redMap))
	for kn,elm in ipairs(self.redMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5024401:decode(sm)
	self.sceneId = sm:readInt32();
	local passStars_size = sm:readInt16()
	for i = 1,passStars_size do
		local kv = sm:readInt32();
		self.passStars[kv] = sm:readInt32();
	end
	self.todayLeftTime = sm:readInt32();
	self.todayResetCount = sm:readInt32();
	local diffCountMap_size = sm:readInt16()
	for i = 1,diffCountMap_size do
		local kv = sm:readInt32();
		self.diffCountMap[kv] = sm:readInt32();
	end
	local redMap_size = sm:readInt16()
	for i = 1,redMap_size do
		local kv = sm:readInt32();
		self.redMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5024401:opcode()
	return 5024401
end
--[[ 请求重置进阶副本--]]
MsgDef.Msg1024402 = {}

function MsgDef.Msg1024402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.diff == nil then msg.diff = 0 end --[[(int32) 难度--]]
	return msg
end

function MsgDef.Msg1024402:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.diff);
	return self
end

function MsgDef.Msg1024402:decode(sm)
	self.sceneId = sm:readInt32();
	self.diff = sm:readInt32();
	return self
end

function MsgDef.Msg1024402:opcode()
	return 1024402
end

--[[ 请求重置进阶副本(返回)--]]
MsgDef.Msg5024402 = {}
function MsgDef.Msg5024402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) sceneId--]]
	msg.resetCount = 0 --[[(int32) 今日重置次数--]]
	msg.leftCount = 0 --[[(int32) 剩余攻打次数--]]
	msg.todayResetCount = 0 --[[(int32) todayResetCount--]]
	msg.itmes = {} --[[(array<SimpleItemInfo>) 绑定元宝--]]
	msg.diff = 0 --[[(int32) 难度--]]
	return msg
end

function MsgDef.Msg5024402:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.resetCount);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.todayResetCount);
	sm:writeInt16(#self.itmes)
	for i,elm in ipairs(self.itmes) do
		elm:encode(sm)
	end
	sm:writeInt32(self.diff);
	return self
end

function MsgDef.Msg5024402:decode(sm)
	self.sceneId = sm:readInt32();
	self.resetCount = sm:readInt32();
	self.leftCount = sm:readInt32();
	self.todayResetCount = sm:readInt32();
	local itmes_size = sm:readInt16()
	for i = 1,itmes_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.itmes, element)
	end
	self.diff = sm:readInt32();
	return self
end


function MsgDef.Msg5024402:opcode()
	return 5024402
end
--[[ 请求进阶副本扫荡--]]
MsgDef.Msg1024403 = {}

function MsgDef.Msg1024403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.diff == nil then msg.diff = 0 end --[[(int32) 难度 1:简单 2:普通 3:困难--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景--]]
	if msg.ids == nil then msg.ids = {} end --[[(array<int32>) 副本id--]]
	return msg
end

function MsgDef.Msg1024403:encode(sm)
	sm:writeInt32(self.diff);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.ids))
	for i,elm in ipairs(self.ids) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1024403:decode(sm)
	self.diff = sm:readInt32();
	self.sceneId = sm:readInt32();
	local ids_size = sm:readInt16()
	for i = 1,ids_size do
		local elm = sm:readInt32();
		table.insert(self.ids, elm)
	end
	return self
end

function MsgDef.Msg1024403:opcode()
	return 1024403
end

--[[ 请求进阶副本扫荡(返回)--]]
MsgDef.Msg5024403 = {}
function MsgDef.Msg5024403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 扫荡获得道具--]]
	msg.passIds = {} --[[(array<int32>) 已通过副本id--]]
	return msg
end

function MsgDef.Msg5024403:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.passIds))
	for i,elm in ipairs(self.passIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5024403:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local passIds_size = sm:readInt16()
	for i = 1,passIds_size do
		local ele = sm:readInt32();
		table.insert(self.passIds, ele)
	end
	return self
end


function MsgDef.Msg5024403:opcode()
	return 5024403
end
--[[ 请求帮派副本信息--]]
MsgDef.Msg1024501 = {}

function MsgDef.Msg1024501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024501:encode(sm)
	return self
end

function MsgDef.Msg1024501:decode(sm)
	return self
end

function MsgDef.Msg1024501:opcode()
	return 1024501
end

--[[ 请求帮派副本信息(返回)--]]
MsgDef.Msg5024501 = {}
function MsgDef.Msg5024501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32)  当前关卡id--]]
	msg.saodangMaxId = 0 --[[(int32) 最大扫荡id--]]
	msg.todayLeftTime = 0 --[[(int32) 今日剩余时间--]]
	msg.passInfos = {} --[[(array<GangPassVo>)  当前关卡id--]]
	return msg
end

function MsgDef.Msg5024501:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt32(self.saodangMaxId);
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt16(#self.passInfos)
	for i,elm in ipairs(self.passInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024501:decode(sm)
	self.currId = sm:readInt32();
	self.saodangMaxId = sm:readInt32();
	self.todayLeftTime = sm:readInt32();
	local passInfos_size = sm:readInt16()
	for i = 1,passInfos_size do
		local element = MsgDef.GangPassVo:create():decode(sm)
		table.insert(self.passInfos, element)
	end
	return self
end


function MsgDef.Msg5024501:opcode()
	return 5024501
end
--[[ 请求帮派副本目标奖励领取--]]
MsgDef.Msg1024502 = {}

function MsgDef.Msg1024502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.passId == nil then msg.passId = 0 end --[[(int32) 关卡id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1普通领取;2一键领取--]]
	return msg
end

function MsgDef.Msg1024502:encode(sm)
	sm:writeInt32(self.passId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1024502:decode(sm)
	self.passId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1024502:opcode()
	return 1024502
end

--[[ 请求帮派副本目标奖励领取(返回)--]]
MsgDef.Msg5024502 = {}
function MsgDef.Msg5024502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.passId = 0 --[[(int32) 关卡id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取到的奖励--]]
	msg.tarAwardSign = 0 --[[(int32) 领取标识--]]
	msg.reqType = 0 --[[(int8) 1普通领取;2一键领取--]]
	return msg
end

function MsgDef.Msg5024502:encode(sm)
	sm:writeInt32(self.passId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.tarAwardSign);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5024502:decode(sm)
	self.passId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.tarAwardSign = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5024502:opcode()
	return 5024502
end
--[[ 请求帮派副本扫荡--]]
MsgDef.Msg1024503 = {}

function MsgDef.Msg1024503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1024503:encode(sm)
	return self
end

function MsgDef.Msg1024503:decode(sm)
	return self
end

function MsgDef.Msg1024503:opcode()
	return 1024503
end

--[[ 请求帮派副本扫荡(返回)--]]
MsgDef.Msg5024503 = {}
function MsgDef.Msg5024503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	return msg
end

function MsgDef.Msg5024503:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5024503:decode(sm)
	self.currId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5024503:opcode()
	return 5024503
end
--[[ 请求练级谷信息--]]
MsgDef.Msg1025101 = {}

function MsgDef.Msg1025101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1025101:encode(sm)
	return self
end

function MsgDef.Msg1025101:decode(sm)
	return self
end

function MsgDef.Msg1025101:opcode()
	return 1025101
end

--[[ 请求练级谷信息(返回)--]]
MsgDef.Msg5025101 = {}
function MsgDef.Msg5025101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 分配的场景id--]]
	msg.leftTime = 0 --[[(int32) 剩余挑战时间(秒数)--]]
	msg.dayBuyTime = 0 --[[(int32) 今日已购买时间--]]
	msg.incomeMap = {} --[[(map<int32,int32>) 收益map--]]
	msg.cost = 0 --[[(int32) 扫荡消耗元宝--]]
	return msg
end

function MsgDef.Msg5025101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.dayBuyTime);
	sm:writeInt16(get_map_size(self.incomeMap))
	for kn,elm in ipairs(self.incomeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cost);
	return self
end

function MsgDef.Msg5025101:decode(sm)
	self.sceneId = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.dayBuyTime = sm:readInt32();
	local incomeMap_size = sm:readInt16()
	for i = 1,incomeMap_size do
		local kv = sm:readInt32();
		self.incomeMap[kv] = sm:readInt32();
	end
	self.cost = sm:readInt32();
	return self
end


function MsgDef.Msg5025101:opcode()
	return 5025101
end
--[[ 请求练级谷时间购买--]]
MsgDef.Msg1025102 = {}

function MsgDef.Msg1025102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.hour == nil then msg.hour = 0 end --[[(int8) 购买的小时数--]]
	return msg
end

function MsgDef.Msg1025102:encode(sm)
	sm:writeInt8(self.hour);
	return self
end

function MsgDef.Msg1025102:decode(sm)
	self.hour = sm:readInt8();
	return self
end

function MsgDef.Msg1025102:opcode()
	return 1025102
end

--[[ 请求练级谷时间购买(返回)--]]
MsgDef.Msg5025102 = {}
function MsgDef.Msg5025102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.dayBuyTime = 0 --[[(int32) 今日已购买时间--]]
	msg.hour = 0 --[[(int8) hour--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 返回绑定元宝--]]
	return msg
end

function MsgDef.Msg5025102:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.dayBuyTime);
	sm:writeInt8(self.hour);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5025102:decode(sm)
	self.leftTime = sm:readInt32();
	self.dayBuyTime = sm:readInt32();
	self.hour = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5025102:opcode()
	return 5025102
end
--[[ 请求练级谷加成时间购买--]]
MsgDef.Msg1025103 = {}

function MsgDef.Msg1025103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.hour == nil then msg.hour = 0 end --[[(int8) 时间--]]
	return msg
end

function MsgDef.Msg1025103:encode(sm)
	sm:writeInt8(self.hour);
	return self
end

function MsgDef.Msg1025103:decode(sm)
	self.hour = sm:readInt8();
	return self
end

function MsgDef.Msg1025103:opcode()
	return 1025103
end

--[[ 请求练级谷加成时间购买(返回)--]]
MsgDef.Msg5025103 = {}
function MsgDef.Msg5025103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hour = 0 --[[(int8) 时间--]]
	msg.expPlusLeftTime = 0 --[[(int32) 1.5倍剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 返还绑定元宝--]]
	return msg
end

function MsgDef.Msg5025103:encode(sm)
	sm:writeInt8(self.hour);
	sm:writeInt32(self.expPlusLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5025103:decode(sm)
	self.hour = sm:readInt8();
	self.expPlusLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5025103:opcode()
	return 5025103
end
--[[ 请求练级谷场景信息--]]
MsgDef.Msg1025104 = {}

function MsgDef.Msg1025104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1025104:encode(sm)
	return self
end

function MsgDef.Msg1025104:decode(sm)
	return self
end

function MsgDef.Msg1025104:opcode()
	return 1025104
end

--[[ 请求练级谷场景信息(返回)--]]
MsgDef.Msg5025104 = {}
function MsgDef.Msg5025104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.expPlusLeftTime = 0 --[[(int32) 1.5倍经验加成剩余时间--]]
	msg.incomeMap = {} --[[(map<int32,int32>) 收益map,key->1经验,key->2小伙伴经验,key->3铜钱,key->itemId--]]
	return msg
end

function MsgDef.Msg5025104:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.expPlusLeftTime);
	sm:writeInt16(get_map_size(self.incomeMap))
	for kn,elm in ipairs(self.incomeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5025104:decode(sm)
	self.leftTime = sm:readInt32();
	self.expPlusLeftTime = sm:readInt32();
	local incomeMap_size = sm:readInt16()
	for i = 1,incomeMap_size do
		local kv = sm:readInt32();
		self.incomeMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5025104:opcode()
	return 5025104
end
--[[ 请求练级谷扫荡--]]
MsgDef.Msg1025105 = {}

function MsgDef.Msg1025105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.expNumList == nil then msg.expNumList = {} end --[[(array<int32>) 经验符数量列表[1.5倍数量,2倍数量,3倍数量]--]]
	return msg
end

function MsgDef.Msg1025105:encode(sm)
	sm:writeInt16(get_map_size(self.expNumList))
	for i,elm in ipairs(self.expNumList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1025105:decode(sm)
	local expNumList_size = sm:readInt16()
	for i = 1,expNumList_size do
		local elm = sm:readInt32();
		table.insert(self.expNumList, elm)
	end
	return self
end

function MsgDef.Msg1025105:opcode()
	return 1025105
end

--[[ 请求练级谷扫荡(返回)--]]
MsgDef.Msg5025105 = {}
function MsgDef.Msg5025105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 扫荡获得--]]
	return msg
end

function MsgDef.Msg5025105:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5025105:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5025105:opcode()
	return 5025105
end
--[[ 请求个人boss信息--]]
MsgDef.Msg1026101 = {}

function MsgDef.Msg1026101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1026101:encode(sm)
	return self
end

function MsgDef.Msg1026101:decode(sm)
	return self
end

function MsgDef.Msg1026101:opcode()
	return 1026101
end

--[[ 请求个人boss信息(返回)--]]
MsgDef.Msg5026101 = {}
function MsgDef.Msg5026101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dayLeftCount = 0 --[[(int32) 每日剩余挑战次数--]]
	msg.leftMap = {} --[[(map<int32,int32>) 剩余次数map--]]
	return msg
end

function MsgDef.Msg5026101:encode(sm)
	sm:writeInt32(self.dayLeftCount);
	sm:writeInt16(get_map_size(self.leftMap))
	for kn,elm in ipairs(self.leftMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5026101:decode(sm)
	self.dayLeftCount = sm:readInt32();
	local leftMap_size = sm:readInt16()
	for i = 1,leftMap_size do
		local kv = sm:readInt32();
		self.leftMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5026101:opcode()
	return 5026101
end
--[[ 请求情缘副本信息--]]
MsgDef.Msg1027101 = {}

function MsgDef.Msg1027101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027101:encode(sm)
	return self
end

function MsgDef.Msg1027101:decode(sm)
	return self
end

function MsgDef.Msg1027101:opcode()
	return 1027101
end

--[[ 请求情缘副本信息(返回)--]]
MsgDef.Msg5027101 = {}
function MsgDef.Msg5027101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftTime = 0 --[[(int32) 今日剩余时间--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.ranking = {} --[[(array<QingYuanRankInfo>) 排行榜--]]
	msg.myRankInfo = MsgDef.QingYuanRankInfo:create() --[[(QingYuanRankInfo) 我的排名信息--]]
	msg.tarSkins = {} --[[(map<int32,int32>) 对方皮肤--]]
	return msg
end

function MsgDef.Msg5027101:encode(sm)
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt32(self.leftCount);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	sm:writeInt16(get_map_size(self.tarSkins))
	for kn,elm in ipairs(self.tarSkins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5027101:decode(sm)
	self.todayLeftTime = sm:readInt32();
	self.leftCount = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.QingYuanRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	self.myRankInfo:decode(sm)
	local tarSkins_size = sm:readInt16()
	for i = 1,tarSkins_size do
		local kv = sm:readInt32();
		self.tarSkins[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5027101:opcode()
	return 5027101
end
--[[ 请求情缘副本进入挑战--]]
MsgDef.Msg1027102 = {}

function MsgDef.Msg1027102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027102:encode(sm)
	return self
end

function MsgDef.Msg1027102:decode(sm)
	return self
end

function MsgDef.Msg1027102:opcode()
	return 1027102
end

--[[ 请求情缘副本进入挑战(返回)--]]
MsgDef.Msg5027102 = {}
function MsgDef.Msg5027102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5027102:encode(sm)
	return self
end

function MsgDef.Msg5027102:decode(sm)
	return self
end


function MsgDef.Msg5027102:opcode()
	return 5027102
end
--[[ 请求情缘副本另一方同意挑战--]]
MsgDef.Msg1027103 = {}

function MsgDef.Msg1027103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg1027103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1027103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1027103:opcode()
	return 1027103
end

--[[ 请求情缘副本另一方同意挑战(返回)--]]
MsgDef.Msg5027103 = {}
function MsgDef.Msg5027103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg5027103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5027103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5027103:opcode()
	return 5027103
end
--[[ 请求情缘副本奖励领取--]]
MsgDef.Msg1027104 = {}

function MsgDef.Msg1027104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 请求类型--]]
	return msg
end

function MsgDef.Msg1027104:encode(sm)
	sm:writeInt32(self.reqType);
	return self
end

function MsgDef.Msg1027104:decode(sm)
	self.reqType = sm:readInt32();
	return self
end

function MsgDef.Msg1027104:opcode()
	return 1027104
end

--[[ 请求情缘副本奖励领取(返回)--]]
MsgDef.Msg5027104 = {}
function MsgDef.Msg5027104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 请求类型--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5027104:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5027104:decode(sm)
	self.reqType = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5027104:opcode()
	return 5027104
end
--[[ 请求情缘系统任务追踪信息--]]
MsgDef.Msg1027105 = {}

function MsgDef.Msg1027105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027105:encode(sm)
	return self
end

function MsgDef.Msg1027105:decode(sm)
	return self
end

function MsgDef.Msg1027105:opcode()
	return 1027105
end

--[[ 请求情缘系统任务追踪信息(返回)--]]
MsgDef.Msg5027105 = {}
function MsgDef.Msg5027105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.boLeftSec = 0 --[[(int32) 波倒计时--]]
	msg.killBo = 0 --[[(int32) 已击杀波--]]
	msg.createTime = 0 --[[(int32) 创建时间--]]
	return msg
end

function MsgDef.Msg5027105:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.killBo);
	sm:writeInt32(self.createTime);
	return self
end

function MsgDef.Msg5027105:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.killBo = sm:readInt32();
	self.createTime = sm:readInt32();
	return self
end


function MsgDef.Msg5027105:opcode()
	return 5027105
end
--[[ 请求铜钱副本扫荡--]]
MsgDef.Msg1027106 = {}

function MsgDef.Msg1027106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027106:encode(sm)
	return self
end

function MsgDef.Msg1027106:decode(sm)
	return self
end

function MsgDef.Msg1027106:opcode()
	return 1027106
end

--[[ 请求铜钱副本扫荡(返回)--]]
MsgDef.Msg5027106 = {}
function MsgDef.Msg5027106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡Id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获取的道具--]]
	return msg
end

function MsgDef.Msg5027106:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5027106:decode(sm)
	self.currId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5027106:opcode()
	return 5027106
end
--[[ Vip副本扫荡--]]
MsgDef.Msg1027107 = {}

function MsgDef.Msg1027107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ids == nil then msg.ids = {} end --[[(array<int32>) 副本id--]]
	return msg
end

function MsgDef.Msg1027107:encode(sm)
	sm:writeInt16(get_map_size(self.ids))
	for i,elm in ipairs(self.ids) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1027107:decode(sm)
	local ids_size = sm:readInt16()
	for i = 1,ids_size do
		local elm = sm:readInt32();
		table.insert(self.ids, elm)
	end
	return self
end

function MsgDef.Msg1027107:opcode()
	return 1027107
end

--[[ Vip副本扫荡(返回)--]]
MsgDef.Msg5027107 = {}
function MsgDef.Msg5027107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currId = 0 --[[(int32) 当前关卡Id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获取的道具--]]
	msg.passIds = {} --[[(array<int32>) 已通过副本id--]]
	return msg
end

function MsgDef.Msg5027107:encode(sm)
	sm:writeInt32(self.currId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.passIds))
	for i,elm in ipairs(self.passIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5027107:decode(sm)
	self.currId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local passIds_size = sm:readInt16()
	for i = 1,passIds_size do
		local ele = sm:readInt32();
		table.insert(self.passIds, ele)
	end
	return self
end


function MsgDef.Msg5027107:opcode()
	return 5027107
end
--[[ 请求仙域灵塔副本信息--]]
MsgDef.Msg1027201 = {}

function MsgDef.Msg1027201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027201:encode(sm)
	return self
end

function MsgDef.Msg1027201:decode(sm)
	return self
end

function MsgDef.Msg1027201:opcode()
	return 1027201
end

--[[ 请求仙域灵塔副本信息(返回)--]]
MsgDef.Msg5027201 = {}
function MsgDef.Msg5027201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	msg.ranking = {} --[[(array<XyltRankInfo>) 排行榜--]]
	msg.myRankInfo = MsgDef.XyltRankInfo:create() --[[(XyltRankInfo) 我的排名信息--]]
	msg.maxRecordBo = 0 --[[(int32) 最大记录bo数--]]
	msg.doubleCost = 0 --[[(int8) 1:合并消耗 0:正常--]]
	return msg
end

function MsgDef.Msg5027201:encode(sm)
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	sm:writeInt32(self.maxRecordBo);
	sm:writeInt8(self.doubleCost);
	return self
end

function MsgDef.Msg5027201:decode(sm)
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.XyltRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	self.myRankInfo:decode(sm)
	self.maxRecordBo = sm:readInt32();
	self.doubleCost = sm:readInt8();
	return self
end


function MsgDef.Msg5027201:opcode()
	return 5027201
end
--[[ 请求仙域灵塔次数购买--]]
MsgDef.Msg1027202 = {}

function MsgDef.Msg1027202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1027202:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1027202:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1027202:opcode()
	return 1027202
end

--[[ 请求仙域灵塔次数购买(返回)--]]
MsgDef.Msg5027202 = {}
function MsgDef.Msg5027202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 次数--]]
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) todayLeftBuyCount--]]
	return msg
end

function MsgDef.Msg5027202:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	return self
end

function MsgDef.Msg5027202:decode(sm)
	self.count = sm:readInt32();
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5027202:opcode()
	return 5027202
end
--[[ 请求仙域灵塔任务追踪信息--]]
MsgDef.Msg1027203 = {}

function MsgDef.Msg1027203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=普通1=扫荡--]]
	return msg
end

function MsgDef.Msg1027203:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1027203:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1027203:opcode()
	return 1027203
end

--[[ 请求仙域灵塔任务追踪信息(返回)--]]
MsgDef.Msg5027203 = {}
function MsgDef.Msg5027203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.boLeftSec = 0 --[[(int32) 波倒计时--]]
	msg.createTime = 0 --[[(int32) 创建时间--]]
	msg.killBo = 0 --[[(int32) 已击杀波--]]
	msg.drops = {} --[[(map<int32,int32>) 掉落--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 扫荡奖励--]]
	msg.reqType = 0 --[[(int8) 0=普通1=扫荡--]]
	return msg
end

function MsgDef.Msg5027203:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.createTime);
	sm:writeInt32(self.killBo);
	sm:writeInt16(get_map_size(self.drops))
	for kn,elm in ipairs(self.drops) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5027203:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.createTime = sm:readInt32();
	self.killBo = sm:readInt32();
	local drops_size = sm:readInt16()
	for i = 1,drops_size do
		local kv = sm:readInt32();
		self.drops[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5027203:opcode()
	return 5027203
end
--[[ 请求塔防提前结算--]]
MsgDef.Msg1027204 = {}

function MsgDef.Msg1027204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027204:encode(sm)
	return self
end

function MsgDef.Msg1027204:decode(sm)
	return self
end

function MsgDef.Msg1027204:opcode()
	return 1027204
end

--[[ 请求塔防提前结算(返回)--]]
MsgDef.Msg5027204 = {}
function MsgDef.Msg5027204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5027204:encode(sm)
	return self
end

function MsgDef.Msg5027204:decode(sm)
	return self
end


function MsgDef.Msg5027204:opcode()
	return 5027204
end
--[[ 请求仙域灵塔设置--]]
MsgDef.Msg1027205 = {}

function MsgDef.Msg1027205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:设定合并消耗--]]
	return msg
end

function MsgDef.Msg1027205:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1027205:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1027205:opcode()
	return 1027205
end

--[[ 请求仙域灵塔设置(返回)--]]
MsgDef.Msg5027205 = {}
function MsgDef.Msg5027205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:设定合并消耗--]]
	msg.doubleCost = 0 --[[(int8) 1:合并消耗 0:正常--]]
	return msg
end

function MsgDef.Msg5027205:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.doubleCost);
	return self
end

function MsgDef.Msg5027205:decode(sm)
	self.reqType = sm:readInt8();
	self.doubleCost = sm:readInt8();
	return self
end


function MsgDef.Msg5027205:opcode()
	return 5027205
end
--[[ 请求秘境修炼副本信息--]]
MsgDef.Msg1027301 = {}

function MsgDef.Msg1027301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027301:encode(sm)
	return self
end

function MsgDef.Msg1027301:decode(sm)
	return self
end

function MsgDef.Msg1027301:opcode()
	return 1027301
end

--[[ 请求秘境修炼副本信息(返回)--]]
MsgDef.Msg5027301 = {}
function MsgDef.Msg5027301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftCount = 0 --[[(int32) 剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 剩余购买次数--]]
	msg.ranking = {} --[[(array<XyltRankInfo>) 排行榜--]]
	msg.myRankInfo = MsgDef.XyltRankInfo:create() --[[(XyltRankInfo) 我的排行--]]
	msg.leftCd = 0 --[[(int32) 冷却cd(秒数)--]]
	return msg
end

function MsgDef.Msg5027301:encode(sm)
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	sm:writeInt32(self.leftCd);
	return self
end

function MsgDef.Msg5027301:decode(sm)
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.XyltRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	self.myRankInfo:decode(sm)
	self.leftCd = sm:readInt32();
	return self
end


function MsgDef.Msg5027301:opcode()
	return 5027301
end
--[[ 请求秘境修炼次数购买--]]
MsgDef.Msg1027302 = {}

function MsgDef.Msg1027302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1027302:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1027302:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1027302:opcode()
	return 1027302
end

--[[ 请求秘境修炼次数购买(返回)--]]
MsgDef.Msg5027302 = {}
function MsgDef.Msg5027302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	msg.count = 0 --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg5027302:encode(sm)
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg5027302:decode(sm)
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	self.count = sm:readInt32();
	return self
end


function MsgDef.Msg5027302:opcode()
	return 5027302
end
--[[ 请求秘境修炼任务追踪信息--]]
MsgDef.Msg1027303 = {}

function MsgDef.Msg1027303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027303:encode(sm)
	return self
end

function MsgDef.Msg1027303:decode(sm)
	return self
end

function MsgDef.Msg1027303:opcode()
	return 1027303
end

--[[ 请求秘境修炼任务追踪信息(返回)--]]
MsgDef.Msg5027303 = {}
function MsgDef.Msg5027303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.exp = 0 --[[(int32) 经验获得--]]
	msg.atkAdd = 0 --[[(int32) 利刃伤害加成--]]
	msg.expDrup = 0 --[[(int32) 经验药水加成--]]
	msg.curPassId = 0 --[[(int32) 关卡id--]]
	msg.firstInTime = 0 --[[(int32) 首次进入时间--]]
	msg.dieNum = 0 --[[(int32) 杀怪数量--]]
	msg.isDouble = 0 --[[(int8) 是否双倍 1:双倍--]]
	return msg
end

function MsgDef.Msg5027303:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.atkAdd);
	sm:writeInt32(self.expDrup);
	sm:writeInt32(self.curPassId);
	sm:writeInt32(self.firstInTime);
	sm:writeInt32(self.dieNum);
	sm:writeInt8(self.isDouble);
	return self
end

function MsgDef.Msg5027303:decode(sm)
	self.curBo = sm:readInt32();
	self.exp = sm:readInt32();
	self.atkAdd = sm:readInt32();
	self.expDrup = sm:readInt32();
	self.curPassId = sm:readInt32();
	self.firstInTime = sm:readInt32();
	self.dieNum = sm:readInt32();
	self.isDouble = sm:readInt8();
	return self
end


function MsgDef.Msg5027303:opcode()
	return 5027303
end
--[[ 请求秘境修炼buff加成购买--]]
MsgDef.Msg1027304 = {}

function MsgDef.Msg1027304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.buyType == nil then msg.buyType = 0 end --[[(int8) 购买类型 1:利刃 2:经验药水 0:购买信息--]]
	if msg.buyLevel == nil then msg.buyLevel = 0 end --[[(int8) 购买档次1:铜钱 2:元宝--]]
	return msg
end

function MsgDef.Msg1027304:encode(sm)
	sm:writeInt8(self.buyType);
	sm:writeInt8(self.buyLevel);
	return self
end

function MsgDef.Msg1027304:decode(sm)
	self.buyType = sm:readInt8();
	self.buyLevel = sm:readInt8();
	return self
end

function MsgDef.Msg1027304:opcode()
	return 1027304
end

--[[ 请求秘境修炼buff加成购买(返回)--]]
MsgDef.Msg5027304 = {}
function MsgDef.Msg5027304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buyType = 0 --[[(int8) 购买类型 1:利刃 2:经验药水0:购买信息--]]
	msg.buyLevel = 0 --[[(int8) 购买档次1:铜钱 2:元宝--]]
	msg.atkAdd = 0 --[[(int32) 利刃加成--]]
	msg.expDrug = 0 --[[(int32) 经验加成--]]
	msg.buyTimesMap = {} --[[(map<int32,int32>) 利刃购买次数<档次，次数>--]]
	return msg
end

function MsgDef.Msg5027304:encode(sm)
	sm:writeInt8(self.buyType);
	sm:writeInt8(self.buyLevel);
	sm:writeInt32(self.atkAdd);
	sm:writeInt32(self.expDrug);
	sm:writeInt16(get_map_size(self.buyTimesMap))
	for kn,elm in ipairs(self.buyTimesMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5027304:decode(sm)
	self.buyType = sm:readInt8();
	self.buyLevel = sm:readInt8();
	self.atkAdd = sm:readInt32();
	self.expDrug = sm:readInt32();
	local buyTimesMap_size = sm:readInt16()
	for i = 1,buyTimesMap_size do
		local kv = sm:readInt32();
		self.buyTimesMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5027304:opcode()
	return 5027304
end
--[[ 请求组队副本挑战--]]
MsgDef.Msg1027305 = {}

function MsgDef.Msg1027305:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:发起挑战 2:同意 3:拒绝--]]
	return msg
end

function MsgDef.Msg1027305:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1027305:decode(sm)
	self.sceneId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1027305:opcode()
	return 1027305
end

--[[ 请求组队副本挑战(返回)--]]
MsgDef.Msg5027305 = {}
function MsgDef.Msg5027305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) sceneId--]]
	msg.reqType = 0 --[[(int8) 1:发起挑战 2:同意 3:拒绝--]]
	return msg
end

function MsgDef.Msg5027305:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5027305:decode(sm)
	self.sceneId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5027305:opcode()
	return 5027305
end
--[[ 请求幻境镇妖副本次数购买--]]
MsgDef.Msg1027306 = {}

function MsgDef.Msg1027306:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int8) 次数--]]
	return msg
end

function MsgDef.Msg1027306:encode(sm)
	sm:writeInt8(self.count);
	return self
end

function MsgDef.Msg1027306:decode(sm)
	self.count = sm:readInt8();
	return self
end

function MsgDef.Msg1027306:opcode()
	return 1027306
end

--[[ 请求幻境镇妖副本次数购买(返回)--]]
MsgDef.Msg5027306 = {}
function MsgDef.Msg5027306:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int8) 次数--]]
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	return msg
end

function MsgDef.Msg5027306:encode(sm)
	sm:writeInt8(self.count);
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	return self
end

function MsgDef.Msg5027306:decode(sm)
	self.count = sm:readInt8();
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5027306:opcode()
	return 5027306
end
--[[ 请求幻境镇妖buff加成购买--]]
MsgDef.Msg1027307 = {}

function MsgDef.Msg1027307:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.buyType == nil then msg.buyType = 0 end --[[(int8) 购买类型 1:利刃 2:经验药水 0:购买信息--]]
	if msg.buyLevel == nil then msg.buyLevel = 0 end --[[(int8) 购买档次1:铜钱 2:元宝--]]
	return msg
end

function MsgDef.Msg1027307:encode(sm)
	sm:writeInt8(self.buyType);
	sm:writeInt8(self.buyLevel);
	return self
end

function MsgDef.Msg1027307:decode(sm)
	self.buyType = sm:readInt8();
	self.buyLevel = sm:readInt8();
	return self
end

function MsgDef.Msg1027307:opcode()
	return 1027307
end

--[[ 请求幻境镇妖buff加成购买(返回)--]]
MsgDef.Msg5027307 = {}
function MsgDef.Msg5027307:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buyType = 0 --[[(int8) 购买类型 1:利刃 2:经验药水0:购买信息--]]
	msg.buyLevel = 0 --[[(int8) 购买档次1:铜钱 2:元宝--]]
	msg.atkAdd = 0 --[[(int32) 利刃加成--]]
	msg.expDrug = 0 --[[(int32) 经验加成--]]
	msg.buyTimesMap = {} --[[(map<int32,int32>) 购买次数<档次，次数>--]]
	return msg
end

function MsgDef.Msg5027307:encode(sm)
	sm:writeInt8(self.buyType);
	sm:writeInt8(self.buyLevel);
	sm:writeInt32(self.atkAdd);
	sm:writeInt32(self.expDrug);
	sm:writeInt16(get_map_size(self.buyTimesMap))
	for kn,elm in ipairs(self.buyTimesMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5027307:decode(sm)
	self.buyType = sm:readInt8();
	self.buyLevel = sm:readInt8();
	self.atkAdd = sm:readInt32();
	self.expDrug = sm:readInt32();
	local buyTimesMap_size = sm:readInt16()
	for i = 1,buyTimesMap_size do
		local kv = sm:readInt32();
		self.buyTimesMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5027307:opcode()
	return 5027307
end
--[[ 请求幻境镇妖副本追踪信息--]]
MsgDef.Msg1027308 = {}

function MsgDef.Msg1027308:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027308:encode(sm)
	return self
end

function MsgDef.Msg1027308:decode(sm)
	return self
end

function MsgDef.Msg1027308:opcode()
	return 1027308
end

--[[ 请求幻境镇妖副本追踪信息(返回)--]]
MsgDef.Msg5027308 = {}
function MsgDef.Msg5027308:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.exp = 0 --[[(int32) 经验获得--]]
	msg.atkAdd = 0 --[[(int32) 利刃伤害加成--]]
	msg.expDrup = 0 --[[(int32) 经验药水加成--]]
	msg.firstInTime = 0 --[[(int32) 首次进入时间--]]
	msg.curPassId = 0 --[[(int32) 关卡id--]]
	msg.dieNum = 0 --[[(int32) 杀怪数量--]]
	return msg
end

function MsgDef.Msg5027308:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.atkAdd);
	sm:writeInt32(self.expDrup);
	sm:writeInt32(self.firstInTime);
	sm:writeInt32(self.curPassId);
	sm:writeInt32(self.dieNum);
	return self
end

function MsgDef.Msg5027308:decode(sm)
	self.curBo = sm:readInt32();
	self.exp = sm:readInt32();
	self.atkAdd = sm:readInt32();
	self.expDrup = sm:readInt32();
	self.firstInTime = sm:readInt32();
	self.curPassId = sm:readInt32();
	self.dieNum = sm:readInt32();
	return self
end


function MsgDef.Msg5027308:opcode()
	return 5027308
end
--[[ 请求幻境镇妖副本信息--]]
MsgDef.Msg1027309 = {}

function MsgDef.Msg1027309:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027309:encode(sm)
	return self
end

function MsgDef.Msg1027309:decode(sm)
	return self
end

function MsgDef.Msg1027309:opcode()
	return 1027309
end

--[[ 请求幻境镇妖副本信息(返回)--]]
MsgDef.Msg5027309 = {}
function MsgDef.Msg5027309:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	msg.ranking = {} --[[(array<HjzyRankInfo>) 排行榜--]]
	msg.myRankInfo = MsgDef.HjzyRankInfo:create() --[[(HjzyRankInfo) 我的排名信息--]]
	return msg
end

function MsgDef.Msg5027309:encode(sm)
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	return self
end

function MsgDef.Msg5027309:decode(sm)
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.HjzyRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	self.myRankInfo:decode(sm)
	return self
end


function MsgDef.Msg5027309:opcode()
	return 5027309
end
--[[ 请求秘境修炼移除冷却时间--]]
MsgDef.Msg1027310 = {}

function MsgDef.Msg1027310:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027310:encode(sm)
	return self
end

function MsgDef.Msg1027310:decode(sm)
	return self
end

function MsgDef.Msg1027310:opcode()
	return 1027310
end

--[[ 请求秘境修炼移除冷却时间(返回)--]]
MsgDef.Msg5027310 = {}
function MsgDef.Msg5027310:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5027310:encode(sm)
	return self
end

function MsgDef.Msg5027310:decode(sm)
	return self
end


function MsgDef.Msg5027310:opcode()
	return 5027310
end
--[[ 请求剑神守护副本信息--]]
MsgDef.Msg1027401 = {}

function MsgDef.Msg1027401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027401:encode(sm)
	return self
end

function MsgDef.Msg1027401:decode(sm)
	return self
end

function MsgDef.Msg1027401:opcode()
	return 1027401
end

--[[ 请求剑神守护副本信息(返回)--]]
MsgDef.Msg5027401 = {}
function MsgDef.Msg5027401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	return msg
end

function MsgDef.Msg5027401:encode(sm)
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	return self
end

function MsgDef.Msg5027401:decode(sm)
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5027401:opcode()
	return 5027401
end
--[[ 请求剑神守护排行榜信息--]]
MsgDef.Msg1027402 = {}

function MsgDef.Msg1027402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1027402:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1027402:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1027402:opcode()
	return 1027402
end

--[[ 请求剑神守护排行榜信息(返回)--]]
MsgDef.Msg5027402 = {}
function MsgDef.Msg5027402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.ranking = {} --[[(array<JsshRankInfo>) 排行榜--]]
	msg.myRankInfo = MsgDef.JsshRankInfo:create() --[[(JsshRankInfo) 我的排名信息--]]
	return msg
end

function MsgDef.Msg5027402:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	return self
end

function MsgDef.Msg5027402:decode(sm)
	self.sceneId = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.JsshRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	self.myRankInfo:decode(sm)
	return self
end


function MsgDef.Msg5027402:opcode()
	return 5027402
end
--[[ 请求剑神守护次数购买--]]
MsgDef.Msg1027403 = {}

function MsgDef.Msg1027403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1027403:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1027403:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1027403:opcode()
	return 1027403
end

--[[ 请求剑神守护次数购买(返回)--]]
MsgDef.Msg5027403 = {}
function MsgDef.Msg5027403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 次数--]]
	msg.todayLeftCount = 0 --[[(int32) 今日剩余次数--]]
	msg.todayLeftBuyCount = 0 --[[(int32) todayLeftBuyCount--]]
	return msg
end

function MsgDef.Msg5027403:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.todayLeftCount);
	sm:writeInt32(self.todayLeftBuyCount);
	return self
end

function MsgDef.Msg5027403:decode(sm)
	self.count = sm:readInt32();
	self.todayLeftCount = sm:readInt32();
	self.todayLeftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5027403:opcode()
	return 5027403
end
--[[ 请求剑神守护任务追踪信息--]]
MsgDef.Msg1027404 = {}

function MsgDef.Msg1027404:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1027404:encode(sm)
	return self
end

function MsgDef.Msg1027404:decode(sm)
	return self
end

function MsgDef.Msg1027404:opcode()
	return 1027404
end

--[[ 请求剑神守护任务追踪信息(返回)--]]
MsgDef.Msg5027404 = {}
function MsgDef.Msg5027404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) curBo--]]
	msg.boLeftSec = 0 --[[(int32) boLeftSec--]]
	msg.killBo = 0 --[[(int32) killBo--]]
	msg.drops = {} --[[(map<int32,int32>) 掉落--]]
	return msg
end

function MsgDef.Msg5027404:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.killBo);
	sm:writeInt16(get_map_size(self.drops))
	for kn,elm in ipairs(self.drops) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5027404:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.killBo = sm:readInt32();
	local drops_size = sm:readInt16()
	for i = 1,drops_size do
		local kv = sm:readInt32();
		self.drops[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5027404:opcode()
	return 5027404
end
--[[ 请求扫荡仙域灵塔--]]
MsgDef.Msg1027405 = {}

function MsgDef.Msg1027405:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1027405:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1027405:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1027405:opcode()
	return 1027405
end

--[[ 请求扫荡仙域灵塔(返回)--]]
MsgDef.Msg5027405 = {}
function MsgDef.Msg5027405:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 获得道具--]]
	return msg
end

function MsgDef.Msg5027405:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5027405:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5027405:opcode()
	return 5027405
end
--[[ 请求副本消耗次数获得奖励--]]
MsgDef.Msg1027406 = {}

function MsgDef.Msg1027406:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 副本--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 消耗次数--]]
	return msg
end

function MsgDef.Msg1027406:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1027406:decode(sm)
	self.sceneId = sm:readInt32();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1027406:opcode()
	return 1027406
end

--[[ 请求副本消耗次数获得奖励(返回)--]]
MsgDef.Msg5027406 = {}
function MsgDef.Msg5027406:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 副本--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.times = 0 --[[(int32) 消耗次数--]]
	return msg
end

function MsgDef.Msg5027406:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg5027406:decode(sm)
	self.sceneId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.times = sm:readInt32();
	return self
end


function MsgDef.Msg5027406:opcode()
	return 5027406
end
--[[ 使用礼包码--]]
MsgDef.Msg1030101 = {}

function MsgDef.Msg1030101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.giftCode == nil then msg.giftCode = "" end --[[(string) --]]
	return msg
end

function MsgDef.Msg1030101:encode(sm)
	sm:writeString(self.giftCode);
	return self
end

function MsgDef.Msg1030101:decode(sm)
	self.giftCode = sm:readString();
	return self
end

function MsgDef.Msg1030101:opcode()
	return 1030101
end

--[[ 使用礼包码(返回)--]]
MsgDef.Msg5030101 = {}
function MsgDef.Msg5030101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5030101:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030101:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030101:opcode()
	return 5030101
end
--[[ 请求在线时间福利--]]
MsgDef.Msg1030102 = {}

function MsgDef.Msg1030102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 0:信息 1:领取--]]
	if msg.gotId == nil then msg.gotId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.gotId);
	return self
end

function MsgDef.Msg1030102:decode(sm)
	self.reqType = sm:readInt8();
	self.gotId = sm:readInt32();
	return self
end

function MsgDef.Msg1030102:opcode()
	return 1030102
end

--[[ 请求在线时间福利(返回)--]]
MsgDef.Msg5030102 = {}
function MsgDef.Msg5030102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.onlineTime = 0 --[[(int32) 在线时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取id列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	return msg
end

function MsgDef.Msg5030102:encode(sm)
	sm:writeInt32(self.onlineTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030102:decode(sm)
	self.onlineTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030102:opcode()
	return 5030102
end
--[[ 请求签到信息--]]
MsgDef.Msg1030103 = {}

function MsgDef.Msg1030103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 0:信息 1:签到 2:累计签到奖励 3:充值再领 4:补签--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励的id--]]
	return msg
end

function MsgDef.Msg1030103:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030103:decode(sm)
	self.reqType = sm:readInt32();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030103:opcode()
	return 1030103
end

--[[ 请求签到信息(返回)--]]
MsgDef.Msg5030103 = {}
function MsgDef.Msg5030103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.signTimes = 0 --[[(int32) 本月已签到次数--]]
	msg.signAwardList = {} --[[(array<int32>) 本月已签到列表--]]
	msg.signDayAwardList = {} --[[(array<int32>) 本月已签到总数奖励已领取列表--]]
	msg.dayCzFlag = 0 --[[(int8) 每日充值标识 2:可领取 1:已充值并领取 0:未充值--]]
	msg.openTime = 0 --[[(int32) 开服时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的物品--]]
	msg.curSignDay = 0 --[[(int32) 当前签到天--]]
	msg.reqType = 0 --[[(int32) 0:信息 1:签到 2:累计签到奖励 3:充值再领 4:补签--]]
	return msg
end

function MsgDef.Msg5030103:encode(sm)
	sm:writeInt32(self.signTimes);
	sm:writeInt16(get_map_size(self.signAwardList))
	for i,elm in ipairs(self.signAwardList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.signDayAwardList))
	for i,elm in ipairs(self.signDayAwardList) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.dayCzFlag);
	sm:writeInt32(self.openTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curSignDay);
	sm:writeInt32(self.reqType);
	return self
end

function MsgDef.Msg5030103:decode(sm)
	self.signTimes = sm:readInt32();
	local signAwardList_size = sm:readInt16()
	for i = 1,signAwardList_size do
		local ele = sm:readInt32();
		table.insert(self.signAwardList, ele)
	end
	local signDayAwardList_size = sm:readInt16()
	for i = 1,signDayAwardList_size do
		local ele = sm:readInt32();
		table.insert(self.signDayAwardList, ele)
	end
	self.dayCzFlag = sm:readInt8();
	self.openTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curSignDay = sm:readInt32();
	self.reqType = sm:readInt32();
	return self
end


function MsgDef.Msg5030103:opcode()
	return 5030103
end
--[[ 请求领取离线经验--]]
MsgDef.Msg1030104 = {}

function MsgDef.Msg1030104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:离线信息 1:普通领取 2:双倍领取 3:5倍领取--]]
	return msg
end

function MsgDef.Msg1030104:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030104:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030104:opcode()
	return 1030104
end

--[[ 请求领取离线经验(返回)--]]
MsgDef.Msg5030104 = {}
function MsgDef.Msg5030104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sumOutLineTime = 0 --[[(int32) 累计离线时间（秒）--]]
	msg.gotExp = 0 --[[(int32) 领取得到的经验--]]
	msg.reqType = 0 --[[(int8) 0:离线信息 1:普通领取 2:双倍领取 3:5倍领取--]]
	return msg
end

function MsgDef.Msg5030104:encode(sm)
	sm:writeInt32(self.sumOutLineTime);
	sm:writeInt32(self.gotExp);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030104:decode(sm)
	self.sumOutLineTime = sm:readInt32();
	self.gotExp = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030104:opcode()
	return 5030104
end
--[[ 请求vip专享特权--]]
MsgDef.Msg1030105 = {}

function MsgDef.Msg1030105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:领取状况 1:普通领取 2:白银领取 3:黄金领取 4:钻石领取--]]
	return msg
end

function MsgDef.Msg1030105:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030105:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030105:opcode()
	return 1030105
end

--[[ 请求vip专享特权(返回)--]]
MsgDef.Msg5030105 = {}
function MsgDef.Msg5030105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gotStateList = {} --[[(array<int32>) 已领取id列表--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.reqType = 0 --[[(int8) 0:领取状况 1:普通领取 2:白银领取 3:黄金领取 4:钻石领取--]]
	msg.day = 0 --[[(int32) 天数--]]
	return msg
end

function MsgDef.Msg5030105:encode(sm)
	sm:writeInt16(get_map_size(self.gotStateList))
	for i,elm in ipairs(self.gotStateList) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.day);
	return self
end

function MsgDef.Msg5030105:decode(sm)
	local gotStateList_size = sm:readInt16()
	for i = 1,gotStateList_size do
		local ele = sm:readInt32();
		table.insert(self.gotStateList, ele)
	end
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.day = sm:readInt32();
	return self
end


function MsgDef.Msg5030105:opcode()
	return 5030105
end
--[[ 请求30天登录奖励--]]
MsgDef.Msg1030106 = {}

function MsgDef.Msg1030106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取的id--]]
	return msg
end

function MsgDef.Msg1030106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030106:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030106:opcode()
	return 1030106
end

--[[ 请求30天登录奖励(返回)--]]
MsgDef.Msg5030106 = {}
function MsgDef.Msg5030106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.gotAwardIdList = {} --[[(array<int32>) 已领取的id列表--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:领取奖励--]]
	return msg
end

function MsgDef.Msg5030106:encode(sm)
	sm:writeInt32(self.curDay);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotAwardIdList))
	for i,elm in ipairs(self.gotAwardIdList) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030106:decode(sm)
	self.curDay = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gotAwardIdList_size = sm:readInt16()
	for i = 1,gotAwardIdList_size do
		local ele = sm:readInt32();
		table.insert(self.gotAwardIdList, ele)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030106:opcode()
	return 5030106
end
--[[ 请求vip礼包显示--]]
MsgDef.Msg1030107 = {}

function MsgDef.Msg1030107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030107:encode(sm)
	return self
end

function MsgDef.Msg1030107:decode(sm)
	return self
end

function MsgDef.Msg1030107:opcode()
	return 1030107
end

--[[ 请求vip礼包显示(返回)--]]
MsgDef.Msg5030107 = {}
function MsgDef.Msg5030107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.vipDaySigns = {} --[[(array<int32>) vip日礼包领取标识--]]
	msg.vipWeekSigns = {} --[[(array<int32>) vip周礼包购买标识--]]
	return msg
end

function MsgDef.Msg5030107:encode(sm)
	sm:writeInt16(get_map_size(self.vipDaySigns))
	for i,elm in ipairs(self.vipDaySigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.vipWeekSigns))
	for i,elm in ipairs(self.vipWeekSigns) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030107:decode(sm)
	local vipDaySigns_size = sm:readInt16()
	for i = 1,vipDaySigns_size do
		local ele = sm:readInt32();
		table.insert(self.vipDaySigns, ele)
	end
	local vipWeekSigns_size = sm:readInt16()
	for i = 1,vipWeekSigns_size do
		local ele = sm:readInt32();
		table.insert(self.vipWeekSigns, ele)
	end
	return self
end


function MsgDef.Msg5030107:opcode()
	return 5030107
end
--[[ 请求vip礼包领取--]]
MsgDef.Msg1030108 = {}

function MsgDef.Msg1030108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:每日礼包 2:每周礼包 3:一键领取每日礼包 4:一键领取每周礼包--]]
	if msg.vipId == nil then msg.vipId = 0 end --[[(int32) vip礼包id--]]
	return msg
end

function MsgDef.Msg1030108:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.vipId);
	return self
end

function MsgDef.Msg1030108:decode(sm)
	self.reqType = sm:readInt8();
	self.vipId = sm:readInt32();
	return self
end

function MsgDef.Msg1030108:opcode()
	return 1030108
end

--[[ 请求vip礼包领取(返回)--]]
MsgDef.Msg5030108 = {}
function MsgDef.Msg5030108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.vipId = 0 --[[(int32) vip礼包id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 物品--]]
	msg.vipDaySigns = {} --[[(array<int32>) vip日礼包领取标识--]]
	msg.vipWeekSigns = {} --[[(array<int32>) vip周礼包领取标识--]]
	msg.reqType = 0 --[[(int8) 请求类型 1:每日礼包 2:每周礼包 3:一键领取每日礼包 4:一键领取每周礼包--]]
	return msg
end

function MsgDef.Msg5030108:encode(sm)
	sm:writeInt32(self.vipId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.vipDaySigns))
	for i,elm in ipairs(self.vipDaySigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.vipWeekSigns))
	for i,elm in ipairs(self.vipWeekSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030108:decode(sm)
	self.vipId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local vipDaySigns_size = sm:readInt16()
	for i = 1,vipDaySigns_size do
		local ele = sm:readInt32();
		table.insert(self.vipDaySigns, ele)
	end
	local vipWeekSigns_size = sm:readInt16()
	for i = 1,vipWeekSigns_size do
		local ele = sm:readInt32();
		table.insert(self.vipWeekSigns, ele)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030108:opcode()
	return 5030108
end
--[[ 请求开服进阶大比拼排行榜信息--]]
MsgDef.Msg1030109 = {}

function MsgDef.Msg1030109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030109:encode(sm)
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030109:decode(sm)
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030109:opcode()
	return 1030109
end

--[[ 请求开服进阶大比拼排行榜信息(返回)--]]
MsgDef.Msg5030109 = {}
function MsgDef.Msg5030109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankInfos = {} --[[(array<OpenRankInfo>) 排行榜信息--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.openActHisList = {} --[[(array<int32>) 已开放过的排行榜活动列表--]]
	return msg
end

function MsgDef.Msg5030109:encode(sm)
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.openActHisList))
	for i,elm in ipairs(self.openActHisList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030109:decode(sm)
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.lastTime = sm:readInt32();
	local openActHisList_size = sm:readInt16()
	for i = 1,openActHisList_size do
		local ele = sm:readInt32();
		table.insert(self.openActHisList, ele)
	end
	return self
end


function MsgDef.Msg5030109:opcode()
	return 5030109
end
--[[ 请求开服进阶日领取信息--]]
MsgDef.Msg1030110 = {}

function MsgDef.Msg1030110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 0:请求领取信息 1:领取奖励 2:一键领取--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 奖励id--]]
	return msg
end

function MsgDef.Msg1030110:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030110:decode(sm)
	self.actId = sm:readInt32();
	self.reqType = sm:readInt32();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030110:opcode()
	return 1030110
end

--[[ 请求开服进阶日领取信息(返回)--]]
MsgDef.Msg5030110 = {}
function MsgDef.Msg5030110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 0:请求领取信息 1:领取奖励 2:一键领取--]]
	msg.gotGiftStatusMap = {} --[[(map<int32,int32>) 领取状态 0:未达成 1:可领取 2:已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取获得的物品--]]
	return msg
end

function MsgDef.Msg5030110:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt16(get_map_size(self.gotGiftStatusMap))
	for kn,elm in ipairs(self.gotGiftStatusMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030110:decode(sm)
	self.reqType = sm:readInt32();
	local gotGiftStatusMap_size = sm:readInt16()
	for i = 1,gotGiftStatusMap_size do
		local kv = sm:readInt32();
		self.gotGiftStatusMap[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030110:opcode()
	return 5030110
end
--[[ 请求活动开放列表--]]
MsgDef.Msg1030111 = {}

function MsgDef.Msg1030111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actType == nil then msg.actType = 0 end --[[(int32) 活动类型--]]
	return msg
end

function MsgDef.Msg1030111:encode(sm)
	sm:writeInt32(self.actType);
	return self
end

function MsgDef.Msg1030111:decode(sm)
	self.actType = sm:readInt32();
	return self
end

function MsgDef.Msg1030111:opcode()
	return 1030111
end

--[[ 请求活动开放列表(返回)--]]
MsgDef.Msg5030111 = {}
function MsgDef.Msg5030111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.acts = {} --[[(map<int32,int32>) 活动功能[活动Id]->是否开启(0默认,1开启,2关闭,)--]]
	msg.openDay = 0 --[[(int32) 开服天数--]]
	msg.mulActList = {} --[[(array<int32>) 多开活动列表--]]
	return msg
end

function MsgDef.Msg5030111:encode(sm)
	sm:writeInt16(get_map_size(self.acts))
	for kn,elm in ipairs(self.acts) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.openDay);
	sm:writeInt16(get_map_size(self.mulActList))
	for i,elm in ipairs(self.mulActList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030111:decode(sm)
	local acts_size = sm:readInt16()
	for i = 1,acts_size do
		local kv = sm:readInt32();
		self.acts[kv] = sm:readInt32();
	end
	self.openDay = sm:readInt32();
	local mulActList_size = sm:readInt16()
	for i = 1,mulActList_size do
		local ele = sm:readInt32();
		table.insert(self.mulActList, ele)
	end
	return self
end


function MsgDef.Msg5030111:opcode()
	return 5030111
end
--[[ 请求连续充值活动--]]
MsgDef.Msg1030112 = {}

function MsgDef.Msg1030112:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030112:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030112:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030112:opcode()
	return 1030112
end

--[[ 请求连续充值活动(返回)--]]
MsgDef.Msg5030112 = {}
function MsgDef.Msg5030112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.seriesDay = 0 --[[(int32) 连续充值天数--]]
	msg.actLastTime = 0 --[[(int32) 活动结束时间--]]
	msg.itemStatus = {} --[[(map<int32,int32>) 奖励列表状态<id,状态0:不可领取 1:可领取 2:已领取> --]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.reqType = 0 --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	return msg
end

function MsgDef.Msg5030112:encode(sm)
	sm:writeInt32(self.seriesDay);
	sm:writeInt32(self.actLastTime);
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030112:decode(sm)
	self.seriesDay = sm:readInt32();
	self.actLastTime = sm:readInt32();
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030112:opcode()
	return 5030112
end
--[[ 请求资源找回列表信息--]]
MsgDef.Msg1030113 = {}

function MsgDef.Msg1030113:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:列表信息 1:铜钱找回 2:元宝找回 3:一键铜钱 4:一键元宝--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 类型--]]
	return msg
end

function MsgDef.Msg1030113:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg1030113:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg1030113:opcode()
	return 1030113
end

--[[ 请求资源找回列表信息(返回)--]]
MsgDef.Msg5030113 = {}
function MsgDef.Msg5030113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int32) 类型--]]
	msg.itemList = {} --[[(array<SimpleItemInfo>) 道具列表--]]
	msg.resourceList = {} --[[(array<ResourceRecoveryInfo>) 资源列表信息--]]
	msg.reqType = 0 --[[(int8) 0:列表信息 1:铜钱找回 2:元宝找回 3:一键铜钱 4:一键元宝--]]
	return msg
end

function MsgDef.Msg5030113:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt16(#self.itemList)
	for i,elm in ipairs(self.itemList) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.resourceList)
	for i,elm in ipairs(self.resourceList) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030113:decode(sm)
	self.type = sm:readInt32();
	local itemList_size = sm:readInt16()
	for i = 1,itemList_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.itemList, element)
	end
	local resourceList_size = sm:readInt16()
	for i = 1,resourceList_size do
		local element = MsgDef.ResourceRecoveryInfo:create():decode(sm)
		table.insert(self.resourceList, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030113:opcode()
	return 5030113
end
--[[ 请求首充团购--]]
MsgDef.Msg1030114 = {}

function MsgDef.Msg1030114:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:团购信息 1:领取--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030114:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030114:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030114:opcode()
	return 1030114
end

--[[ 请求首充团购(返回)--]]
MsgDef.Msg5030114 = {}
function MsgDef.Msg5030114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.czCount = 0 --[[(int32) 全服充值人数--]]
	msg.czYb = 0 --[[(int32) 本人今日累充元宝--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.itemStatus = {} --[[(map<int32,int32>) 道具列表状态<id,状态0:不可领 1:可领 2:已领>--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.reqType = 0 --[[(int8) 0:团购信息 1:领取--]]
	return msg
end

function MsgDef.Msg5030114:encode(sm)
	sm:writeInt32(self.czCount);
	sm:writeInt32(self.czYb);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030114:decode(sm)
	self.czCount = sm:readInt32();
	self.czYb = sm:readInt32();
	self.lastTime = sm:readInt32();
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030114:opcode()
	return 5030114
end
--[[ 请求仙尊卡百倍礼包--]]
MsgDef.Msg1030115 = {}

function MsgDef.Msg1030115:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:购买--]]
	if msg.privilegeType == nil then msg.privilegeType = 0 end --[[(int32) 特权类型 1:白银 2:黄金 3:钻石--]]
	return msg
end

function MsgDef.Msg1030115:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.privilegeType);
	return self
end

function MsgDef.Msg1030115:decode(sm)
	self.reqType = sm:readInt8();
	self.privilegeType = sm:readInt32();
	return self
end

function MsgDef.Msg1030115:opcode()
	return 1030115
end

--[[ 请求仙尊卡百倍礼包(返回)--]]
MsgDef.Msg5030115 = {}
function MsgDef.Msg5030115:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:购买--]]
	msg.gotStatusMap = {} --[[(map<int32,int32>) id->0:未购买 1:已购买--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买活动礼包--]]
	return msg
end

function MsgDef.Msg5030115:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotStatusMap))
	for kn,elm in ipairs(self.gotStatusMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030115:decode(sm)
	self.reqType = sm:readInt8();
	local gotStatusMap_size = sm:readInt16()
	for i = 1,gotStatusMap_size do
		local kv = sm:readInt32();
		self.gotStatusMap[kv] = sm:readInt32();
	end
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030115:opcode()
	return 5030115
end
--[[ 请求每日特惠礼包--]]
MsgDef.Msg1030116 = {}

function MsgDef.Msg1030116:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:特惠礼包信息 1:购买--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	if msg.buyId == nil then msg.buyId = 0 end --[[(int32) 购买id--]]
	if msg.typeId == nil then msg.typeId = 0 end --[[(int32) 开服8天前或开服8天后--]]
	return msg
end

function MsgDef.Msg1030116:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.buyId);
	sm:writeInt32(self.typeId);
	return self
end

function MsgDef.Msg1030116:decode(sm)
	self.reqType = sm:readInt8();
	self.amount = sm:readInt32();
	self.buyId = sm:readInt32();
	self.typeId = sm:readInt32();
	return self
end

function MsgDef.Msg1030116:opcode()
	return 1030116
end

--[[ 请求每日特惠礼包(返回)--]]
MsgDef.Msg5030116 = {}
function MsgDef.Msg5030116:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.openDay = 0 --[[(int32) 开服天数--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.leftCountMap = {} --[[(map<int32,int32>) id-->剩余购买次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得物品--]]
	msg.ybleft = 0 --[[(int32) 剩余元宝--]]
	return msg
end

function MsgDef.Msg5030116:encode(sm)
	sm:writeInt32(self.openDay);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.leftCountMap))
	for kn,elm in ipairs(self.leftCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.ybleft);
	return self
end

function MsgDef.Msg5030116:decode(sm)
	self.openDay = sm:readInt32();
	self.lastTime = sm:readInt32();
	local leftCountMap_size = sm:readInt16()
	for i = 1,leftCountMap_size do
		local kv = sm:readInt32();
		self.leftCountMap[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.ybleft = sm:readInt32();
	return self
end


function MsgDef.Msg5030116:opcode()
	return 5030116
end
--[[ 请求开服任务--]]
MsgDef.Msg1030117 = {}

function MsgDef.Msg1030117:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:领取列表信息 1:领取--]]
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg1030117:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg1030117:decode(sm)
	self.reqType = sm:readInt8();
	self.taskId = sm:readInt32();
	return self
end

function MsgDef.Msg1030117:opcode()
	return 1030117
end

--[[ 请求开服任务(返回)--]]
MsgDef.Msg5030117 = {}
function MsgDef.Msg5030117:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:领取列表信息 1:领取--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取获得道具--]]
	msg.openTaskInfos = {} --[[(array<OpenTaskInfo>) 开服任务信息--]]
	return msg
end

function MsgDef.Msg5030117:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.openTaskInfos)
	for i,elm in ipairs(self.openTaskInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030117:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local openTaskInfos_size = sm:readInt16()
	for i = 1,openTaskInfos_size do
		local element = MsgDef.OpenTaskInfo:create():decode(sm)
		table.insert(self.openTaskInfos, element)
	end
	return self
end


function MsgDef.Msg5030117:opcode()
	return 5030117
end
--[[ 请求开服投资计划信息--]]
MsgDef.Msg1030118 = {}

function MsgDef.Msg1030118:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030118:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030118:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030118:opcode()
	return 1030118
end

--[[ 请求开服投资计划信息(返回)--]]
MsgDef.Msg5030118 = {}
function MsgDef.Msg5030118:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isBuy = 0 --[[(int32) 是否已购买 0:没有购买 1:已购买--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.openDay = 0 --[[(int32) 开服天数--]]
	msg.reqType = 0 --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	return msg
end

function MsgDef.Msg5030118:encode(sm)
	sm:writeInt32(self.isBuy);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.openDay);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030118:decode(sm)
	self.isBuy = sm:readInt32();
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.openDay = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030118:opcode()
	return 5030118
end
--[[ 请求等级投资计划信息--]]
MsgDef.Msg1030119 = {}

function MsgDef.Msg1030119:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:投资或追加投资 2:领取奖励--]]
	if msg.invType == nil then msg.invType = 0 end --[[(int8) 投资档次 1:1千档 2:2千档 3:3千档--]]
	if msg.invId == nil then msg.invId = 0 end --[[(int32) 领取奖励的id--]]
	return msg
end

function MsgDef.Msg1030119:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.invType);
	sm:writeInt32(self.invId);
	return self
end

function MsgDef.Msg1030119:decode(sm)
	self.reqType = sm:readInt8();
	self.invType = sm:readInt8();
	self.invId = sm:readInt32();
	return self
end

function MsgDef.Msg1030119:opcode()
	return 1030119
end

--[[ 请求等级投资计划信息(返回)--]]
MsgDef.Msg5030119 = {}
function MsgDef.Msg5030119:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.curInvType = 0 --[[(int32) 当前已投资档次 1:1千档 2:2千档 3:3千档--]]
	msg.reqType = 0 --[[(int8) 0:信息 1:投资或追加投资 2:领取奖励--]]
	return msg
end

function MsgDef.Msg5030119:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curInvType);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030119:decode(sm)
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curInvType = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030119:opcode()
	return 5030119
end
--[[ 请求每日累充--]]
MsgDef.Msg1030120 = {}

function MsgDef.Msg1030120:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励Id--]]
	if msg.activityId == nil then msg.activityId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030120:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	sm:writeInt32(self.activityId);
	return self
end

function MsgDef.Msg1030120:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	self.activityId = sm:readInt32();
	return self
end

function MsgDef.Msg1030120:opcode()
	return 1030120
end

--[[ 请求每日累充(返回)--]]
MsgDef.Msg5030120 = {}
function MsgDef.Msg5030120:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.czYB = 0 --[[(int32) 今日累充元宝--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.itemStatus = {} --[[(map<int32,int32>) 道具列表状态--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.reqType = 0 --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	msg.activityId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg5030120:encode(sm)
	sm:writeInt32(self.czYB);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.activityId);
	return self
end

function MsgDef.Msg5030120:decode(sm)
	self.czYB = sm:readInt32();
	self.lastTime = sm:readInt32();
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.activityId = sm:readInt32();
	return self
end


function MsgDef.Msg5030120:opcode()
	return 5030120
end
--[[ 每日首充奖励--]]
MsgDef.Msg1030121 = {}

function MsgDef.Msg1030121:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励 2:领取累充奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励Id--]]
	return msg
end

function MsgDef.Msg1030121:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030121:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030121:opcode()
	return 1030121
end

--[[ 每日首充奖励(返回)--]]
MsgDef.Msg5030121 = {}
function MsgDef.Msg5030121:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:请求奖励信息 1:领取奖励 2:领取累充奖励--]]
	msg.Items = {} --[[(array<SimpleItemInfo>) 道具信息列表--]]
	msg.ItemStatus = {} --[[(map<int32,int32>) 奖励道具状态--]]
	msg.day = 0 --[[(int32) 选择哪一天的奖励道具--]]
	msg.YbNum = 0 --[[(int32) 累充元宝数--]]
	msg.gotLcList = {} --[[(array<int32>) 已领取累充奖励--]]
	msg.lcDays = 0 --[[(int32) 已累充天数--]]
	msg.cycle = 0 --[[(int32) 奖励累充周期--]]
	return msg
end

function MsgDef.Msg5030121:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.Items)
	for i,elm in ipairs(self.Items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.ItemStatus))
	for kn,elm in ipairs(self.ItemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.day);
	sm:writeInt32(self.YbNum);
	sm:writeInt16(get_map_size(self.gotLcList))
	for i,elm in ipairs(self.gotLcList) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lcDays);
	sm:writeInt32(self.cycle);
	return self
end

function MsgDef.Msg5030121:decode(sm)
	self.reqType = sm:readInt8();
	local Items_size = sm:readInt16()
	for i = 1,Items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.Items, element)
	end
	local ItemStatus_size = sm:readInt16()
	for i = 1,ItemStatus_size do
		local kv = sm:readInt32();
		self.ItemStatus[kv] = sm:readInt32();
	end
	self.day = sm:readInt32();
	self.YbNum = sm:readInt32();
	local gotLcList_size = sm:readInt16()
	for i = 1,gotLcList_size do
		local ele = sm:readInt32();
		table.insert(self.gotLcList, ele)
	end
	self.lcDays = sm:readInt32();
	self.cycle = sm:readInt32();
	return self
end


function MsgDef.Msg5030121:opcode()
	return 5030121
end
--[[ 请求元宝复制活动--]]
MsgDef.Msg1030122 = {}

function MsgDef.Msg1030122:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:记录 1:复制--]]
	if msg.copyType == nil then msg.copyType = 0 end --[[(int32) 复制类型 1:首次 2:首充 3:白银 4:黄金 5:钻石--]]
	return msg
end

function MsgDef.Msg1030122:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.copyType);
	return self
end

function MsgDef.Msg1030122:decode(sm)
	self.reqType = sm:readInt8();
	self.copyType = sm:readInt32();
	return self
end

function MsgDef.Msg1030122:opcode()
	return 1030122
end

--[[ 请求元宝复制活动(返回)--]]
MsgDef.Msg5030122 = {}
function MsgDef.Msg5030122:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.records = {} --[[(array<string>) 记录--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 复制获得道具--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.curCopyType = 0 --[[(int32) 当前可复制类型 1:首次 2:首充 3:白银 4:黄金 5:钻石--]]
	msg.reqType = 0 --[[(int8) 0:记录 1:复制--]]
	msg.leftTimes = 0 --[[(int32) 元宝复制剩余次数--]]
	msg.curMultiply = 0 --[[(int32) 复制时返回的倍率--]]
	msg.firstCz = 0 --[[(int32) 是否首冲过--]]
	return msg
end

function MsgDef.Msg5030122:encode(sm)
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.curCopyType);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTimes);
	sm:writeInt32(self.curMultiply);
	sm:writeInt32(self.firstCz);
	return self
end

function MsgDef.Msg5030122:decode(sm)
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.curCopyType = sm:readInt32();
	self.reqType = sm:readInt8();
	self.leftTimes = sm:readInt32();
	self.curMultiply = sm:readInt32();
	self.firstCz = sm:readInt32();
	return self
end


function MsgDef.Msg5030122:opcode()
	return 5030122
end
--[[ 请求再充献礼（首充）--]]
MsgDef.Msg1030123 = {}

function MsgDef.Msg1030123:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030123:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030123:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030123:opcode()
	return 1030123
end

--[[ 请求再充献礼（首充）(返回)--]]
MsgDef.Msg5030123 = {}
function MsgDef.Msg5030123:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lcYb = 0 --[[(int32) 累充元宝--]]
	msg.gotList = {} --[[(array<int32>) 已领取列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取获得奖励--]]
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	return msg
end

function MsgDef.Msg5030123:encode(sm)
	sm:writeInt32(self.lcYb);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030123:decode(sm)
	self.lcYb = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030123:opcode()
	return 5030123
end
--[[ 请求每日一元--]]
MsgDef.Msg1030124 = {}

function MsgDef.Msg1030124:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 奖励Id--]]
	return msg
end

function MsgDef.Msg1030124:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030124:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030124:opcode()
	return 1030124
end

--[[ 请求每日一元(返回)--]]
MsgDef.Msg5030124 = {}
function MsgDef.Msg5030124:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:请求信息 1:领取奖励--]]
	msg.Items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.ItemStatus = {} --[[(map<int32,int32>) 奖励道具状态--]]
	return msg
end

function MsgDef.Msg5030124:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.Items)
	for i,elm in ipairs(self.Items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.ItemStatus))
	for kn,elm in ipairs(self.ItemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030124:decode(sm)
	self.reqType = sm:readInt8();
	local Items_size = sm:readInt16()
	for i = 1,Items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.Items, element)
	end
	local ItemStatus_size = sm:readInt16()
	for i = 1,ItemStatus_size do
		local kv = sm:readInt32();
		self.ItemStatus[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030124:opcode()
	return 5030124
end
--[[ 请求在线送首充剩余份数--]]
MsgDef.Msg1030125 = {}

function MsgDef.Msg1030125:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030125:encode(sm)
	return self
end

function MsgDef.Msg1030125:decode(sm)
	return self
end

function MsgDef.Msg1030125:opcode()
	return 1030125
end

--[[ 请求在线送首充剩余份数(返回)--]]
MsgDef.Msg5030125 = {}
function MsgDef.Msg5030125:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.restNum = 0 --[[(int32) 剩余礼包份数--]]
	return msg
end

function MsgDef.Msg5030125:encode(sm)
	sm:writeInt32(self.restNum);
	return self
end

function MsgDef.Msg5030125:decode(sm)
	self.restNum = sm:readInt32();
	return self
end


function MsgDef.Msg5030125:opcode()
	return 5030125
end
--[[ 请求仙盟积分排行信息--]]
MsgDef.Msg1030126 = {}

function MsgDef.Msg1030126:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030126:encode(sm)
	return self
end

function MsgDef.Msg1030126:decode(sm)
	return self
end

function MsgDef.Msg1030126:opcode()
	return 1030126
end

--[[ 请求仙盟积分排行信息(返回)--]]
MsgDef.Msg5030126 = {}
function MsgDef.Msg5030126:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动结束时间--]]
	msg.myGangScore = 0 --[[(int32) 我的仙盟积分--]]
	msg.myGangRank = 0 --[[(int32) 我的仙盟排名--]]
	msg.rankingInfos = {} --[[(array<GangRankingInfo>) 排名信息列表--]]
	msg.showTime = 0 --[[(int8) 1:展示时间 0:非展示--]]
	return msg
end

function MsgDef.Msg5030126:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myGangScore);
	sm:writeInt32(self.myGangRank);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.showTime);
	return self
end

function MsgDef.Msg5030126:decode(sm)
	self.lastTime = sm:readInt32();
	self.myGangScore = sm:readInt32();
	self.myGangRank = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.GangRankingInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.showTime = sm:readInt8();
	return self
end


function MsgDef.Msg5030126:opcode()
	return 5030126
end
--[[ 请求离线挂机信息--]]
MsgDef.Msg1030130 = {}

function MsgDef.Msg1030130:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030130:encode(sm)
	return self
end

function MsgDef.Msg1030130:decode(sm)
	return self
end

function MsgDef.Msg1030130:opcode()
	return 1030130
end

--[[ 请求离线挂机信息(返回)--]]
MsgDef.Msg5030130 = {}
function MsgDef.Msg5030130:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.outlineTime = 0 --[[(int32) 累计离线收益时间--]]
	msg.allOutlineTime = 0 --[[(int32) 总离线时间--]]
	msg.beRobbedExp = 0 --[[(int32) 被抢经验--]]
	msg.beRobbedTq = 0 --[[(int32) 被抢铜钱--]]
	msg.leftRobbedTimes = 0 --[[(int32) 今日剩余掠夺次数--]]
	msg.guajiExp = 0 --[[(int32) 今日挂机获得经验--]]
	msg.guajiTq = 0 --[[(int32) 今日挂机获得铜钱--]]
	msg.leftGuajiTime = 0 --[[(int32) 剩余离线挂机时间--]]
	msg.awardsEquip = {} --[[(map<int32,int32>) 挂机获得装备<品质->数量>--]]
	msg.loseEquip = {} --[[(map<int32,int32>) 被抢失去的装备<品质->数量>--]]
	msg.oldLevel = 0 --[[(int32) 收益前等级--]]
	msg.oldExp = 0 --[[(int32) 收益前经验--]]
	msg.curType = 0 --[[(int32) 0:不设置默认 1:当前类型 2:设置吞噬类型--]]
	return msg
end

function MsgDef.Msg5030130:encode(sm)
	sm:writeInt32(self.outlineTime);
	sm:writeInt32(self.allOutlineTime);
	sm:writeInt32(self.beRobbedExp);
	sm:writeInt32(self.beRobbedTq);
	sm:writeInt32(self.leftRobbedTimes);
	sm:writeInt32(self.guajiExp);
	sm:writeInt32(self.guajiTq);
	sm:writeInt32(self.leftGuajiTime);
	sm:writeInt16(get_map_size(self.awardsEquip))
	for kn,elm in ipairs(self.awardsEquip) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.loseEquip))
	for kn,elm in ipairs(self.loseEquip) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.oldLevel);
	sm:writeInt32(self.oldExp);
	sm:writeInt32(self.curType);
	return self
end

function MsgDef.Msg5030130:decode(sm)
	self.outlineTime = sm:readInt32();
	self.allOutlineTime = sm:readInt32();
	self.beRobbedExp = sm:readInt32();
	self.beRobbedTq = sm:readInt32();
	self.leftRobbedTimes = sm:readInt32();
	self.guajiExp = sm:readInt32();
	self.guajiTq = sm:readInt32();
	self.leftGuajiTime = sm:readInt32();
	local awardsEquip_size = sm:readInt16()
	for i = 1,awardsEquip_size do
		local kv = sm:readInt32();
		self.awardsEquip[kv] = sm:readInt32();
	end
	local loseEquip_size = sm:readInt16()
	for i = 1,loseEquip_size do
		local kv = sm:readInt32();
		self.loseEquip[kv] = sm:readInt32();
	end
	self.oldLevel = sm:readInt32();
	self.oldExp = sm:readInt32();
	self.curType = sm:readInt32();
	return self
end


function MsgDef.Msg5030130:opcode()
	return 5030130
end
--[[ 请求离线挂机日志--]]
MsgDef.Msg1030131 = {}

function MsgDef.Msg1030131:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030131:encode(sm)
	return self
end

function MsgDef.Msg1030131:decode(sm)
	return self
end

function MsgDef.Msg1030131:opcode()
	return 1030131
end

--[[ 请求离线挂机日志(返回)--]]
MsgDef.Msg5030131 = {}
function MsgDef.Msg5030131:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.guajiLogs = {} --[[(array<string>) 日志--]]
	return msg
end

function MsgDef.Msg5030131:encode(sm)
	sm:writeInt16(get_map_size(self.guajiLogs))
	for i,elm in ipairs(self.guajiLogs) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5030131:decode(sm)
	local guajiLogs_size = sm:readInt16()
	for i = 1,guajiLogs_size do
		local ele = sm:readString();
		table.insert(self.guajiLogs, ele)
	end
	return self
end


function MsgDef.Msg5030131:opcode()
	return 5030131
end
--[[ 请求掠夺信息列表--]]
MsgDef.Msg1030132 = {}

function MsgDef.Msg1030132:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:战力排序 2:离线时间排序--]]
	if msg.execptGang == nil then msg.execptGang = 0 end --[[(int8) 1:不抢同盟--]]
	if msg.execptFriend == nil then msg.execptFriend = 0 end --[[(int8) 1:不抢好友--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页--]]
	return msg
end

function MsgDef.Msg1030132:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.execptGang);
	sm:writeInt8(self.execptFriend);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1030132:decode(sm)
	self.reqType = sm:readInt8();
	self.execptGang = sm:readInt8();
	self.execptFriend = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1030132:opcode()
	return 1030132
end

--[[ 请求掠夺信息列表(返回)--]]
MsgDef.Msg5030132 = {}
function MsgDef.Msg5030132:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:战力排序 2:离线时间排序--]]
	msg.leftTimes = 0 --[[(int32) 剩余掠夺次数--]]
	msg.robInfo = {} --[[(array<OutlineRobInfo>) 掠夺信息--]]
	msg.page = 0 --[[(int32) 当前页--]]
	msg.maxPage = 0 --[[(int32) 最大页--]]
	return msg
end

function MsgDef.Msg5030132:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTimes);
	sm:writeInt16(#self.robInfo)
	for i,elm in ipairs(self.robInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	return self
end

function MsgDef.Msg5030132:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTimes = sm:readInt32();
	local robInfo_size = sm:readInt16()
	for i = 1,robInfo_size do
		local element = MsgDef.OutlineRobInfo:create():decode(sm)
		table.insert(self.robInfo, element)
	end
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	return self
end


function MsgDef.Msg5030132:opcode()
	return 5030132
end
--[[ 请求离线挂机抢夺--]]
MsgDef.Msg1030133 = {}

function MsgDef.Msg1030133:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg1030133:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1030133:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1030133:opcode()
	return 1030133
end

--[[ 请求离线挂机抢夺(返回)--]]
MsgDef.Msg5030133 = {}
function MsgDef.Msg5030133:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5030133:encode(sm)
	return self
end

function MsgDef.Msg5030133:decode(sm)
	return self
end


function MsgDef.Msg5030133:opcode()
	return 5030133
end
--[[ 请求离线挂机奖励--]]
MsgDef.Msg1030134 = {}

function MsgDef.Msg1030134:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030134:encode(sm)
	return self
end

function MsgDef.Msg1030134:decode(sm)
	return self
end

function MsgDef.Msg1030134:opcode()
	return 1030134
end

--[[ 请求离线挂机奖励(返回)--]]
MsgDef.Msg5030134 = {}
function MsgDef.Msg5030134:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.outlineTime = 0 --[[(int32) 累计离线收益时间--]]
	msg.leftGuajiTime = 0 --[[(int32) 剩余时间--]]
	msg.guajiExp = 0 --[[(int32) 今日挂机获得经验--]]
	msg.guajiTq = 0 --[[(int32) 今日挂机获得铜钱--]]
	msg.robbedTimes = 0 --[[(int32) 被抢夺次数--]]
	msg.awardsEquip = {} --[[(array<SimpleItemInfo>) 挂机获得装备--]]
	msg.equipNum = 0 --[[(int32) 装备数量--]]
	msg.oldLevel = 0 --[[(int32) 旧等级--]]
	msg.oldExp = 0 --[[(int32) 旧经验--]]
	msg.curType = 0 --[[(int32) 0:不设置默认 1:当前类型 2:设置吞噬类型--]]
	return msg
end

function MsgDef.Msg5030134:encode(sm)
	sm:writeInt32(self.outlineTime);
	sm:writeInt32(self.leftGuajiTime);
	sm:writeInt32(self.guajiExp);
	sm:writeInt32(self.guajiTq);
	sm:writeInt32(self.robbedTimes);
	sm:writeInt16(#self.awardsEquip)
	for i,elm in ipairs(self.awardsEquip) do
		elm:encode(sm)
	end
	sm:writeInt32(self.equipNum);
	sm:writeInt32(self.oldLevel);
	sm:writeInt32(self.oldExp);
	sm:writeInt32(self.curType);
	return self
end

function MsgDef.Msg5030134:decode(sm)
	self.outlineTime = sm:readInt32();
	self.leftGuajiTime = sm:readInt32();
	self.guajiExp = sm:readInt32();
	self.guajiTq = sm:readInt32();
	self.robbedTimes = sm:readInt32();
	local awardsEquip_size = sm:readInt16()
	for i = 1,awardsEquip_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.awardsEquip, element)
	end
	self.equipNum = sm:readInt32();
	self.oldLevel = sm:readInt32();
	self.oldExp = sm:readInt32();
	self.curType = sm:readInt32();
	return self
end


function MsgDef.Msg5030134:opcode()
	return 5030134
end
--[[ 请求离线挂机跳过战斗--]]
MsgDef.Msg1030135 = {}

function MsgDef.Msg1030135:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:场景内 1:场景外跳过--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 被抢夺的roleId--]]
	return msg
end

function MsgDef.Msg1030135:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1030135:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1030135:opcode()
	return 1030135
end

--[[ 请求离线挂机跳过战斗(返回)--]]
MsgDef.Msg5030135 = {}
function MsgDef.Msg5030135:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5030135:encode(sm)
	return self
end

function MsgDef.Msg5030135:decode(sm)
	return self
end


function MsgDef.Msg5030135:opcode()
	return 5030135
end
--[[ 请求等级礼包--]]
MsgDef.Msg1030140 = {}

function MsgDef.Msg1030140:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 0:代表显示数据;>0:表示领取的配置id--]]
	return msg
end

function MsgDef.Msg1030140:encode(sm)
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030140:decode(sm)
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030140:opcode()
	return 1030140
end

--[[ 请求等级礼包(返回)--]]
MsgDef.Msg5030140 = {}
function MsgDef.Msg5030140:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) 0:代表显示数据;>0:表示领取的配置id--]]
	msg.signs = {} --[[(array<int32>) 已领取的奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.useCounts = {} --[[(map<int32,int32>) 使用的次数，key=id--]]
	return msg
end

function MsgDef.Msg5030140:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.signs))
	for i,elm in ipairs(self.signs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.useCounts))
	for kn,elm in ipairs(self.useCounts) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030140:decode(sm)
	self.cfgId = sm:readInt32();
	local signs_size = sm:readInt16()
	for i = 1,signs_size do
		local ele = sm:readInt32();
		table.insert(self.signs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local useCounts_size = sm:readInt16()
	for i = 1,useCounts_size do
		local kv = sm:readInt32();
		self.useCounts[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030140:opcode()
	return 5030140
end
--[[ 请求等级特卖--]]
MsgDef.Msg1030141 = {}

function MsgDef.Msg1030141:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 购买下标--]]
	return msg
end

function MsgDef.Msg1030141:encode(sm)
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030141:decode(sm)
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030141:opcode()
	return 1030141
end

--[[ 请求等级特卖(返回)--]]
MsgDef.Msg5030141 = {}
function MsgDef.Msg5030141:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) 购买下标--]]
	msg.signs = {} --[[(array<int32>) 已购买的列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5030141:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.signs))
	for i,elm in ipairs(self.signs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030141:decode(sm)
	self.cfgId = sm:readInt32();
	local signs_size = sm:readInt16()
	for i = 1,signs_size do
		local ele = sm:readInt32();
		table.insert(self.signs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030141:opcode()
	return 5030141
end
--[[ 请求坐骑技能书特卖--]]
MsgDef.Msg1030142 = {}

function MsgDef.Msg1030142:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:购买信息 1:购买--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 购买配置id--]]
	if msg.moduleId == nil then msg.moduleId = 0 end --[[(int32) 模块id--]]
	return msg
end

function MsgDef.Msg1030142:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.moduleId);
	return self
end

function MsgDef.Msg1030142:decode(sm)
	self.reqType = sm:readInt8();
	self.itemId = sm:readInt32();
	self.moduleId = sm:readInt32();
	return self
end

function MsgDef.Msg1030142:opcode()
	return 1030142
end

--[[ 请求坐骑技能书特卖(返回)--]]
MsgDef.Msg5030142 = {}
function MsgDef.Msg5030142:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:购买信息 1:购买--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.buyList = {} --[[(map<int32,int32>) 已购买列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得--]]
	msg.skillMap = {} --[[(map<int32,int32>) 技能<id,等级>--]]
	msg.moduleId = 0 --[[(int32) 模块id--]]
	return msg
end

function MsgDef.Msg5030142:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.buyList))
	for kn,elm in ipairs(self.buyList) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skillMap))
	for kn,elm in ipairs(self.skillMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.moduleId);
	return self
end

function MsgDef.Msg5030142:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local buyList_size = sm:readInt16()
	for i = 1,buyList_size do
		local kv = sm:readInt32();
		self.buyList[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local skillMap_size = sm:readInt16()
	for i = 1,skillMap_size do
		local kv = sm:readInt32();
		self.skillMap[kv] = sm:readInt32();
	end
	self.moduleId = sm:readInt32();
	return self
end


function MsgDef.Msg5030142:opcode()
	return 5030142
end
--[[ 请求灵童技能书特卖--]]
MsgDef.Msg1030143 = {}

function MsgDef.Msg1030143:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:购买信息 1:购买--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 购买配置id--]]
	if msg.moduleId == nil then msg.moduleId = 0 end --[[(int32) 模块id--]]
	return msg
end

function MsgDef.Msg1030143:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.moduleId);
	return self
end

function MsgDef.Msg1030143:decode(sm)
	self.reqType = sm:readInt8();
	self.itemId = sm:readInt32();
	self.moduleId = sm:readInt32();
	return self
end

function MsgDef.Msg1030143:opcode()
	return 1030143
end

--[[ 请求灵童技能书特卖(返回)--]]
MsgDef.Msg5030143 = {}
function MsgDef.Msg5030143:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:购买信息 1:购买--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.buyList = {} --[[(map<int32,int32>) 已购买列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得--]]
	msg.skillMap = {} --[[(map<int32,int32>) 技能<id,等级>--]]
	msg.moduleId = 0 --[[(int32) 模块id--]]
	return msg
end

function MsgDef.Msg5030143:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.buyList))
	for kn,elm in ipairs(self.buyList) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skillMap))
	for kn,elm in ipairs(self.skillMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.moduleId);
	return self
end

function MsgDef.Msg5030143:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local buyList_size = sm:readInt16()
	for i = 1,buyList_size do
		local kv = sm:readInt32();
		self.buyList[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local skillMap_size = sm:readInt16()
	for i = 1,skillMap_size do
		local kv = sm:readInt32();
		self.skillMap[kv] = sm:readInt32();
	end
	self.moduleId = sm:readInt32();
	return self
end


function MsgDef.Msg5030143:opcode()
	return 5030143
end
--[[ 请求七宝秒树活动信息--]]
MsgDef.Msg1030145 = {}

function MsgDef.Msg1030145:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:信息 2:升级一次 3:升级10次 4:查看奖励记录 5:领取奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取奖励的id--]]
	return msg
end

function MsgDef.Msg1030145:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030145:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030145:opcode()
	return 1030145
end

--[[ 请求七宝秒树活动信息(返回)--]]
MsgDef.Msg5030145 = {}
function MsgDef.Msg5030145:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:信息 2:升级一次 3:升级10次 4:查看奖励记录 5:领取奖励--]]
	msg.curLevel = 0 --[[(int32) 当前宝树等级--]]
	msg.exp = 0 --[[(int32) 当前宝树经验--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	msg.leftTimes = 0 --[[(int32) 剩余次数--]]
	msg.itemRecord = {} --[[(array<SimpleItemInfo>) 获得的奖励记录--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励id列表--]]
	return msg
end

function MsgDef.Msg5030145:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curLevel);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTimes);
	sm:writeInt16(#self.itemRecord)
	for i,elm in ipairs(self.itemRecord) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030145:decode(sm)
	self.reqType = sm:readInt8();
	self.curLevel = sm:readInt32();
	self.exp = sm:readInt32();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTimes = sm:readInt32();
	local itemRecord_size = sm:readInt16()
	for i = 1,itemRecord_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.itemRecord, element)
	end
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	return self
end


function MsgDef.Msg5030145:opcode()
	return 5030145
end
--[[ 请求点石成金信息--]]
MsgDef.Msg1030146 = {}

function MsgDef.Msg1030146:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 1:信息 2:抽奖 3:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 抽奖档次(看配置)--]]
	if msg.fashionMid == nil then msg.fashionMid = 0 end --[[(int32) 领取时装id--]]
	return msg
end

function MsgDef.Msg1030146:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.fashionMid);
	return self
end

function MsgDef.Msg1030146:decode(sm)
	self.reqType = sm:readInt32();
	self.cfgId = sm:readInt32();
	self.fashionMid = sm:readInt32();
	return self
end

function MsgDef.Msg1030146:opcode()
	return 1030146
end

--[[ 请求点石成金信息(返回)--]]
MsgDef.Msg5030146 = {}
function MsgDef.Msg5030146:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 1:信息 2:抽奖 3:领取--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.costScore = 0 --[[(int32) 当前消费积分--]]
	msg.leftScore = 0 --[[(int32) 剩余积分--]]
	msg.czCount = 0 --[[(int32) 今日充值元宝--]]
	msg.poolYb = 0 --[[(int32) 今日奖金池金额--]]
	msg.itemInfos = {} --[[(array<SimpleItemInfo>) 抽奖获得奖励--]]
	msg.record = {} --[[(array<string>) 记录--]]
	msg.fashionGotList = {} --[[(array<int32>) 已领取时装id列表--]]
	return msg
end

function MsgDef.Msg5030146:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.costScore);
	sm:writeInt32(self.leftScore);
	sm:writeInt32(self.czCount);
	sm:writeInt32(self.poolYb);
	sm:writeInt16(#self.itemInfos)
	for i,elm in ipairs(self.itemInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.fashionGotList))
	for i,elm in ipairs(self.fashionGotList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030146:decode(sm)
	self.reqType = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.costScore = sm:readInt32();
	self.leftScore = sm:readInt32();
	self.czCount = sm:readInt32();
	self.poolYb = sm:readInt32();
	local itemInfos_size = sm:readInt16()
	for i = 1,itemInfos_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.itemInfos, element)
	end
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	local fashionGotList_size = sm:readInt16()
	for i = 1,fashionGotList_size do
		local ele = sm:readInt32();
		table.insert(self.fashionGotList, ele)
	end
	return self
end


function MsgDef.Msg5030146:opcode()
	return 5030146
end
--[[ 请求七天登录开服活动--]]
MsgDef.Msg1030147 = {}

function MsgDef.Msg1030147:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取的id--]]
	return msg
end

function MsgDef.Msg1030147:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030147:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030147:opcode()
	return 1030147
end

--[[ 请求七天登录开服活动(返回)--]]
MsgDef.Msg5030147 = {}
function MsgDef.Msg5030147:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.gotAwardIdList = {} --[[(array<int32>) 已领取的id列表--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030147:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curDay);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotAwardIdList))
	for i,elm in ipairs(self.gotAwardIdList) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030147:decode(sm)
	self.reqType = sm:readInt8();
	self.curDay = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gotAwardIdList_size = sm:readInt16()
	for i = 1,gotAwardIdList_size do
		local ele = sm:readInt32();
		table.insert(self.gotAwardIdList, ele)
	end
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030147:opcode()
	return 5030147
end
--[[ 请求开服战力排行活动--]]
MsgDef.Msg1030148 = {}

function MsgDef.Msg1030148:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030148:encode(sm)
	return self
end

function MsgDef.Msg1030148:decode(sm)
	return self
end

function MsgDef.Msg1030148:opcode()
	return 1030148
end

--[[ 请求开服战力排行活动(返回)--]]
MsgDef.Msg5030148 = {}
function MsgDef.Msg5030148:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行数据--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	return msg
end

function MsgDef.Msg5030148:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	sm:writeInt8(self.isShowTime);
	return self
end

function MsgDef.Msg5030148:decode(sm)
	self.lastTime = sm:readInt32();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	self.isShowTime = sm:readInt8();
	return self
end


function MsgDef.Msg5030148:opcode()
	return 5030148
end
--[[ 请求跨服战力排行活动--]]
MsgDef.Msg1030149 = {}

function MsgDef.Msg1030149:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030149:encode(sm)
	return self
end

function MsgDef.Msg1030149:decode(sm)
	return self
end

function MsgDef.Msg1030149:opcode()
	return 1030149
end

--[[ 请求跨服战力排行活动(返回)--]]
MsgDef.Msg5030149 = {}
function MsgDef.Msg5030149:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行数据--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	return msg
end

function MsgDef.Msg5030149:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	sm:writeInt8(self.isShowTime);
	return self
end

function MsgDef.Msg5030149:decode(sm)
	self.lastTime = sm:readInt32();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	self.isShowTime = sm:readInt8();
	return self
end


function MsgDef.Msg5030149:opcode()
	return 5030149
end
--[[ 请求装备战力排行活动--]]
MsgDef.Msg1030150 = {}

function MsgDef.Msg1030150:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030150:encode(sm)
	return self
end

function MsgDef.Msg1030150:decode(sm)
	return self
end

function MsgDef.Msg1030150:opcode()
	return 1030150
end

--[[ 请求装备战力排行活动(返回)--]]
MsgDef.Msg5030150 = {}
function MsgDef.Msg5030150:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 装备战力排行数据--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	return msg
end

function MsgDef.Msg5030150:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	sm:writeInt8(self.isShowTime);
	return self
end

function MsgDef.Msg5030150:decode(sm)
	self.lastTime = sm:readInt32();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	self.isShowTime = sm:readInt8();
	return self
end


function MsgDef.Msg5030150:opcode()
	return 5030150
end
--[[ 请求开服集字活动--]]
MsgDef.Msg1030151 = {}

function MsgDef.Msg1030151:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:兑换信息 2:兑换--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030151:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030151:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030151:opcode()
	return 1030151
end

--[[ 请求开服集字活动(返回)--]]
MsgDef.Msg5030151 = {}
function MsgDef.Msg5030151:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:兑换信息 2:兑换--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得--]]
	msg.leftCountMap = {} --[[(map<int32,int32>) 剩余兑换次数--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030151:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.leftCountMap))
	for kn,elm in ipairs(self.leftCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030151:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local leftCountMap_size = sm:readInt16()
	for i = 1,leftCountMap_size do
		local kv = sm:readInt32();
		self.leftCountMap[kv] = sm:readInt32();
	end
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030151:opcode()
	return 5030151
end
--[[ 请求天书寻宝信息--]]
MsgDef.Msg1030152 = {}

function MsgDef.Msg1030152:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030152:encode(sm)
	return self
end

function MsgDef.Msg1030152:decode(sm)
	return self
end

function MsgDef.Msg1030152:opcode()
	return 1030152
end

--[[ 请求天书寻宝信息(返回)--]]
MsgDef.Msg5030152 = {}
function MsgDef.Msg5030152:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.bzItemLeft = 0 --[[(int32) 剩余宝藏钥匙数量--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:有东西--]]
	return msg
end

function MsgDef.Msg5030152:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.bzItemLeft);
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030152:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.bzItemLeft = sm:readInt32();
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030152:opcode()
	return 5030152
end
--[[ 请求天书寻宝积分商城--]]
MsgDef.Msg1030153 = {}

function MsgDef.Msg1030153:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030153:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030153:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030153:opcode()
	return 1030153
end

--[[ 请求天书寻宝积分商城(返回)--]]
MsgDef.Msg5030153 = {}
function MsgDef.Msg5030153:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	msg.score = 0 --[[(int32) 积分--]]
	return msg
end

function MsgDef.Msg5030153:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	return self
end

function MsgDef.Msg5030153:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	return self
end


function MsgDef.Msg5030153:opcode()
	return 5030153
end
--[[ 请求天书寻宝临时仓库--]]
MsgDef.Msg1030154 = {}

function MsgDef.Msg1030154:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:物品信息 2:一键取出--]]
	return msg
end

function MsgDef.Msg1030154:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030154:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030154:opcode()
	return 1030154
end

--[[ 请求天书寻宝临时仓库(返回)--]]
MsgDef.Msg5030154 = {}
function MsgDef.Msg5030154:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:物品信息 2:一键取出--]]
	msg.itemInfos = {} --[[(array<ItemInfo>) 物品信息--]]
	msg.gotItems = {} --[[(array<SimpleItemInfo>) 取出获得--]]
	return msg
end

function MsgDef.Msg5030154:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.itemInfos)
	for i,elm in ipairs(self.itemInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.gotItems)
	for i,elm in ipairs(self.gotItems) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030154:decode(sm)
	self.reqType = sm:readInt8();
	local itemInfos_size = sm:readInt16()
	for i = 1,itemInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.itemInfos, element)
	end
	local gotItems_size = sm:readInt16()
	for i = 1,gotItems_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.gotItems, element)
	end
	return self
end


function MsgDef.Msg5030154:opcode()
	return 5030154
end
--[[ 请求天书寻宝--]]
MsgDef.Msg1030155 = {}

function MsgDef.Msg1030155:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030155:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030155:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030155:opcode()
	return 1030155
end

--[[ 请求天书寻宝(返回)--]]
MsgDef.Msg5030155 = {}
function MsgDef.Msg5030155:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	msg.cid = 0 --[[(int32) 寻宝获得对应配置id--]]
	msg.bzItemLeft = 0 --[[(int32) 宝藏钥匙剩余数量--]]
	return msg
end

function MsgDef.Msg5030155:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cid);
	sm:writeInt32(self.bzItemLeft);
	return self
end

function MsgDef.Msg5030155:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cid = sm:readInt32();
	self.bzItemLeft = sm:readInt32();
	return self
end


function MsgDef.Msg5030155:opcode()
	return 5030155
end
--[[ 请求进阶寻宝信息--]]
MsgDef.Msg1030156 = {}

function MsgDef.Msg1030156:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030156:encode(sm)
	return self
end

function MsgDef.Msg1030156:decode(sm)
	return self
end

function MsgDef.Msg1030156:opcode()
	return 1030156
end

--[[ 请求进阶寻宝信息(返回)--]]
MsgDef.Msg5030156 = {}
function MsgDef.Msg5030156:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030156:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030156:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030156:opcode()
	return 5030156
end
--[[ 请求进阶寻宝积分商城--]]
MsgDef.Msg1030157 = {}

function MsgDef.Msg1030157:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030157:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030157:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030157:opcode()
	return 1030157
end

--[[ 请求进阶寻宝积分商城(返回)--]]
MsgDef.Msg5030157 = {}
function MsgDef.Msg5030157:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030157:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030157:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030157:opcode()
	return 5030157
end
--[[ 请求铸星寻宝信息--]]
MsgDef.Msg1030158 = {}

function MsgDef.Msg1030158:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030158:encode(sm)
	return self
end

function MsgDef.Msg1030158:decode(sm)
	return self
end

function MsgDef.Msg1030158:opcode()
	return 1030158
end

--[[ 请求铸星寻宝信息(返回)--]]
MsgDef.Msg5030158 = {}
function MsgDef.Msg5030158:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030158:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030158:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030158:opcode()
	return 5030158
end
--[[ 请求铸星寻宝积分商城兑换--]]
MsgDef.Msg1030159 = {}

function MsgDef.Msg1030159:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030159:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030159:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030159:opcode()
	return 1030159
end

--[[ 请求铸星寻宝积分商城兑换(返回)--]]
MsgDef.Msg5030159 = {}
function MsgDef.Msg5030159:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030159:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030159:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030159:opcode()
	return 5030159
end
--[[ 请求进阶寻宝--]]
MsgDef.Msg1030160 = {}

function MsgDef.Msg1030160:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030160:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030160:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030160:opcode()
	return 1030160
end

--[[ 请求进阶寻宝(返回)--]]
MsgDef.Msg5030160 = {}
function MsgDef.Msg5030160:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.cid = 0 --[[(int32) 寻宝获得对应配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030160:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030160:decode(sm)
	self.times = sm:readInt32();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030160:opcode()
	return 5030160
end
--[[ 请求铸星寻宝--]]
MsgDef.Msg1030161 = {}

function MsgDef.Msg1030161:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030161:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030161:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030161:opcode()
	return 1030161
end

--[[ 请求铸星寻宝(返回)--]]
MsgDef.Msg5030161 = {}
function MsgDef.Msg5030161:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.cid = 0 --[[(int32) 寻宝获得对应配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030161:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030161:decode(sm)
	self.times = sm:readInt32();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030161:opcode()
	return 5030161
end
--[[ 请求圣诞活动登录好礼--]]
MsgDef.Msg1030162 = {}

function MsgDef.Msg1030162:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取信息  2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030162:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030162:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030162:opcode()
	return 1030162
end

--[[ 请求圣诞活动登录好礼(返回)--]]
MsgDef.Msg5030162 = {}
function MsgDef.Msg5030162:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:领取信息  2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.itemGotDatas = {} --[[(map<int32,int32>) 已领取的id列表<配置,1:已领取>--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030162:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.itemGotDatas))
	for kn,elm in ipairs(self.itemGotDatas) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030162:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local itemGotDatas_size = sm:readInt16()
	for i = 1,itemGotDatas_size do
		local kv = sm:readInt32();
		self.itemGotDatas[kv] = sm:readInt32();
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030162:opcode()
	return 5030162
end
--[[ 请求圣诞活动许愿袜信息--]]
MsgDef.Msg1030163 = {}

function MsgDef.Msg1030163:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型1:信息 2:上交圣诞袜 3:领取奖励--]]
	if msg.commitCount == nil then msg.commitCount = 0 end --[[(int32) 上交数量--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取提交数量奖励对应id--]]
	return msg
end

function MsgDef.Msg1030163:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.commitCount);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030163:decode(sm)
	self.reqType = sm:readInt8();
	self.commitCount = sm:readInt32();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030163:opcode()
	return 1030163
end

--[[ 请求圣诞活动许愿袜信息(返回)--]]
MsgDef.Msg5030163 = {}
function MsgDef.Msg5030163:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 请求类型1:信息 2:上交圣诞袜3:领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 上交获得奖励--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.commitNum = 0 --[[(int32) 已上交圣诞袜数量--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励列表--]]
	return msg
end

function MsgDef.Msg5030163:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.commitNum);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030163:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.commitNum = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	return self
end


function MsgDef.Msg5030163:opcode()
	return 5030163
end
--[[ 请求圣诞树信息--]]
MsgDef.Msg1030164 = {}

function MsgDef.Msg1030164:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030164:encode(sm)
	return self
end

function MsgDef.Msg1030164:decode(sm)
	return self
end

function MsgDef.Msg1030164:opcode()
	return 1030164
end

--[[ 请求圣诞树信息(返回)--]]
MsgDef.Msg5030164 = {}
function MsgDef.Msg5030164:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.treeLevel = 0 --[[(int32) 圣诞树等级--]]
	msg.commitCount = 0 --[[(int32) 圣诞袜上交总数量--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030164:encode(sm)
	sm:writeInt32(self.treeLevel);
	sm:writeInt32(self.commitCount);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030164:decode(sm)
	self.treeLevel = sm:readInt32();
	self.commitCount = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030164:opcode()
	return 5030164
end
--[[ 请求圣诞活动排行信息--]]
MsgDef.Msg1030165 = {}

function MsgDef.Msg1030165:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030165:encode(sm)
	return self
end

function MsgDef.Msg1030165:decode(sm)
	return self
end

function MsgDef.Msg1030165:opcode()
	return 1030165
end

--[[ 请求圣诞活动排行信息(返回)--]]
MsgDef.Msg5030165 = {}
function MsgDef.Msg5030165:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rankingInfos = {} --[[(array<ChristmasRankingInfo>) 个人排行--]]
	msg.gangRankingInfos = {} --[[(array<ChristmasRankingInfo>) 仙盟排行--]]
	return msg
end

function MsgDef.Msg5030165:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.gangRankingInfos)
	for i,elm in ipairs(self.gangRankingInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030165:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.ChristmasRankingInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	local gangRankingInfos_size = sm:readInt16()
	for i = 1,gangRankingInfos_size do
		local element = MsgDef.ChristmasRankingInfo:create():decode(sm)
		table.insert(self.gangRankingInfos, element)
	end
	return self
end


function MsgDef.Msg5030165:opcode()
	return 5030165
end
--[[ 请求每周登录奖励--]]
MsgDef.Msg1030166 = {}

function MsgDef.Msg1030166:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取信息 2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030166:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030166:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030166:opcode()
	return 1030166
end

--[[ 请求每周登录奖励(返回)--]]
MsgDef.Msg5030166 = {}
function MsgDef.Msg5030166:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:领取信息 2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.itemGotDatas = {} --[[(array<LoginAwardInfo>) 奖励领取状态--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030166:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.itemGotDatas)
	for i,elm in ipairs(self.itemGotDatas) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030166:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local itemGotDatas_size = sm:readInt16()
	for i = 1,itemGotDatas_size do
		local element = MsgDef.LoginAwardInfo:create():decode(sm)
		table.insert(self.itemGotDatas, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030166:opcode()
	return 5030166
end
--[[ 请求每周活动副本双倍信息--]]
MsgDef.Msg1030167 = {}

function MsgDef.Msg1030167:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:活动信息 2:奖励领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int8) 奖励id--]]
	return msg
end

function MsgDef.Msg1030167:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.cid);
	return self
end

function MsgDef.Msg1030167:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt8();
	return self
end

function MsgDef.Msg1030167:opcode()
	return 1030167
end

--[[ 请求每周活动副本双倍信息(返回)--]]
MsgDef.Msg5030167 = {}
function MsgDef.Msg5030167:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actType = 0 --[[(int8) 当前开启的活动(1:指定副本双倍 2:任务 3:挂机双倍 4:掉道具)--]]
	msg.reqType = 0 --[[(int8) 1:活动信息 2:奖励领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030167:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt8(self.actType);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030167:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.actType = sm:readInt8();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030167:opcode()
	return 5030167
end
--[[ 请求双倍活动副本信息--]]
MsgDef.Msg1030168 = {}

function MsgDef.Msg1030168:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030168:encode(sm)
	return self
end

function MsgDef.Msg1030168:decode(sm)
	return self
end

function MsgDef.Msg1030168:opcode()
	return 1030168
end

--[[ 请求双倍活动副本信息(返回)--]]
MsgDef.Msg5030168 = {}
function MsgDef.Msg5030168:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.doubleModuleList = {} --[[(array<int32>) 双倍模块列表--]]
	return msg
end

function MsgDef.Msg5030168:encode(sm)
	sm:writeInt16(get_map_size(self.doubleModuleList))
	for i,elm in ipairs(self.doubleModuleList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030168:decode(sm)
	local doubleModuleList_size = sm:readInt16()
	for i = 1,doubleModuleList_size do
		local ele = sm:readInt32();
		table.insert(self.doubleModuleList, ele)
	end
	return self
end


function MsgDef.Msg5030168:opcode()
	return 5030168
end
--[[ 请求每周挂机双倍活动--]]
MsgDef.Msg1030169 = {}

function MsgDef.Msg1030169:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030169:encode(sm)
	return self
end

function MsgDef.Msg1030169:decode(sm)
	return self
end

function MsgDef.Msg1030169:opcode()
	return 1030169
end

--[[ 请求每周挂机双倍活动(返回)--]]
MsgDef.Msg5030169 = {}
function MsgDef.Msg5030169:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030169:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030169:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030169:opcode()
	return 5030169
end
--[[ 请求宠物寻宝信息--]]
MsgDef.Msg1030170 = {}

function MsgDef.Msg1030170:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030170:encode(sm)
	return self
end

function MsgDef.Msg1030170:decode(sm)
	return self
end

function MsgDef.Msg1030170:opcode()
	return 1030170
end

--[[ 请求宠物寻宝信息(返回)--]]
MsgDef.Msg5030170 = {}
function MsgDef.Msg5030170:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030170:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030170:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030170:opcode()
	return 5030170
end
--[[ 请求宠物寻宝积分商城--]]
MsgDef.Msg1030171 = {}

function MsgDef.Msg1030171:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030171:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030171:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030171:opcode()
	return 1030171
end

--[[ 请求宠物寻宝积分商城(返回)--]]
MsgDef.Msg5030171 = {}
function MsgDef.Msg5030171:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030171:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030171:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030171:opcode()
	return 5030171
end
--[[ 请求宠物寻宝--]]
MsgDef.Msg1030172 = {}

function MsgDef.Msg1030172:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030172:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030172:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030172:opcode()
	return 1030172
end

--[[ 请求宠物寻宝(返回)--]]
MsgDef.Msg5030172 = {}
function MsgDef.Msg5030172:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030172:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030172:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030172:opcode()
	return 5030172
end
--[[ 请求活动登录好礼活动(统一)--]]
MsgDef.Msg1030175 = {}

function MsgDef.Msg1030175:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取信息 2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取配置id--]]
	return msg
end

function MsgDef.Msg1030175:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030175:decode(sm)
	self.actId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030175:opcode()
	return 1030175
end

--[[ 请求活动登录好礼活动(统一)(返回)--]]
MsgDef.Msg5030175 = {}
function MsgDef.Msg5030175:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:领取信息 2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.itemGotDatas = {} --[[(array<LoginAwardInfo>) 奖励领取状态--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg5030175:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.itemGotDatas)
	for i,elm in ipairs(self.itemGotDatas) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg5030175:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local itemGotDatas_size = sm:readInt16()
	for i = 1,itemGotDatas_size do
		local element = MsgDef.LoginAwardInfo:create():decode(sm)
		table.insert(self.itemGotDatas, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end


function MsgDef.Msg5030175:opcode()
	return 5030175
end
--[[ 请求全服红包信息--]]
MsgDef.Msg1030176 = {}

function MsgDef.Msg1030176:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:信息 2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取配置--]]
	return msg
end

function MsgDef.Msg1030176:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030176:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030176:opcode()
	return 1030176
end

--[[ 请求全服红包信息(返回)--]]
MsgDef.Msg5030176 = {}
function MsgDef.Msg5030176:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.redBadStatus = {} --[[(map<int32,int32>) 全服红包状态<0:未达标 1:可领取 2:已领取>--]]
	msg.reqType = 0 --[[(int8) 1:信息 2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.curRedBagCount = 0 --[[(int32) 当前全服红包数量--]]
	return msg
end

function MsgDef.Msg5030176:encode(sm)
	sm:writeInt16(get_map_size(self.redBadStatus))
	for kn,elm in ipairs(self.redBadStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.curRedBagCount);
	return self
end

function MsgDef.Msg5030176:decode(sm)
	local redBadStatus_size = sm:readInt16()
	for i = 1,redBadStatus_size do
		local kv = sm:readInt32();
		self.redBadStatus[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.curRedBagCount = sm:readInt32();
	return self
end


function MsgDef.Msg5030176:opcode()
	return 5030176
end
--[[ 请求天降红包信息--]]
MsgDef.Msg1030177 = {}

function MsgDef.Msg1030177:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1030177:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1030177:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1030177:opcode()
	return 1030177
end

--[[ 请求天降红包信息(返回)--]]
MsgDef.Msg5030177 = {}
function MsgDef.Msg5030177:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页数--]]
	msg.sumPage = 0 --[[(int32) 总页数--]]
	msg.redBagInfos = {} --[[(array<RedBagInfo>) 红包列表--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030177:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.sumPage);
	sm:writeInt16(#self.redBagInfos)
	for i,elm in ipairs(self.redBagInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030177:decode(sm)
	self.page = sm:readInt32();
	self.sumPage = sm:readInt32();
	local redBagInfos_size = sm:readInt16()
	for i = 1,redBagInfos_size do
		local element = MsgDef.RedBagInfo:create():decode(sm)
		table.insert(self.redBagInfos, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030177:opcode()
	return 5030177
end
--[[ 请求天降红包抢红包--]]
MsgDef.Msg1030178 = {}

function MsgDef.Msg1030178:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBagId == nil then msg.redBagId = 0 end --[[(int64) 红包id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:抢单个 2:一键抢--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页--]]
	return msg
end

function MsgDef.Msg1030178:encode(sm)
	sm:writeInt64(self.redBagId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1030178:decode(sm)
	self.redBagId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1030178:opcode()
	return 1030178
end

--[[ 请求天降红包抢红包(返回)--]]
MsgDef.Msg5030178 = {}
function MsgDef.Msg5030178:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 当前页--]]
	msg.moneyYb = 0 --[[(int32) 抢到的元宝--]]
	msg.copper = 0 --[[(int32) 抢到的铜钱--]]
	msg.maxPage = 0 --[[(int32) 最大页--]]
	msg.curRecordCount = 0 --[[(int32) 当前红包记录总数--]]
	msg.redBagInfo = MsgDef.RedBagInfo:create() --[[(RedBagInfo) 红包信息--]]
	msg.redBagRecords = {} --[[(array<RedBagRecord>) 抢红包记录--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030178:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.moneyYb);
	sm:writeInt32(self.copper);
	sm:writeInt32(self.maxPage);
	sm:writeInt32(self.curRecordCount);
	self.redBagInfo:encode(sm)
	sm:writeInt16(#self.redBagRecords)
	for i,elm in ipairs(self.redBagRecords) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030178:decode(sm)
	self.page = sm:readInt32();
	self.moneyYb = sm:readInt32();
	self.copper = sm:readInt32();
	self.maxPage = sm:readInt32();
	self.curRecordCount = sm:readInt32();
	self.redBagInfo:decode(sm)
	local redBagRecords_size = sm:readInt16()
	for i = 1,redBagRecords_size do
		local element = MsgDef.RedBagRecord:create():decode(sm)
		table.insert(self.redBagRecords, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030178:opcode()
	return 5030178
end
--[[ 请求猜灯谜会活动信息--]]
MsgDef.Msg1030179 = {}

function MsgDef.Msg1030179:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030179:encode(sm)
	return self
end

function MsgDef.Msg1030179:decode(sm)
	return self
end

function MsgDef.Msg1030179:opcode()
	return 1030179
end

--[[ 请求猜灯谜会活动信息(返回)--]]
MsgDef.Msg5030179 = {}
function MsgDef.Msg5030179:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.nextOpenTime = 0 --[[(int32) 下次开启时间--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030179:encode(sm)
	sm:writeInt32(self.leftSec);
	sm:writeInt32(self.nextOpenTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030179:decode(sm)
	self.leftSec = sm:readInt32();
	self.nextOpenTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030179:opcode()
	return 5030179
end
--[[ 请求灯谜排行信息--]]
MsgDef.Msg1030181 = {}

function MsgDef.Msg1030181:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030181:encode(sm)
	return self
end

function MsgDef.Msg1030181:decode(sm)
	return self
end

function MsgDef.Msg1030181:opcode()
	return 1030181
end

--[[ 请求灯谜排行信息(返回)--]]
MsgDef.Msg5030181 = {}
function MsgDef.Msg5030181:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 积分排名--]]
	msg.myRankInfo = MsgDef.ScoreRaningInfo:create() --[[(ScoreRaningInfo) 我的排行信息--]]
	return msg
end

function MsgDef.Msg5030181:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	return self
end

function MsgDef.Msg5030181:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	self.myRankInfo:decode(sm)
	return self
end


function MsgDef.Msg5030181:opcode()
	return 5030181
end
--[[ 请求灯谜答题信息--]]
MsgDef.Msg1030182 = {}

function MsgDef.Msg1030182:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:题目信息 2:答题--]]
	if msg.answer == nil then msg.answer = 0 end --[[(int32) 答案，从1开始--]]
	return msg
end

function MsgDef.Msg1030182:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.answer);
	return self
end

function MsgDef.Msg1030182:decode(sm)
	self.reqType = sm:readInt8();
	self.answer = sm:readInt32();
	return self
end

function MsgDef.Msg1030182:opcode()
	return 1030182
end

--[[ 请求灯谜答题信息(返回)--]]
MsgDef.Msg5030182 = {}
function MsgDef.Msg5030182:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:题目信息 2:答题--]]
	msg.curQuestionNum = 0 --[[(int32) 当前题--]]
	msg.myScore = 0 --[[(int32) 积分--]]
	msg.subjectId = 0 --[[(int32) 题目id--]]
	msg.subjectLeftSec = 0 --[[(int32) 当前题目剩余秒数--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.actOpenTime = 0 --[[(int32) 开始时间--]]
	msg.answer = 0 --[[(int32) 答案，从1开始--]]
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 积分排行--]]
	return msg
end

function MsgDef.Msg5030182:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curQuestionNum);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.subjectId);
	sm:writeInt32(self.subjectLeftSec);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.actOpenTime);
	sm:writeInt32(self.answer);
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030182:decode(sm)
	self.reqType = sm:readInt8();
	self.curQuestionNum = sm:readInt32();
	self.myScore = sm:readInt32();
	self.subjectId = sm:readInt32();
	self.subjectLeftSec = sm:readInt32();
	self.ranking = sm:readInt32();
	self.actOpenTime = sm:readInt32();
	self.answer = sm:readInt32();
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	return self
end


function MsgDef.Msg5030182:opcode()
	return 5030182
end
--[[ 请求宠物战力排行榜--]]
MsgDef.Msg1030183 = {}

function MsgDef.Msg1030183:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030183:encode(sm)
	return self
end

function MsgDef.Msg1030183:decode(sm)
	return self
end

function MsgDef.Msg1030183:opcode()
	return 1030183
end

--[[ 请求宠物战力排行榜(返回)--]]
MsgDef.Msg5030183 = {}
function MsgDef.Msg5030183:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行信息--]]
	return msg
end

function MsgDef.Msg5030183:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.isShowTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030183:decode(sm)
	self.lastTime = sm:readInt32();
	self.isShowTime = sm:readInt8();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	return self
end


function MsgDef.Msg5030183:opcode()
	return 5030183
end
--[[ 请求意见反馈--]]
MsgDef.Msg1030201 = {}

function MsgDef.Msg1030201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示数据1:意见反馈;2:bug反馈--]]
	if msg.title == nil then msg.title = "" end --[[(string) 标题--]]
	if msg.satisfy == nil then msg.satisfy = 0 end --[[(int32) 满意度--]]
	if msg.content == nil then msg.content = "" end --[[(string) 内容--]]
	return msg
end

function MsgDef.Msg1030201:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.title);
	sm:writeInt32(self.satisfy);
	sm:writeString(self.content);
	return self
end

function MsgDef.Msg1030201:decode(sm)
	self.reqType = sm:readInt8();
	self.title = sm:readString();
	self.satisfy = sm:readInt32();
	self.content = sm:readString();
	return self
end

function MsgDef.Msg1030201:opcode()
	return 1030201
end

--[[ 请求意见反馈(返回)--]]
MsgDef.Msg5030201 = {}
function MsgDef.Msg5030201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) items--]]
	msg.ideaFirst = 0 --[[(int8) 意见是否为第一次,1是--]]
	msg.bugFirst = 0 --[[(int8) 意见是否为第一次,1是--]]
	msg.reqType = 0 --[[(int8) 0:显示数据1:意见反馈;2:bug反馈--]]
	return msg
end

function MsgDef.Msg5030201:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.ideaFirst);
	sm:writeInt8(self.bugFirst);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030201:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.ideaFirst = sm:readInt8();
	self.bugFirst = sm:readInt8();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030201:opcode()
	return 5030201
end
--[[ 请求下载有礼信息--]]
MsgDef.Msg1030202 = {}

function MsgDef.Msg1030202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1表示请求界面，2表示获取礼包--]]
	return msg
end

function MsgDef.Msg1030202:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030202:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030202:opcode()
	return 1030202
end

--[[ 请求下载有礼信息(返回)--]]
MsgDef.Msg5030202 = {}
function MsgDef.Msg5030202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isUsed = 0 --[[(int8) 0表示未领取该礼包，1表示已经领取该礼包--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.reqType = 0 --[[(int8) 1表示请求界面，2表示获取礼包--]]
	return msg
end

function MsgDef.Msg5030202:encode(sm)
	sm:writeInt8(self.isUsed);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030202:decode(sm)
	self.isUsed = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030202:opcode()
	return 5030202
end
--[[ 请求特惠抢购--]]
MsgDef.Msg1030203 = {}

function MsgDef.Msg1030203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型，0显示列表，1购买--]]
	if msg.buyId == nil then msg.buyId = 0 end --[[(int32) 购买id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动ID--]]
	return msg
end

function MsgDef.Msg1030203:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.buyId);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030203:decode(sm)
	self.reqType = sm:readInt8();
	self.buyId = sm:readInt32();
	self.amount = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030203:opcode()
	return 1030203
end

--[[ 请求特惠抢购(返回)--]]
MsgDef.Msg5030203 = {}
function MsgDef.Msg5030203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.state = 0 --[[(int8) 活动状态：0未开启，1已开启，2即将结束，3活动结束--]]
	msg.leftTime = 0 --[[(int32) 距离下次刷新或结束时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得物品--]]
	msg.buyCountMap = {} --[[(map<int32,int32>) id-->购买次数--]]
	msg.buyRecord = {} --[[(map<int32,int32>) 用户购买记录--]]
	return msg
end

function MsgDef.Msg5030203:encode(sm)
	sm:writeInt8(self.state);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.buyCountMap))
	for kn,elm in ipairs(self.buyCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.buyRecord))
	for kn,elm in ipairs(self.buyRecord) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030203:decode(sm)
	self.state = sm:readInt8();
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local buyCountMap_size = sm:readInt16()
	for i = 1,buyCountMap_size do
		local kv = sm:readInt32();
		self.buyCountMap[kv] = sm:readInt32();
	end
	local buyRecord_size = sm:readInt16()
	for i = 1,buyRecord_size do
		local kv = sm:readInt32();
		self.buyRecord[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030203:opcode()
	return 5030203
end
--[[ 请求活跃红包--]]
MsgDef.Msg1030204 = {}

function MsgDef.Msg1030204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息2=领取时装奖励--]]
	if msg.stage == nil then msg.stage = 0 end --[[(int32) 领取阶段--]]
	return msg
end

function MsgDef.Msg1030204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	return self
end

function MsgDef.Msg1030204:decode(sm)
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	return self
end

function MsgDef.Msg1030204:opcode()
	return 1030204
end

--[[ 请求活跃红包(返回)--]]
MsgDef.Msg5030204 = {}
function MsgDef.Msg5030204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.redBags = {} --[[(map<int32,int32>) 红包信息--]]
	msg.gotItems = {} --[[(array<int32>) 领取道具--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获取的道具--]]
	msg.curDay = 0 --[[(int32) 当前天数--]]
	msg.reqType = 0 --[[(int8) 1=信息2=领取奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.costYb = 0 --[[(int32) 已消耗元宝--]]
	return msg
end

function MsgDef.Msg5030204:encode(sm)
	sm:writeInt16(get_map_size(self.redBags))
	for kn,elm in ipairs(self.redBags) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotItems))
	for i,elm in ipairs(self.gotItems) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.costYb);
	return self
end

function MsgDef.Msg5030204:decode(sm)
	local redBags_size = sm:readInt16()
	for i = 1,redBags_size do
		local kv = sm:readInt32();
		self.redBags[kv] = sm:readInt32();
	end
	local gotItems_size = sm:readInt16()
	for i = 1,gotItems_size do
		local ele = sm:readInt32();
		table.insert(self.gotItems, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.reqType = sm:readInt8();
	self.leftTime = sm:readInt32();
	self.costYb = sm:readInt32();
	return self
end


function MsgDef.Msg5030204:opcode()
	return 5030204
end
--[[ 请求夏日炎炎活动--]]
MsgDef.Msg1030205 = {}

function MsgDef.Msg1030205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息2=抽奖3=领取抽奖道具--]]
	if msg.stage == nil then msg.stage = 0 end --[[(int32) 领取抽奖道具阶段--]]
	return msg
end

function MsgDef.Msg1030205:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	return self
end

function MsgDef.Msg1030205:decode(sm)
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	return self
end

function MsgDef.Msg1030205:opcode()
	return 1030205
end

--[[ 请求夏日炎炎活动(返回)--]]
MsgDef.Msg5030205 = {}
function MsgDef.Msg5030205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gotItems = {} --[[(array<int32>) 已获得抽奖道具id--]]
	msg.gotCostItems = {} --[[(array<int32>) 已获得消耗道具--]]
	msg.itemId = 0 --[[(int32) 当前抽奖获得道具id--]]
	msg.costItemCount = 0 --[[(int32) 消耗道具剩余数量--]]
	msg.reqType = 0 --[[(int8) 1=信息2=抽奖3=领取抽奖道具--]]
	msg.activeCount = 0 --[[(int32) 当前活跃度--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030205:encode(sm)
	sm:writeInt16(get_map_size(self.gotItems))
	for i,elm in ipairs(self.gotItems) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotCostItems))
	for i,elm in ipairs(self.gotCostItems) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.costItemCount);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.activeCount);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030205:decode(sm)
	local gotItems_size = sm:readInt16()
	for i = 1,gotItems_size do
		local ele = sm:readInt32();
		table.insert(self.gotItems, ele)
	end
	local gotCostItems_size = sm:readInt16()
	for i = 1,gotCostItems_size do
		local ele = sm:readInt32();
		table.insert(self.gotCostItems, ele)
	end
	self.itemId = sm:readInt32();
	self.costItemCount = sm:readInt32();
	self.reqType = sm:readInt8();
	self.activeCount = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030205:opcode()
	return 5030205
end
--[[ 请求零元购--]]
MsgDef.Msg1030206 = {}

function MsgDef.Msg1030206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:购买 2:领取--]]
	if msg.cId == nil then msg.cId = 0 end --[[(int32) 配置档位id--]]
	return msg
end

function MsgDef.Msg1030206:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cId);
	return self
end

function MsgDef.Msg1030206:decode(sm)
	self.reqType = sm:readInt8();
	self.cId = sm:readInt32();
	return self
end

function MsgDef.Msg1030206:opcode()
	return 1030206
end

--[[ 请求零元购(返回)--]]
MsgDef.Msg5030206 = {}
function MsgDef.Msg5030206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cId = 0 --[[(int32) 配置档位id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得--]]
	msg.signMap = {} --[[(map<int32,int32>) key:配置档位id,value:1已购买--]]
	msg.todayLeftTime = 0 --[[(int32) 今日剩余时间--]]
	msg.openDay = 0 --[[(int32) 开服第几天,从1开始--]]
	msg.counts = {} --[[(map<int32,int32>) 限制数量的已被购买数--]]
	return msg
end

function MsgDef.Msg5030206:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.signMap))
	for kn,elm in ipairs(self.signMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt32(self.openDay);
	sm:writeInt16(get_map_size(self.counts))
	for kn,elm in ipairs(self.counts) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030206:decode(sm)
	self.reqType = sm:readInt8();
	self.cId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local signMap_size = sm:readInt16()
	for i = 1,signMap_size do
		local kv = sm:readInt32();
		self.signMap[kv] = sm:readInt32();
	end
	self.todayLeftTime = sm:readInt32();
	self.openDay = sm:readInt32();
	local counts_size = sm:readInt16()
	for i = 1,counts_size do
		local kv = sm:readInt32();
		self.counts[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030206:opcode()
	return 5030206
end
--[[ 请求开服等级排行--]]
MsgDef.Msg1030207 = {}

function MsgDef.Msg1030207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动ID--]]
	return msg
end

function MsgDef.Msg1030207:encode(sm)
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030207:decode(sm)
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030207:opcode()
	return 1030207
end

--[[ 请求开服等级排行(返回)--]]
MsgDef.Msg5030207 = {}
function MsgDef.Msg5030207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.openActHisList = {} --[[(array<int32>) 已开放过的排行榜活动列表--]]
	msg.rankInfos = {} --[[(array<OpenLevelRankInfo>) 排行榜信息--]]
	return msg
end

function MsgDef.Msg5030207:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.openActHisList))
	for i,elm in ipairs(self.openActHisList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030207:decode(sm)
	self.leftTime = sm:readInt32();
	local openActHisList_size = sm:readInt16()
	for i = 1,openActHisList_size do
		local ele = sm:readInt32();
		table.insert(self.openActHisList, ele)
	end
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.OpenLevelRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030207:opcode()
	return 5030207
end
--[[ 请求等级冲锋活动--]]
MsgDef.Msg1030208 = {}

function MsgDef.Msg1030208:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动Id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息，2=领取--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 项目id--]]
	return msg
end

function MsgDef.Msg1030208:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1030208:decode(sm)
	self.actId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1030208:opcode()
	return 1030208
end

--[[ 请求等级冲锋活动(返回)--]]
MsgDef.Msg5030208 = {}
function MsgDef.Msg5030208:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的道具--]]
	msg.reqType = 0 --[[(int8) 1=信息，2=领取--]]
	msg.gotItems = {} --[[(array<int32>) 已领取列表--]]
	return msg
end

function MsgDef.Msg5030208:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotItems))
	for i,elm in ipairs(self.gotItems) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030208:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	local gotItems_size = sm:readInt16()
	for i = 1,gotItems_size do
		local ele = sm:readInt32();
		table.insert(self.gotItems, ele)
	end
	return self
end


function MsgDef.Msg5030208:opcode()
	return 5030208
end
--[[ 请求砸蛋活动--]]
MsgDef.Msg1030209 = {}

function MsgDef.Msg1030209:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarId == nil then msg.tarId = 0 end --[[(int32) 砸蛋目标id,时装的目标阶段--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1显示2领取时装3砸蛋4全部砸开5刷新6累积奖励--]]
	return msg
end

function MsgDef.Msg1030209:encode(sm)
	sm:writeInt32(self.tarId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030209:decode(sm)
	self.tarId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030209:opcode()
	return 1030209
end

--[[ 请求砸蛋活动(返回)--]]
MsgDef.Msg5030209 = {}
function MsgDef.Msg5030209:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.currEggs = {} --[[(map<int32,int32>) 当前刷新的蛋--]]
	msg.currCount = 0 --[[(int32) 砸蛋次数--]]
	msg.leftCounts = 0 --[[(int32) 剩余免费次数--]]
	msg.leftRefreshCounts = 0 --[[(int32) 剩余免费刷新次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 砸中的道具--]]
	msg.gotFashion = {} --[[(array<int32>) 领取的时装--]]
	msg.history = {} --[[(array<SimpleItemInfo>) 已砸中的道具--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.cumulateList = {} --[[(array<int32>) 累积奖励领取列表--]]
	msg.reqType = 0 --[[(int8) 1显示2领取时装3砸蛋4全部砸开5刷新6累积奖励--]]
	return msg
end

function MsgDef.Msg5030209:encode(sm)
	sm:writeInt16(get_map_size(self.currEggs))
	for kn,elm in ipairs(self.currEggs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.currCount);
	sm:writeInt32(self.leftCounts);
	sm:writeInt32(self.leftRefreshCounts);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotFashion))
	for i,elm in ipairs(self.gotFashion) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.history)
	for i,elm in ipairs(self.history) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.cumulateList))
	for i,elm in ipairs(self.cumulateList) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030209:decode(sm)
	local currEggs_size = sm:readInt16()
	for i = 1,currEggs_size do
		local kv = sm:readInt32();
		self.currEggs[kv] = sm:readInt32();
	end
	self.currCount = sm:readInt32();
	self.leftCounts = sm:readInt32();
	self.leftRefreshCounts = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gotFashion_size = sm:readInt16()
	for i = 1,gotFashion_size do
		local ele = sm:readInt32();
		table.insert(self.gotFashion, ele)
	end
	local history_size = sm:readInt16()
	for i = 1,history_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.history, element)
	end
	self.leftTime = sm:readInt32();
	local cumulateList_size = sm:readInt16()
	for i = 1,cumulateList_size do
		local ele = sm:readInt32();
		table.insert(self.cumulateList, ele)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030209:opcode()
	return 5030209
end
--[[ 请求Boss有奖--]]
MsgDef.Msg1030210 = {}

function MsgDef.Msg1030210:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息，1=领取奖励--]]
	if msg.tarId == nil then msg.tarId = 0 end --[[(int32) 目标id--]]
	return msg
end

function MsgDef.Msg1030210:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.tarId);
	return self
end

function MsgDef.Msg1030210:decode(sm)
	self.reqType = sm:readInt8();
	self.tarId = sm:readInt32();
	return self
end

function MsgDef.Msg1030210:opcode()
	return 1030210
end

--[[ 请求Boss有奖(返回)--]]
MsgDef.Msg5030210 = {}
function MsgDef.Msg5030210:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=信息，1=领取奖励--]]
	msg.rewards = {} --[[(array<int32>) 获取的奖励--]]
	msg.bossPrizeInfo = {} --[[(map<int32,BossPrizeInfo>) boss信息--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得道具--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030210:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.rewards))
	for i,elm in ipairs(self.rewards) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.bossPrizeInfo))
	for kn,elm in ipairs(self.bossPrizeInfo) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030210:decode(sm)
	self.reqType = sm:readInt8();
	local rewards_size = sm:readInt16()
	for i = 1,rewards_size do
		local ele = sm:readInt32();
		table.insert(self.rewards, ele)
	end
	local bossPrizeInfo_size = sm:readInt16()
	for i = 1,bossPrizeInfo_size do
		local kev = sm:readInt32(kn);
		self.bossPrizeInfo[kev] = MsgDef.BossPrizeInfo:create():decode(sm)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030210:opcode()
	return 5030210
end
--[[ 请求封测返还--]]
MsgDef.Msg1030211 = {}

function MsgDef.Msg1030211:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示信息1:领取--]]
	return msg
end

function MsgDef.Msg1030211:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030211:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030211:opcode()
	return 1030211
end

--[[ 请求封测返还(返回)--]]
MsgDef.Msg5030211 = {}
function MsgDef.Msg5030211:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示信息1:领取--]]
	msg.czMap = {} --[[(map<int32,int32>) 已充值额度map key:额度,value:次数--]]
	return msg
end

function MsgDef.Msg5030211:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.czMap))
	for kn,elm in ipairs(self.czMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030211:decode(sm)
	self.reqType = sm:readInt8();
	local czMap_size = sm:readInt16()
	for i = 1,czMap_size do
		local kv = sm:readInt32();
		self.czMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030211:opcode()
	return 5030211
end
--[[ 请求培元集气活动--]]
MsgDef.Msg1030212 = {}

function MsgDef.Msg1030212:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1领取2领取buff--]]
	if msg.id == nil then msg.id = 0 end --[[(int32) id--]]
	return msg
end

function MsgDef.Msg1030212:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.id);
	return self
end

function MsgDef.Msg1030212:decode(sm)
	self.reqType = sm:readInt8();
	self.id = sm:readInt32();
	return self
end

function MsgDef.Msg1030212:opcode()
	return 1030212
end

--[[ 请求培元集气活动(返回)--]]
MsgDef.Msg5030212 = {}
function MsgDef.Msg5030212:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1领取2领取buff--]]
	msg.got = {} --[[(array<int32>) 领取列表--]]
	msg.bossInfo = {} --[[(map<int32,PYJQBossInfo>) boss信息--]]
	msg.otherInfo = {} --[[(map<int32,int32>) 其他完成的未领取的奖励--]]
	msg.buffs = {} --[[(array<int32>) 已领取的buff--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.atk = 0 --[[(int32) 攻击力--]]
	return msg
end

function MsgDef.Msg5030212:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.got))
	for i,elm in ipairs(self.got) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.bossInfo))
	for kn,elm in ipairs(self.bossInfo) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.otherInfo))
	for kn,elm in ipairs(self.otherInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.buffs))
	for i,elm in ipairs(self.buffs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.atk);
	return self
end

function MsgDef.Msg5030212:decode(sm)
	self.reqType = sm:readInt8();
	local got_size = sm:readInt16()
	for i = 1,got_size do
		local ele = sm:readInt32();
		table.insert(self.got, ele)
	end
	local bossInfo_size = sm:readInt16()
	for i = 1,bossInfo_size do
		local kev = sm:readInt32(kn);
		self.bossInfo[kev] = MsgDef.PYJQBossInfo:create():decode(sm)
	end
	local otherInfo_size = sm:readInt16()
	for i = 1,otherInfo_size do
		local kv = sm:readInt32();
		self.otherInfo[kv] = sm:readInt32();
	end
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local ele = sm:readInt32();
		table.insert(self.buffs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.atk = sm:readInt32();
	return self
end


function MsgDef.Msg5030212:opcode()
	return 5030212
end
--[[ 请求幸运云购--]]
MsgDef.Msg1030301 = {}

function MsgDef.Msg1030301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示,1:购买,2:中奖纪录--]]
	return msg
end

function MsgDef.Msg1030301:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030301:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030301:opcode()
	return 1030301
end

--[[ 请求幸运云购(返回)--]]
MsgDef.Msg5030301 = {}
function MsgDef.Msg5030301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示,1:购买,2:中奖纪录--]]
	msg.logs = {} --[[(array<string>) 购买记录--]]
	msg.leftActTime = 0 --[[(int32) 活动剩余时间--]]
	msg.leftBuyCount = 0 --[[(int32) 剩余购买份额--]]
	msg.preAwardRecords = {} --[[(array<string>) 之前中奖记录,字符串:期数,名字,装备信息--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买时获得的奖励--]]
	msg.bestItemInfo = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) 大奖装备信息--]]
	msg.mineBuyCount = 0 --[[(int32) 我已购买次数--]]
	msg.stage = 0 --[[(int32) 期数,从1开始--]]
	msg.todayStage = 0 --[[(int32) 今天期数--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030301:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftActTime);
	sm:writeInt32(self.leftBuyCount);
	sm:writeInt16(get_map_size(self.preAwardRecords))
	for i,elm in ipairs(self.preAwardRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	self.bestItemInfo:encode(sm)
	sm:writeInt32(self.mineBuyCount);
	sm:writeInt32(self.stage);
	sm:writeInt32(self.todayStage);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030301:decode(sm)
	self.reqType = sm:readInt8();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.leftActTime = sm:readInt32();
	self.leftBuyCount = sm:readInt32();
	local preAwardRecords_size = sm:readInt16()
	for i = 1,preAwardRecords_size do
		local ele = sm:readString();
		table.insert(self.preAwardRecords, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.bestItemInfo:decode(sm)
	self.mineBuyCount = sm:readInt32();
	self.stage = sm:readInt32();
	self.todayStage = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030301:opcode()
	return 5030301
end
--[[ 请求元旦登录奖励--]]
MsgDef.Msg1030302 = {}

function MsgDef.Msg1030302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取信息  2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030302:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030302:opcode()
	return 1030302
end

--[[ 请求元旦登录奖励(返回)--]]
MsgDef.Msg5030302 = {}
function MsgDef.Msg5030302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:领取信息  2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.gots = {} --[[(map<int32,int32>) 已领取的奖励--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	return msg
end

function MsgDef.Msg5030302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gots))
	for kn,elm in ipairs(self.gots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030302:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local kv = sm:readInt32();
		self.gots[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030302:opcode()
	return 5030302
end
--[[ 请求兑换年货--]]
MsgDef.Msg1030303 = {}

function MsgDef.Msg1030303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息，1=领取奖励--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030303:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030303:opcode()
	return 1030303
end

--[[ 请求兑换年货(返回)--]]
MsgDef.Msg5030303 = {}
function MsgDef.Msg5030303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=信息，1=领取奖励--]]
	msg.agots = {} --[[(map<int32,int32>) 所有购买次数--]]
	msg.pgots = {} --[[(map<int32,int32>) 自己购买次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	return msg
end

function MsgDef.Msg5030303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.agots))
	for kn,elm in ipairs(self.agots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.pgots))
	for kn,elm in ipairs(self.pgots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030303:decode(sm)
	self.reqType = sm:readInt8();
	local agots_size = sm:readInt16()
	for i = 1,agots_size do
		local kv = sm:readInt32();
		self.agots[kv] = sm:readInt32();
	end
	local pgots_size = sm:readInt16()
	for i = 1,pgots_size do
		local kv = sm:readInt32();
		self.pgots[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030303:opcode()
	return 5030303
end
--[[ 请求腊八登录奖励--]]
MsgDef.Msg1030304 = {}

function MsgDef.Msg1030304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取信息 2:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030304:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030304:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030304:opcode()
	return 1030304
end

--[[ 请求腊八登录奖励(返回)--]]
MsgDef.Msg5030304 = {}
function MsgDef.Msg5030304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:领取信息 2:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.gots = {} --[[(map<int32,int32>) 已领取的奖励--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	return msg
end

function MsgDef.Msg5030304:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gots))
	for kn,elm in ipairs(self.gots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030304:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local kv = sm:readInt32();
		self.gots[kv] = sm:readInt32();
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030304:opcode()
	return 5030304
end
--[[ 腊八活跃奖励--]]
MsgDef.Msg1030305 = {}

function MsgDef.Msg1030305:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030305:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030305:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030305:opcode()
	return 1030305
end

--[[ 腊八活跃奖励(返回)--]]
MsgDef.Msg5030305 = {}
function MsgDef.Msg5030305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1领取--]]
	msg.gots = {} --[[(array<int32>) 已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	msg.active = 0 --[[(int32) 当前活跃度--]]
	msg.join = {} --[[(map<int32,int32>) 参与的活跃任务--]]
	return msg
end

function MsgDef.Msg5030305:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gots))
	for i,elm in ipairs(self.gots) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.active);
	sm:writeInt16(get_map_size(self.join))
	for kn,elm in ipairs(self.join) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030305:decode(sm)
	self.reqType = sm:readInt8();
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local ele = sm:readInt32();
		table.insert(self.gots, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.active = sm:readInt32();
	local join_size = sm:readInt16()
	for i = 1,join_size do
		local kv = sm:readInt32();
		self.join[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030305:opcode()
	return 5030305
end
--[[ 请求腊八粥活动--]]
MsgDef.Msg1030306 = {}

function MsgDef.Msg1030306:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1一次2全部--]]
	return msg
end

function MsgDef.Msg1030306:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030306:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030306:opcode()
	return 1030306
end

--[[ 请求腊八粥活动(返回)--]]
MsgDef.Msg5030306 = {}
function MsgDef.Msg5030306:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1一次2全部--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030306:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030306:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030306:opcode()
	return 5030306
end
--[[ 请求腊八有礼--]]
MsgDef.Msg1030307 = {}

function MsgDef.Msg1030307:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030307:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030307:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030307:opcode()
	return 1030307
end

--[[ 请求腊八有礼(返回)--]]
MsgDef.Msg5030307 = {}
function MsgDef.Msg5030307:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.gots = {} --[[(array<int32>) 已领取奖励--]]
	msg.count = 0 --[[(int32) 当前次数--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	return msg
end

function MsgDef.Msg5030307:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gots))
	for i,elm in ipairs(self.gots) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.count);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030307:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local ele = sm:readInt32();
		table.insert(self.gots, ele)
	end
	self.count = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030307:opcode()
	return 5030307
end
--[[ 请求腊八消费排行--]]
MsgDef.Msg1030308 = {}

function MsgDef.Msg1030308:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030308:encode(sm)
	return self
end

function MsgDef.Msg1030308:decode(sm)
	return self
end

function MsgDef.Msg1030308:opcode()
	return 1030308
end

--[[ 请求腊八消费排行(返回)--]]
MsgDef.Msg5030308 = {}
function MsgDef.Msg5030308:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rankingInfos = {} --[[(array<LabaConsumptionRankInfo>) 排行--]]
	msg.mine = MsgDef.LabaConsumptionRankInfo:create() --[[(LabaConsumptionRankInfo) 自己的信息--]]
	msg.before = 0 --[[(int32) 前一名的积分--]]
	return msg
end

function MsgDef.Msg5030308:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	self.mine:encode(sm)
	sm:writeInt32(self.before);
	return self
end

function MsgDef.Msg5030308:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.LabaConsumptionRankInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.mine:decode(sm)
	self.before = sm:readInt32();
	return self
end


function MsgDef.Msg5030308:opcode()
	return 5030308
end
--[[ 请求腊八双倍副本活动--]]
MsgDef.Msg1030309 = {}

function MsgDef.Msg1030309:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030309:encode(sm)
	return self
end

function MsgDef.Msg1030309:decode(sm)
	return self
end

function MsgDef.Msg1030309:opcode()
	return 1030309
end

--[[ 请求腊八双倍副本活动(返回)--]]
MsgDef.Msg5030309 = {}
function MsgDef.Msg5030309:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.doubleModuleList = {} --[[(array<int32>) 双倍模块列表--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030309:encode(sm)
	sm:writeInt16(get_map_size(self.doubleModuleList))
	for i,elm in ipairs(self.doubleModuleList) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030309:decode(sm)
	local doubleModuleList_size = sm:readInt16()
	for i = 1,doubleModuleList_size do
		local ele = sm:readInt32();
		table.insert(self.doubleModuleList, ele)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030309:opcode()
	return 5030309
end
--[[ 请求幸运转盘--]]
MsgDef.Msg1030310 = {}

function MsgDef.Msg1030310:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示数据 1:抽一次 2:抽10次--]]
	return msg
end

function MsgDef.Msg1030310:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030310:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030310:opcode()
	return 1030310
end

--[[ 请求幸运转盘(返回)--]]
MsgDef.Msg5030310 = {}
function MsgDef.Msg5030310:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示数据 1:抽一次 2:抽10次--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.awardIndex = 0 --[[(int32) 转盘下标 从1开始--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.logs = {} --[[(array<string>) 记录--]]
	msg.poolMoney = 0 --[[(int32) 奖金池金额--]]
	msg.equipInfo = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) equipInfo--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030310:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.awardIndex);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.poolMoney);
	self.equipInfo:encode(sm)
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030310:decode(sm)
	self.reqType = sm:readInt8();
	self.actLeftTime = sm:readInt32();
	self.awardIndex = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.poolMoney = sm:readInt32();
	self.equipInfo:decode(sm)
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030310:opcode()
	return 5030310
end
--[[ 请求邀请码--]]
MsgDef.Msg1030311 = {}

function MsgDef.Msg1030311:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:显示 2:绑定--]]
	if msg.bindInviteKey == nil then msg.bindInviteKey = "" end --[[(string) 绑定的邀请码--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1030311:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.bindInviteKey);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1030311:decode(sm)
	self.reqType = sm:readInt8();
	self.bindInviteKey = sm:readString();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1030311:opcode()
	return 1030311
end

--[[ 请求邀请码(返回)--]]
MsgDef.Msg5030311 = {}
function MsgDef.Msg5030311:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:显示 2:绑定--]]
	msg.czQuotas = {} --[[(map<string,int32>) 被邀请充值额度信息--]]
	msg.inviteKey = "" --[[(string) 邀请码--]]
	msg.bindInviteKey = "" --[[(string) 绑定的邀请码--]]
	msg.page = 0 --[[(int32) 页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.roleInfos = {} --[[(array<InviteRoleInfo>) 绑定玩家信息列表--]]
	msg.finishCount = 0 --[[(int32) 完成3项任务的人数--]]
	return msg
end

function MsgDef.Msg5030311:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.czQuotas))
	for kn,elm in ipairs(self.czQuotas) do
		sm:writeString(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.inviteKey);
	sm:writeString(self.bindInviteKey);
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt16(#self.roleInfos)
	for i,elm in ipairs(self.roleInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.finishCount);
	return self
end

function MsgDef.Msg5030311:decode(sm)
	self.reqType = sm:readInt8();
	local czQuotas_size = sm:readInt16()
	for i = 1,czQuotas_size do
		local kv = sm:readString();
		self.czQuotas[kv] = sm:readInt32();
	end
	self.inviteKey = sm:readString();
	self.bindInviteKey = sm:readString();
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	local roleInfos_size = sm:readInt16()
	for i = 1,roleInfos_size do
		local element = MsgDef.InviteRoleInfo:create():decode(sm)
		table.insert(self.roleInfos, element)
	end
	self.finishCount = sm:readInt32();
	return self
end


function MsgDef.Msg5030311:opcode()
	return 5030311
end
--[[ 请求烹调饺子--]]
MsgDef.Msg1030312 = {}

function MsgDef.Msg1030312:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=1次,2=一键--]]
	return msg
end

function MsgDef.Msg1030312:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030312:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030312:opcode()
	return 1030312
end

--[[ 请求烹调饺子(返回)--]]
MsgDef.Msg5030312 = {}
function MsgDef.Msg5030312:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1=1次,2=一键--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030312:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030312:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030312:opcode()
	return 5030312
end
--[[ 请求情侣抽奖--]]
MsgDef.Msg1030313 = {}

function MsgDef.Msg1030313:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=抽奖2=领取--]]
	if msg.arg1 == nil then msg.arg1 = 0 end --[[(int32) 抽奖次数、奖励阶段--]]
	return msg
end

function MsgDef.Msg1030313:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.arg1);
	return self
end

function MsgDef.Msg1030313:decode(sm)
	self.reqType = sm:readInt8();
	self.arg1 = sm:readInt32();
	return self
end

function MsgDef.Msg1030313:opcode()
	return 1030313
end

--[[ 请求情侣抽奖(返回)--]]
MsgDef.Msg5030313 = {}
function MsgDef.Msg5030313:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1=抽奖2=领取--]]
	msg.personal = 0 --[[(int32) 个人积分--]]
	msg.couple = 0 --[[(int32) 情侣积分--]]
	msg.gots = {} --[[(array<int32>) 领取的奖励--]]
	msg.max = 0 --[[(int32) 历史最大积分--]]
	msg.tarId = 0 --[[(int32) 抽到奖的id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030313:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.personal);
	sm:writeInt32(self.couple);
	sm:writeInt16(get_map_size(self.gots))
	for i,elm in ipairs(self.gots) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.max);
	sm:writeInt32(self.tarId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030313:decode(sm)
	self.reqType = sm:readInt8();
	self.personal = sm:readInt32();
	self.couple = sm:readInt32();
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local ele = sm:readInt32();
		table.insert(self.gots, ele)
	end
	self.max = sm:readInt32();
	self.tarId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030313:opcode()
	return 5030313
end
--[[ 请求情人节活跃--]]
MsgDef.Msg1030314 = {}

function MsgDef.Msg1030314:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030314:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030314:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030314:opcode()
	return 1030314
end

--[[ 请求情人节活跃(返回)--]]
MsgDef.Msg5030314 = {}
function MsgDef.Msg5030314:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1领取--]]
	msg.gots = {} --[[(array<int32>) 已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	msg.active = 0 --[[(int32) 当前活跃度--]]
	msg.join = {} --[[(map<int32,int32>) 参与的活跃任务--]]
	return msg
end

function MsgDef.Msg5030314:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gots))
	for i,elm in ipairs(self.gots) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.active);
	sm:writeInt16(get_map_size(self.join))
	for kn,elm in ipairs(self.join) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030314:decode(sm)
	self.reqType = sm:readInt8();
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local ele = sm:readInt32();
		table.insert(self.gots, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.active = sm:readInt32();
	local join_size = sm:readInt16()
	for i = 1,join_size do
		local kv = sm:readInt32();
		self.join[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030314:opcode()
	return 5030314
end
--[[ 请求幸运灵签--]]
MsgDef.Msg1030315 = {}

function MsgDef.Msg1030315:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=显示 1=1抽2=10抽--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030315:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030315:decode(sm)
	self.reqType = sm:readInt8();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030315:opcode()
	return 1030315
end

--[[ 请求幸运灵签(返回)--]]
MsgDef.Msg5030315 = {}
function MsgDef.Msg5030315:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=显示 1=1抽2=10抽--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.useSign = 0 --[[(int32) 已使用签数--]]
	msg.curr = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) 本轮奖励--]]
	msg.select = 0 --[[(int32) 抽中奖励--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030315:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.useSign);
	self.curr:encode(sm)
	sm:writeInt32(self.select);
	sm:writeInt32(self.actId);
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030315:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.useSign = sm:readInt32();
	self.curr:decode(sm)
	self.select = sm:readInt32();
	self.actId = sm:readInt32();
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030315:opcode()
	return 5030315
end
--[[ 请求花灯兑奖--]]
MsgDef.Msg1030316 = {}

function MsgDef.Msg1030316:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息，1=领取奖励--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030316:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030316:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030316:opcode()
	return 1030316
end

--[[ 请求花灯兑奖(返回)--]]
MsgDef.Msg5030316 = {}
function MsgDef.Msg5030316:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=信息，1=领取奖励--]]
	msg.agots = {} --[[(map<int32,int32>) 所有购买次数--]]
	msg.pgots = {} --[[(map<int32,int32>) 自己购买次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	return msg
end

function MsgDef.Msg5030316:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.agots))
	for kn,elm in ipairs(self.agots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.pgots))
	for kn,elm in ipairs(self.pgots) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030316:decode(sm)
	self.reqType = sm:readInt8();
	local agots_size = sm:readInt16()
	for i = 1,agots_size do
		local kv = sm:readInt32();
		self.agots[kv] = sm:readInt32();
	end
	local pgots_size = sm:readInt16()
	for i = 1,pgots_size do
		local kv = sm:readInt32();
		self.pgots[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030316:opcode()
	return 5030316
end
--[[ 元宵活跃活动--]]
MsgDef.Msg1030317 = {}

function MsgDef.Msg1030317:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置Id--]]
	return msg
end

function MsgDef.Msg1030317:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030317:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030317:opcode()
	return 1030317
end

--[[ 元宵活跃活动(返回)--]]
MsgDef.Msg5030317 = {}
function MsgDef.Msg5030317:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1领取--]]
	msg.gots = {} --[[(array<int32>) 已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	msg.active = 0 --[[(int32) 当前活跃度--]]
	msg.join = {} --[[(map<int32,int32>) 参与的活跃任务--]]
	return msg
end

function MsgDef.Msg5030317:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gots))
	for i,elm in ipairs(self.gots) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.active);
	sm:writeInt16(get_map_size(self.join))
	for kn,elm in ipairs(self.join) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030317:decode(sm)
	self.reqType = sm:readInt8();
	local gots_size = sm:readInt16()
	for i = 1,gots_size do
		local ele = sm:readInt32();
		table.insert(self.gots, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.active = sm:readInt32();
	local join_size = sm:readInt16()
	for i = 1,join_size do
		local kv = sm:readInt32();
		self.join[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030317:opcode()
	return 5030317
end
--[[ 请求限时折扣特卖--]]
MsgDef.Msg1030318 = {}

function MsgDef.Msg1030318:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0显示1领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030318:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030318:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030318:opcode()
	return 1030318
end

--[[ 请求限时折扣特卖(返回)--]]
MsgDef.Msg5030318 = {}
function MsgDef.Msg5030318:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0显示1领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.start = {} --[[(map<int32,int32>) 记录开始时间--]]
	msg.got = {} --[[(array<int32>) 领取列表--]]
	return msg
end

function MsgDef.Msg5030318:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.start))
	for kn,elm in ipairs(self.start) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.got))
	for i,elm in ipairs(self.got) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030318:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local start_size = sm:readInt16()
	for i = 1,start_size do
		local kv = sm:readInt32();
		self.start[kv] = sm:readInt32();
	end
	local got_size = sm:readInt16()
	for i = 1,got_size do
		local ele = sm:readInt32();
		table.insert(self.got, ele)
	end
	return self
end


function MsgDef.Msg5030318:opcode()
	return 5030318
end
--[[ 请求背包信息--]]
MsgDef.Msg1040101 = {}

function MsgDef.Msg1040101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.seqs == nil then msg.seqs = {} end --[[(array<int32>) 包裹序列:100000仓库,200000背包,300000已装备400000临时背包 500000剑神装备 600000五行装备700000仙装 800000圣文 1000000圣印背包 1100000装备圣印 1200000剑神背包 1300000八门元素背包 1400000装备八门元素 1500000帝魂魂饰 1600000生肖装备--]]
	return msg
end

function MsgDef.Msg1040101:encode(sm)
	sm:writeInt16(get_map_size(self.seqs))
	for i,elm in ipairs(self.seqs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1040101:decode(sm)
	local seqs_size = sm:readInt16()
	for i = 1,seqs_size do
		local elm = sm:readInt32();
		table.insert(self.seqs, elm)
	end
	return self
end

function MsgDef.Msg1040101:opcode()
	return 1040101
end

--[[ 请求背包信息(返回)--]]
MsgDef.Msg5040101 = {}
function MsgDef.Msg5040101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<ItemInfo>) 包裹序列:100000仓库,200000背包--]]
	msg.seqs = {} --[[(array<int32>) 包裹序列:100000仓库,200000背包,300000已装备400000临时背包 500000剑神装备 600000五行装备700000仙装 800000圣文 1000000圣印背包 1100000装备圣印 1200000剑神背包 1300000八门元素背包 1400000装备八门元素 1500000帝魂魂饰 1600000生肖装备--]]
	return msg
end

function MsgDef.Msg5040101:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.seqs))
	for i,elm in ipairs(self.seqs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5040101:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local seqs_size = sm:readInt16()
	for i = 1,seqs_size do
		local ele = sm:readInt32();
		table.insert(self.seqs, ele)
	end
	return self
end


function MsgDef.Msg5040101:opcode()
	return 5040101
end
--[[ 请求整理背包--]]
MsgDef.Msg1040102 = {}

function MsgDef.Msg1040102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.seq == nil then msg.seq = 0 end --[[(int32) 包裹序列:100000仓库,200000背包--]]
	return msg
end

function MsgDef.Msg1040102:encode(sm)
	sm:writeInt32(self.seq);
	return self
end

function MsgDef.Msg1040102:decode(sm)
	self.seq = sm:readInt32();
	return self
end

function MsgDef.Msg1040102:opcode()
	return 1040102
end

--[[ 请求整理背包(返回)--]]
MsgDef.Msg5040102 = {}
function MsgDef.Msg5040102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<ItemInfo>) 包裹道具--]]
	msg.seq = 0 --[[(int32) 包裹序列--]]
	return msg
end

function MsgDef.Msg5040102:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.seq);
	return self
end

function MsgDef.Msg5040102:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.seq = sm:readInt32();
	return self
end


function MsgDef.Msg5040102:opcode()
	return 5040102
end
--[[ 请求设置背包锁--]]
MsgDef.Msg1040103 = {}

function MsgDef.Msg1040103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.password == nil then msg.password = "" end --[[(string) 密码--]]
	return msg
end

function MsgDef.Msg1040103:encode(sm)
	sm:writeString(self.password);
	return self
end

function MsgDef.Msg1040103:decode(sm)
	self.password = sm:readString();
	return self
end

function MsgDef.Msg1040103:opcode()
	return 1040103
end

--[[ 请求设置背包锁(返回)--]]
MsgDef.Msg5040103 = {}
function MsgDef.Msg5040103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040103:encode(sm)
	return self
end

function MsgDef.Msg5040103:decode(sm)
	return self
end


function MsgDef.Msg5040103:opcode()
	return 5040103
end
--[[ 请求解锁背包锁--]]
MsgDef.Msg1040104 = {}

function MsgDef.Msg1040104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.password == nil then msg.password = "" end --[[(string) 密码--]]
	return msg
end

function MsgDef.Msg1040104:encode(sm)
	sm:writeString(self.password);
	return self
end

function MsgDef.Msg1040104:decode(sm)
	self.password = sm:readString();
	return self
end

function MsgDef.Msg1040104:opcode()
	return 1040104
end

--[[ 请求解锁背包锁(返回)--]]
MsgDef.Msg5040104 = {}
function MsgDef.Msg5040104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) 1成功,否则失败--]]
	return msg
end

function MsgDef.Msg5040104:encode(sm)
	sm:writeInt8(self.suc);
	return self
end

function MsgDef.Msg5040104:decode(sm)
	self.suc = sm:readInt8();
	return self
end


function MsgDef.Msg5040104:opcode()
	return 5040104
end
--[[ 请求放进仓库--]]
MsgDef.Msg1040202 = {}

function MsgDef.Msg1040202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 存入的道具位置--]]
	return msg
end

function MsgDef.Msg1040202:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1040202:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1040202:opcode()
	return 1040202
end

--[[ 请求放进仓库(返回)--]]
MsgDef.Msg5040202 = {}
function MsgDef.Msg5040202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040202:encode(sm)
	return self
end

function MsgDef.Msg5040202:decode(sm)
	return self
end


function MsgDef.Msg5040202:opcode()
	return 5040202
end
--[[ 请求仓库取出--]]
MsgDef.Msg1040203 = {}

function MsgDef.Msg1040203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 仓库道具位置--]]
	return msg
end

function MsgDef.Msg1040203:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1040203:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1040203:opcode()
	return 1040203
end

--[[ 请求仓库取出(返回)--]]
MsgDef.Msg5040203 = {}
function MsgDef.Msg5040203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040203:encode(sm)
	return self
end

function MsgDef.Msg5040203:decode(sm)
	return self
end


function MsgDef.Msg5040203:opcode()
	return 5040203
end
--[[ 请求穿脱装备--]]
MsgDef.Msg1040301 = {}

function MsgDef.Msg1040301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =0时背包位置,=1时装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1040301:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1040301:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1040301:opcode()
	return 1040301
end

--[[ 请求穿脱装备(返回)--]]
MsgDef.Msg5040301 = {}
function MsgDef.Msg5040301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040301:encode(sm)
	return self
end

function MsgDef.Msg5040301:decode(sm)
	return self
end


function MsgDef.Msg5040301:opcode()
	return 5040301
end
--[[ 请求使用道具--]]
MsgDef.Msg1040401 = {}

function MsgDef.Msg1040401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 背包位置--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 使用数量--]]
	if msg.ext_arg == nil then msg.ext_arg = 0 end --[[(int32) 额外参数(具体索引)--]]
	return msg
end

function MsgDef.Msg1040401:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.ext_arg);
	return self
end

function MsgDef.Msg1040401:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.ext_arg = sm:readInt32();
	return self
end

function MsgDef.Msg1040401:opcode()
	return 1040401
end

--[[ 请求使用道具(返回)--]]
MsgDef.Msg5040401 = {}
function MsgDef.Msg5040401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.index = 0 --[[(int32) 背包位置--]]
	msg.amount = 0 --[[(int32) 使用数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.isUp = 0 --[[(int8) 是否升阶，0非，1是--]]
	msg.upNum = 0 --[[(int32) 升阶阶数--]]
	return msg
end

function MsgDef.Msg5040401:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.isUp);
	sm:writeInt32(self.upNum);
	return self
end

function MsgDef.Msg5040401:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.isUp = sm:readInt8();
	self.upNum = sm:readInt32();
	return self
end


function MsgDef.Msg5040401:opcode()
	return 5040401
end
--[[ 请求查询道具信息--]]
MsgDef.Msg1040402 = {}

function MsgDef.Msg1040402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家roleId--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 物品的index--]]
	return msg
end

function MsgDef.Msg1040402:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1040402:decode(sm)
	self.roleId = sm:readInt64();
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1040402:opcode()
	return 1040402
end

--[[ 请求查询道具信息(返回)--]]
MsgDef.Msg5040402 = {}
function MsgDef.Msg5040402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.itemInfo = MsgDef.ItemInfo:create() --[[(ItemInfo) 物品信息--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.index = 0 --[[(int32) 道具下标--]]
	return msg
end

function MsgDef.Msg5040402:encode(sm)
	self.itemInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg5040402:decode(sm)
	self.itemInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.index = sm:readInt32();
	return self
end


function MsgDef.Msg5040402:opcode()
	return 5040402
end
--[[ 请求丢弃道具--]]
MsgDef.Msg1040403 = {}

function MsgDef.Msg1040403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 丢弃的道具位置--]]
	return msg
end

function MsgDef.Msg1040403:encode(sm)
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1040403:decode(sm)
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1040403:opcode()
	return 1040403
end

--[[ 请求丢弃道具(返回)--]]
MsgDef.Msg5040403 = {}
function MsgDef.Msg5040403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040403:encode(sm)
	return self
end

function MsgDef.Msg5040403:decode(sm)
	return self
end


function MsgDef.Msg5040403:opcode()
	return 5040403
end
--[[ 请求格子开启--]]
MsgDef.Msg1040404 = {}

function MsgDef.Msg1040404:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1时间开启背包格子,=2消耗元宝开启背包格子;=3时间开启仓库格子,=4消耗元宝开启仓库格子--]]
	if msg.openNum == nil then msg.openNum = 0 end --[[(int32) 开启格子数--]]
	return msg
end

function MsgDef.Msg1040404:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.openNum);
	return self
end

function MsgDef.Msg1040404:decode(sm)
	self.reqType = sm:readInt8();
	self.openNum = sm:readInt32();
	return self
end

function MsgDef.Msg1040404:opcode()
	return 1040404
end

--[[ 请求格子开启(返回)--]]
MsgDef.Msg5040404 = {}
function MsgDef.Msg5040404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1时间开启背包格子,=2消耗元宝开启背包格子;=3时间开启仓库格子,=4消耗元宝开启仓库格子--]]
	msg.lastOpenTime = 0 --[[(int32) =1和=2时,是背包格子上一次刷新时间=3=4是仓库--]]
	msg.gridOpenNum = 0 --[[(int32) 1和=2时,是背包格子开启数量,=3=4是仓库格子开启数量--]]
	msg.preOnlineSec = 0 --[[(int32) 之前累计的在线秒数--]]
	msg.openNum = 0 --[[(int32) 开启格子数--]]
	return msg
end

function MsgDef.Msg5040404:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastOpenTime);
	sm:writeInt32(self.gridOpenNum);
	sm:writeInt32(self.preOnlineSec);
	sm:writeInt32(self.openNum);
	return self
end

function MsgDef.Msg5040404:decode(sm)
	self.reqType = sm:readInt8();
	self.lastOpenTime = sm:readInt32();
	self.gridOpenNum = sm:readInt32();
	self.preOnlineSec = sm:readInt32();
	self.openNum = sm:readInt32();
	return self
end


function MsgDef.Msg5040404:opcode()
	return 5040404
end
--[[ 请求资质丹、潜力丹能否使用--]]
MsgDef.Msg1040405 = {}

function MsgDef.Msg1040405:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	return msg
end

function MsgDef.Msg1040405:encode(sm)
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1040405:decode(sm)
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1040405:opcode()
	return 1040405
end

--[[ 请求资质丹、潜力丹能否使用(返回)--]]
MsgDef.Msg5040405 = {}
function MsgDef.Msg5040405:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mid = 0 --[[(int32) 道具id--]]
	msg.canUse = 0 --[[(int8) 能否使用--]]
	msg.canUseNum = 0 --[[(int32) 可以使用的数量--]]
	return msg
end

function MsgDef.Msg5040405:encode(sm)
	sm:writeInt32(self.mid);
	sm:writeInt8(self.canUse);
	sm:writeInt32(self.canUseNum);
	return self
end

function MsgDef.Msg5040405:decode(sm)
	self.mid = sm:readInt32();
	self.canUse = sm:readInt8();
	self.canUseNum = sm:readInt32();
	return self
end


function MsgDef.Msg5040405:opcode()
	return 5040405
end
--[[ 请求临时背包转移--]]
MsgDef.Msg1040501 = {}

function MsgDef.Msg1040501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 转移的目标--]]
	return msg
end

function MsgDef.Msg1040501:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1040501:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1040501:opcode()
	return 1040501
end

--[[ 请求临时背包转移(返回)--]]
MsgDef.Msg5040501 = {}
function MsgDef.Msg5040501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5040501:encode(sm)
	return self
end

function MsgDef.Msg5040501:decode(sm)
	return self
end


function MsgDef.Msg5040501:opcode()
	return 5040501
end
--[[ 请求设置自动吞噬装备--]]
MsgDef.Msg1040601 = {}

function MsgDef.Msg1040601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:当前类型 2:设置吞噬类型--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 吞噬类型 0:不设置默认 1:蓝装及以下 2:紫装及以下--]]
	return msg
end

function MsgDef.Msg1040601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg1040601:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg1040601:opcode()
	return 1040601
end

--[[ 请求设置自动吞噬装备(返回)--]]
MsgDef.Msg5040601 = {}
function MsgDef.Msg5040601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:当前类型 2:设置吞噬类型--]]
	msg.curType = 0 --[[(int32)  0:不设置默认 1:当前类型 2:设置吞噬类型--]]
	return msg
end

function MsgDef.Msg5040601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curType);
	return self
end

function MsgDef.Msg5040601:decode(sm)
	self.reqType = sm:readInt8();
	self.curType = sm:readInt32();
	return self
end


function MsgDef.Msg5040601:opcode()
	return 5040601
end
--[[ 请求任务列表--]]
MsgDef.Msg1050101 = {}

function MsgDef.Msg1050101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1050101:encode(sm)
	return self
end

function MsgDef.Msg1050101:decode(sm)
	return self
end

function MsgDef.Msg1050101:opcode()
	return 1050101
end

--[[ 请求任务列表(返回)--]]
MsgDef.Msg5050101 = {}
function MsgDef.Msg5050101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tasks = {} --[[(array<TaskInfo>) 任务列表--]]
	msg.dailyTasks = {} --[[(array<TaskInfo>) 日常任务--]]
	msg.gangTasks = {} --[[(array<TaskInfo>) 帮派任务--]]
	msg.dailyFinishCount = 0 --[[(int32) 日常任务完成次数--]]
	msg.gangFinishCount = 0 --[[(int32) 日常任务完成次数--]]
	msg.shangHuiTasks = {} --[[(array<TaskInfo>) 商会任务--]]
	msg.shangHuiFinishCount = 0 --[[(int32) 商会任务完成次数--]]
	msg.branchTasks = {} --[[(array<TaskInfo>) 支线任务--]]
	return msg
end

function MsgDef.Msg5050101:encode(sm)
	sm:writeInt16(#self.tasks)
	for i,elm in ipairs(self.tasks) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.dailyTasks)
	for i,elm in ipairs(self.dailyTasks) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.gangTasks)
	for i,elm in ipairs(self.gangTasks) do
		elm:encode(sm)
	end
	sm:writeInt32(self.dailyFinishCount);
	sm:writeInt32(self.gangFinishCount);
	sm:writeInt16(#self.shangHuiTasks)
	for i,elm in ipairs(self.shangHuiTasks) do
		elm:encode(sm)
	end
	sm:writeInt32(self.shangHuiFinishCount);
	sm:writeInt16(#self.branchTasks)
	for i,elm in ipairs(self.branchTasks) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5050101:decode(sm)
	local tasks_size = sm:readInt16()
	for i = 1,tasks_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.tasks, element)
	end
	local dailyTasks_size = sm:readInt16()
	for i = 1,dailyTasks_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.dailyTasks, element)
	end
	local gangTasks_size = sm:readInt16()
	for i = 1,gangTasks_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.gangTasks, element)
	end
	self.dailyFinishCount = sm:readInt32();
	self.gangFinishCount = sm:readInt32();
	local shangHuiTasks_size = sm:readInt16()
	for i = 1,shangHuiTasks_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.shangHuiTasks, element)
	end
	self.shangHuiFinishCount = sm:readInt32();
	local branchTasks_size = sm:readInt16()
	for i = 1,branchTasks_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.branchTasks, element)
	end
	return self
end


function MsgDef.Msg5050101:opcode()
	return 5050101
end
--[[ 请求接受任务--]]
MsgDef.Msg1050102 = {}

function MsgDef.Msg1050102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg1050102:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg1050102:decode(sm)
	self.taskId = sm:readInt32();
	return self
end

function MsgDef.Msg1050102:opcode()
	return 1050102
end

--[[ 请求接受任务(返回)--]]
MsgDef.Msg5050102 = {}
function MsgDef.Msg5050102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg5050102:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg5050102:decode(sm)
	self.taskId = sm:readInt32();
	return self
end


function MsgDef.Msg5050102:opcode()
	return 5050102
end
--[[ 请求完成任务--]]
MsgDef.Msg1050103 = {}

function MsgDef.Msg1050103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg1050103:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg1050103:decode(sm)
	self.taskId = sm:readInt32();
	return self
end

function MsgDef.Msg1050103:opcode()
	return 1050103
end

--[[ 请求完成任务(返回)--]]
MsgDef.Msg5050103 = {}
function MsgDef.Msg5050103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5050103:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5050103:decode(sm)
	self.taskId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5050103:opcode()
	return 5050103
end
--[[ 请求任务采集--]]
MsgDef.Msg1050104 = {}

function MsgDef.Msg1050104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	if msg.targetId == nil then msg.targetId = 0 end --[[(int32) 目标id--]]
	return msg
end

function MsgDef.Msg1050104:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt32(self.targetId);
	return self
end

function MsgDef.Msg1050104:decode(sm)
	self.taskId = sm:readInt32();
	self.targetId = sm:readInt32();
	return self
end

function MsgDef.Msg1050104:opcode()
	return 1050104
end

--[[ 请求任务采集(返回)--]]
MsgDef.Msg5050104 = {}
function MsgDef.Msg5050104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg5050104:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg5050104:decode(sm)
	self.taskId = sm:readInt32();
	return self
end


function MsgDef.Msg5050104:opcode()
	return 5050104
end
--[[ 请求完成日常任务--]]
MsgDef.Msg1050201 = {}

function MsgDef.Msg1050201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务Id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 完成类型1:普通完成,2:1.5倍完成,3一键完成--]]
	return msg
end

function MsgDef.Msg1050201:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1050201:decode(sm)
	self.taskId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1050201:opcode()
	return 1050201
end

--[[ 请求完成日常任务(返回)--]]
MsgDef.Msg5050201 = {}
function MsgDef.Msg5050201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务Id--]]
	msg.reqType = 0 --[[(int8) 完成类型1:普通完成,2:1.5倍完成,3一键完成--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5050201:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5050201:decode(sm)
	self.taskId = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5050201:opcode()
	return 5050201
end
--[[ 请求完成帮派任务--]]
MsgDef.Msg1050301 = {}

function MsgDef.Msg1050301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务Id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 完成类型1:普通完成,2:1.5倍完成,3一键完成--]]
	return msg
end

function MsgDef.Msg1050301:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1050301:decode(sm)
	self.taskId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1050301:opcode()
	return 1050301
end

--[[ 请求完成帮派任务(返回)--]]
MsgDef.Msg5050301 = {}
function MsgDef.Msg5050301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务Id--]]
	msg.reqType = 0 --[[(int8) 完成类型1:普通完成,2:1.5倍完成,3一键完成--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5050301:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5050301:decode(sm)
	self.taskId = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5050301:opcode()
	return 5050301
end
--[[ 请求完成商会任务--]]
MsgDef.Msg1050402 = {}

function MsgDef.Msg1050402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg1050402:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg1050402:decode(sm)
	self.taskId = sm:readInt32();
	return self
end

function MsgDef.Msg1050402:opcode()
	return 1050402
end

--[[ 请求完成商会任务(返回)--]]
MsgDef.Msg5050402 = {}
function MsgDef.Msg5050402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskId = 0 --[[(int32) 任务id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5050402:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5050402:decode(sm)
	self.taskId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5050402:opcode()
	return 5050402
end
--[[ 请求隐藏任务--]]
MsgDef.Msg1050403 = {}

function MsgDef.Msg1050403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息2=领取奖励3=保存任务开始时间--]]
	return msg
end

function MsgDef.Msg1050403:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1050403:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1050403:opcode()
	return 1050403
end

--[[ 请求隐藏任务(返回)--]]
MsgDef.Msg5050403 = {}
function MsgDef.Msg5050403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.startTime = 0 --[[(int32) 隐藏任务开始时间--]]
	msg.taskOver = 0 --[[(int8) 0任务未完成，1任务已完成--]]
	return msg
end

function MsgDef.Msg5050403:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.startTime);
	sm:writeInt8(self.taskOver);
	return self
end

function MsgDef.Msg5050403:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.startTime = sm:readInt32();
	self.taskOver = sm:readInt8();
	return self
end


function MsgDef.Msg5050403:opcode()
	return 5050403
end
--[[ 请求完成支线任务--]]
MsgDef.Msg1050501 = {}

function MsgDef.Msg1050501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg1050501:encode(sm)
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg1050501:decode(sm)
	self.taskId = sm:readInt32();
	return self
end

function MsgDef.Msg1050501:opcode()
	return 1050501
end

--[[ 请求完成支线任务(返回)--]]
MsgDef.Msg5050501 = {}
function MsgDef.Msg5050501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 任务完成奖励--]]
	msg.taskId = 0 --[[(int32) 任务id--]]
	return msg
end

function MsgDef.Msg5050501:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.taskId);
	return self
end

function MsgDef.Msg5050501:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.taskId = sm:readInt32();
	return self
end


function MsgDef.Msg5050501:opcode()
	return 5050501
end
--[[ 请求发送聊天内容(世界,私人,场景)--]]
MsgDef.Msg1060101 = {}

function MsgDef.Msg1060101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) 类型世界2,喇叭3,附近4,私人5--]]
	if msg.content == nil then msg.content = "" end --[[(string) 内容--]]
	if msg.tarName == nil then msg.tarName = "" end --[[(string) 目标玩家名字--]]
	if msg.isVoice == nil then msg.isVoice = 0 end --[[(int8) 是否语音--]]
	if msg.voiceStr == nil then msg.voiceStr = "" end --[[(string) 语音--]]
	if msg.tarId == nil then msg.tarId = 0 end --[[(int64) 目标玩家Id--]]
	return msg
end

function MsgDef.Msg1060101:encode(sm)
	sm:writeInt8(self.type);
	sm:writeString(self.content);
	sm:writeString(self.tarName);
	sm:writeInt8(self.isVoice);
	sm:writeString(self.voiceStr);
	sm:writeInt64(self.tarId);
	return self
end

function MsgDef.Msg1060101:decode(sm)
	self.type = sm:readInt8();
	self.content = sm:readString();
	self.tarName = sm:readString();
	self.isVoice = sm:readInt8();
	self.voiceStr = sm:readString();
	self.tarId = sm:readInt64();
	return self
end

function MsgDef.Msg1060101:opcode()
	return 1060101
end

--[[ 请求发送聊天内容(世界,私人,场景)(返回)--]]
MsgDef.Msg5060101 = {}
function MsgDef.Msg5060101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5060101:encode(sm)
	return self
end

function MsgDef.Msg5060101:decode(sm)
	return self
end


function MsgDef.Msg5060101:opcode()
	return 5060101
end
--[[ 帮派进新人打招呼--]]
MsgDef.Msg1060102 = {}

function MsgDef.Msg1060102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1问好2欢迎3调戏--]]
	return msg
end

function MsgDef.Msg1060102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1060102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1060102:opcode()
	return 1060102
end

--[[ 帮派进新人打招呼(返回)--]]
MsgDef.Msg5060102 = {}
function MsgDef.Msg5060102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1问好2欢迎3调戏--]]
	return msg
end

function MsgDef.Msg5060102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5060102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5060102:opcode()
	return 5060102
end
--[[ 请求私聊玩家列表--]]
MsgDef.Msg1060103 = {}

function MsgDef.Msg1060103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1060103:encode(sm)
	return self
end

function MsgDef.Msg1060103:decode(sm)
	return self
end

function MsgDef.Msg1060103:opcode()
	return 1060103
end

--[[ 请求私聊玩家列表(返回)--]]
MsgDef.Msg5060103 = {}
function MsgDef.Msg5060103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.chatUserList = {} --[[(array<ChatUserInfo>) 私聊玩家列表--]]
	return msg
end

function MsgDef.Msg5060103:encode(sm)
	sm:writeInt16(#self.chatUserList)
	for i,elm in ipairs(self.chatUserList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5060103:decode(sm)
	local chatUserList_size = sm:readInt16()
	for i = 1,chatUserList_size do
		local element = MsgDef.ChatUserInfo:create():decode(sm)
		table.insert(self.chatUserList, element)
	end
	return self
end


function MsgDef.Msg5060103:opcode()
	return 5060103
end
--[[ 请求玩家聊天记录--]]
MsgDef.Msg1060104 = {}

function MsgDef.Msg1060104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) --]]
	return msg
end

function MsgDef.Msg1060104:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.Msg1060104:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	return self
end

function MsgDef.Msg1060104:opcode()
	return 1060104
end

--[[ 请求玩家聊天记录(返回)--]]
MsgDef.Msg5060104 = {}
function MsgDef.Msg5060104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.chatInfoList = {} --[[(array<ChatInfo>) 聊天记录--]]
	return msg
end

function MsgDef.Msg5060104:encode(sm)
	sm:writeInt16(#self.chatInfoList)
	for i,elm in ipairs(self.chatInfoList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5060104:decode(sm)
	local chatInfoList_size = sm:readInt16()
	for i = 1,chatInfoList_size do
		local element = MsgDef.ChatInfo:create():decode(sm)
		table.insert(self.chatInfoList, element)
	end
	return self
end


function MsgDef.Msg5060104:opcode()
	return 5060104
end
--[[ 请求好友列表--]]
MsgDef.Msg1070101 = {}

function MsgDef.Msg1070101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数,从1开始--]]
	return msg
end

function MsgDef.Msg1070101:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1070101:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1070101:opcode()
	return 1070101
end

--[[ 请求好友列表(返回)--]]
MsgDef.Msg5070101 = {}
function MsgDef.Msg5070101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.friendList = {} --[[(array<FriendInfo>) 好友列表--]]
	msg.totalSum = 0 --[[(int32) 总数--]]
	msg.page = 0 --[[(int32) 当前页数,从1开始--]]
	msg.leftPresentCnt = 0 --[[(int32) 剩余可赠送爱心次数--]]
	msg.presentCount = 0 --[[(int32) 可赠送数量--]]
	msg.recCount = 0 --[[(int32) 可领取数量--]]
	msg.friendNum = 0 --[[(int32) 当前好友总数量--]]
	msg.leftRecvCnt = 0 --[[(int32) 剩余可领取次数--]]
	msg.todayFriendNum = 0 --[[(int32) 今日添加数量--]]
	return msg
end

function MsgDef.Msg5070101:encode(sm)
	sm:writeInt16(#self.friendList)
	for i,elm in ipairs(self.friendList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.totalSum);
	sm:writeInt32(self.page);
	sm:writeInt32(self.leftPresentCnt);
	sm:writeInt32(self.presentCount);
	sm:writeInt32(self.recCount);
	sm:writeInt32(self.friendNum);
	sm:writeInt32(self.leftRecvCnt);
	sm:writeInt32(self.todayFriendNum);
	return self
end

function MsgDef.Msg5070101:decode(sm)
	local friendList_size = sm:readInt16()
	for i = 1,friendList_size do
		local element = MsgDef.FriendInfo:create():decode(sm)
		table.insert(self.friendList, element)
	end
	self.totalSum = sm:readInt32();
	self.page = sm:readInt32();
	self.leftPresentCnt = sm:readInt32();
	self.presentCount = sm:readInt32();
	self.recCount = sm:readInt32();
	self.friendNum = sm:readInt32();
	self.leftRecvCnt = sm:readInt32();
	self.todayFriendNum = sm:readInt32();
	return self
end


function MsgDef.Msg5070101:opcode()
	return 5070101
end
--[[ 请求添加好友列表--]]
MsgDef.Msg1070102 = {}

function MsgDef.Msg1070102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字(模糊查询)--]]
	return msg
end

function MsgDef.Msg1070102:encode(sm)
	sm:writeString(self.roleName);
	return self
end

function MsgDef.Msg1070102:decode(sm)
	self.roleName = sm:readString();
	return self
end

function MsgDef.Msg1070102:opcode()
	return 1070102
end

--[[ 请求添加好友列表(返回)--]]
MsgDef.Msg5070102 = {}
function MsgDef.Msg5070102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.list = {} --[[(array<FriendInfo>) 列表--]]
	msg.todayFriendNum = 0 --[[(int32) 今日自己主动申请成功的好友数量--]]
	return msg
end

function MsgDef.Msg5070102:encode(sm)
	sm:writeInt16(#self.list)
	for i,elm in ipairs(self.list) do
		elm:encode(sm)
	end
	sm:writeInt32(self.todayFriendNum);
	return self
end

function MsgDef.Msg5070102:decode(sm)
	local list_size = sm:readInt16()
	for i = 1,list_size do
		local element = MsgDef.FriendInfo:create():decode(sm)
		table.insert(self.list, element)
	end
	self.todayFriendNum = sm:readInt32();
	return self
end


function MsgDef.Msg5070102:opcode()
	return 5070102
end
--[[ 请求添加删除好友--]]
MsgDef.Msg1070103 = {}

function MsgDef.Msg1070103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1添加=2删除--]]
	if msg.roleIds == nil then msg.roleIds = {} end --[[(array<int64>) 玩家id--]]
	return msg
end

function MsgDef.Msg1070103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg1070103:decode(sm)
	self.reqType = sm:readInt8();
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local elm = sm:readInt64();
		table.insert(self.roleIds, elm)
	end
	return self
end

function MsgDef.Msg1070103:opcode()
	return 1070103
end

--[[ 请求添加删除好友(返回)--]]
MsgDef.Msg5070103 = {}
function MsgDef.Msg5070103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1添加=2删除--]]
	msg.roleIds = {} --[[(array<int64>) 玩家id--]]
	return msg
end

function MsgDef.Msg5070103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5070103:decode(sm)
	self.reqType = sm:readInt8();
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local ele = sm:readInt64();
		table.insert(self.roleIds, ele)
	end
	return self
end


function MsgDef.Msg5070103:opcode()
	return 5070103
end
--[[ 请求好友申请列表--]]
MsgDef.Msg1070104 = {}

function MsgDef.Msg1070104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1070104:encode(sm)
	return self
end

function MsgDef.Msg1070104:decode(sm)
	return self
end

function MsgDef.Msg1070104:opcode()
	return 1070104
end

--[[ 请求好友申请列表(返回)--]]
MsgDef.Msg5070104 = {}
function MsgDef.Msg5070104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.applyList = {} --[[(array<FriendInfo>) 好友申请列表--]]
	return msg
end

function MsgDef.Msg5070104:encode(sm)
	sm:writeInt16(#self.applyList)
	for i,elm in ipairs(self.applyList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5070104:decode(sm)
	local applyList_size = sm:readInt16()
	for i = 1,applyList_size do
		local element = MsgDef.FriendInfo:create():decode(sm)
		table.insert(self.applyList, element)
	end
	return self
end


function MsgDef.Msg5070104:opcode()
	return 5070104
end
--[[ 请求好友申请同意忽略--]]
MsgDef.Msg1070105 = {}

function MsgDef.Msg1070105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1同意=2忽略--]]
	if msg.roleIds == nil then msg.roleIds = {} end --[[(array<int64>) 玩家id--]]
	return msg
end

function MsgDef.Msg1070105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg1070105:decode(sm)
	self.reqType = sm:readInt8();
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local elm = sm:readInt64();
		table.insert(self.roleIds, elm)
	end
	return self
end

function MsgDef.Msg1070105:opcode()
	return 1070105
end

--[[ 请求好友申请同意忽略(返回)--]]
MsgDef.Msg5070105 = {}
function MsgDef.Msg5070105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1同意=2忽略--]]
	msg.roleIds = {} --[[(array<int64>) 玩家id--]]
	msg.errStatu = 0 --[[(int8) =1好友已达上限 =2我在对方黑名单=3对方好友已达上限--]]
	return msg
end

function MsgDef.Msg5070105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt8(self.errStatu);
	return self
end

function MsgDef.Msg5070105:decode(sm)
	self.reqType = sm:readInt8();
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local ele = sm:readInt64();
		table.insert(self.roleIds, ele)
	end
	self.errStatu = sm:readInt8();
	return self
end


function MsgDef.Msg5070105:opcode()
	return 5070105
end
--[[ 请求黑名单列表--]]
MsgDef.Msg1070201 = {}

function MsgDef.Msg1070201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数,1开始--]]
	return msg
end

function MsgDef.Msg1070201:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1070201:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1070201:opcode()
	return 1070201
end

--[[ 请求黑名单列表(返回)--]]
MsgDef.Msg5070201 = {}
function MsgDef.Msg5070201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.totalSum = 0 --[[(int32) 总数--]]
	msg.page = 0 --[[(int32) 页数,1开始--]]
	msg.blackNameList = {} --[[(array<BlackNameInfo>) 黑名单列表--]]
	return msg
end

function MsgDef.Msg5070201:encode(sm)
	sm:writeInt32(self.totalSum);
	sm:writeInt32(self.page);
	sm:writeInt16(#self.blackNameList)
	for i,elm in ipairs(self.blackNameList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5070201:decode(sm)
	self.totalSum = sm:readInt32();
	self.page = sm:readInt32();
	local blackNameList_size = sm:readInt16()
	for i = 1,blackNameList_size do
		local element = MsgDef.BlackNameInfo:create():decode(sm)
		table.insert(self.blackNameList, element)
	end
	return self
end


function MsgDef.Msg5070201:opcode()
	return 5070201
end
--[[ 请求黑名单添加删除--]]
MsgDef.Msg1070202 = {}

function MsgDef.Msg1070202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1添加,=2删除--]]
	return msg
end

function MsgDef.Msg1070202:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1070202:decode(sm)
	self.roleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1070202:opcode()
	return 1070202
end

--[[ 请求黑名单添加删除(返回)--]]
MsgDef.Msg5070202 = {}
function MsgDef.Msg5070202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.reqType = 0 --[[(int8) =1添加,=2删除--]]
	return msg
end

function MsgDef.Msg5070202:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5070202:decode(sm)
	self.roleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5070202:opcode()
	return 5070202
end
--[[ 请求仇人列表--]]
MsgDef.Msg1070203 = {}

function MsgDef.Msg1070203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数从1开始--]]
	return msg
end

function MsgDef.Msg1070203:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1070203:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1070203:opcode()
	return 1070203
end

--[[ 请求仇人列表(返回)--]]
MsgDef.Msg5070203 = {}
function MsgDef.Msg5070203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.enemyList = {} --[[(array<EnemyInfo>) 仇人列表--]]
	msg.page = 0 --[[(int32) 页数从1开始--]]
	msg.totalSum = 0 --[[(int32) 总数--]]
	return msg
end

function MsgDef.Msg5070203:encode(sm)
	sm:writeInt16(#self.enemyList)
	for i,elm in ipairs(self.enemyList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.totalSum);
	return self
end

function MsgDef.Msg5070203:decode(sm)
	local enemyList_size = sm:readInt16()
	for i = 1,enemyList_size do
		local element = MsgDef.EnemyInfo:create():decode(sm)
		table.insert(self.enemyList, element)
	end
	self.page = sm:readInt32();
	self.totalSum = sm:readInt32();
	return self
end


function MsgDef.Msg5070203:opcode()
	return 5070203
end
--[[ 请求删除仇人--]]
MsgDef.Msg1070204 = {}

function MsgDef.Msg1070204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg1070204:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1070204:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1070204:opcode()
	return 1070204
end

--[[ 请求删除仇人(返回)--]]
MsgDef.Msg5070204 = {}
function MsgDef.Msg5070204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg5070204:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5070204:decode(sm)
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5070204:opcode()
	return 5070204
end
--[[ 请求赠送爱心--]]
MsgDef.Msg1070301 = {}

function MsgDef.Msg1070301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.type == nil then msg.type = 0 end --[[(int8) 请求类型 1:单个赠送 2:一键赠送--]]
	return msg
end

function MsgDef.Msg1070301:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1070301:decode(sm)
	self.roleId = sm:readInt64();
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1070301:opcode()
	return 1070301
end

--[[ 请求赠送爱心(返回)--]]
MsgDef.Msg5070301 = {}
function MsgDef.Msg5070301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.presentStatus = 0 --[[(int32) 赠送爱心状态--]]
	msg.leftPresentCnt = 0 --[[(int32) 剩余可赠送爱心次数--]]
	msg.type = 0 --[[(int8) 请求类型 1:单个赠送 2:一键赠送--]]
	return msg
end

function MsgDef.Msg5070301:encode(sm)
	sm:writeInt32(self.presentStatus);
	sm:writeInt32(self.leftPresentCnt);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5070301:decode(sm)
	self.presentStatus = sm:readInt32();
	self.leftPresentCnt = sm:readInt32();
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5070301:opcode()
	return 5070301
end
--[[ 请求领取爱心--]]
MsgDef.Msg1070302 = {}

function MsgDef.Msg1070302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.type == nil then msg.type = 0 end --[[(int8) 请求类型 1:提醒赠送爱心 2:领取爱心 3:一键提醒 4:一键领取--]]
	return msg
end

function MsgDef.Msg1070302:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1070302:decode(sm)
	self.roleId = sm:readInt64();
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1070302:opcode()
	return 1070302
end

--[[ 请求领取爱心(返回)--]]
MsgDef.Msg5070302 = {}
function MsgDef.Msg5070302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.recvStatus = 0 --[[(int32) 领取状态--]]
	msg.type = 0 --[[(int8) 请求类型 1:提醒赠送爱心 2:领取爱心 3:一键提醒 4:一键领取--]]
	return msg
end

function MsgDef.Msg5070302:encode(sm)
	sm:writeInt32(self.recvStatus);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5070302:decode(sm)
	self.recvStatus = sm:readInt32();
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5070302:opcode()
	return 5070302
end
--[[ 请求魅力界面或进阶--]]
MsgDef.Msg1070303 = {}

function MsgDef.Msg1070303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:显示 2:进阶--]]
	return msg
end

function MsgDef.Msg1070303:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1070303:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1070303:opcode()
	return 1070303
end

--[[ 请求魅力界面或进阶(返回)--]]
MsgDef.Msg5070303 = {}
function MsgDef.Msg5070303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.charmValue = 0 --[[(int32) 当前魅力值--]]
	msg.charmStepId = 0 --[[(int32) 魅力等级Id--]]
	msg.charmPower = 0 --[[(int32) 魅力战力--]]
	return msg
end

function MsgDef.Msg5070303:encode(sm)
	sm:writeInt32(self.charmValue);
	sm:writeInt32(self.charmStepId);
	sm:writeInt32(self.charmPower);
	return self
end

function MsgDef.Msg5070303:decode(sm)
	self.charmValue = sm:readInt32();
	self.charmStepId = sm:readInt32();
	self.charmPower = sm:readInt32();
	return self
end


function MsgDef.Msg5070303:opcode()
	return 5070303
end
--[[ 请求爱心记录排行榜--]]
MsgDef.Msg1070304 = {}

function MsgDef.Msg1070304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数,从1开始--]]
	return msg
end

function MsgDef.Msg1070304:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1070304:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1070304:opcode()
	return 1070304
end

--[[ 请求爱心记录排行榜(返回)--]]
MsgDef.Msg5070304 = {}
function MsgDef.Msg5070304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.heartRecord = {} --[[(array<HeartRecord>) 爱心记录--]]
	msg.totalSum = 0 --[[(int32) 总数--]]
	msg.page = 0 --[[(int32) 当前页数,从1开始--]]
	return msg
end

function MsgDef.Msg5070304:encode(sm)
	sm:writeInt16(#self.heartRecord)
	for i,elm in ipairs(self.heartRecord) do
		elm:encode(sm)
	end
	sm:writeInt32(self.totalSum);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg5070304:decode(sm)
	local heartRecord_size = sm:readInt16()
	for i = 1,heartRecord_size do
		local element = MsgDef.HeartRecord:create():decode(sm)
		table.insert(self.heartRecord, element)
	end
	self.totalSum = sm:readInt32();
	self.page = sm:readInt32();
	return self
end


function MsgDef.Msg5070304:opcode()
	return 5070304
end
--[[ 请求邮件列表--]]
MsgDef.Msg1080101 = {}

function MsgDef.Msg1080101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1080101:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1080101:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1080101:opcode()
	return 1080101
end

--[[ 请求邮件列表(返回)--]]
MsgDef.Msg5080101 = {}
function MsgDef.Msg5080101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maxPage = 0 --[[(int32) 最大页数--]]
	msg.page = 0 --[[(int32) 页数--]]
	msg.mails = {} --[[(array<MailInfo>) 邮件列表--]]
	return msg
end

function MsgDef.Msg5080101:encode(sm)
	sm:writeInt32(self.maxPage);
	sm:writeInt32(self.page);
	sm:writeInt16(#self.mails)
	for i,elm in ipairs(self.mails) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5080101:decode(sm)
	self.maxPage = sm:readInt32();
	self.page = sm:readInt32();
	local mails_size = sm:readInt16()
	for i = 1,mails_size do
		local element = MsgDef.MailInfo:create():decode(sm)
		table.insert(self.mails, element)
	end
	return self
end


function MsgDef.Msg5080101:opcode()
	return 5080101
end
--[[ 请求标记&领取邮件--]]
MsgDef.Msg1080102 = {}

function MsgDef.Msg1080102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型1:领取,2一键领取附件邮件,3删除单个,4一键删除已读--]]
	if msg.mailId == nil then msg.mailId = 0 end --[[(int64) 邮件id--]]
	return msg
end

function MsgDef.Msg1080102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.mailId);
	return self
end

function MsgDef.Msg1080102:decode(sm)
	self.reqType = sm:readInt8();
	self.mailId = sm:readInt64();
	return self
end

function MsgDef.Msg1080102:opcode()
	return 1080102
end

--[[ 请求标记&领取邮件(返回)--]]
MsgDef.Msg5080102 = {}
function MsgDef.Msg5080102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 请求类型1:领取--]]
	msg.mailId = 0 --[[(int64) 邮件id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	return msg
end

function MsgDef.Msg5080102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.mailId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5080102:decode(sm)
	self.reqType = sm:readInt8();
	self.mailId = sm:readInt64();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5080102:opcode()
	return 5080102
end
--[[ 请求随身商店--]]
MsgDef.Msg1090101 = {}

function MsgDef.Msg1090101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 请求类型 1:显示 2:购买--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置Id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	return msg
end

function MsgDef.Msg1090101:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1090101:decode(sm)
	self.type = sm:readInt32();
	self.cfgId = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1090101:opcode()
	return 1090101
end

--[[ 请求随身商店(返回)--]]
MsgDef.Msg5090101 = {}
function MsgDef.Msg5090101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftCount = 0 --[[(int32) 剩余购买次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得的道具--]]
	return msg
end

function MsgDef.Msg5090101:encode(sm)
	sm:writeInt32(self.leftCount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5090101:decode(sm)
	self.leftCount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5090101:opcode()
	return 5090101
end
--[[ 请求购买道具--]]
MsgDef.Msg1090102 = {}

function MsgDef.Msg1090102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 道具id--]]
	if msg.buyNum == nil then msg.buyNum = 0 end --[[(int32) 购买数量--]]
	if msg.buyType == nil then msg.buyType = 0 end --[[(int32) 购买类型--]]
	return msg
end

function MsgDef.Msg1090102:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.buyNum);
	sm:writeInt32(self.buyType);
	return self
end

function MsgDef.Msg1090102:decode(sm)
	self.itemId = sm:readInt32();
	self.buyNum = sm:readInt32();
	self.buyType = sm:readInt32();
	return self
end

function MsgDef.Msg1090102:opcode()
	return 1090102
end

--[[ 请求购买道具(返回)--]]
MsgDef.Msg5090102 = {}
function MsgDef.Msg5090102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.itemId = 0 --[[(int32) 道具id--]]
	msg.buyNum = 0 --[[(int32) 购买数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得的道具--]]
	msg.buyType = 0 --[[(int32) 购买类型--]]
	return msg
end

function MsgDef.Msg5090102:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.buyNum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.buyType);
	return self
end

function MsgDef.Msg5090102:decode(sm)
	self.itemId = sm:readInt32();
	self.buyNum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.buyType = sm:readInt32();
	return self
end


function MsgDef.Msg5090102:opcode()
	return 5090102
end
--[[ 请求商城道具信息--]]
MsgDef.Msg1090103 = {}

function MsgDef.Msg1090103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 商城标签 1:元宝商城 2:绑定元宝商城 3:荣誉商城 4:爬塔商城 5:功勋商城 6:声望 7:威名8：婚礼9:家园 10.每周限购--]]
	return msg
end

function MsgDef.Msg1090103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1090103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1090103:opcode()
	return 1090103
end

--[[ 请求商城道具信息(返回)--]]
MsgDef.Msg5090103 = {}
function MsgDef.Msg5090103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buyLeftTimes = {} --[[(map<int32,int32>) 剩余可购买次数--]]
	return msg
end

function MsgDef.Msg5090103:encode(sm)
	sm:writeInt16(get_map_size(self.buyLeftTimes))
	for kn,elm in ipairs(self.buyLeftTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5090103:decode(sm)
	local buyLeftTimes_size = sm:readInt16()
	for i = 1,buyLeftTimes_size do
		local kv = sm:readInt32();
		self.buyLeftTimes[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5090103:opcode()
	return 5090103
end
--[[ 请求购买商城道具--]]
MsgDef.Msg1090104 = {}

function MsgDef.Msg1090104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 商城标签 1:元宝商城 2:绑定元宝商城 3:荣誉商城  4:爬塔商城 5:功勋商城  6:声望  7:威名 8：婚礼 9:家园 10.每周限购--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 购买道具的配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	return msg
end

function MsgDef.Msg1090104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1090104:decode(sm)
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1090104:opcode()
	return 1090104
end

--[[ 请求购买商城道具(返回)--]]
MsgDef.Msg5090104 = {}
function MsgDef.Msg5090104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 购买得到的道具--]]
	return msg
end

function MsgDef.Msg5090104:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5090104:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5090104:opcode()
	return 5090104
end
--[[ 请求坐骑在线时间购买--]]
MsgDef.Msg1090105 = {}

function MsgDef.Msg1090105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示信息 1:购买--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具Id--]]
	return msg
end

function MsgDef.Msg1090105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1090105:decode(sm)
	self.reqType = sm:readInt8();
	self.amount = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1090105:opcode()
	return 1090105
end

--[[ 请求坐骑在线时间购买(返回)--]]
MsgDef.Msg5090105 = {}
function MsgDef.Msg5090105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示信息 1:购买--]]
	msg.restTimes = 0 --[[(int32) 剩余购买次数--]]
	msg.amount = 0 --[[(int32) 购买数量--]]
	return msg
end

function MsgDef.Msg5090105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.restTimes);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg5090105:decode(sm)
	self.reqType = sm:readInt8();
	self.restTimes = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end


function MsgDef.Msg5090105:opcode()
	return 5090105
end
--[[ 请求装备部位额外信息--]]
MsgDef.Msg1100101 = {}

function MsgDef.Msg1100101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) =0全部部位,1~10单独部位--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 主服id--]]
	return msg
end

function MsgDef.Msg1100101:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	return self
end

function MsgDef.Msg1100101:decode(sm)
	self.part = sm:readInt8();
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	return self
end

function MsgDef.Msg1100101:opcode()
	return 1100101
end

--[[ 请求装备部位额外信息(返回)--]]
MsgDef.Msg5100101 = {}
function MsgDef.Msg5100101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.part = 0 --[[(int8) =0全部部位,1~10单独部位--]]
	msg.partInfos = {} --[[(array<PartInfo>) 部位信息--]]
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.svrId = 0 --[[(int32) 主服id--]]
	return msg
end

function MsgDef.Msg5100101:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt16(#self.partInfos)
	for i,elm in ipairs(self.partInfos) do
		elm:encode(sm)
	end
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	return self
end

function MsgDef.Msg5100101:decode(sm)
	self.part = sm:readInt8();
	local partInfos_size = sm:readInt16()
	for i = 1,partInfos_size do
		local element = MsgDef.PartInfo:create():decode(sm)
		table.insert(self.partInfos, element)
	end
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	return self
end


function MsgDef.Msg5100101:opcode()
	return 5100101
end
--[[ 请求装备部位强化--]]
MsgDef.Msg1100102 = {}

function MsgDef.Msg1100102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =0请求强化信息=1单次强化,=2一键强化--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 强化的部位--]]
	return msg
end

function MsgDef.Msg1100102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	return self
end

function MsgDef.Msg1100102:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	return self
end

function MsgDef.Msg1100102:opcode()
	return 1100102
end

--[[ 请求装备部位强化(返回)--]]
MsgDef.Msg5100102 = {}
function MsgDef.Msg5100102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1单次强化,=2一键强化--]]
	msg.partInfos = {} --[[(array<PartInfo>) 部位信息--]]
	msg.strenPower = 0 --[[(int32) 强化系统战力--]]
	return msg
end

function MsgDef.Msg5100102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.partInfos)
	for i,elm in ipairs(self.partInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.strenPower);
	return self
end

function MsgDef.Msg5100102:decode(sm)
	self.reqType = sm:readInt8();
	local partInfos_size = sm:readInt16()
	for i = 1,partInfos_size do
		local element = MsgDef.PartInfo:create():decode(sm)
		table.insert(self.partInfos, element)
	end
	self.strenPower = sm:readInt32();
	return self
end


function MsgDef.Msg5100102:opcode()
	return 5100102
end
--[[ 请求装备部位升星--]]
MsgDef.Msg1100103 = {}

function MsgDef.Msg1100103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1普通升星,=2自动购买升星--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	if msg.auto == nil then msg.auto = 0 end --[[(int8) =0普通升星,=1升星10设定--]]
	return msg
end

function MsgDef.Msg1100103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	sm:writeInt8(self.auto);
	return self
end

function MsgDef.Msg1100103:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	self.auto = sm:readInt8();
	return self
end

function MsgDef.Msg1100103:opcode()
	return 1100103
end

--[[ 请求装备部位升星(返回)--]]
MsgDef.Msg5100103 = {}
function MsgDef.Msg5100103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1普通升星,=2自动购买升星--]]
	msg.part = 0 --[[(int8) 部位--]]
	msg.partInfo = MsgDef.PartInfo:create() --[[(PartInfo) 部位信息--]]
	msg.suc = 0 --[[(int8) =1升星成功,否则失败--]]
	return msg
end

function MsgDef.Msg5100103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	self.partInfo:encode(sm)
	sm:writeInt8(self.suc);
	return self
end

function MsgDef.Msg5100103:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	self.partInfo:decode(sm)
	self.suc = sm:readInt8();
	return self
end


function MsgDef.Msg5100103:opcode()
	return 5100103
end
--[[ 请求装备部位宝石镶嵌--]]
MsgDef.Msg1100104 = {}

function MsgDef.Msg1100104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1镶嵌,=2卸下,=3升级=4一键升级--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	if msg.hole == nil then msg.hole = 0 end --[[(int8) 哪个孔1~6--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 镶嵌的宝石id--]]
	return msg
end

function MsgDef.Msg1100104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	sm:writeInt8(self.hole);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1100104:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	self.hole = sm:readInt8();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1100104:opcode()
	return 1100104
end

--[[ 请求装备部位宝石镶嵌(返回)--]]
MsgDef.Msg5100104 = {}
function MsgDef.Msg5100104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1镶嵌,=2卸下,=3升级--]]
	msg.part = 0 --[[(int8) 部位--]]
	msg.hole = 0 --[[(int8) 哪个孔1~6--]]
	msg.itemId = 0 --[[(int32) 镶嵌的宝石id--]]
	msg.partInfo = MsgDef.PartInfo:create() --[[(PartInfo) 部位信息--]]
	msg.gemList = {} --[[(array<int32>) 宝石列表--]]
	return msg
end

function MsgDef.Msg5100104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	sm:writeInt8(self.hole);
	sm:writeInt32(self.itemId);
	self.partInfo:encode(sm)
	sm:writeInt16(get_map_size(self.gemList))
	for i,elm in ipairs(self.gemList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5100104:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	self.hole = sm:readInt8();
	self.itemId = sm:readInt32();
	self.partInfo:decode(sm)
	local gemList_size = sm:readInt16()
	for i = 1,gemList_size do
		local ele = sm:readInt32();
		table.insert(self.gemList, ele)
	end
	return self
end


function MsgDef.Msg5100104:opcode()
	return 5100104
end
--[[ 请求装备打造--]]
MsgDef.Msg1100105 = {}

function MsgDef.Msg1100105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 目标道具id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =0显示=1打造 =2所有打造信息--]]
	return msg
end

function MsgDef.Msg1100105:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1100105:decode(sm)
	self.itemId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1100105:opcode()
	return 1100105
end

--[[ 请求装备打造(返回)--]]
MsgDef.Msg5100105 = {}
function MsgDef.Msg5100105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.itemId = 0 --[[(int32) 目标道具id--]]
	msg.suc = 0 --[[(int8) 1打造成功,否则失败--]]
	msg.items = {} --[[(array<SimpleItemInfo>) items--]]
	msg.sucRate = 0 --[[(int32) 成功概率--]]
	msg.reqType = 0 --[[(int8) =0显示=1打造 =2所有打造信息--]]
	msg.dressEquips = {} --[[(array<int32>) 已经收集的套装数据--]]
	return msg
end

function MsgDef.Msg5100105:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt8(self.suc);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.sucRate);
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.dressEquips))
	for i,elm in ipairs(self.dressEquips) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5100105:decode(sm)
	self.itemId = sm:readInt32();
	self.suc = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.sucRate = sm:readInt32();
	self.reqType = sm:readInt8();
	local dressEquips_size = sm:readInt16()
	for i = 1,dressEquips_size do
		local ele = sm:readInt32();
		table.insert(self.dressEquips, ele)
	end
	return self
end


function MsgDef.Msg5100105:opcode()
	return 5100105
end
--[[ 请求道具合成--]]
MsgDef.Msg1100106 = {}

function MsgDef.Msg1100106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 目标id--]]
	if msg.hcNum == nil then msg.hcNum = 0 end --[[(int32) 合成数量--]]
	return msg
end

function MsgDef.Msg1100106:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.hcNum);
	return self
end

function MsgDef.Msg1100106:decode(sm)
	self.itemId = sm:readInt32();
	self.hcNum = sm:readInt32();
	return self
end

function MsgDef.Msg1100106:opcode()
	return 1100106
end

--[[ 请求道具合成(返回)--]]
MsgDef.Msg5100106 = {}
function MsgDef.Msg5100106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.itemId = 0 --[[(int32) 目标id--]]
	msg.hcNum = 0 --[[(int32) 合成数量--]]
	return msg
end

function MsgDef.Msg5100106:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.hcNum);
	return self
end

function MsgDef.Msg5100106:decode(sm)
	self.itemId = sm:readInt32();
	self.hcNum = sm:readInt32();
	return self
end


function MsgDef.Msg5100106:opcode()
	return 5100106
end
--[[ 请求装备套装激活--]]
MsgDef.Msg1100107 = {}

function MsgDef.Msg1100107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.suiltEffectId == nil then msg.suiltEffectId = 0 end --[[(int32) 套装效果id--]]
	return msg
end

function MsgDef.Msg1100107:encode(sm)
	sm:writeInt32(self.suiltEffectId);
	return self
end

function MsgDef.Msg1100107:decode(sm)
	self.suiltEffectId = sm:readInt32();
	return self
end

function MsgDef.Msg1100107:opcode()
	return 1100107
end

--[[ 请求装备套装激活(返回)--]]
MsgDef.Msg5100107 = {}
function MsgDef.Msg5100107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suiltEffectId = 0 --[[(int32) 套装id--]]
	return msg
end

function MsgDef.Msg5100107:encode(sm)
	sm:writeInt32(self.suiltEffectId);
	return self
end

function MsgDef.Msg5100107:decode(sm)
	self.suiltEffectId = sm:readInt32();
	return self
end


function MsgDef.Msg5100107:opcode()
	return 5100107
end
--[[ 请求装备套装数据--]]
MsgDef.Msg1100108 = {}

function MsgDef.Msg1100108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家roleid--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 主服id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:人物信息 3:剑神装备信息--]]
	return msg
end

function MsgDef.Msg1100108:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1100108:decode(sm)
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1100108:opcode()
	return 1100108
end

--[[ 请求装备套装数据(返回)--]]
MsgDef.Msg5100108 = {}
function MsgDef.Msg5100108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dressEquips = {} --[[(array<int32>) 穿戴过的装备id--]]
	msg.activedEffects = {} --[[(array<int32>) 已激活的套装效果--]]
	msg.activeStarSuits = {} --[[(array<int32>) 激活升星套装效果--]]
	msg.activeGemSuits = {} --[[(array<int32>) 激活宝石套装效果--]]
	msg.fashionSuits = {} --[[(map<int32,FashionSuitInfo>) 时装套装数据--]]
	msg.reqType = 0 --[[(int8) 0:人物信息 3:剑神装备信息--]]
	return msg
end

function MsgDef.Msg5100108:encode(sm)
	sm:writeInt16(get_map_size(self.dressEquips))
	for i,elm in ipairs(self.dressEquips) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.activedEffects))
	for i,elm in ipairs(self.activedEffects) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.activeStarSuits))
	for i,elm in ipairs(self.activeStarSuits) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.activeGemSuits))
	for i,elm in ipairs(self.activeGemSuits) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.fashionSuits))
	for kn,elm in ipairs(self.fashionSuits) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5100108:decode(sm)
	local dressEquips_size = sm:readInt16()
	for i = 1,dressEquips_size do
		local ele = sm:readInt32();
		table.insert(self.dressEquips, ele)
	end
	local activedEffects_size = sm:readInt16()
	for i = 1,activedEffects_size do
		local ele = sm:readInt32();
		table.insert(self.activedEffects, ele)
	end
	local activeStarSuits_size = sm:readInt16()
	for i = 1,activeStarSuits_size do
		local ele = sm:readInt32();
		table.insert(self.activeStarSuits, ele)
	end
	local activeGemSuits_size = sm:readInt16()
	for i = 1,activeGemSuits_size do
		local ele = sm:readInt32();
		table.insert(self.activeGemSuits, ele)
	end
	local fashionSuits_size = sm:readInt16()
	for i = 1,fashionSuits_size do
		local kev = sm:readInt32(kn);
		self.fashionSuits[kev] = MsgDef.FashionSuitInfo:create():decode(sm)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5100108:opcode()
	return 5100108
end
--[[ 请求装备分解--]]
MsgDef.Msg1100109 = {}

function MsgDef.Msg1100109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 装备位置--]]
	return msg
end

function MsgDef.Msg1100109:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1100109:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1100109:opcode()
	return 1100109
end

--[[ 请求装备分解(返回)--]]
MsgDef.Msg5100109 = {}
function MsgDef.Msg5100109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.indexs = {} --[[(array<int32>) 装备位置--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5100109:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100109:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local ele = sm:readInt32();
		table.insert(self.indexs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5100109:opcode()
	return 5100109
end
--[[ 请求一键镶嵌宝石--]]
MsgDef.Msg1100110 = {}

function MsgDef.Msg1100110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	return msg
end

function MsgDef.Msg1100110:encode(sm)
	sm:writeInt8(self.part);
	return self
end

function MsgDef.Msg1100110:decode(sm)
	self.part = sm:readInt8();
	return self
end

function MsgDef.Msg1100110:opcode()
	return 1100110
end

--[[ 请求一键镶嵌宝石(返回)--]]
MsgDef.Msg5100110 = {}
function MsgDef.Msg5100110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.result = 0 --[[(int8) 0=失败，1=成功--]]
	msg.partInfo = MsgDef.PartInfo:create() --[[(PartInfo) 部位信息--]]
	msg.holeList = {} --[[(array<int32>) 改动的孔--]]
	return msg
end

function MsgDef.Msg5100110:encode(sm)
	sm:writeInt8(self.result);
	self.partInfo:encode(sm)
	sm:writeInt16(get_map_size(self.holeList))
	for i,elm in ipairs(self.holeList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5100110:decode(sm)
	self.result = sm:readInt8();
	self.partInfo:decode(sm)
	local holeList_size = sm:readInt16()
	for i = 1,holeList_size do
		local ele = sm:readInt32();
		table.insert(self.holeList, ele)
	end
	return self
end


function MsgDef.Msg5100110:opcode()
	return 5100110
end
--[[ 请求打造石红点位置--]]
MsgDef.Msg1100111 = {}

function MsgDef.Msg1100111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1100111:encode(sm)
	return self
end

function MsgDef.Msg1100111:decode(sm)
	return self
end

function MsgDef.Msg1100111:opcode()
	return 1100111
end

--[[ 请求打造石红点位置(返回)--]]
MsgDef.Msg5100111 = {}
function MsgDef.Msg5100111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buildReds = {} --[[(map<int32,int8>) 打造石红点位置--]]
	return msg
end

function MsgDef.Msg5100111:encode(sm)
	sm:writeInt16(get_map_size(self.buildReds))
	for kn,elm in ipairs(self.buildReds) do
		sm:writeInt32(kn);
		sm:writeInt8(elm);
	end
	return self
end

function MsgDef.Msg5100111:decode(sm)
	local buildReds_size = sm:readInt16()
	for i = 1,buildReds_size do
		local kv = sm:readInt32();
		self.buildReds[kv] = sm:readInt8();
	end
	return self
end


function MsgDef.Msg5100111:opcode()
	return 5100111
end
--[[ 请求装备合成--]]
MsgDef.Msg1100112 = {}

function MsgDef.Msg1100112:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=显示2=合成--]]
	if msg.materials == nil then msg.materials = {} end --[[(array<int32>) 合成材料--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 合成部位--]]
	return msg
end

function MsgDef.Msg1100112:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.materials))
	for i,elm in ipairs(self.materials) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.part);
	return self
end

function MsgDef.Msg1100112:decode(sm)
	self.reqType = sm:readInt8();
	local materials_size = sm:readInt16()
	for i = 1,materials_size do
		local elm = sm:readInt32();
		table.insert(self.materials, elm)
	end
	self.part = sm:readInt8();
	return self
end

function MsgDef.Msg1100112:opcode()
	return 1100112
end

--[[ 请求装备合成(返回)--]]
MsgDef.Msg5100112 = {}
function MsgDef.Msg5100112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成的道具--]]
	msg.reqType = 0 --[[(int8) 1=显示2=合成--]]
	return msg
end

function MsgDef.Msg5100112:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5100112:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5100112:opcode()
	return 5100112
end
--[[ 请求装备套装锻造--]]
MsgDef.Msg1100113 = {}

function MsgDef.Msg1100113:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=诛仙2=诸神--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	return msg
end

function MsgDef.Msg1100113:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	return self
end

function MsgDef.Msg1100113:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	return self
end

function MsgDef.Msg1100113:opcode()
	return 1100113
end

--[[ 请求装备套装锻造(返回)--]]
MsgDef.Msg5100113 = {}
function MsgDef.Msg5100113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1=诛仙2=诸神--]]
	msg.part = 0 --[[(int8) 部位--]]
	msg.suits = {} --[[(map<int32,EquipSuitForge>) 套装数据key部位--]]
	return msg
end

function MsgDef.Msg5100113:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	sm:writeInt16(get_map_size(self.suits))
	for kn,elm in ipairs(self.suits) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100113:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	local suits_size = sm:readInt16()
	for i = 1,suits_size do
		local kev = sm:readInt32(kn);
		self.suits[kev] = MsgDef.EquipSuitForge:create():decode(sm)
	end
	return self
end


function MsgDef.Msg5100113:opcode()
	return 5100113
end
--[[ 请求装备升阶--]]
MsgDef.Msg1100114 = {}

function MsgDef.Msg1100114:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 背包装备index--]]
	return msg
end

function MsgDef.Msg1100114:encode(sm)
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1100114:decode(sm)
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1100114:opcode()
	return 1100114
end

--[[ 请求装备升阶(返回)--]]
MsgDef.Msg5100114 = {}
function MsgDef.Msg5100114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.index = 0 --[[(int32) 背包装备index--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5100114:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100114:decode(sm)
	self.index = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5100114:opcode()
	return 5100114
end
--[[ 请求装备铸星--]]
MsgDef.Msg1100115 = {}

function MsgDef.Msg1100115:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包位置--]]
	return msg
end

function MsgDef.Msg1100115:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1100115:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1100115:opcode()
	return 1100115
end

--[[ 请求装备铸星(返回)--]]
MsgDef.Msg5100115 = {}
function MsgDef.Msg5100115:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.indexs = {} --[[(array<int32>) 背包位置--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得道具--]]
	return msg
end

function MsgDef.Msg5100115:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100115:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local ele = sm:readInt32();
		table.insert(self.indexs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5100115:opcode()
	return 5100115
end
--[[ 请求装备觉醒--]]
MsgDef.Msg1100116 = {}

function MsgDef.Msg1100116:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:诛仙 2：诸神--]]
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	return msg
end

function MsgDef.Msg1100116:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	return self
end

function MsgDef.Msg1100116:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	return self
end

function MsgDef.Msg1100116:opcode()
	return 1100116
end

--[[ 请求装备觉醒(返回)--]]
MsgDef.Msg5100116 = {}
function MsgDef.Msg5100116:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:诛仙 2：诸神--]]
	msg.part = 0 --[[(int8) 部位--]]
	msg.awakens = {} --[[(array<EquipAwakenInfo>) 觉醒信息--]]
	return msg
end

function MsgDef.Msg5100116:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.part);
	sm:writeInt16(#self.awakens)
	for i,elm in ipairs(self.awakens) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100116:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt8();
	local awakens_size = sm:readInt16()
	for i = 1,awakens_size do
		local element = MsgDef.EquipAwakenInfo:create():decode(sm)
		table.insert(self.awakens, element)
	end
	return self
end


function MsgDef.Msg5100116:opcode()
	return 5100116
end
--[[ 请求技能界面显示--]]
MsgDef.Msg1110101 = {}

function MsgDef.Msg1110101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1110101:encode(sm)
	return self
end

function MsgDef.Msg1110101:decode(sm)
	return self
end

function MsgDef.Msg1110101:opcode()
	return 1110101
end

--[[ 请求技能界面显示(返回)--]]
MsgDef.Msg5110101 = {}
function MsgDef.Msg5110101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillInfo = {} --[[(array<SkillInfo>) 技能信息--]]
	return msg
end

function MsgDef.Msg5110101:encode(sm)
	sm:writeInt16(#self.skillInfo)
	for i,elm in ipairs(self.skillInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5110101:decode(sm)
	local skillInfo_size = sm:readInt16()
	for i = 1,skillInfo_size do
		local element = MsgDef.SkillInfo:create():decode(sm)
		table.insert(self.skillInfo, element)
	end
	return self
end


function MsgDef.Msg5110101:opcode()
	return 5110101
end
--[[ 请求技能升级--]]
MsgDef.Msg1110102 = {}

function MsgDef.Msg1110102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:升级单个技能 2:一键升级--]]
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1110102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1110102:decode(sm)
	self.reqType = sm:readInt8();
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1110102:opcode()
	return 1110102
end

--[[ 请求技能升级(返回)--]]
MsgDef.Msg5110102 = {}
function MsgDef.Msg5110102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5110102:encode(sm)
	return self
end

function MsgDef.Msg5110102:decode(sm)
	return self
end


function MsgDef.Msg5110102:opcode()
	return 5110102
end
--[[ 请求天赋信息--]]
MsgDef.Msg1110103 = {}

function MsgDef.Msg1110103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:狂暴血统 2:圣堂之力 3:巨人意志--]]
	return msg
end

function MsgDef.Msg1110103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1110103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1110103:opcode()
	return 1110103
end

--[[ 请求天赋信息(返回)--]]
MsgDef.Msg5110103 = {}
function MsgDef.Msg5110103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.allTalentPoint = 0 --[[(int32) 总天赋点--]]
	msg.canUseTalentPoint = 0 --[[(int32) 可用天赋点--]]
	msg.curUsePoint = 0 --[[(int32) 本系已投放天赋点--]]
	msg.talentSkillLevelMap = {} --[[(map<int32,int32>) 天赋技能等级列表--]]
	return msg
end

function MsgDef.Msg5110103:encode(sm)
	sm:writeInt32(self.allTalentPoint);
	sm:writeInt32(self.canUseTalentPoint);
	sm:writeInt32(self.curUsePoint);
	sm:writeInt16(get_map_size(self.talentSkillLevelMap))
	for kn,elm in ipairs(self.talentSkillLevelMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5110103:decode(sm)
	self.allTalentPoint = sm:readInt32();
	self.canUseTalentPoint = sm:readInt32();
	self.curUsePoint = sm:readInt32();
	local talentSkillLevelMap_size = sm:readInt16()
	for i = 1,talentSkillLevelMap_size do
		local kv = sm:readInt32();
		self.talentSkillLevelMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5110103:opcode()
	return 5110103
end
--[[ 请求天赋技能升级--]]
MsgDef.Msg1110104 = {}

function MsgDef.Msg1110104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 天赋技能Id--]]
	return msg
end

function MsgDef.Msg1110104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1110104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1110104:opcode()
	return 1110104
end

--[[ 请求天赋技能升级(返回)--]]
MsgDef.Msg5110104 = {}
function MsgDef.Msg5110104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillLevel = 0 --[[(int32) 天赋技能等级--]]
	msg.canUseTalentPoint = 0 --[[(int32) 可用天赋点--]]
	msg.curUsePoint = 0 --[[(int32) 本系已投放天赋点--]]
	return msg
end

function MsgDef.Msg5110104:encode(sm)
	sm:writeInt32(self.skillLevel);
	sm:writeInt32(self.canUseTalentPoint);
	sm:writeInt32(self.curUsePoint);
	return self
end

function MsgDef.Msg5110104:decode(sm)
	self.skillLevel = sm:readInt32();
	self.canUseTalentPoint = sm:readInt32();
	self.curUsePoint = sm:readInt32();
	return self
end


function MsgDef.Msg5110104:opcode()
	return 5110104
end
--[[  请求天赋点重置--]]
MsgDef.Msg1110105 = {}

function MsgDef.Msg1110105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1110105:encode(sm)
	return self
end

function MsgDef.Msg1110105:decode(sm)
	return self
end

function MsgDef.Msg1110105:opcode()
	return 1110105
end

--[[  请求天赋点重置(返回)--]]
MsgDef.Msg5110105 = {}
function MsgDef.Msg5110105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.talentPoint = 0 --[[(int32) 总天赋点--]]
	msg.canUseTalentPoint = 0 --[[(int32) 可用天赋点--]]
	return msg
end

function MsgDef.Msg5110105:encode(sm)
	sm:writeInt32(self.talentPoint);
	sm:writeInt32(self.canUseTalentPoint);
	return self
end

function MsgDef.Msg5110105:decode(sm)
	self.talentPoint = sm:readInt32();
	self.canUseTalentPoint = sm:readInt32();
	return self
end


function MsgDef.Msg5110105:opcode()
	return 5110105
end
--[[ 请求仙法技能--]]
MsgDef.Msg1110106 = {}

function MsgDef.Msg1110106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1110106:encode(sm)
	return self
end

function MsgDef.Msg1110106:decode(sm)
	return self
end

function MsgDef.Msg1110106:opcode()
	return 1110106
end

--[[ 请求仙法技能(返回)--]]
MsgDef.Msg5110106 = {}
function MsgDef.Msg5110106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skills = {} --[[(array<SkillInfo>) 仙法技能--]]
	return msg
end

function MsgDef.Msg5110106:encode(sm)
	sm:writeInt16(#self.skills)
	for i,elm in ipairs(self.skills) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5110106:decode(sm)
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local element = MsgDef.SkillInfo:create():decode(sm)
		table.insert(self.skills, element)
	end
	return self
end


function MsgDef.Msg5110106:opcode()
	return 5110106
end
--[[ 请求坐骑信息--]]
MsgDef.Msg1120101 = {}

function MsgDef.Msg1120101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1120101:encode(sm)
	return self
end

function MsgDef.Msg1120101:decode(sm)
	return self
end

function MsgDef.Msg1120101:opcode()
	return 1120101
end

--[[ 请求坐骑信息(返回)--]]
MsgDef.Msg5120101 = {}
function MsgDef.Msg5120101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 坐骑等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的坐骑皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.zzdNum = 0 --[[(int32) 资质丹已使用数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹已使用数量--]]
	msg.power = 0 --[[(int32) 坐骑系统战力--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性map--]]
	return msg
end

function MsgDef.Msg5120101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5120101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	self.blessTime = sm:readInt32();
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5120101:opcode()
	return 5120101
end
--[[ 请求坐骑升级--]]
MsgDef.Msg1120102 = {}

function MsgDef.Msg1120102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.auto == nil then msg.auto = 0 end --[[(int8) 1：自动购买--]]
	return msg
end

function MsgDef.Msg1120102:encode(sm)
	sm:writeInt8(self.auto);
	return self
end

function MsgDef.Msg1120102:decode(sm)
	self.auto = sm:readInt8();
	return self
end

function MsgDef.Msg1120102:opcode()
	return 1120102
end

--[[ 请求坐骑升级(返回)--]]
MsgDef.Msg5120102 = {}
function MsgDef.Msg5120102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) 0不成;1成功--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.lev = 0 --[[(int32) 等级--]]
	msg.levExp = 0 --[[(int32) 等级经验--]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1：暴击--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性map--]]
	return msg
end

function MsgDef.Msg5120102:encode(sm)
	sm:writeInt8(self.suc);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5120102:decode(sm)
	self.suc = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	self.blessTime = sm:readInt32();
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5120102:opcode()
	return 5120102
end
--[[ 请求坐骑装备升级--]]
MsgDef.Msg1120103 = {}

function MsgDef.Msg1120103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:升一次 1:升10次--]]
	return msg
end

function MsgDef.Msg1120103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1120103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1120103:opcode()
	return 1120103
end

--[[ 请求坐骑装备升级(返回)--]]
MsgDef.Msg5120103 = {}
function MsgDef.Msg5120103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 装备当前等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:升一次 1:升10次--]]
	return msg
end

function MsgDef.Msg5120103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5120103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5120103:opcode()
	return 5120103
end
--[[ 请求坐骑技能升级--]]
MsgDef.Msg1120104 = {}

function MsgDef.Msg1120104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1120104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1120104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1120104:opcode()
	return 1120104
end

--[[ 请求坐骑技能升级(返回)--]]
MsgDef.Msg5120104 = {}
function MsgDef.Msg5120104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 技能当前等级--]]
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5120104:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5120104:decode(sm)
	self.lev = sm:readInt32();
	self.skillId = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5120104:opcode()
	return 5120104
end
--[[ 请求坐骑皮肤改变--]]
MsgDef.Msg1120105 = {}

function MsgDef.Msg1120105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1穿=2卸下--]]
	return msg
end

function MsgDef.Msg1120105:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1120105:decode(sm)
	self.skinId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1120105:opcode()
	return 1120105
end

--[[ 请求坐骑皮肤改变(返回)--]]
MsgDef.Msg5120105 = {}
function MsgDef.Msg5120105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	msg.reqType = 0 --[[(int8) =1穿=2卸下--]]
	return msg
end

function MsgDef.Msg5120105:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5120105:decode(sm)
	self.skinId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5120105:opcode()
	return 5120105
end
--[[ 请求坐骑骑乘--]]
MsgDef.Msg1120201 = {}

function MsgDef.Msg1120201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rideStatu == nil then msg.rideStatu = 0 end --[[(int8) 骑乘状态=0下马状态;=1骑乘状态--]]
	return msg
end

function MsgDef.Msg1120201:encode(sm)
	sm:writeInt8(self.rideStatu);
	return self
end

function MsgDef.Msg1120201:decode(sm)
	self.rideStatu = sm:readInt8();
	return self
end

function MsgDef.Msg1120201:opcode()
	return 1120201
end

--[[ 请求坐骑骑乘(返回)--]]
MsgDef.Msg5120201 = {}
function MsgDef.Msg5120201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rideStatu = 0 --[[(int8) 骑乘状态--]]
	return msg
end

function MsgDef.Msg5120201:encode(sm)
	sm:writeInt8(self.rideStatu);
	return self
end

function MsgDef.Msg5120201:decode(sm)
	self.rideStatu = sm:readInt8();
	return self
end


function MsgDef.Msg5120201:opcode()
	return 5120201
end
--[[ 请求充值档次--]]
MsgDef.Msg1130101 = {}

function MsgDef.Msg1130101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1130101:encode(sm)
	return self
end

function MsgDef.Msg1130101:decode(sm)
	return self
end

function MsgDef.Msg1130101:opcode()
	return 1130101
end

--[[ 请求充值档次(返回)--]]
MsgDef.Msg5130101 = {}
function MsgDef.Msg5130101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.czItemList = {} --[[(array<CzItemInfo>) 充值列表--]]
	msg.actLastTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5130101:encode(sm)
	sm:writeInt16(#self.czItemList)
	for i,elm in ipairs(self.czItemList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actLastTime);
	return self
end

function MsgDef.Msg5130101:decode(sm)
	local czItemList_size = sm:readInt16()
	for i = 1,czItemList_size do
		local element = MsgDef.CzItemInfo:create():decode(sm)
		table.insert(self.czItemList, element)
	end
	self.actLastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5130101:opcode()
	return 5130101
end
--[[ 请求首次领取vip1--]]
MsgDef.Msg1130102 = {}

function MsgDef.Msg1130102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1130102:encode(sm)
	return self
end

function MsgDef.Msg1130102:decode(sm)
	return self
end

function MsgDef.Msg1130102:opcode()
	return 1130102
end

--[[ 请求首次领取vip1(返回)--]]
MsgDef.Msg5130102 = {}
function MsgDef.Msg5130102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.vipLevel = 0 --[[(int32) vip等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5130102:encode(sm)
	sm:writeInt32(self.vipLevel);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5130102:decode(sm)
	self.vipLevel = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5130102:opcode()
	return 5130102
end
--[[ 请求特权vip--]]
MsgDef.Msg1130103 = {}

function MsgDef.Msg1130103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 0:显示 1:激活--]]
	if msg.vipType == nil then msg.vipType = 0 end --[[(int8) vip类型 1:白银vip 2:黄金vip 3:钻石vip--]]
	return msg
end

function MsgDef.Msg1130103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.vipType);
	return self
end

function MsgDef.Msg1130103:decode(sm)
	self.reqType = sm:readInt8();
	self.vipType = sm:readInt8();
	return self
end

function MsgDef.Msg1130103:opcode()
	return 1130103
end

--[[ 请求特权vip(返回)--]]
MsgDef.Msg5130103 = {}
function MsgDef.Msg5130103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.activeStatus = {} --[[(map<int32,int32>) <类型,激活状态 0:未激活 1:已激活>--]]
	return msg
end

function MsgDef.Msg5130103:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.activeStatus))
	for kn,elm in ipairs(self.activeStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5130103:decode(sm)
	self.lastTime = sm:readInt32();
	local activeStatus_size = sm:readInt16()
	for i = 1,activeStatus_size do
		local kv = sm:readInt32();
		self.activeStatus[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5130103:opcode()
	return 5130103
end
--[[ 请求特权体验--]]
MsgDef.Msg1130104 = {}

function MsgDef.Msg1130104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 特权类型 1:白银 2:黄金 3:钻石--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:激活体验 2:结束体验--]]
	return msg
end

function MsgDef.Msg1130104:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1130104:decode(sm)
	self.type = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1130104:opcode()
	return 1130104
end

--[[ 请求特权体验(返回)--]]
MsgDef.Msg5130104 = {}
function MsgDef.Msg5130104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int32) 特权类型 1:白银 2:黄金 3:钻石--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5130104:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5130104:decode(sm)
	self.type = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5130104:opcode()
	return 5130104
end
--[[ 请求vip升级--]]
MsgDef.Msg1130105 = {}

function MsgDef.Msg1130105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1130105:encode(sm)
	return self
end

function MsgDef.Msg1130105:decode(sm)
	return self
end

function MsgDef.Msg1130105:opcode()
	return 1130105
end

--[[ 请求vip升级(返回)--]]
MsgDef.Msg5130105 = {}
function MsgDef.Msg5130105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.vipLevel = 0 --[[(int32) vip等级--]]
	msg.star = 0 --[[(int32) 星--]]
	return msg
end

function MsgDef.Msg5130105:encode(sm)
	sm:writeInt32(self.vipLevel);
	sm:writeInt32(self.star);
	return self
end

function MsgDef.Msg5130105:decode(sm)
	self.vipLevel = sm:readInt32();
	self.star = sm:readInt32();
	return self
end


function MsgDef.Msg5130105:opcode()
	return 5130105
end
--[[ 请求vip折扣礼包--]]
MsgDef.Msg1130106 = {}

function MsgDef.Msg1130106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:购买--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 购买的配置id--]]
	return msg
end

function MsgDef.Msg1130106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1130106:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1130106:opcode()
	return 1130106
end

--[[ 请求vip折扣礼包(返回)--]]
MsgDef.Msg5130106 = {}
function MsgDef.Msg5130106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) 购买的配置id--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.buys = {} --[[(array<int32>) 已购买的id--]]
	return msg
end

function MsgDef.Msg5130106:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.buys))
	for i,elm in ipairs(self.buys) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5130106:decode(sm)
	self.cfgId = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local buys_size = sm:readInt16()
	for i = 1,buys_size do
		local ele = sm:readInt32();
		table.insert(self.buys, ele)
	end
	return self
end


function MsgDef.Msg5130106:opcode()
	return 5130106
end
--[[ 请求仙羽信息--]]
MsgDef.Msg1140101 = {}

function MsgDef.Msg1140101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1140101:encode(sm)
	return self
end

function MsgDef.Msg1140101:decode(sm)
	return self
end

function MsgDef.Msg1140101:opcode()
	return 1140101
end

--[[ 请求仙羽信息(返回)--]]
MsgDef.Msg5140101 = {}
function MsgDef.Msg5140101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验(祝福值)--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性map--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	return msg
end

function MsgDef.Msg5140101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5140101:decode(sm)
	self.lev = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5140101:opcode()
	return 5140101
end
--[[ 请求仙羽进阶--]]
MsgDef.Msg1140102 = {}

function MsgDef.Msg1140102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1140102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1140102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1140102:opcode()
	return 1140102
end

--[[ 请求仙羽进阶(返回)--]]
MsgDef.Msg5140102 = {}
function MsgDef.Msg5140102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1：暴击--]]
	return msg
end

function MsgDef.Msg5140102:encode(sm)
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.levExp);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5140102:decode(sm)
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.levExp = sm:readInt32();
	self.reqType = sm:readInt8();
	self.blessTime = sm:readInt32();
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5140102:opcode()
	return 5140102
end
--[[ 请求仙羽装备升级--]]
MsgDef.Msg1140103 = {}

function MsgDef.Msg1140103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg1140103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1140103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1140103:opcode()
	return 1140103
end

--[[ 请求仙羽装备升级(返回)--]]
MsgDef.Msg5140103 = {}
function MsgDef.Msg5140103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg5140103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5140103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5140103:opcode()
	return 5140103
end
--[[ 请求仙羽技能升级--]]
MsgDef.Msg1140104 = {}

function MsgDef.Msg1140104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1140104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1140104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1140104:opcode()
	return 1140104
end

--[[ 请求仙羽技能升级(返回)--]]
MsgDef.Msg5140104 = {}
function MsgDef.Msg5140104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5140104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5140104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5140104:opcode()
	return 5140104
end
--[[ 请求仙羽幻形--]]
MsgDef.Msg1140105 = {}

function MsgDef.Msg1140105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 说明：幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1140105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1140105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1140105:opcode()
	return 1140105
end

--[[ 请求仙羽幻形(返回)--]]
MsgDef.Msg5140105 = {}
function MsgDef.Msg5140105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 说明：幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5140105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5140105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5140105:opcode()
	return 5140105
end
--[[ 请求影卫信息或升级--]]
MsgDef.Msg1150101 = {}

function MsgDef.Msg1150101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 0:信息 1:升级--]]
	if msg.ywId == nil then msg.ywId = 0 end --[[(int32) 影卫Id--]]
	return msg
end

function MsgDef.Msg1150101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.ywId);
	return self
end

function MsgDef.Msg1150101:decode(sm)
	self.reqType = sm:readInt8();
	self.ywId = sm:readInt32();
	return self
end

function MsgDef.Msg1150101:opcode()
	return 1150101
end

--[[ 请求影卫信息或升级(返回)--]]
MsgDef.Msg5150101 = {}
function MsgDef.Msg5150101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ywLevelMap = {} --[[(map<int32,int32>) 已经激活的影卫列表--]]
	msg.ywLevel = 0 --[[(int32) 影卫等级--]]
	msg.reqType = 0 --[[(int8) 请求类型 0:信息 1:升级--]]
	msg.level = 0 --[[(int32) 影卫羁绊等级--]]
	return msg
end

function MsgDef.Msg5150101:encode(sm)
	sm:writeInt16(get_map_size(self.ywLevelMap))
	for kn,elm in ipairs(self.ywLevelMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.ywLevel);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.level);
	return self
end

function MsgDef.Msg5150101:decode(sm)
	local ywLevelMap_size = sm:readInt16()
	for i = 1,ywLevelMap_size do
		local kv = sm:readInt32();
		self.ywLevelMap[kv] = sm:readInt32();
	end
	self.ywLevel = sm:readInt32();
	self.reqType = sm:readInt8();
	self.level = sm:readInt32();
	return self
end


function MsgDef.Msg5150101:opcode()
	return 5150101
end
--[[ 请求影卫火凤升级--]]
MsgDef.Msg1150102 = {}

function MsgDef.Msg1150102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1150102:encode(sm)
	return self
end

function MsgDef.Msg1150102:decode(sm)
	return self
end

function MsgDef.Msg1150102:opcode()
	return 1150102
end

--[[ 请求影卫火凤升级(返回)--]]
MsgDef.Msg5150102 = {}
function MsgDef.Msg5150102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 等级--]]
	return msg
end

function MsgDef.Msg5150102:encode(sm)
	sm:writeInt32(self.level);
	return self
end

function MsgDef.Msg5150102:decode(sm)
	self.level = sm:readInt32();
	return self
end


function MsgDef.Msg5150102:opcode()
	return 5150102
end
--[[ 请求神兵信息--]]
MsgDef.Msg1160101 = {}

function MsgDef.Msg1160101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1160101:encode(sm)
	return self
end

function MsgDef.Msg1160101:decode(sm)
	return self
end

function MsgDef.Msg1160101:opcode()
	return 1160101
end

--[[ 请求神兵信息(返回)--]]
MsgDef.Msg5160101 = {}
function MsgDef.Msg5160101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性map--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	return msg
end

function MsgDef.Msg5160101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5160101:decode(sm)
	self.lev = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5160101:opcode()
	return 5160101
end
--[[ 请求神兵进阶--]]
MsgDef.Msg1160102 = {}

function MsgDef.Msg1160102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1160102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1160102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1160102:opcode()
	return 1160102
end

--[[ 请求神兵进阶(返回)--]]
MsgDef.Msg5160102 = {}
function MsgDef.Msg5160102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5160102:encode(sm)
	sm:writeInt8(self.suc);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5160102:decode(sm)
	self.suc = sm:readInt8();
	self.reqType = sm:readInt8();
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5160102:opcode()
	return 5160102
end
--[[ 请求神兵装备升级--]]
MsgDef.Msg1160103 = {}

function MsgDef.Msg1160103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg1160103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1160103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1160103:opcode()
	return 1160103
end

--[[ 请求神兵装备升级(返回)--]]
MsgDef.Msg5160103 = {}
function MsgDef.Msg5160103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg5160103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5160103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5160103:opcode()
	return 5160103
end
--[[ 请求神兵技能升级--]]
MsgDef.Msg1160104 = {}

function MsgDef.Msg1160104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1160104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1160104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1160104:opcode()
	return 1160104
end

--[[ 请求神兵技能升级(返回)--]]
MsgDef.Msg5160104 = {}
function MsgDef.Msg5160104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5160104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5160104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5160104:opcode()
	return 5160104
end
--[[ 请求神兵幻形--]]
MsgDef.Msg1160105 = {}

function MsgDef.Msg1160105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) skinId--]]
	return msg
end

function MsgDef.Msg1160105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1160105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1160105:opcode()
	return 1160105
end

--[[ 请求神兵幻形(返回)--]]
MsgDef.Msg5160105 = {}
function MsgDef.Msg5160105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) skinId--]]
	return msg
end

function MsgDef.Msg5160105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5160105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5160105:opcode()
	return 5160105
end
--[[ 请求法宝信息--]]
MsgDef.Msg1170101 = {}

function MsgDef.Msg1170101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1170101:encode(sm)
	return self
end

function MsgDef.Msg1170101:decode(sm)
	return self
end

function MsgDef.Msg1170101:opcode()
	return 1170101
end

--[[ 请求法宝信息(返回)--]]
MsgDef.Msg5170101 = {}
function MsgDef.Msg5170101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的皮肤--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	return msg
end

function MsgDef.Msg5170101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5170101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5170101:opcode()
	return 5170101
end
--[[ 请求法宝进阶--]]
MsgDef.Msg1170102 = {}

function MsgDef.Msg1170102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1170102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1170102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1170102:opcode()
	return 1170102
end

--[[ 请求法宝进阶(返回)--]]
MsgDef.Msg5170102 = {}
function MsgDef.Msg5170102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5170102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5170102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5170102:opcode()
	return 5170102
end
--[[ 请求法宝装备升级--]]
MsgDef.Msg1170103 = {}

function MsgDef.Msg1170103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg1170103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1170103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1170103:opcode()
	return 1170103
end

--[[ 请求法宝装备升级(返回)--]]
MsgDef.Msg5170103 = {}
function MsgDef.Msg5170103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg5170103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5170103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5170103:opcode()
	return 5170103
end
--[[ 请求法宝技能升级--]]
MsgDef.Msg1170104 = {}

function MsgDef.Msg1170104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1170104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1170104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1170104:opcode()
	return 1170104
end

--[[ 请求法宝技能升级(返回)--]]
MsgDef.Msg5170104 = {}
function MsgDef.Msg5170104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5170104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5170104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5170104:opcode()
	return 5170104
end
--[[ 请求法宝幻形--]]
MsgDef.Msg1170105 = {}

function MsgDef.Msg1170105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1170105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1170105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1170105:opcode()
	return 1170105
end

--[[ 请求法宝幻形(返回)--]]
MsgDef.Msg5170105 = {}
function MsgDef.Msg5170105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5170105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5170105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5170105:opcode()
	return 5170105
end
--[[ 请求仙器信息--]]
MsgDef.Msg1180101 = {}

function MsgDef.Msg1180101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1180101:encode(sm)
	return self
end

function MsgDef.Msg1180101:decode(sm)
	return self
end

function MsgDef.Msg1180101:opcode()
	return 1180101
end

--[[ 请求仙器信息(返回)--]]
MsgDef.Msg5180101 = {}
function MsgDef.Msg5180101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的皮肤--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	return msg
end

function MsgDef.Msg5180101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5180101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5180101:opcode()
	return 5180101
end
--[[ 请求仙器进阶--]]
MsgDef.Msg1180102 = {}

function MsgDef.Msg1180102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1180102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1180102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1180102:opcode()
	return 1180102
end

--[[ 请求仙器进阶(返回)--]]
MsgDef.Msg5180102 = {}
function MsgDef.Msg5180102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5180102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5180102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.levExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5180102:opcode()
	return 5180102
end
--[[ 请求仙器装备升级--]]
MsgDef.Msg1180103 = {}

function MsgDef.Msg1180103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg1180103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1180103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1180103:opcode()
	return 1180103
end

--[[ 请求仙器装备升级(返回)--]]
MsgDef.Msg5180103 = {}
function MsgDef.Msg5180103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg5180103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5180103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5180103:opcode()
	return 5180103
end
--[[ 请求仙器技能升级--]]
MsgDef.Msg1180104 = {}

function MsgDef.Msg1180104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1180104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1180104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1180104:opcode()
	return 1180104
end

--[[ 请求仙器技能升级(返回)--]]
MsgDef.Msg5180104 = {}
function MsgDef.Msg5180104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5180104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5180104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5180104:opcode()
	return 5180104
end
--[[ 请求仙器幻形--]]
MsgDef.Msg1180105 = {}

function MsgDef.Msg1180105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1180105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1180105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1180105:opcode()
	return 1180105
end

--[[ 请求仙器幻形(返回)--]]
MsgDef.Msg5180105 = {}
function MsgDef.Msg5180105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5180105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5180105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5180105:opcode()
	return 5180105
end
--[[ 请求剑神信息或进阶--]]
MsgDef.Msg1190101 = {}

function MsgDef.Msg1190101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:信息 2:进阶--]]
	if msg.auto == nil then msg.auto = 0 end --[[(int8) 1=自动购买--]]
	return msg
end

function MsgDef.Msg1190101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.auto);
	return self
end

function MsgDef.Msg1190101:decode(sm)
	self.reqType = sm:readInt8();
	self.auto = sm:readInt8();
	return self
end

function MsgDef.Msg1190101:opcode()
	return 1190101
end

--[[ 请求剑神信息或进阶(返回)--]]
MsgDef.Msg5190101 = {}
function MsgDef.Msg5190101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.jsLevel = 0 --[[(int32) 剑神等级--]]
	msg.process = 0 --[[(int32) 当前阶进度--]]
	msg.skillInfos = {} --[[(array<SkillInfo>) 角色主动技能列表--]]
	msg.power = 0 --[[(int32) 战斗力--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 进阶奖励--]]
	msg.reqType = 0 --[[(int8) 请求类型 1:信息 2:进阶--]]
	msg.auto = 0 --[[(int8) 1=自动购买--]]
	msg.currId = 0 --[[(int32) 当前穿戴皮肤id--]]
	msg.getIds = {} --[[(array<int32>) 获得的皮肤id--]]
	return msg
end

function MsgDef.Msg5190101:encode(sm)
	sm:writeInt32(self.jsLevel);
	sm:writeInt32(self.process);
	sm:writeInt16(#self.skillInfos)
	for i,elm in ipairs(self.skillInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.power);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.auto);
	sm:writeInt32(self.currId);
	sm:writeInt16(get_map_size(self.getIds))
	for i,elm in ipairs(self.getIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5190101:decode(sm)
	self.jsLevel = sm:readInt32();
	self.process = sm:readInt32();
	local skillInfos_size = sm:readInt16()
	for i = 1,skillInfos_size do
		local element = MsgDef.SkillInfo:create():decode(sm)
		table.insert(self.skillInfos, element)
	end
	self.power = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.auto = sm:readInt8();
	self.currId = sm:readInt32();
	local getIds_size = sm:readInt16()
	for i = 1,getIds_size do
		local ele = sm:readInt32();
		table.insert(self.getIds, ele)
	end
	return self
end


function MsgDef.Msg5190101:opcode()
	return 5190101
end
--[[ 请求更换剑神皮肤--]]
MsgDef.Msg1190102 = {}

function MsgDef.Msg1190102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.id == nil then msg.id = 0 end --[[(int32) id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=还原回默认2=更换--]]
	return msg
end

function MsgDef.Msg1190102:encode(sm)
	sm:writeInt32(self.id);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1190102:decode(sm)
	self.id = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1190102:opcode()
	return 1190102
end

--[[ 请求更换剑神皮肤(返回)--]]
MsgDef.Msg5190102 = {}
function MsgDef.Msg5190102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.id = 0 --[[(int32) id--]]
	msg.reqType = 0 --[[(int8) 1=还原回默认2=更换--]]
	return msg
end

function MsgDef.Msg5190102:encode(sm)
	sm:writeInt32(self.id);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5190102:decode(sm)
	self.id = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5190102:opcode()
	return 5190102
end
--[[ 请求穿脱剑神装备--]]
MsgDef.Msg1190201 = {}

function MsgDef.Msg1190201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =0时背包位置,=1时装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1190201:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1190201:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1190201:opcode()
	return 1190201
end

--[[ 请求穿脱剑神装备(返回)--]]
MsgDef.Msg5190201 = {}
function MsgDef.Msg5190201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5190201:encode(sm)
	return self
end

function MsgDef.Msg5190201:decode(sm)
	return self
end


function MsgDef.Msg5190201:opcode()
	return 5190201
end
--[[ 请求伙伴信息--]]
MsgDef.Msg1200101 = {}

function MsgDef.Msg1200101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1200101:encode(sm)
	return self
end

function MsgDef.Msg1200101:decode(sm)
	return self
end

function MsgDef.Msg1200101:opcode()
	return 1200101
end

--[[ 请求伙伴信息(返回)--]]
MsgDef.Msg5200101 = {}
function MsgDef.Msg5200101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 等级--]]
	msg.exp = 0 --[[(int32) 伙伴经验--]]
	msg.lastUpTime = 0 --[[(int32) 升阶时间,突破10星的时候才会有,上一次更新时间--]]
	msg.zzdNum = 0 --[[(int32) 资质丹已使用数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹已使用数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.skins = {} --[[(array<SkinInfo>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.onlineSecs = 0 --[[(int32) 累计在线时间--]]
	return msg
end

function MsgDef.Msg5200101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.lastUpTime);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.onlineSecs);
	return self
end

function MsgDef.Msg5200101:decode(sm)
	self.lev = sm:readInt32();
	self.exp = sm:readInt32();
	self.lastUpTime = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.SkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.onlineSecs = sm:readInt32();
	return self
end


function MsgDef.Msg5200101:opcode()
	return 5200101
end
--[[ 请求伙伴升级--]]
MsgDef.Msg1200102 = {}

function MsgDef.Msg1200102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1消耗元宝升阶--]]
	return msg
end

function MsgDef.Msg1200102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1200102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1200102:opcode()
	return 1200102
end

--[[ 请求伙伴升级(返回)--]]
MsgDef.Msg5200102 = {}
function MsgDef.Msg5200102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suc = 0 --[[(int8) =1成功--]]
	msg.lev = 0 --[[(int32) 等级--]]
	msg.exp = 0 --[[(int32) 伙伴经验--]]
	msg.lastUpTime = 0 --[[(int32) 升阶时间--]]
	msg.reqType = 0 --[[(int8) =1消耗元宝升阶--]]
	msg.power = 0 --[[(int32) power--]]
	msg.onlineSecs = 0 --[[(int32) onlineSecs--]]
	return msg
end

function MsgDef.Msg5200102:encode(sm)
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.lastUpTime);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.power);
	sm:writeInt32(self.onlineSecs);
	return self
end

function MsgDef.Msg5200102:decode(sm)
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.exp = sm:readInt32();
	self.lastUpTime = sm:readInt32();
	self.reqType = sm:readInt8();
	self.power = sm:readInt32();
	self.onlineSecs = sm:readInt32();
	return self
end


function MsgDef.Msg5200102:opcode()
	return 5200102
end
--[[ 请求伙伴装备升级--]]
MsgDef.Msg1200103 = {}

function MsgDef.Msg1200103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:升一次 1:升10次--]]
	return msg
end

function MsgDef.Msg1200103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1200103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1200103:opcode()
	return 1200103
end

--[[ 请求伙伴装备升级(返回)--]]
MsgDef.Msg5200103 = {}
function MsgDef.Msg5200103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 装备当前等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:升一次 1:升10次--]]
	return msg
end

function MsgDef.Msg5200103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5200103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5200103:opcode()
	return 5200103
end
--[[ 请求伙伴技能升级--]]
MsgDef.Msg1200104 = {}

function MsgDef.Msg1200104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1200104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1200104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1200104:opcode()
	return 1200104
end

--[[ 请求伙伴技能升级(返回)--]]
MsgDef.Msg5200104 = {}
function MsgDef.Msg5200104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 技能当前等级--]]
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5200104:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5200104:decode(sm)
	self.lev = sm:readInt32();
	self.skillId = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5200104:opcode()
	return 5200104
end
--[[ 请求伙伴皮肤改变--]]
MsgDef.Msg1200105 = {}

function MsgDef.Msg1200105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:穿 1:脱--]]
	return msg
end

function MsgDef.Msg1200105:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1200105:decode(sm)
	self.skinId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1200105:opcode()
	return 1200105
end

--[[ 请求伙伴皮肤改变(返回)--]]
MsgDef.Msg5200105 = {}
function MsgDef.Msg5200105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	msg.reqType = 0 --[[(int8) 0:穿 1:脱--]]
	return msg
end

function MsgDef.Msg5200105:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5200105:decode(sm)
	self.skinId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5200105:opcode()
	return 5200105
end
--[[ 请求伙伴改名--]]
MsgDef.Msg1200106 = {}

function MsgDef.Msg1200106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	return msg
end

function MsgDef.Msg1200106:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg1200106:decode(sm)
	self.skinId = sm:readInt32();
	self.name = sm:readString();
	return self
end

function MsgDef.Msg1200106:opcode()
	return 1200106
end

--[[ 请求伙伴改名(返回)--]]
MsgDef.Msg5200106 = {}
function MsgDef.Msg5200106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	msg.name = "" --[[(string) 名字--]]
	msg.changeNameCount = 0 --[[(int32) 改名次数--]]
	return msg
end

function MsgDef.Msg5200106:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeString(self.name);
	sm:writeInt32(self.changeNameCount);
	return self
end

function MsgDef.Msg5200106:decode(sm)
	self.skinId = sm:readInt32();
	self.name = sm:readString();
	self.changeNameCount = sm:readInt32();
	return self
end


function MsgDef.Msg5200106:opcode()
	return 5200106
end
--[[ 伙伴皮肤领取--]]
MsgDef.Msg1200107 = {}

function MsgDef.Msg1200107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	return msg
end

function MsgDef.Msg1200107:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1200107:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1200107:opcode()
	return 1200107
end

--[[ 伙伴皮肤领取(返回)--]]
MsgDef.Msg5200107 = {}
function MsgDef.Msg5200107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	return msg
end

function MsgDef.Msg5200107:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5200107:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5200107:opcode()
	return 5200107
end
--[[ 请求吞噬装备升级伙伴--]]
MsgDef.Msg1200201 = {}

function MsgDef.Msg1200201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.destIndex == nil then msg.destIndex = {} end --[[(array<int32>) 吞噬装备列表--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:吞噬 2:进阶 3:元宝进阶--]]
	return msg
end

function MsgDef.Msg1200201:encode(sm)
	sm:writeInt16(get_map_size(self.destIndex))
	for i,elm in ipairs(self.destIndex) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1200201:decode(sm)
	local destIndex_size = sm:readInt16()
	for i = 1,destIndex_size do
		local elm = sm:readInt32();
		table.insert(self.destIndex, elm)
	end
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1200201:opcode()
	return 1200201
end

--[[ 请求吞噬装备升级伙伴(返回)--]]
MsgDef.Msg5200201 = {}
function MsgDef.Msg5200201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.exp = 0 --[[(int32) 伙伴经验--]]
	msg.lev = 0 --[[(int32) 伙伴等级--]]
	msg.onlineSecs = 0 --[[(int32) 在线时间--]]
	msg.power = 0 --[[(int32) --]]
	msg.lastUpTime = 0 --[[(int32) 升阶时间--]]
	msg.reqType = 0 --[[(int8) 1:吞噬 2:进阶 3:元宝进阶--]]
	return msg
end

function MsgDef.Msg5200201:encode(sm)
	sm:writeInt32(self.exp);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.onlineSecs);
	sm:writeInt32(self.power);
	sm:writeInt32(self.lastUpTime);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5200201:decode(sm)
	self.exp = sm:readInt32();
	self.lev = sm:readInt32();
	self.onlineSecs = sm:readInt32();
	self.power = sm:readInt32();
	self.lastUpTime = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5200201:opcode()
	return 5200201
end
--[[ 请求伙伴仙羽信息--]]
MsgDef.Msg1210101 = {}

function MsgDef.Msg1210101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1210101:encode(sm)
	return self
end

function MsgDef.Msg1210101:decode(sm)
	return self
end

function MsgDef.Msg1210101:opcode()
	return 1210101
end

--[[ 请求伙伴仙羽信息(返回)--]]
MsgDef.Msg5210101 = {}
function MsgDef.Msg5210101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.skins = {} --[[(array<int32>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	return msg
end

function MsgDef.Msg5210101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5210101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5210101:opcode()
	return 5210101
end
--[[ 请求伙伴仙羽进阶--]]
MsgDef.Msg1210102 = {}

function MsgDef.Msg1210102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1210102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1210102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1210102:opcode()
	return 1210102
end

--[[ 请求伙伴仙羽进阶(返回)--]]
MsgDef.Msg5210102 = {}
function MsgDef.Msg5210102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5210102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5210102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.levExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5210102:opcode()
	return 5210102
end
--[[ 请求伙伴仙羽装备升级--]]
MsgDef.Msg1210103 = {}

function MsgDef.Msg1210103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg1210103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1210103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1210103:opcode()
	return 1210103
end

--[[ 请求伙伴仙羽装备升级(返回)--]]
MsgDef.Msg5210103 = {}
function MsgDef.Msg5210103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg5210103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5210103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5210103:opcode()
	return 5210103
end
--[[ 请求伙伴仙羽技能升级--]]
MsgDef.Msg1210104 = {}

function MsgDef.Msg1210104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1210104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1210104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1210104:opcode()
	return 1210104
end

--[[ 请求伙伴仙羽技能升级(返回)--]]
MsgDef.Msg5210104 = {}
function MsgDef.Msg5210104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5210104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5210104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5210104:opcode()
	return 5210104
end
--[[ 请求伙伴仙羽幻形--]]
MsgDef.Msg1210105 = {}

function MsgDef.Msg1210105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1210105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1210105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1210105:opcode()
	return 1210105
end

--[[ 请求伙伴仙羽幻形(返回)--]]
MsgDef.Msg5210105 = {}
function MsgDef.Msg5210105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5210105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5210105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5210105:opcode()
	return 5210105
end
--[[ 请求伙伴神兵信息--]]
MsgDef.Msg1220102 = {}

function MsgDef.Msg1220102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1220102:encode(sm)
	return self
end

function MsgDef.Msg1220102:decode(sm)
	return self
end

function MsgDef.Msg1220102:opcode()
	return 1220102
end

--[[ 请求伙伴神兵信息(返回)--]]
MsgDef.Msg5220102 = {}
function MsgDef.Msg5220102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.skins = {} --[[(array<int32>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	return msg
end

function MsgDef.Msg5220102:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5220102:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5220102:opcode()
	return 5220102
end
--[[ 请求伙伴神兵进阶--]]
MsgDef.Msg1220103 = {}

function MsgDef.Msg1220103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1220103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1220103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1220103:opcode()
	return 1220103
end

--[[ 请求伙伴神兵进阶(返回)--]]
MsgDef.Msg5220103 = {}
function MsgDef.Msg5220103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.blessTime = 0 --[[(int32) 祝福值时间--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5220103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5220103:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.levExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5220103:opcode()
	return 5220103
end
--[[ 请求伙伴神兵装备升级--]]
MsgDef.Msg1220104 = {}

function MsgDef.Msg1220104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg1220104:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1220104:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1220104:opcode()
	return 1220104
end

--[[ 请求伙伴神兵装备升级(返回)--]]
MsgDef.Msg5220104 = {}
function MsgDef.Msg5220104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg5220104:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5220104:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5220104:opcode()
	return 5220104
end
--[[ 请求伙伴神兵技能升级--]]
MsgDef.Msg1220105 = {}

function MsgDef.Msg1220105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1220105:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1220105:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1220105:opcode()
	return 1220105
end

--[[ 请求伙伴神兵技能升级(返回)--]]
MsgDef.Msg5220105 = {}
function MsgDef.Msg5220105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5220105:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5220105:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5220105:opcode()
	return 5220105
end
--[[ 请求神兵仙羽幻形--]]
MsgDef.Msg1220106 = {}

function MsgDef.Msg1220106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1220106:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1220106:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1220106:opcode()
	return 1220106
end

--[[ 请求神兵仙羽幻形(返回)--]]
MsgDef.Msg5220106 = {}
function MsgDef.Msg5220106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5220106:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5220106:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5220106:opcode()
	return 5220106
end
--[[ 请求伙伴法宝信息--]]
MsgDef.Msg1230101 = {}

function MsgDef.Msg1230101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1230101:encode(sm)
	return self
end

function MsgDef.Msg1230101:decode(sm)
	return self
end

function MsgDef.Msg1230101:opcode()
	return 1230101
end

--[[ 请求伙伴法宝信息(返回)--]]
MsgDef.Msg5230101 = {}
function MsgDef.Msg5230101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.blessTime = 0 --[[(int32) 祝福值开始时间--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.skins = {} --[[(array<int32>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	return msg
end

function MsgDef.Msg5230101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5230101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5230101:opcode()
	return 5230101
end
--[[  请求伙伴法宝进阶--]]
MsgDef.Msg1230102 = {}

function MsgDef.Msg1230102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) --]]
	return msg
end

function MsgDef.Msg1230102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1230102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1230102:opcode()
	return 1230102
end

--[[  请求伙伴法宝进阶(返回)--]]
MsgDef.Msg5230102 = {}
function MsgDef.Msg5230102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) --]]
	msg.suc = 0 --[[(int8) --]]
	msg.lev = 0 --[[(int32) --]]
	msg.blessTime = 0 --[[(int32) --]]
	msg.levExp = 0 --[[(int32) --]]
	msg.items = {} --[[(array<SimpleItemInfo>) --]]
	msg.tempAttris = {} --[[(map<int32,int32>) --]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5230102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5230102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.levExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5230102:opcode()
	return 5230102
end
--[[ 请求伙伴法宝装备升级--]]
MsgDef.Msg1230103 = {}

function MsgDef.Msg1230103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg1230103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1230103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1230103:opcode()
	return 1230103
end

--[[ 请求伙伴法宝装备升级(返回)--]]
MsgDef.Msg5230103 = {}
function MsgDef.Msg5230103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg5230103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5230103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5230103:opcode()
	return 5230103
end
--[[ 请求伙伴法宝技能升级--]]
MsgDef.Msg1230104 = {}

function MsgDef.Msg1230104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) --]]
	return msg
end

function MsgDef.Msg1230104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1230104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1230104:opcode()
	return 1230104
end

--[[ 请求伙伴法宝技能升级(返回)--]]
MsgDef.Msg5230104 = {}
function MsgDef.Msg5230104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) --]]
	msg.lev = 0 --[[(int32) --]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5230104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5230104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5230104:opcode()
	return 5230104
end
--[[ 请求伙伴法宝幻形--]]
MsgDef.Msg1230105 = {}

function MsgDef.Msg1230105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) --]]
	return msg
end

function MsgDef.Msg1230105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1230105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1230105:opcode()
	return 1230105
end

--[[ 请求伙伴法宝幻形(返回)--]]
MsgDef.Msg5230105 = {}
function MsgDef.Msg5230105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5230105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5230105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5230105:opcode()
	return 5230105
end
--[[ 请求伙伴仙器信息--]]
MsgDef.Msg1240101 = {}

function MsgDef.Msg1240101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1240101:encode(sm)
	return self
end

function MsgDef.Msg1240101:decode(sm)
	return self
end

function MsgDef.Msg1240101:opcode()
	return 1240101
end

--[[ 请求伙伴仙器信息(返回)--]]
MsgDef.Msg5240101 = {}
function MsgDef.Msg5240101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) --]]
	msg.levExp = 0 --[[(int32) --]]
	msg.blessTime = 0 --[[(int32) --]]
	msg.zzdNum = 0 --[[(int32) --]]
	msg.qldNum = 0 --[[(int32) --]]
	msg.power = 0 --[[(int32) --]]
	msg.skins = {} --[[(array<int32>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.tempAttris = {} --[[(map<int32,int32>) 临时属性--]]
	return msg
end

function MsgDef.Msg5240101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5240101:decode(sm)
	self.lev = sm:readInt32();
	self.levExp = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5240101:opcode()
	return 5240101
end
--[[ 请求伙伴仙器进阶--]]
MsgDef.Msg1240102 = {}

function MsgDef.Msg1240102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) --]]
	return msg
end

function MsgDef.Msg1240102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1240102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1240102:opcode()
	return 1240102
end

--[[ 请求伙伴仙器进阶(返回)--]]
MsgDef.Msg5240102 = {}
function MsgDef.Msg5240102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) --]]
	msg.suc = 0 --[[(int8) --]]
	msg.lev = 0 --[[(int32) --]]
	msg.blessTime = 0 --[[(int32) --]]
	msg.levExp = 0 --[[(int32) --]]
	msg.items = {} --[[(array<SimpleItemInfo>) --]]
	msg.tempAttris = {} --[[(map<int32,int32>) --]]
	msg.power = 0 --[[(int32) power--]]
	msg.isCrit = 0 --[[(int8) 是否暴击 1:暴击--]]
	return msg
end

function MsgDef.Msg5240102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.blessTime);
	sm:writeInt32(self.levExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.isCrit);
	return self
end

function MsgDef.Msg5240102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	self.blessTime = sm:readInt32();
	self.levExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	self.isCrit = sm:readInt8();
	return self
end


function MsgDef.Msg5240102:opcode()
	return 5240102
end
--[[ 请求伙伴仙器装备升级--]]
MsgDef.Msg1240103 = {}

function MsgDef.Msg1240103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) --]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg1240103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1240103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1240103:opcode()
	return 1240103
end

--[[ 请求伙伴仙器装备升级(返回)--]]
MsgDef.Msg5240103 = {}
function MsgDef.Msg5240103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) --]]
	msg.lev = 0 --[[(int32) --]]
	msg.power = 0 --[[(int32) power--]]
	msg.reqType = 0 --[[(int8) 0:1次 1:10次--]]
	return msg
end

function MsgDef.Msg5240103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5240103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5240103:opcode()
	return 5240103
end
--[[  请求伙伴仙器技能升级--]]
MsgDef.Msg1240104 = {}

function MsgDef.Msg1240104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1240104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1240104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1240104:opcode()
	return 1240104
end

--[[  请求伙伴仙器技能升级(返回)--]]
MsgDef.Msg5240104 = {}
function MsgDef.Msg5240104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5240104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5240104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5240104:opcode()
	return 5240104
end
--[[  请求伙伴仙器幻形--]]
MsgDef.Msg1240105 = {}

function MsgDef.Msg1240105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) --]]
	return msg
end

function MsgDef.Msg1240105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1240105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1240105:opcode()
	return 1240105
end

--[[  请求伙伴仙器幻形(返回)--]]
MsgDef.Msg5240105 = {}
function MsgDef.Msg5240105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5240105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5240105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5240105:opcode()
	return 5240105
end
--[[ 请求创建帮派--]]
MsgDef.Msg1250101 = {}

function MsgDef.Msg1250101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 公会名称--]]
	if msg.gangNotice == nil then msg.gangNotice = "" end --[[(string) 公会公告--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 公会类型，0普通帮派，1 VIP帮派--]]
	return msg
end

function MsgDef.Msg1250101:encode(sm)
	sm:writeString(self.gangName);
	sm:writeString(self.gangNotice);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250101:decode(sm)
	self.gangName = sm:readString();
	self.gangNotice = sm:readString();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250101:opcode()
	return 1250101
end

--[[ 请求创建帮派(返回)--]]
MsgDef.Msg5250101 = {}
function MsgDef.Msg5250101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangName = "" --[[(string) 公会名称--]]
	msg.gangNotice = "" --[[(string) 公会公告--]]
	msg.gangId = 0 --[[(int64) 帮派id--]]
	msg.reqType = 0 --[[(int8) 公会类型，0普通帮派，1 VIP帮派--]]
	return msg
end

function MsgDef.Msg5250101:encode(sm)
	sm:writeString(self.gangName);
	sm:writeString(self.gangNotice);
	sm:writeInt64(self.gangId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250101:decode(sm)
	self.gangName = sm:readString();
	self.gangNotice = sm:readString();
	self.gangId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250101:opcode()
	return 5250101
end
--[[ 请求搜索帮派列表--]]
MsgDef.Msg1250102 = {}

function MsgDef.Msg1250102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数从1开始--]]
	return msg
end

function MsgDef.Msg1250102:encode(sm)
	sm:writeString(self.gangName);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1250102:decode(sm)
	self.gangName = sm:readString();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1250102:opcode()
	return 1250102
end

--[[ 请求搜索帮派列表(返回)--]]
MsgDef.Msg5250102 = {}
function MsgDef.Msg5250102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangName = "" --[[(string) 帮派名字--]]
	msg.gangList = {} --[[(array<GangInfo>) 帮派列表--]]
	msg.page = 0 --[[(int32) 页数从1开始--]]
	msg.maxPage = 0 --[[(int32) 最大页数--]]
	msg.acceptType = 0 --[[(int8) 0:接受 1:不接受--]]
	return msg
end

function MsgDef.Msg5250102:encode(sm)
	sm:writeString(self.gangName);
	sm:writeInt16(#self.gangList)
	for i,elm in ipairs(self.gangList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	sm:writeInt8(self.acceptType);
	return self
end

function MsgDef.Msg5250102:decode(sm)
	self.gangName = sm:readString();
	local gangList_size = sm:readInt16()
	for i = 1,gangList_size do
		local element = MsgDef.GangInfo:create():decode(sm)
		table.insert(self.gangList, element)
	end
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	self.acceptType = sm:readInt8();
	return self
end


function MsgDef.Msg5250102:opcode()
	return 5250102
end
--[[ 请求帮派成员列表--]]
MsgDef.Msg1250103 = {}

function MsgDef.Msg1250103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250103:encode(sm)
	return self
end

function MsgDef.Msg1250103:decode(sm)
	return self
end

function MsgDef.Msg1250103:opcode()
	return 1250103
end

--[[ 请求帮派成员列表(返回)--]]
MsgDef.Msg5250103 = {}
function MsgDef.Msg5250103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.members = {} --[[(array<GangUserInfo>) 成员列表--]]
	return msg
end

function MsgDef.Msg5250103:encode(sm)
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250103:decode(sm)
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.GangUserInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	return self
end


function MsgDef.Msg5250103:opcode()
	return 5250103
end
--[[ 请求帮派信息--]]
MsgDef.Msg1250104 = {}

function MsgDef.Msg1250104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250104:encode(sm)
	return self
end

function MsgDef.Msg1250104:decode(sm)
	return self
end

function MsgDef.Msg1250104:opcode()
	return 1250104
end

--[[ 请求帮派信息(返回)--]]
MsgDef.Msg5250104 = {}
function MsgDef.Msg5250104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangId = 0 --[[(int64) 帮派id--]]
	msg.gangName = "" --[[(string) 帮派名字--]]
	msg.gangLevel = 0 --[[(int32) 帮派等级--]]
	msg.gangExp = 0 --[[(int32) 帮派当前经验--]]
	msg.memberNum = 0 --[[(int32) 帮派成员人数--]]
	msg.gangPower = 0 --[[(int64) 帮派战力--]]
	msg.gangNotice = "" --[[(string) 帮派公告--]]
	msg.gangJob = 0 --[[(int32) 我的职位--]]
	msg.adminSkin = {} --[[(map<int32,int32>) 帮主外观皮肤(几个)--]]
	msg.adminName = "" --[[(string) 帮主名字--]]
	msg.dayGotExp = 0 --[[(int32) 今日获得的exp--]]
	msg.gangType = 0 --[[(int8) 帮派类型--]]
	msg.leftGangMergeFreeCount = 0 --[[(int32) 剩余帮派合服免费改名次数--]]
	msg.maxMemberNum = 0 --[[(int32) 帮派最大人数--]]
	msg.canModifyNotice = 0 --[[(int8) 是否可修改公告 1:不可修改--]]
	return msg
end

function MsgDef.Msg5250104:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeString(self.gangName);
	sm:writeInt32(self.gangLevel);
	sm:writeInt32(self.gangExp);
	sm:writeInt32(self.memberNum);
	sm:writeInt64(self.gangPower);
	sm:writeString(self.gangNotice);
	sm:writeInt32(self.gangJob);
	sm:writeInt16(get_map_size(self.adminSkin))
	for kn,elm in ipairs(self.adminSkin) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.adminName);
	sm:writeInt32(self.dayGotExp);
	sm:writeInt8(self.gangType);
	sm:writeInt32(self.leftGangMergeFreeCount);
	sm:writeInt32(self.maxMemberNum);
	sm:writeInt8(self.canModifyNotice);
	return self
end

function MsgDef.Msg5250104:decode(sm)
	self.gangId = sm:readInt64();
	self.gangName = sm:readString();
	self.gangLevel = sm:readInt32();
	self.gangExp = sm:readInt32();
	self.memberNum = sm:readInt32();
	self.gangPower = sm:readInt64();
	self.gangNotice = sm:readString();
	self.gangJob = sm:readInt32();
	local adminSkin_size = sm:readInt16()
	for i = 1,adminSkin_size do
		local kv = sm:readInt32();
		self.adminSkin[kv] = sm:readInt32();
	end
	self.adminName = sm:readString();
	self.dayGotExp = sm:readInt32();
	self.gangType = sm:readInt8();
	self.leftGangMergeFreeCount = sm:readInt32();
	self.maxMemberNum = sm:readInt32();
	self.canModifyNotice = sm:readInt8();
	return self
end


function MsgDef.Msg5250104:opcode()
	return 5250104
end
--[[ 请求帮派申请列表--]]
MsgDef.Msg1250105 = {}

function MsgDef.Msg1250105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页从1开始--]]
	return msg
end

function MsgDef.Msg1250105:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1250105:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1250105:opcode()
	return 1250105
end

--[[ 请求帮派申请列表(返回)--]]
MsgDef.Msg5250105 = {}
function MsgDef.Msg5250105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 当前页从1开始--]]
	msg.maxPage = 0 --[[(int32) 最大页数--]]
	msg.applyList = {} --[[(array<GangApplyInfo>) 当前页从1开始--]]
	return msg
end

function MsgDef.Msg5250105:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	sm:writeInt16(#self.applyList)
	for i,elm in ipairs(self.applyList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250105:decode(sm)
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	local applyList_size = sm:readInt16()
	for i = 1,applyList_size do
		local element = MsgDef.GangApplyInfo:create():decode(sm)
		table.insert(self.applyList, element)
	end
	return self
end


function MsgDef.Msg5250105:opcode()
	return 5250105
end
--[[ 请求帮派日志--]]
MsgDef.Msg1250106 = {}

function MsgDef.Msg1250106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250106:encode(sm)
	return self
end

function MsgDef.Msg1250106:decode(sm)
	return self
end

function MsgDef.Msg1250106:opcode()
	return 1250106
end

--[[ 请求帮派日志(返回)--]]
MsgDef.Msg5250106 = {}
function MsgDef.Msg5250106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.logs = {} --[[(array<string>) 日志--]]
	return msg
end

function MsgDef.Msg5250106:encode(sm)
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5250106:decode(sm)
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	return self
end


function MsgDef.Msg5250106:opcode()
	return 5250106
end
--[[ 请求帮派技能--]]
MsgDef.Msg1250107 = {}

function MsgDef.Msg1250107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1显示,=2升级--]]
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 要升级的技能id--]]
	return msg
end

function MsgDef.Msg1250107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1250107:decode(sm)
	self.reqType = sm:readInt8();
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1250107:opcode()
	return 1250107
end

--[[ 请求帮派技能(返回)--]]
MsgDef.Msg5250107 = {}
function MsgDef.Msg5250107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 要升级的技能id--]]
	msg.reqType = 0 --[[(int8) =1显示,=2升级--]]
	msg.skillLevs = {} --[[(map<int32,int32>) 技能等级>0 才会发回来--]]
	return msg
end

function MsgDef.Msg5250107:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.skillLevs))
	for kn,elm in ipairs(self.skillLevs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5250107:decode(sm)
	self.skillId = sm:readInt32();
	self.reqType = sm:readInt8();
	local skillLevs_size = sm:readInt16()
	for i = 1,skillLevs_size do
		local kv = sm:readInt32();
		self.skillLevs[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5250107:opcode()
	return 5250107
end
--[[ 请求帮派周资金榜--]]
MsgDef.Msg1250108 = {}

function MsgDef.Msg1250108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250108:encode(sm)
	return self
end

function MsgDef.Msg1250108:decode(sm)
	return self
end

function MsgDef.Msg1250108:opcode()
	return 1250108
end

--[[ 请求帮派周资金榜(返回)--]]
MsgDef.Msg5250108 = {}
function MsgDef.Msg5250108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankings = {} --[[(array<GangRankUserInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5250108:encode(sm)
	sm:writeInt16(#self.rankings)
	for i,elm in ipairs(self.rankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250108:decode(sm)
	local rankings_size = sm:readInt16()
	for i = 1,rankings_size do
		local element = MsgDef.GangRankUserInfo:create():decode(sm)
		table.insert(self.rankings, element)
	end
	return self
end


function MsgDef.Msg5250108:opcode()
	return 5250108
end
--[[ 请求申请加入帮派--]]
MsgDef.Msg1250201 = {}

function MsgDef.Msg1250201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangIds == nil then msg.gangIds = {} end --[[(array<int64>) 帮派id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:单个 1:一键--]]
	return msg
end

function MsgDef.Msg1250201:encode(sm)
	sm:writeInt16(get_map_size(self.gangIds))
	for i,elm in ipairs(self.gangIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250201:decode(sm)
	local gangIds_size = sm:readInt16()
	for i = 1,gangIds_size do
		local elm = sm:readInt64();
		table.insert(self.gangIds, elm)
	end
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250201:opcode()
	return 1250201
end

--[[ 请求申请加入帮派(返回)--]]
MsgDef.Msg5250201 = {}
function MsgDef.Msg5250201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangIds = {} --[[(array<int64>) 帮派id--]]
	msg.autoGangId = 0 --[[(int64) 自动加入成功的帮派id--]]
	msg.reqType = 0 --[[(int8) 0:单个 1:一键--]]
	return msg
end

function MsgDef.Msg5250201:encode(sm)
	sm:writeInt16(get_map_size(self.gangIds))
	for i,elm in ipairs(self.gangIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt64(self.autoGangId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250201:decode(sm)
	local gangIds_size = sm:readInt16()
	for i = 1,gangIds_size do
		local ele = sm:readInt64();
		table.insert(self.gangIds, ele)
	end
	self.autoGangId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250201:opcode()
	return 5250201
end
--[[ 请求同意申请加入帮派--]]
MsgDef.Msg1250202 = {}

function MsgDef.Msg1250202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleIds == nil then msg.roleIds = {} end --[[(array<int64>) 角色ids--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1同意,=2拒绝--]]
	return msg
end

function MsgDef.Msg1250202:encode(sm)
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250202:decode(sm)
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local elm = sm:readInt64();
		table.insert(self.roleIds, elm)
	end
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250202:opcode()
	return 1250202
end

--[[ 请求同意申请加入帮派(返回)--]]
MsgDef.Msg5250202 = {}
function MsgDef.Msg5250202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleIds = {} --[[(array<int64>) 角色ids--]]
	msg.reqType = 0 --[[(int8) =1同意,=2拒绝--]]
	return msg
end

function MsgDef.Msg5250202:encode(sm)
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250202:decode(sm)
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local ele = sm:readInt64();
		table.insert(self.roleIds, ele)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250202:opcode()
	return 5250202
end
--[[ 请求逐出帮派--]]
MsgDef.Msg1250203 = {}

function MsgDef.Msg1250203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg1250203:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1250203:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1250203:opcode()
	return 1250203
end

--[[ 请求逐出帮派(返回)--]]
MsgDef.Msg5250203 = {}
function MsgDef.Msg5250203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg5250203:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5250203:decode(sm)
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5250203:opcode()
	return 5250203
end
--[[ 请求退出帮派--]]
MsgDef.Msg1250204 = {}

function MsgDef.Msg1250204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250204:encode(sm)
	return self
end

function MsgDef.Msg1250204:decode(sm)
	return self
end

function MsgDef.Msg1250204:opcode()
	return 1250204
end

--[[ 请求退出帮派(返回)--]]
MsgDef.Msg5250204 = {}
function MsgDef.Msg5250204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5250204:encode(sm)
	return self
end

function MsgDef.Msg5250204:decode(sm)
	return self
end


function MsgDef.Msg5250204:opcode()
	return 5250204
end
--[[ 请求禅让帮主--]]
MsgDef.Msg1250205 = {}

function MsgDef.Msg1250205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg1250205:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1250205:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1250205:opcode()
	return 1250205
end

--[[ 请求禅让帮主(返回)--]]
MsgDef.Msg5250205 = {}
function MsgDef.Msg5250205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg5250205:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5250205:decode(sm)
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5250205:opcode()
	return 5250205
end
--[[ 请求修改帮派公告--]]
MsgDef.Msg1250206 = {}

function MsgDef.Msg1250206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.notice == nil then msg.notice = "" end --[[(string) 公告--]]
	return msg
end

function MsgDef.Msg1250206:encode(sm)
	sm:writeString(self.notice);
	return self
end

function MsgDef.Msg1250206:decode(sm)
	self.notice = sm:readString();
	return self
end

function MsgDef.Msg1250206:opcode()
	return 1250206
end

--[[ 请求修改帮派公告(返回)--]]
MsgDef.Msg5250206 = {}
function MsgDef.Msg5250206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.notice = "" --[[(string) 公告--]]
	return msg
end

function MsgDef.Msg5250206:encode(sm)
	sm:writeString(self.notice);
	return self
end

function MsgDef.Msg5250206:decode(sm)
	self.notice = sm:readString();
	return self
end


function MsgDef.Msg5250206:opcode()
	return 5250206
end
--[[ 请求设定帮派职位--]]
MsgDef.Msg1250207 = {}

function MsgDef.Msg1250207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家Id--]]
	if msg.job == nil then msg.job = 0 end --[[(int32) 职位--]]
	return msg
end

function MsgDef.Msg1250207:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.job);
	return self
end

function MsgDef.Msg1250207:decode(sm)
	self.roleId = sm:readInt64();
	self.job = sm:readInt32();
	return self
end

function MsgDef.Msg1250207:opcode()
	return 1250207
end

--[[ 请求设定帮派职位(返回)--]]
MsgDef.Msg5250207 = {}
function MsgDef.Msg5250207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.job = 0 --[[(int32) 职位--]]
	return msg
end

function MsgDef.Msg5250207:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.job);
	return self
end

function MsgDef.Msg5250207:decode(sm)
	self.roleId = sm:readInt64();
	self.job = sm:readInt32();
	return self
end


function MsgDef.Msg5250207:opcode()
	return 5250207
end
--[[ 请求设置自动招人条件--]]
MsgDef.Msg1250208 = {}

function MsgDef.Msg1250208:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.level == nil then msg.level = 0 end --[[(int32) 设定的等级--]]
	if msg.vipLevel == nil then msg.vipLevel = 0 end --[[(int32) vip等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1请求上一次设置内容,=2设置--]]
	return msg
end

function MsgDef.Msg1250208:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt32(self.vipLevel);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250208:decode(sm)
	self.level = sm:readInt32();
	self.vipLevel = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250208:opcode()
	return 1250208
end

--[[ 请求设置自动招人条件(返回)--]]
MsgDef.Msg5250208 = {}
function MsgDef.Msg5250208:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1请求上一次设置内容,=2设置--]]
	msg.settings = {} --[[(map<int32,int32>) 1->等级,2->vip等级,3->战力--]]
	return msg
end

function MsgDef.Msg5250208:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.settings))
	for kn,elm in ipairs(self.settings) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5250208:decode(sm)
	self.reqType = sm:readInt8();
	local settings_size = sm:readInt16()
	for i = 1,settings_size do
		local kv = sm:readInt32();
		self.settings[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5250208:opcode()
	return 5250208
end
--[[ 请求世界喊话招人--]]
MsgDef.Msg1250209 = {}

function MsgDef.Msg1250209:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250209:encode(sm)
	return self
end

function MsgDef.Msg1250209:decode(sm)
	return self
end

function MsgDef.Msg1250209:opcode()
	return 1250209
end

--[[ 请求世界喊话招人(返回)--]]
MsgDef.Msg5250209 = {}
function MsgDef.Msg5250209:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5250209:encode(sm)
	return self
end

function MsgDef.Msg5250209:decode(sm)
	return self
end


function MsgDef.Msg5250209:opcode()
	return 5250209
end
--[[ 请求弹劾帮主--]]
MsgDef.Msg1250210 = {}

function MsgDef.Msg1250210:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250210:encode(sm)
	return self
end

function MsgDef.Msg1250210:decode(sm)
	return self
end

function MsgDef.Msg1250210:opcode()
	return 1250210
end

--[[ 请求弹劾帮主(返回)--]]
MsgDef.Msg5250210 = {}
function MsgDef.Msg5250210:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5250210:encode(sm)
	return self
end

function MsgDef.Msg5250210:decode(sm)
	return self
end


function MsgDef.Msg5250210:opcode()
	return 5250210
end
--[[ 请求帮派签到--]]
MsgDef.Msg1250301 = {}

function MsgDef.Msg1250301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1签到信息,=2签到.=3领取签到奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 签到配置id--]]
	return msg
end

function MsgDef.Msg1250301:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1250301:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1250301:opcode()
	return 1250301
end

--[[ 请求帮派签到(返回)--]]
MsgDef.Msg5250301 = {}
function MsgDef.Msg5250301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.signedCount = 0 --[[(int32) 总签到人数--]]
	msg.signFlag = 0 --[[(int8) 签到标识 1 已经签到过了 0 未签到--]]
	msg.awardFlag = 0 --[[(int32) 1表示领取了第一个11表示领取了第一个和第二个101表示第一个和第三个领取了--]]
	msg.reqType = 0 --[[(int32) =1签到信息,=2签到.=3领取签到奖励--]]
	msg.cfgId = 0 --[[(int32) 签到配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	return msg
end

function MsgDef.Msg5250301:encode(sm)
	sm:writeInt32(self.signedCount);
	sm:writeInt8(self.signFlag);
	sm:writeInt32(self.awardFlag);
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250301:decode(sm)
	self.signedCount = sm:readInt32();
	self.signFlag = sm:readInt8();
	self.awardFlag = sm:readInt32();
	self.reqType = sm:readInt32();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5250301:opcode()
	return 5250301
end
--[[ 请求帮派商店--]]
MsgDef.Msg1250302 = {}

function MsgDef.Msg1250302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1显示,=2购买--]]
	if msg.buyId == nil then msg.buyId = 0 end --[[(int32) 购买配置id--]]
	if msg.buyLev == nil then msg.buyLev = 0 end --[[(int8) 购买和显示的等级分页--]]
	if msg.buyNum == nil then msg.buyNum = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1250302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.buyId);
	sm:writeInt8(self.buyLev);
	sm:writeInt32(self.buyNum);
	return self
end

function MsgDef.Msg1250302:decode(sm)
	self.reqType = sm:readInt8();
	self.buyId = sm:readInt32();
	self.buyLev = sm:readInt8();
	self.buyNum = sm:readInt32();
	return self
end

function MsgDef.Msg1250302:opcode()
	return 1250302
end

--[[ 请求帮派商店(返回)--]]
MsgDef.Msg5250302 = {}
function MsgDef.Msg5250302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1显示,=2购买--]]
	msg.buyId = 0 --[[(int32) 购买配置id--]]
	msg.buyLev = 0 --[[(int8) 购买和显示的等级分页--]]
	msg.buyCountMap = {} --[[(map<int32,int32>) 对应分页的id对应购买次数map--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.buyNum = 0 --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg5250302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.buyId);
	sm:writeInt8(self.buyLev);
	sm:writeInt16(get_map_size(self.buyCountMap))
	for kn,elm in ipairs(self.buyCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.buyNum);
	return self
end

function MsgDef.Msg5250302:decode(sm)
	self.reqType = sm:readInt8();
	self.buyId = sm:readInt32();
	self.buyLev = sm:readInt8();
	local buyCountMap_size = sm:readInt16()
	for i = 1,buyCountMap_size do
		local kv = sm:readInt32();
		self.buyCountMap[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.buyNum = sm:readInt32();
	return self
end


function MsgDef.Msg5250302:opcode()
	return 5250302
end
--[[ 请求帮派仓库--]]
MsgDef.Msg1250303 = {}

function MsgDef.Msg1250303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250303:encode(sm)
	return self
end

function MsgDef.Msg1250303:decode(sm)
	return self
end

function MsgDef.Msg1250303:opcode()
	return 1250303
end

--[[ 请求帮派仓库(返回)--]]
MsgDef.Msg5250303 = {}
function MsgDef.Msg5250303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<ItemInfo>) 道具--]]
	msg.dayStoreCount = 0 --[[(int32) 今天已经存放得次数--]]
	return msg
end

function MsgDef.Msg5250303:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.dayStoreCount);
	return self
end

function MsgDef.Msg5250303:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.dayStoreCount = sm:readInt32();
	return self
end


function MsgDef.Msg5250303:opcode()
	return 5250303
end
--[[ 请求帮派仓库整理--]]
MsgDef.Msg1250304 = {}

function MsgDef.Msg1250304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250304:encode(sm)
	return self
end

function MsgDef.Msg1250304:decode(sm)
	return self
end

function MsgDef.Msg1250304:opcode()
	return 1250304
end

--[[ 请求帮派仓库整理(返回)--]]
MsgDef.Msg5250304 = {}
function MsgDef.Msg5250304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<ItemInfo>) 道具--]]
	return msg
end

function MsgDef.Msg5250304:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250304:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5250304:opcode()
	return 5250304
end
--[[ 请求帮派仓库存取--]]
MsgDef.Msg1250305 = {}

function MsgDef.Msg1250305:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 下标--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 操作的数量--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1存,2取,3销毁--]]
	return msg
end

function MsgDef.Msg1250305:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250305:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250305:opcode()
	return 1250305
end

--[[ 请求帮派仓库存取(返回)--]]
MsgDef.Msg5250305 = {}
function MsgDef.Msg5250305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.index = 0 --[[(int32) 下标--]]
	msg.amount = 0 --[[(int32) 操作的数量--]]
	msg.reqType = 0 --[[(int8) 1存,2取,3销毁--]]
	msg.getIndex = 0 --[[(int32) 取出道具时道具在背包的index--]]
	return msg
end

function MsgDef.Msg5250305:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.getIndex);
	return self
end

function MsgDef.Msg5250305:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.reqType = sm:readInt8();
	self.getIndex = sm:readInt32();
	return self
end


function MsgDef.Msg5250305:opcode()
	return 5250305
end
--[[ 请求帮派仓库存取记录--]]
MsgDef.Msg1250306 = {}

function MsgDef.Msg1250306:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) page--]]
	return msg
end

function MsgDef.Msg1250306:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1250306:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1250306:opcode()
	return 1250306
end

--[[ 请求帮派仓库存取记录(返回)--]]
MsgDef.Msg5250306 = {}
function MsgDef.Msg5250306:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.logs = {} --[[(array<string>) 记录--]]
	msg.page = 0 --[[(int32) page--]]
	msg.pageSum = 0 --[[(int32) pageSum--]]
	return msg
end

function MsgDef.Msg5250306:encode(sm)
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	return self
end

function MsgDef.Msg5250306:decode(sm)
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	return self
end


function MsgDef.Msg5250306:opcode()
	return 5250306
end
--[[ 请求帮派宝箱列表--]]
MsgDef.Msg1250307 = {}

function MsgDef.Msg1250307:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250307:encode(sm)
	return self
end

function MsgDef.Msg1250307:decode(sm)
	return self
end

function MsgDef.Msg1250307:opcode()
	return 1250307
end

--[[ 请求帮派宝箱列表(返回)--]]
MsgDef.Msg5250307 = {}
function MsgDef.Msg5250307:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dayBoxOpenCount = 0 --[[(int32) 今日开启次数--]]
	msg.dayBoxColorCount = 0 --[[(int32) 今日品质刷新次数--]]
	msg.dayBoxAssistCount = 0 --[[(int32) 今日协助次数--]]
	msg.boxList = {} --[[(array<GangBoxInfo>) 我的宝箱列表--]]
	msg.boxColor = 0 --[[(int8) 当前宝箱品质1-5--]]
	return msg
end

function MsgDef.Msg5250307:encode(sm)
	sm:writeInt32(self.dayBoxOpenCount);
	sm:writeInt32(self.dayBoxColorCount);
	sm:writeInt32(self.dayBoxAssistCount);
	sm:writeInt16(#self.boxList)
	for i,elm in ipairs(self.boxList) do
		elm:encode(sm)
	end
	sm:writeInt8(self.boxColor);
	return self
end

function MsgDef.Msg5250307:decode(sm)
	self.dayBoxOpenCount = sm:readInt32();
	self.dayBoxColorCount = sm:readInt32();
	self.dayBoxAssistCount = sm:readInt32();
	local boxList_size = sm:readInt16()
	for i = 1,boxList_size do
		local element = MsgDef.GangBoxInfo:create():decode(sm)
		table.insert(self.boxList, element)
	end
	self.boxColor = sm:readInt8();
	return self
end


function MsgDef.Msg5250307:opcode()
	return 5250307
end
--[[ 请求刷新帮派宝箱品质--]]
MsgDef.Msg1250308 = {}

function MsgDef.Msg1250308:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250308:encode(sm)
	return self
end

function MsgDef.Msg1250308:decode(sm)
	return self
end

function MsgDef.Msg1250308:opcode()
	return 1250308
end

--[[ 请求刷新帮派宝箱品质(返回)--]]
MsgDef.Msg5250308 = {}
function MsgDef.Msg5250308:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxColor = 0 --[[(int8) 宝箱品质--]]
	msg.dayBoxColorCount = 0 --[[(int32) 今日品质刷新次数--]]
	return msg
end

function MsgDef.Msg5250308:encode(sm)
	sm:writeInt8(self.boxColor);
	sm:writeInt32(self.dayBoxColorCount);
	return self
end

function MsgDef.Msg5250308:decode(sm)
	self.boxColor = sm:readInt8();
	self.dayBoxColorCount = sm:readInt32();
	return self
end


function MsgDef.Msg5250308:opcode()
	return 5250308
end
--[[ 请求开启帮派宝箱--]]
MsgDef.Msg1250309 = {}

function MsgDef.Msg1250309:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250309:encode(sm)
	return self
end

function MsgDef.Msg1250309:decode(sm)
	return self
end

function MsgDef.Msg1250309:opcode()
	return 1250309
end

--[[ 请求开启帮派宝箱(返回)--]]
MsgDef.Msg5250309 = {}
function MsgDef.Msg5250309:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxList = {} --[[(array<GangBoxInfo>) 当前宝箱列表--]]
	msg.dayBoxOpenCount = 0 --[[(int32) 今日开启次数--]]
	return msg
end

function MsgDef.Msg5250309:encode(sm)
	sm:writeInt16(#self.boxList)
	for i,elm in ipairs(self.boxList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.dayBoxOpenCount);
	return self
end

function MsgDef.Msg5250309:decode(sm)
	local boxList_size = sm:readInt16()
	for i = 1,boxList_size do
		local element = MsgDef.GangBoxInfo:create():decode(sm)
		table.insert(self.boxList, element)
	end
	self.dayBoxOpenCount = sm:readInt32();
	return self
end


function MsgDef.Msg5250309:opcode()
	return 5250309
end
--[[ 请求领取宝箱奖励(包含额外奖励)--]]
MsgDef.Msg1250310 = {}

function MsgDef.Msg1250310:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.boxIndex == nil then msg.boxIndex = 0 end --[[(int8) 领取的宝箱Id--]]
	return msg
end

function MsgDef.Msg1250310:encode(sm)
	sm:writeInt8(self.boxIndex);
	return self
end

function MsgDef.Msg1250310:decode(sm)
	self.boxIndex = sm:readInt8();
	return self
end

function MsgDef.Msg1250310:opcode()
	return 1250310
end

--[[ 请求领取宝箱奖励(包含额外奖励)(返回)--]]
MsgDef.Msg5250310 = {}
function MsgDef.Msg5250310:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxIndex = 0 --[[(int8) 领取的宝箱Id--]]
	msg.boxList = {} --[[(array<GangBoxInfo>) 宝箱了列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取到的奖励--]]
	return msg
end

function MsgDef.Msg5250310:encode(sm)
	sm:writeInt8(self.boxIndex);
	sm:writeInt16(#self.boxList)
	for i,elm in ipairs(self.boxList) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250310:decode(sm)
	self.boxIndex = sm:readInt8();
	local boxList_size = sm:readInt16()
	for i = 1,boxList_size do
		local element = MsgDef.GangBoxInfo:create():decode(sm)
		table.insert(self.boxList, element)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5250310:opcode()
	return 5250310
end
--[[ 请求帮派宝箱协助列表--]]
MsgDef.Msg1250311 = {}

function MsgDef.Msg1250311:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250311:encode(sm)
	return self
end

function MsgDef.Msg1250311:decode(sm)
	return self
end

function MsgDef.Msg1250311:opcode()
	return 1250311
end

--[[ 请求帮派宝箱协助列表(返回)--]]
MsgDef.Msg5250311 = {}
function MsgDef.Msg5250311:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.assistList = {} --[[(array<GangBoxInfo>) 可协助的list--]]
	return msg
end

function MsgDef.Msg5250311:encode(sm)
	sm:writeInt16(#self.assistList)
	for i,elm in ipairs(self.assistList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250311:decode(sm)
	local assistList_size = sm:readInt16()
	for i = 1,assistList_size do
		local element = MsgDef.GangBoxInfo:create():decode(sm)
		table.insert(self.assistList, element)
	end
	return self
end


function MsgDef.Msg5250311:opcode()
	return 5250311
end
--[[ 请求协助帮派成员宝箱开启--]]
MsgDef.Msg1250312 = {}

function MsgDef.Msg1250312:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.boxIndex == nil then msg.boxIndex = 0 end --[[(int8) 宝箱id--]]
	return msg
end

function MsgDef.Msg1250312:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.boxIndex);
	return self
end

function MsgDef.Msg1250312:decode(sm)
	self.roleId = sm:readInt64();
	self.boxIndex = sm:readInt8();
	return self
end

function MsgDef.Msg1250312:opcode()
	return 1250312
end

--[[ 请求协助帮派成员宝箱开启(返回)--]]
MsgDef.Msg5250312 = {}
function MsgDef.Msg5250312:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.boxIndex = 0 --[[(int8) 宝箱id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 协助奖励--]]
	msg.dayBoxAssistCount = 0 --[[(int32) 今日协助次数--]]
	return msg
end

function MsgDef.Msg5250312:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.boxIndex);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.dayBoxAssistCount);
	return self
end

function MsgDef.Msg5250312:decode(sm)
	self.roleId = sm:readInt64();
	self.boxIndex = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.dayBoxAssistCount = sm:readInt32();
	return self
end


function MsgDef.Msg5250312:opcode()
	return 5250312
end
--[[ 请求聊天邀请帮派成员协助宝箱--]]
MsgDef.Msg1250313 = {}

function MsgDef.Msg1250313:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.boxIndex == nil then msg.boxIndex = 0 end --[[(int8) 宝箱index--]]
	return msg
end

function MsgDef.Msg1250313:encode(sm)
	sm:writeInt8(self.boxIndex);
	return self
end

function MsgDef.Msg1250313:decode(sm)
	self.boxIndex = sm:readInt8();
	return self
end

function MsgDef.Msg1250313:opcode()
	return 1250313
end

--[[ 请求聊天邀请帮派成员协助宝箱(返回)--]]
MsgDef.Msg5250313 = {}
function MsgDef.Msg5250313:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxIndex = 0 --[[(int8) 宝箱index--]]
	return msg
end

function MsgDef.Msg5250313:encode(sm)
	sm:writeInt8(self.boxIndex);
	return self
end

function MsgDef.Msg5250313:decode(sm)
	self.boxIndex = sm:readInt8();
	return self
end


function MsgDef.Msg5250313:opcode()
	return 5250313
end
--[[ 请求帮派宝箱协助记录--]]
MsgDef.Msg1250314 = {}

function MsgDef.Msg1250314:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250314:encode(sm)
	return self
end

function MsgDef.Msg1250314:decode(sm)
	return self
end

function MsgDef.Msg1250314:opcode()
	return 1250314
end

--[[ 请求帮派宝箱协助记录(返回)--]]
MsgDef.Msg5250314 = {}
function MsgDef.Msg5250314:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.assitLogs = {} --[[(array<string>) 协助记录--]]
	return msg
end

function MsgDef.Msg5250314:encode(sm)
	sm:writeInt16(get_map_size(self.assitLogs))
	for i,elm in ipairs(self.assitLogs) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5250314:decode(sm)
	local assitLogs_size = sm:readInt16()
	for i = 1,assitLogs_size do
		local ele = sm:readString();
		table.insert(self.assitLogs, ele)
	end
	return self
end


function MsgDef.Msg5250314:opcode()
	return 5250314
end
--[[ 请求我的红包列表--]]
MsgDef.Msg1250401 = {}

function MsgDef.Msg1250401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250401:encode(sm)
	return self
end

function MsgDef.Msg1250401:decode(sm)
	return self
end

function MsgDef.Msg1250401:opcode()
	return 1250401
end

--[[ 请求我的红包列表(返回)--]]
MsgDef.Msg5250401 = {}
function MsgDef.Msg5250401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.regBagCountMap = {} --[[(map<int32,int32>) 红包数量列表--]]
	msg.redbagByb = 0 --[[(int32) 已领取绑定元宝数量--]]
	msg.redbagTq = 0 --[[(int32) 已领取铜钱数量--]]
	return msg
end

function MsgDef.Msg5250401:encode(sm)
	sm:writeInt16(get_map_size(self.regBagCountMap))
	for kn,elm in ipairs(self.regBagCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.redbagByb);
	sm:writeInt32(self.redbagTq);
	return self
end

function MsgDef.Msg5250401:decode(sm)
	local regBagCountMap_size = sm:readInt16()
	for i = 1,regBagCountMap_size do
		local kv = sm:readInt32();
		self.regBagCountMap[kv] = sm:readInt32();
	end
	self.redbagByb = sm:readInt32();
	self.redbagTq = sm:readInt32();
	return self
end


function MsgDef.Msg5250401:opcode()
	return 5250401
end
--[[ 请求发送红包--]]
MsgDef.Msg1250402 = {}

function MsgDef.Msg1250402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBagMid == nil then msg.redBagMid = 0 end --[[(int32) 红包道具id--]]
	return msg
end

function MsgDef.Msg1250402:encode(sm)
	sm:writeInt32(self.redBagMid);
	return self
end

function MsgDef.Msg1250402:decode(sm)
	self.redBagMid = sm:readInt32();
	return self
end

function MsgDef.Msg1250402:opcode()
	return 1250402
end

--[[ 请求发送红包(返回)--]]
MsgDef.Msg5250402 = {}
function MsgDef.Msg5250402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.redBagMid = 0 --[[(int32) 红包道具id--]]
	msg.amount = 0 --[[(int32) 红包数量--]]
	return msg
end

function MsgDef.Msg5250402:encode(sm)
	sm:writeInt32(self.redBagMid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg5250402:decode(sm)
	self.redBagMid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end


function MsgDef.Msg5250402:opcode()
	return 5250402
end
--[[ 请求在抢红包列表--]]
MsgDef.Msg1250403 = {}

function MsgDef.Msg1250403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.channelId == nil then msg.channelId = 0 end --[[(int8) 频道 1:世界 2:帮会--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1250403:encode(sm)
	sm:writeInt8(self.channelId);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1250403:decode(sm)
	self.channelId = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1250403:opcode()
	return 1250403
end

--[[ 请求在抢红包列表(返回)--]]
MsgDef.Msg5250403 = {}
function MsgDef.Msg5250403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.redBagInfos = {} --[[(array<RedBagInfo>) 红包列表--]]
	msg.page = 0 --[[(int32) 当前页--]]
	msg.sumPage = 0 --[[(int32) 总页数--]]
	msg.channelId = 0 --[[(int8) 频道 1:世界 2:帮会--]]
	return msg
end

function MsgDef.Msg5250403:encode(sm)
	sm:writeInt16(#self.redBagInfos)
	for i,elm in ipairs(self.redBagInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.sumPage);
	sm:writeInt8(self.channelId);
	return self
end

function MsgDef.Msg5250403:decode(sm)
	local redBagInfos_size = sm:readInt16()
	for i = 1,redBagInfos_size do
		local element = MsgDef.RedBagInfo:create():decode(sm)
		table.insert(self.redBagInfos, element)
	end
	self.page = sm:readInt32();
	self.sumPage = sm:readInt32();
	self.channelId = sm:readInt8();
	return self
end


function MsgDef.Msg5250403:opcode()
	return 5250403
end
--[[ 请求抢红包--]]
MsgDef.Msg1250404 = {}

function MsgDef.Msg1250404:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBagId == nil then msg.redBagId = 0 end --[[(int64) 红包id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:抢单个 2:一键抢--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页--]]
	return msg
end

function MsgDef.Msg1250404:encode(sm)
	sm:writeInt64(self.redBagId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1250404:decode(sm)
	self.redBagId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1250404:opcode()
	return 1250404
end

--[[ 请求抢红包(返回)--]]
MsgDef.Msg5250404 = {}
function MsgDef.Msg5250404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.redBagRecords = {} --[[(array<RedBagRecord>) 抢红包记录--]]
	msg.redBagInfo = MsgDef.RedBagInfo:create() --[[(RedBagInfo) 红包信息--]]
	msg.moneyYb = 0 --[[(int32) 抢到的元宝--]]
	msg.copper = 0 --[[(int32) 抢到的铜钱--]]
	msg.page = 0 --[[(int32) 当前页--]]
	msg.maxPage = 0 --[[(int32) 最大页--]]
	msg.curRecordCount = 0 --[[(int32) 当前红包记录总数--]]
	return msg
end

function MsgDef.Msg5250404:encode(sm)
	sm:writeInt16(#self.redBagRecords)
	for i,elm in ipairs(self.redBagRecords) do
		elm:encode(sm)
	end
	self.redBagInfo:encode(sm)
	sm:writeInt32(self.moneyYb);
	sm:writeInt32(self.copper);
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	sm:writeInt32(self.curRecordCount);
	return self
end

function MsgDef.Msg5250404:decode(sm)
	local redBagRecords_size = sm:readInt16()
	for i = 1,redBagRecords_size do
		local element = MsgDef.RedBagRecord:create():decode(sm)
		table.insert(self.redBagRecords, element)
	end
	self.redBagInfo:decode(sm)
	self.moneyYb = sm:readInt32();
	self.copper = sm:readInt32();
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	self.curRecordCount = sm:readInt32();
	return self
end


function MsgDef.Msg5250404:opcode()
	return 5250404
end
--[[ 请求升级帮派为VIP帮派--]]
MsgDef.Msg1250405 = {}

function MsgDef.Msg1250405:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250405:encode(sm)
	return self
end

function MsgDef.Msg1250405:decode(sm)
	return self
end

function MsgDef.Msg1250405:opcode()
	return 1250405
end

--[[ 请求升级帮派为VIP帮派(返回)--]]
MsgDef.Msg5250405 = {}
function MsgDef.Msg5250405:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.success = 0 --[[(int8) 0为失败，1成功--]]
	return msg
end

function MsgDef.Msg5250405:encode(sm)
	sm:writeInt8(self.success);
	return self
end

function MsgDef.Msg5250405:decode(sm)
	self.success = sm:readInt8();
	return self
end


function MsgDef.Msg5250405:opcode()
	return 5250405
end
--[[ 请求邀请玩家进仙盟--]]
MsgDef.Msg1250406 = {}

function MsgDef.Msg1250406:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 邀请对象id--]]
	return msg
end

function MsgDef.Msg1250406:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1250406:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1250406:opcode()
	return 1250406
end

--[[ 请求邀请玩家进仙盟(返回)--]]
MsgDef.Msg5250406 = {}
function MsgDef.Msg5250406:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 邀请对象id--]]
	return msg
end

function MsgDef.Msg5250406:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg5250406:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end


function MsgDef.Msg5250406:opcode()
	return 5250406
end
--[[ 请求回复帮派邀请--]]
MsgDef.Msg1250407 = {}

function MsgDef.Msg1250407:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 接收方--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 2=同意邀请，3=拒绝邀请--]]
	return msg
end

function MsgDef.Msg1250407:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250407:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250407:opcode()
	return 1250407
end

--[[ 请求回复帮派邀请(返回)--]]
MsgDef.Msg5250407 = {}
function MsgDef.Msg5250407:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 接收方--]]
	msg.reqType = 0 --[[(int8) 2=同意邀请，3=拒绝邀请--]]
	return msg
end

function MsgDef.Msg5250407:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250407:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250407:opcode()
	return 5250407
end
--[[ 请求装备销毁--]]
MsgDef.Msg1250408 = {}

function MsgDef.Msg1250408:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=批量销毁--]]
	if msg.tars == nil then msg.tars = {} end --[[(array<int32>) 目标index--]]
	return msg
end

function MsgDef.Msg1250408:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.tars))
	for i,elm in ipairs(self.tars) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1250408:decode(sm)
	self.reqType = sm:readInt8();
	local tars_size = sm:readInt16()
	for i = 1,tars_size do
		local elm = sm:readInt32();
		table.insert(self.tars, elm)
	end
	return self
end

function MsgDef.Msg1250408:opcode()
	return 1250408
end

--[[ 请求装备销毁(返回)--]]
MsgDef.Msg5250408 = {}
function MsgDef.Msg5250408:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1=批量销毁--]]
	return msg
end

function MsgDef.Msg5250408:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250408:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250408:opcode()
	return 5250408
end
--[[ 请求仙盟圣火信息--]]
MsgDef.Msg1250501 = {}

function MsgDef.Msg1250501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250501:encode(sm)
	return self
end

function MsgDef.Msg1250501:decode(sm)
	return self
end

function MsgDef.Msg1250501:opcode()
	return 1250501
end

--[[ 请求仙盟圣火信息(返回)--]]
MsgDef.Msg5250501 = {}
function MsgDef.Msg5250501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.joinCount = 0 --[[(int32) 参与人数--]]
	msg.rate = 0 --[[(int32) 经验倍率(万分比)--]]
	msg.questionNum = 0 --[[(int32) 答题进度--]]
	msg.point = 0 --[[(int32) 骰子总点数--]]
	msg.rightNum = 0 --[[(int32) 答对问题个数--]]
	msg.addFireTimes = 0 --[[(int32) 已添柴次数--]]
	return msg
end

function MsgDef.Msg5250501:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.joinCount);
	sm:writeInt32(self.rate);
	sm:writeInt32(self.questionNum);
	sm:writeInt32(self.point);
	sm:writeInt32(self.rightNum);
	sm:writeInt32(self.addFireTimes);
	return self
end

function MsgDef.Msg5250501:decode(sm)
	self.lastTime = sm:readInt32();
	self.joinCount = sm:readInt32();
	self.rate = sm:readInt32();
	self.questionNum = sm:readInt32();
	self.point = sm:readInt32();
	self.rightNum = sm:readInt32();
	self.addFireTimes = sm:readInt32();
	return self
end


function MsgDef.Msg5250501:opcode()
	return 5250501
end
--[[ 请求仙盟boss信息--]]
MsgDef.Msg1250502 = {}

function MsgDef.Msg1250502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:信息 2:升级--]]
	return msg
end

function MsgDef.Msg1250502:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250502:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250502:opcode()
	return 1250502
end

--[[ 请求仙盟boss信息(返回)--]]
MsgDef.Msg5250502 = {}
function MsgDef.Msg5250502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:信息 2:升级--]]
	msg.curLevel = 0 --[[(int32) 当前等级--]]
	msg.curExp = 0 --[[(int32) 当前经验--]]
	msg.canJoinFire = 0 --[[(int8) 是否可参加圣火活动--]]
	return msg
end

function MsgDef.Msg5250502:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curLevel);
	sm:writeInt32(self.curExp);
	sm:writeInt8(self.canJoinFire);
	return self
end

function MsgDef.Msg5250502:decode(sm)
	self.reqType = sm:readInt8();
	self.curLevel = sm:readInt32();
	self.curExp = sm:readInt32();
	self.canJoinFire = sm:readInt8();
	return self
end


function MsgDef.Msg5250502:opcode()
	return 5250502
end
--[[ 请求添柴--]]
MsgDef.Msg1250503 = {}

function MsgDef.Msg1250503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250503:encode(sm)
	return self
end

function MsgDef.Msg1250503:decode(sm)
	return self
end

function MsgDef.Msg1250503:opcode()
	return 1250503
end

--[[ 请求添柴(返回)--]]
MsgDef.Msg5250503 = {}
function MsgDef.Msg5250503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	return msg
end

function MsgDef.Msg5250503:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250503:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5250503:opcode()
	return 5250503
end
--[[ 请求boss喂养--]]
MsgDef.Msg1250504 = {}

function MsgDef.Msg1250504:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 喂养方式 1:普通喂养 2:元宝喂养--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 喂养次数--]]
	return msg
end

function MsgDef.Msg1250504:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1250504:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1250504:opcode()
	return 1250504
end

--[[ 请求boss喂养(返回)--]]
MsgDef.Msg5250504 = {}
function MsgDef.Msg5250504:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 喂养方式 1:普通喂养 2:元宝喂养--]]
	msg.bossExp = 0 --[[(int32) boss经验--]]
	msg.times = 0 --[[(int32) 喂养次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	return msg
end

function MsgDef.Msg5250504:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.bossExp);
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5250504:decode(sm)
	self.reqType = sm:readInt8();
	self.bossExp = sm:readInt32();
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5250504:opcode()
	return 5250504
end
--[[ 请求答题--]]
MsgDef.Msg1250505 = {}

function MsgDef.Msg1250505:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:当前题目信息 2:答题--]]
	if msg.answer == nil then msg.answer = 0 end --[[(int32) 答案(索引)--]]
	return msg
end

function MsgDef.Msg1250505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.answer);
	return self
end

function MsgDef.Msg1250505:decode(sm)
	self.reqType = sm:readInt8();
	self.answer = sm:readInt32();
	return self
end

function MsgDef.Msg1250505:opcode()
	return 1250505
end

--[[ 请求答题(返回)--]]
MsgDef.Msg5250505 = {}
function MsgDef.Msg5250505:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:当前题目信息 2:答题--]]
	msg.titleId = 0 --[[(int32) 题目id--]]
	msg.optInfo = {} --[[(array<string>) 答案选项--]]
	msg.rightAnswers = 0 --[[(int32) 当前答对题目--]]
	msg.result = 0 --[[(int8) 2:错误 1:正确--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 答题获得奖励--]]
	msg.rightNum = 0 --[[(int32) 正确数量--]]
	msg.questionNum = 0 --[[(int32) 答题进度--]]
	msg.myAnswer = 0 --[[(int32) 我的选择--]]
	return msg
end

function MsgDef.Msg5250505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.titleId);
	sm:writeInt16(get_map_size(self.optInfo))
	for i,elm in ipairs(self.optInfo) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.rightAnswers);
	sm:writeInt8(self.result);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.rightNum);
	sm:writeInt32(self.questionNum);
	sm:writeInt32(self.myAnswer);
	return self
end

function MsgDef.Msg5250505:decode(sm)
	self.reqType = sm:readInt8();
	self.titleId = sm:readInt32();
	local optInfo_size = sm:readInt16()
	for i = 1,optInfo_size do
		local ele = sm:readString();
		table.insert(self.optInfo, ele)
	end
	self.rightAnswers = sm:readInt32();
	self.result = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.rightNum = sm:readInt32();
	self.questionNum = sm:readInt32();
	self.myAnswer = sm:readInt32();
	return self
end


function MsgDef.Msg5250505:opcode()
	return 5250505
end
--[[ 请求投抛骰子--]]
MsgDef.Msg1250506 = {}

function MsgDef.Msg1250506:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1250506:encode(sm)
	return self
end

function MsgDef.Msg1250506:decode(sm)
	return self
end

function MsgDef.Msg1250506:opcode()
	return 1250506
end

--[[ 请求投抛骰子(返回)--]]
MsgDef.Msg5250506 = {}
function MsgDef.Msg5250506:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.point = {} --[[(array<int32>) 点数--]]
	return msg
end

function MsgDef.Msg5250506:encode(sm)
	sm:writeInt16(get_map_size(self.point))
	for i,elm in ipairs(self.point) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5250506:decode(sm)
	local point_size = sm:readInt16()
	for i = 1,point_size do
		local ele = sm:readInt32();
		table.insert(self.point, ele)
	end
	return self
end


function MsgDef.Msg5250506:opcode()
	return 5250506
end
--[[ 请求仙盟圣火经验池--]]
MsgDef.Msg1250507 = {}

function MsgDef.Msg1250507:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:开始修炼 2:经验池--]]
	return msg
end

function MsgDef.Msg1250507:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1250507:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1250507:opcode()
	return 1250507
end

--[[ 请求仙盟圣火经验池(返回)--]]
MsgDef.Msg5250507 = {}
function MsgDef.Msg5250507:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.expPool = 0 --[[(int32) 经验池经验--]]
	msg.reqType = 0 --[[(int8) 1:开始修炼 2:经验池--]]
	return msg
end

function MsgDef.Msg5250507:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.expPool);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250507:decode(sm)
	self.startTime = sm:readInt32();
	self.expPool = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250507:opcode()
	return 5250507
end
--[[ 请求仙盟科技--]]
MsgDef.Msg1250601 = {}

function MsgDef.Msg1250601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1：升级 2：学习--]]
	if msg.techType == nil then msg.techType = 0 end --[[(int32) 科技类型--]]
	return msg
end

function MsgDef.Msg1250601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.techType);
	return self
end

function MsgDef.Msg1250601:decode(sm)
	self.reqType = sm:readInt8();
	self.techType = sm:readInt32();
	return self
end

function MsgDef.Msg1250601:opcode()
	return 1250601
end

--[[ 请求仙盟科技(返回)--]]
MsgDef.Msg5250601 = {}
function MsgDef.Msg5250601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1：升级 2：学习--]]
	msg.techType = 0 --[[(int32) 科技类型--]]
	msg.zj = 0 --[[(int32) 帮派资金--]]
	msg.gangTechLevs = {} --[[(map<int32,int32>) 仙盟科技等级map key:101科技类型 value:等级--]]
	msg.mineTechLevs = {} --[[(map<int32,int32>) 个人学习科技等级mapkey:101科技类型 value:等级--]]
	return msg
end

function MsgDef.Msg5250601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.techType);
	sm:writeInt32(self.zj);
	sm:writeInt16(get_map_size(self.gangTechLevs))
	for kn,elm in ipairs(self.gangTechLevs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.mineTechLevs))
	for kn,elm in ipairs(self.mineTechLevs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5250601:decode(sm)
	self.reqType = sm:readInt8();
	self.techType = sm:readInt32();
	self.zj = sm:readInt32();
	local gangTechLevs_size = sm:readInt16()
	for i = 1,gangTechLevs_size do
		local kv = sm:readInt32();
		self.gangTechLevs[kv] = sm:readInt32();
	end
	local mineTechLevs_size = sm:readInt16()
	for i = 1,mineTechLevs_size do
		local kv = sm:readInt32();
		self.mineTechLevs[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5250601:opcode()
	return 5250601
end
--[[ 请求市场物品信息--]]
MsgDef.Msg1260101 = {}

function MsgDef.Msg1260101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqLabel == nil then msg.reqLabel = 0 end --[[(int32) 参照市场配置--]]
	if msg.sortType == nil then msg.sortType = 0 end --[[(int8) 0:时间 1:数量 2:单价 3:总计 4:战力 5:装备按阶--]]
	if msg.sortMode == nil then msg.sortMode = 0 end --[[(int8) 排序方式 1:升序 2:降序--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数（从1开始）--]]
	if msg.jie == nil then msg.jie = 0 end --[[(int32) >0,按阶过滤--]]
	if msg.color == nil then msg.color = 0 end --[[(int32) >0,按品质过滤--]]
	return msg
end

function MsgDef.Msg1260101:encode(sm)
	sm:writeInt32(self.reqLabel);
	sm:writeInt8(self.sortType);
	sm:writeInt8(self.sortMode);
	sm:writeInt32(self.page);
	sm:writeInt32(self.jie);
	sm:writeInt32(self.color);
	return self
end

function MsgDef.Msg1260101:decode(sm)
	self.reqLabel = sm:readInt32();
	self.sortType = sm:readInt8();
	self.sortMode = sm:readInt8();
	self.page = sm:readInt32();
	self.jie = sm:readInt32();
	self.color = sm:readInt32();
	return self
end

function MsgDef.Msg1260101:opcode()
	return 1260101
end

--[[ 请求市场物品信息(返回)--]]
MsgDef.Msg5260101 = {}
function MsgDef.Msg5260101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.markInfos = {} --[[(array<MarkItemInfo>) 市场道具信息--]]
	msg.page = 0 --[[(int32) 页数（从1开始）--]]
	msg.totalSum = 0 --[[(int32) 总页数--]]
	return msg
end

function MsgDef.Msg5260101:encode(sm)
	sm:writeInt16(#self.markInfos)
	for i,elm in ipairs(self.markInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.totalSum);
	return self
end

function MsgDef.Msg5260101:decode(sm)
	local markInfos_size = sm:readInt16()
	for i = 1,markInfos_size do
		local element = MsgDef.MarkItemInfo:create():decode(sm)
		table.insert(self.markInfos, element)
	end
	self.page = sm:readInt32();
	self.totalSum = sm:readInt32();
	return self
end


function MsgDef.Msg5260101:opcode()
	return 5260101
end
--[[ 请求道具上架--]]
MsgDef.Msg1260102 = {}

function MsgDef.Msg1260102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 背包索引--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 道具数量--]]
	if msg.price == nil then msg.price = 0 end --[[(int32) 单价--]]
	if msg.passWord == nil then msg.passWord = "" end --[[(string) 交易密码--]]
	return msg
end

function MsgDef.Msg1260102:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.price);
	sm:writeString(self.passWord);
	return self
end

function MsgDef.Msg1260102:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.price = sm:readInt32();
	self.passWord = sm:readString();
	return self
end

function MsgDef.Msg1260102:opcode()
	return 1260102
end

--[[ 请求道具上架(返回)--]]
MsgDef.Msg5260102 = {}
function MsgDef.Msg5260102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5260102:encode(sm)
	return self
end

function MsgDef.Msg5260102:decode(sm)
	return self
end


function MsgDef.Msg5260102:opcode()
	return 5260102
end
--[[ 请求道具下架--]]
MsgDef.Msg1260103 = {}

function MsgDef.Msg1260103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int64) 物品id索引--]]
	return msg
end

function MsgDef.Msg1260103:encode(sm)
	sm:writeInt64(self.index);
	return self
end

function MsgDef.Msg1260103:decode(sm)
	self.index = sm:readInt64();
	return self
end

function MsgDef.Msg1260103:opcode()
	return 1260103
end

--[[ 请求道具下架(返回)--]]
MsgDef.Msg5260103 = {}
function MsgDef.Msg5260103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5260103:encode(sm)
	return self
end

function MsgDef.Msg5260103:decode(sm)
	return self
end


function MsgDef.Msg5260103:opcode()
	return 5260103
end
--[[ 请求市场记录信息--]]
MsgDef.Msg1260104 = {}

function MsgDef.Msg1260104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqLabel == nil then msg.reqLabel = 0 end --[[(int8) 记录类型 1:购买物品 2:下架物品 3:出售成功物品 4:出售列表--]]
	return msg
end

function MsgDef.Msg1260104:encode(sm)
	sm:writeInt8(self.reqLabel);
	return self
end

function MsgDef.Msg1260104:decode(sm)
	self.reqLabel = sm:readInt8();
	return self
end

function MsgDef.Msg1260104:opcode()
	return 1260104
end

--[[ 请求市场记录信息(返回)--]]
MsgDef.Msg5260104 = {}
function MsgDef.Msg5260104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.recordItems = {} --[[(array<MarkItemInfo>) 记录--]]
	msg.inSellCount = 0 --[[(int32) 已上架数量--]]
	return msg
end

function MsgDef.Msg5260104:encode(sm)
	sm:writeInt16(#self.recordItems)
	for i,elm in ipairs(self.recordItems) do
		elm:encode(sm)
	end
	sm:writeInt32(self.inSellCount);
	return self
end

function MsgDef.Msg5260104:decode(sm)
	local recordItems_size = sm:readInt16()
	for i = 1,recordItems_size do
		local element = MsgDef.MarkItemInfo:create():decode(sm)
		table.insert(self.recordItems, element)
	end
	self.inSellCount = sm:readInt32();
	return self
end


function MsgDef.Msg5260104:opcode()
	return 5260104
end
--[[ 请求出售成功后提取--]]
MsgDef.Msg1260105 = {}

function MsgDef.Msg1260105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int64) 物品id索引--]]
	if msg.tradeId == nil then msg.tradeId = 0 end --[[(int32) 交易id--]]
	return msg
end

function MsgDef.Msg1260105:encode(sm)
	sm:writeInt64(self.index);
	sm:writeInt32(self.tradeId);
	return self
end

function MsgDef.Msg1260105:decode(sm)
	self.index = sm:readInt64();
	self.tradeId = sm:readInt32();
	return self
end

function MsgDef.Msg1260105:opcode()
	return 1260105
end

--[[ 请求出售成功后提取(返回)--]]
MsgDef.Msg5260105 = {}
function MsgDef.Msg5260105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.yb = 0 --[[(int32) 获得元宝--]]
	return msg
end

function MsgDef.Msg5260105:encode(sm)
	sm:writeInt32(self.yb);
	return self
end

function MsgDef.Msg5260105:decode(sm)
	self.yb = sm:readInt32();
	return self
end


function MsgDef.Msg5260105:opcode()
	return 5260105
end
--[[ 请求市场购买道具--]]
MsgDef.Msg1260106 = {}

function MsgDef.Msg1260106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int64) 物品id索引--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 购买数量--]]
	if msg.srvId == nil then msg.srvId = 0 end --[[(int32) 主服务器id--]]
	if msg.passWord == nil then msg.passWord = "" end --[[(string) 交易密码--]]
	return msg
end

function MsgDef.Msg1260106:encode(sm)
	sm:writeInt64(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.srvId);
	sm:writeString(self.passWord);
	return self
end

function MsgDef.Msg1260106:decode(sm)
	self.index = sm:readInt64();
	self.amount = sm:readInt32();
	self.srvId = sm:readInt32();
	self.passWord = sm:readString();
	return self
end

function MsgDef.Msg1260106:opcode()
	return 1260106
end

--[[ 请求市场购买道具(返回)--]]
MsgDef.Msg5260106 = {}
function MsgDef.Msg5260106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 购买的道具--]]
	return msg
end

function MsgDef.Msg5260106:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5260106:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5260106:opcode()
	return 5260106
end
--[[ 请求市场物品参考单价--]]
MsgDef.Msg1260107 = {}

function MsgDef.Msg1260107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	return msg
end

function MsgDef.Msg1260107:encode(sm)
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1260107:decode(sm)
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1260107:opcode()
	return 1260107
end

--[[ 请求市场物品参考单价(返回)--]]
MsgDef.Msg5260107 = {}
function MsgDef.Msg5260107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mid = 0 --[[(int32) 道具id--]]
	msg.price = 0 --[[(int32) 参考单价--]]
	return msg
end

function MsgDef.Msg5260107:encode(sm)
	sm:writeInt32(self.mid);
	sm:writeInt32(self.price);
	return self
end

function MsgDef.Msg5260107:decode(sm)
	self.mid = sm:readInt32();
	self.price = sm:readInt32();
	return self
end


function MsgDef.Msg5260107:opcode()
	return 5260107
end
--[[ 请求搜索道具列表--]]
MsgDef.Msg1260108 = {}

function MsgDef.Msg1260108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.name == nil then msg.name = "" end --[[(string) 搜索名字--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页--]]
	if msg.sortType == nil then msg.sortType = 0 end --[[(int32) 0:时间 1:数量 2:单价 3:总计--]]
	if msg.sortMode == nil then msg.sortMode = 0 end --[[(int32) 排序方式 1:升序 2:降序--]]
	if msg.jie == nil then msg.jie = 0 end --[[(int32) >0,按阶过滤--]]
	if msg.color == nil then msg.color = 0 end --[[(int32) >0,按品质过滤--]]
	return msg
end

function MsgDef.Msg1260108:encode(sm)
	sm:writeString(self.name);
	sm:writeInt32(self.page);
	sm:writeInt32(self.sortType);
	sm:writeInt32(self.sortMode);
	sm:writeInt32(self.jie);
	sm:writeInt32(self.color);
	return self
end

function MsgDef.Msg1260108:decode(sm)
	self.name = sm:readString();
	self.page = sm:readInt32();
	self.sortType = sm:readInt32();
	self.sortMode = sm:readInt32();
	self.jie = sm:readInt32();
	self.color = sm:readInt32();
	return self
end

function MsgDef.Msg1260108:opcode()
	return 1260108
end

--[[ 请求搜索道具列表(返回)--]]
MsgDef.Msg5260108 = {}
function MsgDef.Msg5260108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页--]]
	msg.totalSum = 0 --[[(int32) 总页数--]]
	msg.markInfos = {} --[[(array<MarkItemInfo>) 市场信息--]]
	return msg
end

function MsgDef.Msg5260108:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.totalSum);
	sm:writeInt16(#self.markInfos)
	for i,elm in ipairs(self.markInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5260108:decode(sm)
	self.page = sm:readInt32();
	self.totalSum = sm:readInt32();
	local markInfos_size = sm:readInt16()
	for i = 1,markInfos_size do
		local element = MsgDef.MarkItemInfo:create():decode(sm)
		table.insert(self.markInfos, element)
	end
	return self
end


function MsgDef.Msg5260108:opcode()
	return 5260108
end
--[[ 请求宠物上架--]]
MsgDef.Msg1260109 = {}

function MsgDef.Msg1260109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	if msg.price == nil then msg.price = 0 end --[[(int32) 价格--]]
	if msg.passWord == nil then msg.passWord = "" end --[[(string) 密码--]]
	return msg
end

function MsgDef.Msg1260109:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.price);
	sm:writeString(self.passWord);
	return self
end

function MsgDef.Msg1260109:decode(sm)
	self.petRoleId = sm:readInt32();
	self.price = sm:readInt32();
	self.passWord = sm:readString();
	return self
end

function MsgDef.Msg1260109:opcode()
	return 1260109
end

--[[ 请求宠物上架(返回)--]]
MsgDef.Msg5260109 = {}
function MsgDef.Msg5260109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5260109:encode(sm)
	return self
end

function MsgDef.Msg5260109:decode(sm)
	return self
end


function MsgDef.Msg5260109:opcode()
	return 5260109
end
--[[ 请求申请交易--]]
MsgDef.Msg1260201 = {}

function MsgDef.Msg1260201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.inviteRoleId == nil then msg.inviteRoleId = 0 end --[[(int64) 邀请交易的玩家id--]]
	return msg
end

function MsgDef.Msg1260201:encode(sm)
	sm:writeInt64(self.inviteRoleId);
	return self
end

function MsgDef.Msg1260201:decode(sm)
	self.inviteRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1260201:opcode()
	return 1260201
end

--[[ 请求申请交易(返回)--]]
MsgDef.Msg5260201 = {}
function MsgDef.Msg5260201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5260201:encode(sm)
	return self
end

function MsgDef.Msg5260201:decode(sm)
	return self
end


function MsgDef.Msg5260201:opcode()
	return 5260201
end
--[[ 请求同意&拒绝交易申请--]]
MsgDef.Msg1260202 = {}

function MsgDef.Msg1260202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tradeType == nil then msg.tradeType = 0 end --[[(int8) 1同意,2拒绝--]]
	if msg.originRoleId == nil then msg.originRoleId = 0 end --[[(int64) 发起人roleId--]]
	return msg
end

function MsgDef.Msg1260202:encode(sm)
	sm:writeInt8(self.tradeType);
	sm:writeInt64(self.originRoleId);
	return self
end

function MsgDef.Msg1260202:decode(sm)
	self.tradeType = sm:readInt8();
	self.originRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1260202:opcode()
	return 1260202
end

--[[ 请求同意&拒绝交易申请(返回)--]]
MsgDef.Msg5260202 = {}
function MsgDef.Msg5260202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tradeType = 0 --[[(int8) 1同意,2拒绝--]]
	return msg
end

function MsgDef.Msg5260202:encode(sm)
	sm:writeInt8(self.tradeType);
	return self
end

function MsgDef.Msg5260202:decode(sm)
	self.tradeType = sm:readInt8();
	return self
end


function MsgDef.Msg5260202:opcode()
	return 5260202
end
--[[ 请求交易添加&移除--]]
MsgDef.Msg1260203 = {}

function MsgDef.Msg1260203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tradeType == nil then msg.tradeType = 0 end --[[(int8) 1:添加,2移除--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) index--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 数量--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) mid--]]
	return msg
end

function MsgDef.Msg1260203:encode(sm)
	sm:writeInt8(self.tradeType);
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1260203:decode(sm)
	self.tradeType = sm:readInt8();
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1260203:opcode()
	return 1260203
end

--[[ 请求交易添加&移除(返回)--]]
MsgDef.Msg5260203 = {}
function MsgDef.Msg5260203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tradeType = 0 --[[(int8) 1:添加,2移除--]]
	msg.index = 0 --[[(int32) index--]]
	msg.amount = 0 --[[(int32) 数量--]]
	msg.mid = 0 --[[(int32) mid--]]
	msg.colorAttris = {} --[[(array<IntGroup>) 极品属性--]]
	return msg
end

function MsgDef.Msg5260203:encode(sm)
	sm:writeInt8(self.tradeType);
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.mid);
	sm:writeInt16(#self.colorAttris)
	for i,elm in ipairs(self.colorAttris) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5260203:decode(sm)
	self.tradeType = sm:readInt8();
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.mid = sm:readInt32();
	local colorAttris_size = sm:readInt16()
	for i = 1,colorAttris_size do
		local element = MsgDef.IntGroup:create():decode(sm)
		table.insert(self.colorAttris, element)
	end
	return self
end


function MsgDef.Msg5260203:opcode()
	return 5260203
end
--[[ 请求锁定交易--]]
MsgDef.Msg1260204 = {}

function MsgDef.Msg1260204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1260204:encode(sm)
	return self
end

function MsgDef.Msg1260204:decode(sm)
	return self
end

function MsgDef.Msg1260204:opcode()
	return 1260204
end

--[[ 请求锁定交易(返回)--]]
MsgDef.Msg5260204 = {}
function MsgDef.Msg5260204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tradeStatu = 0 --[[(int8) 1:发起者锁定2:被邀请者锁定3:全部锁定 7邀请者确定 11交易者确定 15双方确定,交易完成--]]
	return msg
end

function MsgDef.Msg5260204:encode(sm)
	sm:writeInt8(self.tradeStatu);
	return self
end

function MsgDef.Msg5260204:decode(sm)
	self.tradeStatu = sm:readInt8();
	return self
end


function MsgDef.Msg5260204:opcode()
	return 5260204
end
--[[ 请求确认&取消交易--]]
MsgDef.Msg1260205 = {}

function MsgDef.Msg1260205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tradeType == nil then msg.tradeType = 0 end --[[(int8) 1:确认2取消--]]
	return msg
end

function MsgDef.Msg1260205:encode(sm)
	sm:writeInt8(self.tradeType);
	return self
end

function MsgDef.Msg1260205:decode(sm)
	self.tradeType = sm:readInt8();
	return self
end

function MsgDef.Msg1260205:opcode()
	return 1260205
end

--[[ 请求确认&取消交易(返回)--]]
MsgDef.Msg5260205 = {}
function MsgDef.Msg5260205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5260205:encode(sm)
	return self
end

function MsgDef.Msg5260205:decode(sm)
	return self
end


function MsgDef.Msg5260205:opcode()
	return 5260205
end
--[[ 请求交易修改金钱--]]
MsgDef.Msg1260206 = {}

function MsgDef.Msg1260206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.copper == nil then msg.copper = 0 end --[[(int32) copper--]]
	if msg.gold == nil then msg.gold = 0 end --[[(int32) gold--]]
	return msg
end

function MsgDef.Msg1260206:encode(sm)
	sm:writeInt32(self.copper);
	sm:writeInt32(self.gold);
	return self
end

function MsgDef.Msg1260206:decode(sm)
	self.copper = sm:readInt32();
	self.gold = sm:readInt32();
	return self
end

function MsgDef.Msg1260206:opcode()
	return 1260206
end

--[[ 请求交易修改金钱(返回)--]]
MsgDef.Msg5260206 = {}
function MsgDef.Msg5260206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.copper = 0 --[[(int32) copper--]]
	msg.gold = 0 --[[(int32) gold--]]
	return msg
end

function MsgDef.Msg5260206:encode(sm)
	sm:writeInt32(self.copper);
	sm:writeInt32(self.gold);
	return self
end

function MsgDef.Msg5260206:decode(sm)
	self.copper = sm:readInt32();
	self.gold = sm:readInt32();
	return self
end


function MsgDef.Msg5260206:opcode()
	return 5260206
end
--[[ 请求称号列表--]]
MsgDef.Msg1270101 = {}

function MsgDef.Msg1270101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1270101:encode(sm)
	return self
end

function MsgDef.Msg1270101:decode(sm)
	return self
end

function MsgDef.Msg1270101:opcode()
	return 1270101
end

--[[ 请求称号列表(返回)--]]
MsgDef.Msg5270101 = {}
function MsgDef.Msg5270101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.titleInfos = {} --[[(array<TitleInfo>) 称号列表--]]
	msg.count = 0 --[[(int32) 当前可佩戴称号数量--]]
	msg.titleMax = 0 --[[(int32) 可穿戴上限--]]
	msg.buyCount = 0 --[[(int32) 已购买数量--]]
	return msg
end

function MsgDef.Msg5270101:encode(sm)
	sm:writeInt16(#self.titleInfos)
	for i,elm in ipairs(self.titleInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.count);
	sm:writeInt32(self.titleMax);
	sm:writeInt32(self.buyCount);
	return self
end

function MsgDef.Msg5270101:decode(sm)
	local titleInfos_size = sm:readInt16()
	for i = 1,titleInfos_size do
		local element = MsgDef.TitleInfo:create():decode(sm)
		table.insert(self.titleInfos, element)
	end
	self.count = sm:readInt32();
	self.titleMax = sm:readInt32();
	self.buyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5270101:opcode()
	return 5270101
end
--[[ 请求佩戴称号--]]
MsgDef.Msg1270102 = {}

function MsgDef.Msg1270102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.titleId == nil then msg.titleId = 0 end --[[(int32) 称号id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:穿戴 2:脱下--]]
	return msg
end

function MsgDef.Msg1270102:encode(sm)
	sm:writeInt32(self.titleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1270102:decode(sm)
	self.titleId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1270102:opcode()
	return 1270102
end

--[[ 请求佩戴称号(返回)--]]
MsgDef.Msg5270102 = {}
function MsgDef.Msg5270102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.titleId = 0 --[[(int32) 称号id--]]
	msg.type = 0 --[[(int8) 1:穿戴 2:脱下--]]
	return msg
end

function MsgDef.Msg5270102:encode(sm)
	sm:writeInt32(self.titleId);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5270102:decode(sm)
	self.titleId = sm:readInt32();
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5270102:opcode()
	return 5270102
end
--[[ 请求激活称号或时装--]]
MsgDef.Msg1270103 = {}

function MsgDef.Msg1270103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 请求类型 1:称号 2:时装--]]
	if msg.activeId == nil then msg.activeId = 0 end --[[(int32) 要激活的时装或称号id--]]
	return msg
end

function MsgDef.Msg1270103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.activeId);
	return self
end

function MsgDef.Msg1270103:decode(sm)
	self.reqType = sm:readInt8();
	self.activeId = sm:readInt32();
	return self
end

function MsgDef.Msg1270103:opcode()
	return 1270103
end

--[[ 请求激活称号或时装(返回)--]]
MsgDef.Msg5270103 = {}
function MsgDef.Msg5270103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.activeId = 0 --[[(int32) 激活的时装或称号id--]]
	return msg
end

function MsgDef.Msg5270103:encode(sm)
	sm:writeInt32(self.activeId);
	return self
end

function MsgDef.Msg5270103:decode(sm)
	self.activeId = sm:readInt32();
	return self
end


function MsgDef.Msg5270103:opcode()
	return 5270103
end
--[[ 请求时装列表--]]
MsgDef.Msg1270104 = {}

function MsgDef.Msg1270104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1270104:encode(sm)
	return self
end

function MsgDef.Msg1270104:decode(sm)
	return self
end

function MsgDef.Msg1270104:opcode()
	return 1270104
end

--[[ 请求时装列表(返回)--]]
MsgDef.Msg5270104 = {}
function MsgDef.Msg5270104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.fashionInfos = {} --[[(array<FashionInfo>) 已获得的时装列表--]]
	return msg
end

function MsgDef.Msg5270104:encode(sm)
	sm:writeInt16(#self.fashionInfos)
	for i,elm in ipairs(self.fashionInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5270104:decode(sm)
	local fashionInfos_size = sm:readInt16()
	for i = 1,fashionInfos_size do
		local element = MsgDef.FashionInfo:create():decode(sm)
		table.insert(self.fashionInfos, element)
	end
	return self
end


function MsgDef.Msg5270104:opcode()
	return 5270104
end
--[[ 请求时装佩戴--]]
MsgDef.Msg1270105 = {}

function MsgDef.Msg1270105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.fashionId == nil then msg.fashionId = 0 end --[[(int32) 时装id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:穿戴 2:脱下--]]
	return msg
end

function MsgDef.Msg1270105:encode(sm)
	sm:writeInt32(self.fashionId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1270105:decode(sm)
	self.fashionId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1270105:opcode()
	return 1270105
end

--[[ 请求时装佩戴(返回)--]]
MsgDef.Msg5270105 = {}
function MsgDef.Msg5270105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.fashionId = 0 --[[(int32) 时装id--]]
	msg.type = 0 --[[(int8) 1:穿戴 2:脱下--]]
	msg.fashoinType = 0 --[[(int32) 时装类型--]]
	return msg
end

function MsgDef.Msg5270105:encode(sm)
	sm:writeInt32(self.fashionId);
	sm:writeInt8(self.type);
	sm:writeInt32(self.fashoinType);
	return self
end

function MsgDef.Msg5270105:decode(sm)
	self.fashionId = sm:readInt32();
	self.type = sm:readInt8();
	self.fashoinType = sm:readInt32();
	return self
end


function MsgDef.Msg5270105:opcode()
	return 5270105
end
--[[ 请求时装升星--]]
MsgDef.Msg1270106 = {}

function MsgDef.Msg1270106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.fid == nil then msg.fid = 0 end --[[(int32) 时装id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 0显示1升星--]]
	if msg.moduleType == nil then msg.moduleType = 0 end --[[(int32) 模块类型--]]
	return msg
end

function MsgDef.Msg1270106:encode(sm)
	sm:writeInt32(self.fid);
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.moduleType);
	return self
end

function MsgDef.Msg1270106:decode(sm)
	self.fid = sm:readInt32();
	self.reqType = sm:readInt32();
	self.moduleType = sm:readInt32();
	return self
end

function MsgDef.Msg1270106:opcode()
	return 1270106
end

--[[ 请求时装升星(返回)--]]
MsgDef.Msg5270106 = {}
function MsgDef.Msg5270106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 0显示1升星--]]
	msg.moduleType = 0 --[[(int32) 模块类型--]]
	msg.starId = 0 --[[(int32) 前缀 * 1000+星数--]]
	return msg
end

function MsgDef.Msg5270106:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.moduleType);
	sm:writeInt32(self.starId);
	return self
end

function MsgDef.Msg5270106:decode(sm)
	self.reqType = sm:readInt32();
	self.moduleType = sm:readInt32();
	self.starId = sm:readInt32();
	return self
end


function MsgDef.Msg5270106:opcode()
	return 5270106
end
--[[ 请求成就信息--]]
MsgDef.Msg1270201 = {}

function MsgDef.Msg1270201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.achieveType == nil then msg.achieveType = 0 end --[[(int8) 成就类型 0:全部 1:成长 2:玩法 3:其他--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页 从1开始--]]
	return msg
end

function MsgDef.Msg1270201:encode(sm)
	sm:writeInt8(self.achieveType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1270201:decode(sm)
	self.achieveType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1270201:opcode()
	return 1270201
end

--[[ 请求成就信息(返回)--]]
MsgDef.Msg5270201 = {}
function MsgDef.Msg5270201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.achieveInfos = {} --[[(array<AchieveInfo>) 成就信息--]]
	msg.achieveValue = 0 --[[(int32) 当前成就--]]
	msg.achieveLevel = 0 --[[(int32) 当前成就等级--]]
	msg.page = 0 --[[(int32) 当前页 从1开始--]]
	msg.sumPage = 0 --[[(int32) 总页数--]]
	msg.finishCount = 0 --[[(int32) 已完成成就个数--]]
	msg.achieveCountMap = {} --[[(map<int32,int32>) 成就类型完成个数<类型,个数>--]]
	msg.hasAchieveGotMap = {} --[[(map<int32,int32>) 是否有对应的成就可领取<类型，>0可领取数量>--]]
	return msg
end

function MsgDef.Msg5270201:encode(sm)
	sm:writeInt16(#self.achieveInfos)
	for i,elm in ipairs(self.achieveInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.achieveValue);
	sm:writeInt32(self.achieveLevel);
	sm:writeInt32(self.page);
	sm:writeInt32(self.sumPage);
	sm:writeInt32(self.finishCount);
	sm:writeInt16(get_map_size(self.achieveCountMap))
	for kn,elm in ipairs(self.achieveCountMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.hasAchieveGotMap))
	for kn,elm in ipairs(self.hasAchieveGotMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5270201:decode(sm)
	local achieveInfos_size = sm:readInt16()
	for i = 1,achieveInfos_size do
		local element = MsgDef.AchieveInfo:create():decode(sm)
		table.insert(self.achieveInfos, element)
	end
	self.achieveValue = sm:readInt32();
	self.achieveLevel = sm:readInt32();
	self.page = sm:readInt32();
	self.sumPage = sm:readInt32();
	self.finishCount = sm:readInt32();
	local achieveCountMap_size = sm:readInt16()
	for i = 1,achieveCountMap_size do
		local kv = sm:readInt32();
		self.achieveCountMap[kv] = sm:readInt32();
	end
	local hasAchieveGotMap_size = sm:readInt16()
	for i = 1,hasAchieveGotMap_size do
		local kv = sm:readInt32();
		self.hasAchieveGotMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5270201:opcode()
	return 5270201
end
--[[ 请求成就领取--]]
MsgDef.Msg1270202 = {}

function MsgDef.Msg1270202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.achieveId == nil then msg.achieveId = 0 end --[[(int32) 成就id--]]
	if msg.achieveType == nil then msg.achieveType = 0 end --[[(int8) 成就类型 0:全部 1:成长 2:玩法 3:其他--]]
	return msg
end

function MsgDef.Msg1270202:encode(sm)
	sm:writeInt32(self.achieveId);
	sm:writeInt8(self.achieveType);
	return self
end

function MsgDef.Msg1270202:decode(sm)
	self.achieveId = sm:readInt32();
	self.achieveType = sm:readInt8();
	return self
end

function MsgDef.Msg1270202:opcode()
	return 1270202
end

--[[ 请求成就领取(返回)--]]
MsgDef.Msg5270202 = {}
function MsgDef.Msg5270202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.achieveStatus = 0 --[[(int8) 成就状态--]]
	msg.achieveValue = 0 --[[(int32) 当前成就--]]
	msg.finishCount = 0 --[[(int32) 已完成成就个数--]]
	msg.achieveId = 0 --[[(int32) 成就id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	return msg
end

function MsgDef.Msg5270202:encode(sm)
	sm:writeInt8(self.achieveStatus);
	sm:writeInt32(self.achieveValue);
	sm:writeInt32(self.finishCount);
	sm:writeInt32(self.achieveId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5270202:decode(sm)
	self.achieveStatus = sm:readInt8();
	self.achieveValue = sm:readInt32();
	self.finishCount = sm:readInt32();
	self.achieveId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5270202:opcode()
	return 5270202
end
--[[ 请求成就进阶--]]
MsgDef.Msg1270203 = {}

function MsgDef.Msg1270203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1270203:encode(sm)
	return self
end

function MsgDef.Msg1270203:decode(sm)
	return self
end

function MsgDef.Msg1270203:opcode()
	return 1270203
end

--[[ 请求成就进阶(返回)--]]
MsgDef.Msg5270203 = {}
function MsgDef.Msg5270203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.achieveLevel = 0 --[[(int32) 当前成就等级--]]
	return msg
end

function MsgDef.Msg5270203:encode(sm)
	sm:writeInt32(self.achieveLevel);
	return self
end

function MsgDef.Msg5270203:decode(sm)
	self.achieveLevel = sm:readInt32();
	return self
end


function MsgDef.Msg5270203:opcode()
	return 5270203
end
--[[ 请求排行榜总榜--]]
MsgDef.Msg1280101 = {}

function MsgDef.Msg1280101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1280101:encode(sm)
	return self
end

function MsgDef.Msg1280101:decode(sm)
	return self
end

function MsgDef.Msg1280101:opcode()
	return 1280101
end

--[[ 请求排行榜总榜(返回)--]]
MsgDef.Msg5280101 = {}
function MsgDef.Msg5280101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tops = {} --[[(array<RankingUserInfo>) 各排行榜第一名的列表--]]
	msg.svrIds = {} --[[(array<int32>) 跨服小区服务器ids--]]
	return msg
end

function MsgDef.Msg5280101:encode(sm)
	sm:writeInt16(#self.tops)
	for i,elm in ipairs(self.tops) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.svrIds))
	for i,elm in ipairs(self.svrIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5280101:decode(sm)
	local tops_size = sm:readInt16()
	for i = 1,tops_size do
		local element = MsgDef.RankingUserInfo:create():decode(sm)
		table.insert(self.tops, element)
	end
	local svrIds_size = sm:readInt16()
	for i = 1,svrIds_size do
		local ele = sm:readInt32();
		table.insert(self.svrIds, ele)
	end
	return self
end


function MsgDef.Msg5280101:opcode()
	return 5280101
end
--[[ 请求类型排行榜信息--]]
MsgDef.Msg1280102 = {}

function MsgDef.Msg1280102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rankType == nil then msg.rankType = 0 end --[[(int32) 排行榜类型--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 服务器id--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数1开始--]]
	return msg
end

function MsgDef.Msg1280102:encode(sm)
	sm:writeInt32(self.rankType);
	sm:writeInt32(self.svrId);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1280102:decode(sm)
	self.rankType = sm:readInt32();
	self.svrId = sm:readInt32();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1280102:opcode()
	return 1280102
end

--[[ 请求类型排行榜信息(返回)--]]
MsgDef.Msg5280102 = {}
function MsgDef.Msg5280102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankType = 0 --[[(int32) 排行榜类型--]]
	msg.svrId = 0 --[[(int32) 服务器id--]]
	msg.rankings = {} --[[(array<RankingUserInfo>) 排行榜--]]
	msg.page = 0 --[[(int32) 页数1开始--]]
	msg.maxPage = 0 --[[(int32) 总页数--]]
	msg.myRankingInfo = MsgDef.RankingUserInfo:create() --[[(RankingUserInfo) 我的排行榜信息--]]
	return msg
end

function MsgDef.Msg5280102:encode(sm)
	sm:writeInt32(self.rankType);
	sm:writeInt32(self.svrId);
	sm:writeInt16(#self.rankings)
	for i,elm in ipairs(self.rankings) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	self.myRankingInfo:encode(sm)
	return self
end

function MsgDef.Msg5280102:decode(sm)
	self.rankType = sm:readInt32();
	self.svrId = sm:readInt32();
	local rankings_size = sm:readInt16()
	for i = 1,rankings_size do
		local element = MsgDef.RankingUserInfo:create():decode(sm)
		table.insert(self.rankings, element)
	end
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	self.myRankingInfo:decode(sm)
	return self
end


function MsgDef.Msg5280102:opcode()
	return 5280102
end
--[[ 请求排行榜点赞--]]
MsgDef.Msg1280103 = {}

function MsgDef.Msg1280103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rankType == nil then msg.rankType = 0 end --[[(int8) 排行榜类型--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 服务器id--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg1280103:encode(sm)
	sm:writeInt8(self.rankType);
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1280103:decode(sm)
	self.rankType = sm:readInt8();
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1280103:opcode()
	return 1280103
end

--[[ 请求排行榜点赞(返回)--]]
MsgDef.Msg5280103 = {}
function MsgDef.Msg5280103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankType = 0 --[[(int8) 排行榜类型--]]
	msg.svrId = 0 --[[(int32) 服务器id--]]
	msg.roleId = 0 --[[(int64) 角色id--]]
	return msg
end

function MsgDef.Msg5280103:encode(sm)
	sm:writeInt8(self.rankType);
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5280103:decode(sm)
	self.rankType = sm:readInt8();
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5280103:opcode()
	return 5280103
end
--[[ 请求玩家点赞信息--]]
MsgDef.Msg1280104 = {}

function MsgDef.Msg1280104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1280104:encode(sm)
	return self
end

function MsgDef.Msg1280104:decode(sm)
	return self
end

function MsgDef.Msg1280104:opcode()
	return 1280104
end

--[[ 请求玩家点赞信息(返回)--]]
MsgDef.Msg5280104 = {}
function MsgDef.Msg5280104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dzIds = {} --[[(array<int64>) 已点赞的Id列表--]]
	return msg
end

function MsgDef.Msg5280104:encode(sm)
	sm:writeInt16(get_map_size(self.dzIds))
	for i,elm in ipairs(self.dzIds) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5280104:decode(sm)
	local dzIds_size = sm:readInt16()
	for i = 1,dzIds_size do
		local ele = sm:readInt64();
		table.insert(self.dzIds, ele)
	end
	return self
end


function MsgDef.Msg5280104:opcode()
	return 5280104
end
--[[ 请求修仙信息--]]
MsgDef.Msg1290101 = {}

function MsgDef.Msg1290101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1290101:encode(sm)
	return self
end

function MsgDef.Msg1290101:decode(sm)
	return self
end

function MsgDef.Msg1290101:opcode()
	return 1290101
end

--[[ 请求修仙信息(返回)--]]
MsgDef.Msg5290101 = {}
function MsgDef.Msg5290101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 当前修仙等级--]]
	msg.dayProcess = 0 --[[(int32) 今日进度--]]
	msg.exp = 0 --[[(int32) 当前经验--]]
	msg.awardGotFlag = {} --[[(array<int32>) 单日奖励领取标识奖励id列表--]]
	msg.expWayMap = {} --[[(map<int32,int32>) 今日途径进度列表<id,进度>--]]
	msg.djSign = 0 --[[(int8) 渡劫标识:0未渡劫,1已渡劫--]]
	msg.djCdLeftTime = 0 --[[(int32) 渡劫cd倒计时,秒--]]
	msg.day = 0 --[[(int32) 当前天数--]]
	msg.outLineTime = 0 --[[(int32) 离线时间--]]
	return msg
end

function MsgDef.Msg5290101:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt32(self.dayProcess);
	sm:writeInt32(self.exp);
	sm:writeInt16(get_map_size(self.awardGotFlag))
	for i,elm in ipairs(self.awardGotFlag) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.expWayMap))
	for kn,elm in ipairs(self.expWayMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.djSign);
	sm:writeInt32(self.djCdLeftTime);
	sm:writeInt32(self.day);
	sm:writeInt32(self.outLineTime);
	return self
end

function MsgDef.Msg5290101:decode(sm)
	self.level = sm:readInt32();
	self.dayProcess = sm:readInt32();
	self.exp = sm:readInt32();
	local awardGotFlag_size = sm:readInt16()
	for i = 1,awardGotFlag_size do
		local ele = sm:readInt32();
		table.insert(self.awardGotFlag, ele)
	end
	local expWayMap_size = sm:readInt16()
	for i = 1,expWayMap_size do
		local kv = sm:readInt32();
		self.expWayMap[kv] = sm:readInt32();
	end
	self.djSign = sm:readInt8();
	self.djCdLeftTime = sm:readInt32();
	self.day = sm:readInt32();
	self.outLineTime = sm:readInt32();
	return self
end


function MsgDef.Msg5290101:opcode()
	return 5290101
end
--[[ 请求修仙升级--]]
MsgDef.Msg1290102 = {}

function MsgDef.Msg1290102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1290102:encode(sm)
	return self
end

function MsgDef.Msg1290102:decode(sm)
	return self
end

function MsgDef.Msg1290102:opcode()
	return 1290102
end

--[[ 请求修仙升级(返回)--]]
MsgDef.Msg5290102 = {}
function MsgDef.Msg5290102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.exp = 0 --[[(int32) 当前经验--]]
	msg.djSign = 0 --[[(int8) 渡劫标识--]]
	return msg
end

function MsgDef.Msg5290102:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.exp);
	sm:writeInt8(self.djSign);
	return self
end

function MsgDef.Msg5290102:decode(sm)
	self.level = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.exp = sm:readInt32();
	self.djSign = sm:readInt8();
	return self
end


function MsgDef.Msg5290102:opcode()
	return 5290102
end
--[[ 请求领取每日奖励--]]
MsgDef.Msg1290103 = {}

function MsgDef.Msg1290103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 要领取的奖励id--]]
	return msg
end

function MsgDef.Msg1290103:encode(sm)
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1290103:decode(sm)
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1290103:opcode()
	return 1290103
end

--[[ 请求领取每日奖励(返回)--]]
MsgDef.Msg5290103 = {}
function MsgDef.Msg5290103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.awardGotFlag = {} --[[(array<int32>) 领取id列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.outLineTime = 0 --[[(int32) 离线时间--]]
	return msg
end

function MsgDef.Msg5290103:encode(sm)
	sm:writeInt16(get_map_size(self.awardGotFlag))
	for i,elm in ipairs(self.awardGotFlag) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.outLineTime);
	return self
end

function MsgDef.Msg5290103:decode(sm)
	local awardGotFlag_size = sm:readInt16()
	for i = 1,awardGotFlag_size do
		local ele = sm:readInt32();
		table.insert(self.awardGotFlag, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.outLineTime = sm:readInt32();
	return self
end


function MsgDef.Msg5290103:opcode()
	return 5290103
end
--[[ 请求修仙渡劫--]]
MsgDef.Msg1290201 = {}

function MsgDef.Msg1290201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1290201:encode(sm)
	return self
end

function MsgDef.Msg1290201:decode(sm)
	return self
end

function MsgDef.Msg1290201:opcode()
	return 1290201
end

--[[ 请求修仙渡劫(返回)--]]
MsgDef.Msg5290201 = {}
function MsgDef.Msg5290201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5290201:encode(sm)
	return self
end

function MsgDef.Msg5290201:decode(sm)
	return self
end


function MsgDef.Msg5290201:opcode()
	return 5290201
end
--[[ 请求修仙渡劫同意或者拒绝--]]
MsgDef.Msg1290202 = {}

function MsgDef.Msg1290202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg1290202:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1290202:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1290202:opcode()
	return 1290202
end

--[[ 请求修仙渡劫同意或者拒绝(返回)--]]
MsgDef.Msg5290202 = {}
function MsgDef.Msg5290202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg5290202:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5290202:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5290202:opcode()
	return 5290202
end
--[[ 请求修仙渡劫队伍成员准备状态--]]
MsgDef.Msg1290203 = {}

function MsgDef.Msg1290203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1290203:encode(sm)
	return self
end

function MsgDef.Msg1290203:decode(sm)
	return self
end

function MsgDef.Msg1290203:opcode()
	return 1290203
end

--[[ 请求修仙渡劫队伍成员准备状态(返回)--]]
MsgDef.Msg5290203 = {}
function MsgDef.Msg5290203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.readyMap = {} --[[(map<int64,int8>) key:roleId value:1已准备 0未准备--]]
	msg.djLev = 0 --[[(int32) 渡劫等级--]]
	return msg
end

function MsgDef.Msg5290203:encode(sm)
	sm:writeInt16(get_map_size(self.readyMap))
	for kn,elm in ipairs(self.readyMap) do
		sm:writeInt64(kn);
		sm:writeInt8(elm);
	end
	sm:writeInt32(self.djLev);
	return self
end

function MsgDef.Msg5290203:decode(sm)
	local readyMap_size = sm:readInt16()
	for i = 1,readyMap_size do
		local kv = sm:readInt64();
		self.readyMap[kv] = sm:readInt8();
	end
	self.djLev = sm:readInt32();
	return self
end


function MsgDef.Msg5290203:opcode()
	return 5290203
end
--[[ 请求附件队伍列表--]]
MsgDef.Msg1300101 = {}

function MsgDef.Msg1300101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.targetId == nil then msg.targetId = 0 end --[[(int32) targetId--]]
	return msg
end

function MsgDef.Msg1300101:encode(sm)
	sm:writeInt32(self.targetId);
	return self
end

function MsgDef.Msg1300101:decode(sm)
	self.targetId = sm:readInt32();
	return self
end

function MsgDef.Msg1300101:opcode()
	return 1300101
end

--[[ 请求附件队伍列表(返回)--]]
MsgDef.Msg5300101 = {}
function MsgDef.Msg5300101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamInfos = {} --[[(array<TeamInfo>) 队伍信息列表--]]
	msg.targetId = 0 --[[(int32) targetId--]]
	return msg
end

function MsgDef.Msg5300101:encode(sm)
	sm:writeInt16(#self.teamInfos)
	for i,elm in ipairs(self.teamInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.targetId);
	return self
end

function MsgDef.Msg5300101:decode(sm)
	local teamInfos_size = sm:readInt16()
	for i = 1,teamInfos_size do
		local element = MsgDef.TeamInfo:create():decode(sm)
		table.insert(self.teamInfos, element)
	end
	self.targetId = sm:readInt32();
	return self
end


function MsgDef.Msg5300101:opcode()
	return 5300101
end
--[[ 请求我的队伍信息--]]
MsgDef.Msg1300102 = {}

function MsgDef.Msg1300102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1300102:encode(sm)
	return self
end

function MsgDef.Msg1300102:decode(sm)
	return self
end

function MsgDef.Msg1300102:opcode()
	return 1300102
end

--[[ 请求我的队伍信息(返回)--]]
MsgDef.Msg5300102 = {}
function MsgDef.Msg5300102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamMembers = {} --[[(array<TeamMemberInfo>) 队伍成员列表--]]
	msg.autoAgreeApply = 0 --[[(int8) 1表示自动同意申请--]]
	msg.targetId = 0 --[[(int32) 队伍目标id--]]
	msg.minLvl = 0 --[[(int32) 最低等级--]]
	msg.maxLvl = 0 --[[(int32) 最高等级--]]
	return msg
end

function MsgDef.Msg5300102:encode(sm)
	sm:writeInt16(#self.teamMembers)
	for i,elm in ipairs(self.teamMembers) do
		elm:encode(sm)
	end
	sm:writeInt8(self.autoAgreeApply);
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	return self
end

function MsgDef.Msg5300102:decode(sm)
	local teamMembers_size = sm:readInt16()
	for i = 1,teamMembers_size do
		local element = MsgDef.TeamMemberInfo:create():decode(sm)
		table.insert(self.teamMembers, element)
	end
	self.autoAgreeApply = sm:readInt8();
	self.targetId = sm:readInt32();
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	return self
end


function MsgDef.Msg5300102:opcode()
	return 5300102
end
--[[ 请求邀请玩家列表--]]
MsgDef.Msg1300103 = {}

function MsgDef.Msg1300103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:附近的玩家2:好友3:帮派--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数--]]
	return msg
end

function MsgDef.Msg1300103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1300103:decode(sm)
	self.reqType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1300103:opcode()
	return 1300103
end

--[[ 请求邀请玩家列表(返回)--]]
MsgDef.Msg5300103 = {}
function MsgDef.Msg5300103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.users = {} --[[(array<TeamMemberInfo>) 玩家列表--]]
	msg.reqType = 0 --[[(int8) 1:附近的玩家2:好友3:帮派--]]
	msg.totalSum = 0 --[[(int32) 总页数--]]
	msg.page = 0 --[[(int32) 从1开始--]]
	return msg
end

function MsgDef.Msg5300103:encode(sm)
	sm:writeInt16(#self.users)
	for i,elm in ipairs(self.users) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.totalSum);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg5300103:decode(sm)
	local users_size = sm:readInt16()
	for i = 1,users_size do
		local element = MsgDef.TeamMemberInfo:create():decode(sm)
		table.insert(self.users, element)
	end
	self.reqType = sm:readInt8();
	self.totalSum = sm:readInt32();
	self.page = sm:readInt32();
	return self
end


function MsgDef.Msg5300103:opcode()
	return 5300103
end
--[[ 请求创建队伍--]]
MsgDef.Msg1300104 = {}

function MsgDef.Msg1300104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.targetId == nil then msg.targetId = 0 end --[[(int32) 目标id--]]
	if msg.minLvl == nil then msg.minLvl = 0 end --[[(int32) 最低等级--]]
	if msg.maxLvl == nil then msg.maxLvl = 0 end --[[(int32) 最高等级--]]
	return msg
end

function MsgDef.Msg1300104:encode(sm)
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	return self
end

function MsgDef.Msg1300104:decode(sm)
	self.targetId = sm:readInt32();
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	return self
end

function MsgDef.Msg1300104:opcode()
	return 1300104
end

--[[ 请求创建队伍(返回)--]]
MsgDef.Msg5300104 = {}
function MsgDef.Msg5300104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.targetId = 0 --[[(int32) 目标id--]]
	msg.maxLvl = 0 --[[(int32) 最高等级--]]
	msg.minLvl = 0 --[[(int32) 最低等级--]]
	return msg
end

function MsgDef.Msg5300104:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.maxLvl);
	sm:writeInt32(self.minLvl);
	return self
end

function MsgDef.Msg5300104:decode(sm)
	self.teamId = sm:readInt32();
	self.targetId = sm:readInt32();
	self.maxLvl = sm:readInt32();
	self.minLvl = sm:readInt32();
	return self
end


function MsgDef.Msg5300104:opcode()
	return 5300104
end
--[[ 请求邀请玩家进入队伍--]]
MsgDef.Msg1300105 = {}

function MsgDef.Msg1300105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg1300105:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1300105:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1300105:opcode()
	return 1300105
end

--[[ 请求邀请玩家进入队伍(返回)--]]
MsgDef.Msg5300105 = {}
function MsgDef.Msg5300105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg5300105:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg5300105:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end


function MsgDef.Msg5300105:opcode()
	return 5300105
end
--[[ 请求应允邀请--]]
MsgDef.Msg1300106 = {}

function MsgDef.Msg1300106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标玩家id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1同意2拒绝--]]
	return msg
end

function MsgDef.Msg1300106:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1300106:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1300106:opcode()
	return 1300106
end

--[[ 请求应允邀请(返回)--]]
MsgDef.Msg5300106 = {}
function MsgDef.Msg5300106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标玩家id--]]
	msg.reqType = 0 --[[(int8) 1同意2拒绝--]]
	msg.teamType = 0 --[[(int8) 队伍类型--]]
	return msg
end

function MsgDef.Msg5300106:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.teamType);
	return self
end

function MsgDef.Msg5300106:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.teamType = sm:readInt8();
	return self
end


function MsgDef.Msg5300106:opcode()
	return 5300106
end
--[[ 请求退出队伍--]]
MsgDef.Msg1300107 = {}

function MsgDef.Msg1300107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1300107:encode(sm)
	return self
end

function MsgDef.Msg1300107:decode(sm)
	return self
end

function MsgDef.Msg1300107:opcode()
	return 1300107
end

--[[ 请求退出队伍(返回)--]]
MsgDef.Msg5300107 = {}
function MsgDef.Msg5300107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5300107:encode(sm)
	return self
end

function MsgDef.Msg5300107:decode(sm)
	return self
end


function MsgDef.Msg5300107:opcode()
	return 5300107
end
--[[ 请求剔出退伍--]]
MsgDef.Msg1300108 = {}

function MsgDef.Msg1300108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg1300108:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1300108:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1300108:opcode()
	return 1300108
end

--[[ 请求剔出退伍(返回)--]]
MsgDef.Msg5300108 = {}
function MsgDef.Msg5300108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg5300108:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg5300108:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end


function MsgDef.Msg5300108:opcode()
	return 5300108
end
--[[ 请求转让队长--]]
MsgDef.Msg1300109 = {}

function MsgDef.Msg1300109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg1300109:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1300109:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1300109:opcode()
	return 1300109
end

--[[ 请求转让队长(返回)--]]
MsgDef.Msg5300109 = {}
function MsgDef.Msg5300109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标玩家id--]]
	return msg
end

function MsgDef.Msg5300109:encode(sm)
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg5300109:decode(sm)
	self.tarRoleId = sm:readInt64();
	return self
end


function MsgDef.Msg5300109:opcode()
	return 5300109
end
--[[ 请求设置组队状态--]]
MsgDef.Msg1300110 = {}

function MsgDef.Msg1300110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:设置自动接受组队邀请,2:设置自动同意申请--]]
	return msg
end

function MsgDef.Msg1300110:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1300110:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1300110:opcode()
	return 1300110
end

--[[ 请求设置组队状态(返回)--]]
MsgDef.Msg5300110 = {}
function MsgDef.Msg5300110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:设置自动接受组队邀请,2:设置自动同意申请--]]
	msg.autoAcceptInvite = 0 --[[(int8) 1表示自动接受邀请--]]
	msg.autoAgreeApply = 0 --[[(int8) 1表示自动同意申请--]]
	return msg
end

function MsgDef.Msg5300110:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.autoAcceptInvite);
	sm:writeInt8(self.autoAgreeApply);
	return self
end

function MsgDef.Msg5300110:decode(sm)
	self.reqType = sm:readInt8();
	self.autoAcceptInvite = sm:readInt8();
	self.autoAgreeApply = sm:readInt8();
	return self
end


function MsgDef.Msg5300110:opcode()
	return 5300110
end
--[[  请求申请入队--]]
MsgDef.Msg1300111 = {}

function MsgDef.Msg1300111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍Id--]]
	return msg
end

function MsgDef.Msg1300111:encode(sm)
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg1300111:decode(sm)
	self.teamId = sm:readInt32();
	return self
end

function MsgDef.Msg1300111:opcode()
	return 1300111
end

--[[  请求申请入队(返回)--]]
MsgDef.Msg5300111 = {}
function MsgDef.Msg5300111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍Id--]]
	msg.teamType = 0 --[[(int8) 队伍类型--]]
	return msg
end

function MsgDef.Msg5300111:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.teamType);
	return self
end

function MsgDef.Msg5300111:decode(sm)
	self.teamId = sm:readInt32();
	self.teamType = sm:readInt8();
	return self
end


function MsgDef.Msg5300111:opcode()
	return 5300111
end
--[[ 请求同意申请入队--]]
MsgDef.Msg1300112 = {}

function MsgDef.Msg1300112:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) tarRoleId--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1同意2拒绝--]]
	return msg
end

function MsgDef.Msg1300112:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1300112:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1300112:opcode()
	return 1300112
end

--[[ 请求同意申请入队(返回)--]]
MsgDef.Msg5300112 = {}
function MsgDef.Msg5300112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) tarRoleId--]]
	msg.reqType = 0 --[[(int8) 1同意2拒绝--]]
	msg.teamType = 0 --[[(int8) 队伍类型--]]
	return msg
end

function MsgDef.Msg5300112:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.teamType);
	return self
end

function MsgDef.Msg5300112:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.teamType = sm:readInt8();
	return self
end


function MsgDef.Msg5300112:opcode()
	return 5300112
end
--[[ 请求快速加入队伍--]]
MsgDef.Msg1300113 = {}

function MsgDef.Msg1300113:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1300113:encode(sm)
	return self
end

function MsgDef.Msg1300113:decode(sm)
	return self
end

function MsgDef.Msg1300113:opcode()
	return 1300113
end

--[[ 请求快速加入队伍(返回)--]]
MsgDef.Msg5300113 = {}
function MsgDef.Msg5300113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5300113:encode(sm)
	return self
end

function MsgDef.Msg5300113:decode(sm)
	return self
end


function MsgDef.Msg5300113:opcode()
	return 5300113
end
--[[ 请求组队等级调整--]]
MsgDef.Msg1300114 = {}

function MsgDef.Msg1300114:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.minLvl == nil then msg.minLvl = 0 end --[[(int32) minLvl--]]
	if msg.maxLvl == nil then msg.maxLvl = 0 end --[[(int32) maxLvl--]]
	if msg.targetId == nil then msg.targetId = 0 end --[[(int32) 目标id--]]
	return msg
end

function MsgDef.Msg1300114:encode(sm)
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	sm:writeInt32(self.targetId);
	return self
end

function MsgDef.Msg1300114:decode(sm)
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	self.targetId = sm:readInt32();
	return self
end

function MsgDef.Msg1300114:opcode()
	return 1300114
end

--[[ 请求组队等级调整(返回)--]]
MsgDef.Msg5300114 = {}
function MsgDef.Msg5300114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.minLvl = 0 --[[(int32) minLvl--]]
	msg.maxLvl = 0 --[[(int32) maxLvl--]]
	msg.targetId = 0 --[[(int32) 目标id--]]
	return msg
end

function MsgDef.Msg5300114:encode(sm)
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	sm:writeInt32(self.targetId);
	return self
end

function MsgDef.Msg5300114:decode(sm)
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	self.targetId = sm:readInt32();
	return self
end


function MsgDef.Msg5300114:opcode()
	return 5300114
end
--[[ 请求竞技场信息--]]
MsgDef.Msg1310101 = {}

function MsgDef.Msg1310101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1310101:encode(sm)
	return self
end

function MsgDef.Msg1310101:decode(sm)
	return self
end

function MsgDef.Msg1310101:opcode()
	return 1310101
end

--[[ 请求竞技场信息(返回)--]]
MsgDef.Msg5310101 = {}
function MsgDef.Msg5310101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 我的排名--]]
	msg.leftChallengeCount = 0 --[[(int32) 剩余挑战次数--]]
	msg.leftColdTime = 0 --[[(int32) 剩余冷却时间--]]
	msg.arenaRoles = {} --[[(array<ArenaRoleInfo>) 竞技场对手--]]
	msg.awardSign = 0 --[[(int8) 1已领取过的--]]
	msg.coldToZero = 0 --[[(int8) 是否需要冷却到0,1表示是--]]
	msg.dayChallengeCountBuy = 0 --[[(int32) 今日挑战已购买次数--]]
	return msg
end

function MsgDef.Msg5310101:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.leftChallengeCount);
	sm:writeInt32(self.leftColdTime);
	sm:writeInt16(#self.arenaRoles)
	for i,elm in ipairs(self.arenaRoles) do
		elm:encode(sm)
	end
	sm:writeInt8(self.awardSign);
	sm:writeInt8(self.coldToZero);
	sm:writeInt32(self.dayChallengeCountBuy);
	return self
end

function MsgDef.Msg5310101:decode(sm)
	self.rank = sm:readInt32();
	self.leftChallengeCount = sm:readInt32();
	self.leftColdTime = sm:readInt32();
	local arenaRoles_size = sm:readInt16()
	for i = 1,arenaRoles_size do
		local element = MsgDef.ArenaRoleInfo:create():decode(sm)
		table.insert(self.arenaRoles, element)
	end
	self.awardSign = sm:readInt8();
	self.coldToZero = sm:readInt8();
	self.dayChallengeCountBuy = sm:readInt32();
	return self
end


function MsgDef.Msg5310101:opcode()
	return 5310101
end
--[[ 请求竞技场换一批--]]
MsgDef.Msg1310102 = {}

function MsgDef.Msg1310102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1310102:encode(sm)
	return self
end

function MsgDef.Msg1310102:decode(sm)
	return self
end

function MsgDef.Msg1310102:opcode()
	return 1310102
end

--[[ 请求竞技场换一批(返回)--]]
MsgDef.Msg5310102 = {}
function MsgDef.Msg5310102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.arenaRoles = {} --[[(array<ArenaRoleInfo>) 竞技场对手--]]
	return msg
end

function MsgDef.Msg5310102:encode(sm)
	sm:writeInt16(#self.arenaRoles)
	for i,elm in ipairs(self.arenaRoles) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5310102:decode(sm)
	local arenaRoles_size = sm:readInt16()
	for i = 1,arenaRoles_size do
		local element = MsgDef.ArenaRoleInfo:create():decode(sm)
		table.insert(self.arenaRoles, element)
	end
	return self
end


function MsgDef.Msg5310102:opcode()
	return 5310102
end
--[[ 请求竞技场排行榜--]]
MsgDef.Msg1310103 = {}

function MsgDef.Msg1310103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 从1开始--]]
	return msg
end

function MsgDef.Msg1310103:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1310103:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1310103:opcode()
	return 1310103
end

--[[ 请求竞技场排行榜(返回)--]]
MsgDef.Msg5310103 = {}
function MsgDef.Msg5310103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankings = {} --[[(array<ArenaRoleInfo>) 排行榜--]]
	msg.page = 0 --[[(int32) 从1开始--]]
	msg.maxPage = 0 --[[(int32) 最大页数--]]
	return msg
end

function MsgDef.Msg5310103:encode(sm)
	sm:writeInt16(#self.rankings)
	for i,elm in ipairs(self.rankings) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	return self
end

function MsgDef.Msg5310103:decode(sm)
	local rankings_size = sm:readInt16()
	for i = 1,rankings_size do
		local element = MsgDef.ArenaRoleInfo:create():decode(sm)
		table.insert(self.rankings, element)
	end
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	return self
end


function MsgDef.Msg5310103:opcode()
	return 5310103
end
--[[ 请求竞技场排名奖励领取--]]
MsgDef.Msg1310104 = {}

function MsgDef.Msg1310104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1310104:encode(sm)
	return self
end

function MsgDef.Msg1310104:decode(sm)
	return self
end

function MsgDef.Msg1310104:opcode()
	return 1310104
end

--[[ 请求竞技场排名奖励领取(返回)--]]
MsgDef.Msg5310104 = {}
function MsgDef.Msg5310104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.awardSign = 0 --[[(int8) 领取标识,1已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5310104:encode(sm)
	sm:writeInt8(self.awardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5310104:decode(sm)
	self.awardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5310104:opcode()
	return 5310104
end
--[[ 请求竞技场挑战--]]
MsgDef.Msg1310105 = {}

function MsgDef.Msg1310105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.Msg1310105:encode(sm)
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.Msg1310105:decode(sm)
	self.rank = sm:readInt32();
	return self
end

function MsgDef.Msg1310105:opcode()
	return 1310105
end

--[[ 请求竞技场挑战(返回)--]]
MsgDef.Msg5310105 = {}
function MsgDef.Msg5310105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 排名--]]
	return msg
end

function MsgDef.Msg5310105:encode(sm)
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.Msg5310105:decode(sm)
	self.rank = sm:readInt32();
	return self
end


function MsgDef.Msg5310105:opcode()
	return 5310105
end
--[[ 请求竞技场扫荡--]]
MsgDef.Msg1310106 = {}

function MsgDef.Msg1310106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) rank--]]
	if msg.count == nil then msg.count = 0 end --[[(int32) 扫荡次数--]]
	return msg
end

function MsgDef.Msg1310106:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1310106:decode(sm)
	self.rank = sm:readInt32();
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1310106:opcode()
	return 1310106
end

--[[ 请求竞技场扫荡(返回)--]]
MsgDef.Msg5310106 = {}
function MsgDef.Msg5310106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) rank--]]
	msg.count = 0 --[[(int32) 扫荡次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 扫荡奖励--]]
	return msg
end

function MsgDef.Msg5310106:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.count);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5310106:decode(sm)
	self.rank = sm:readInt32();
	self.count = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5310106:opcode()
	return 5310106
end
--[[ 请求竞技场跳过战斗--]]
MsgDef.Msg1310107 = {}

function MsgDef.Msg1310107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1310107:encode(sm)
	return self
end

function MsgDef.Msg1310107:decode(sm)
	return self
end

function MsgDef.Msg1310107:opcode()
	return 1310107
end

--[[ 请求竞技场跳过战斗(返回)--]]
MsgDef.Msg5310107 = {}
function MsgDef.Msg5310107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5310107:encode(sm)
	return self
end

function MsgDef.Msg5310107:decode(sm)
	return self
end


function MsgDef.Msg5310107:opcode()
	return 5310107
end
--[[ 请求购买挑战次数--]]
MsgDef.Msg1310201 = {}

function MsgDef.Msg1310201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.buyCount == nil then msg.buyCount = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1310201:encode(sm)
	sm:writeInt32(self.buyCount);
	return self
end

function MsgDef.Msg1310201:decode(sm)
	self.buyCount = sm:readInt32();
	return self
end

function MsgDef.Msg1310201:opcode()
	return 1310201
end

--[[ 请求购买挑战次数(返回)--]]
MsgDef.Msg5310201 = {}
function MsgDef.Msg5310201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftChallengeCount = 0 --[[(int32) 剩余挑战次数--]]
	msg.buyCount = 0 --[[(int32) 购买次数--]]
	msg.dayChallengeCountBuy = 0 --[[(int32) 今日挑战已购买次数--]]
	return msg
end

function MsgDef.Msg5310201:encode(sm)
	sm:writeInt32(self.leftChallengeCount);
	sm:writeInt32(self.buyCount);
	sm:writeInt32(self.dayChallengeCountBuy);
	return self
end

function MsgDef.Msg5310201:decode(sm)
	self.leftChallengeCount = sm:readInt32();
	self.buyCount = sm:readInt32();
	self.dayChallengeCountBuy = sm:readInt32();
	return self
end


function MsgDef.Msg5310201:opcode()
	return 5310201
end
--[[ 请求竞技场清除挑战时间--]]
MsgDef.Msg1310202 = {}

function MsgDef.Msg1310202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1310202:encode(sm)
	return self
end

function MsgDef.Msg1310202:decode(sm)
	return self
end

function MsgDef.Msg1310202:opcode()
	return 1310202
end

--[[ 请求竞技场清除挑战时间(返回)--]]
MsgDef.Msg5310202 = {}
function MsgDef.Msg5310202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5310202:encode(sm)
	return self
end

function MsgDef.Msg5310202:decode(sm)
	return self
end


function MsgDef.Msg5310202:opcode()
	return 5310202
end
--[[ 请求旺财信息--]]
MsgDef.Msg1320101 = {}

function MsgDef.Msg1320101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1320101:encode(sm)
	return self
end

function MsgDef.Msg1320101:decode(sm)
	return self
end

function MsgDef.Msg1320101:opcode()
	return 1320101
end

--[[ 请求旺财信息(返回)--]]
MsgDef.Msg5320101 = {}
function MsgDef.Msg5320101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastUpdateTime = 0 --[[(int32) 上次获取收益时间--]]
	msg.tqCount = 0 --[[(int32) 铜钱数量--]]
	msg.ybCount = 0 --[[(int32) 元宝数量--]]
	msg.isFirstCz = 0 --[[(int8) 1:已经首充过--]]
	msg.exp = 0 --[[(int32) 旺财当前经验--]]
	msg.level = 0 --[[(int32) 旺财当前等级--]]
	msg.lastByUpdateTime = 0 --[[(int32) 上次绑元获取收益时间--]]
	msg.zcCount = 0 --[[(int32) 当前已招财次数--]]
	return msg
end

function MsgDef.Msg5320101:encode(sm)
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt32(self.tqCount);
	sm:writeInt32(self.ybCount);
	sm:writeInt8(self.isFirstCz);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.level);
	sm:writeInt32(self.lastByUpdateTime);
	sm:writeInt32(self.zcCount);
	return self
end

function MsgDef.Msg5320101:decode(sm)
	self.lastUpdateTime = sm:readInt32();
	self.tqCount = sm:readInt32();
	self.ybCount = sm:readInt32();
	self.isFirstCz = sm:readInt8();
	self.exp = sm:readInt32();
	self.level = sm:readInt32();
	self.lastByUpdateTime = sm:readInt32();
	self.zcCount = sm:readInt32();
	return self
end


function MsgDef.Msg5320101:opcode()
	return 5320101
end
--[[ 请求领取收益--]]
MsgDef.Msg1320102 = {}

function MsgDef.Msg1320102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:领取收益 1:疯狂招财--]]
	if msg.zcTimes == nil then msg.zcTimes = 0 end --[[(int32) 疯狂招财次数--]]
	return msg
end

function MsgDef.Msg1320102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.zcTimes);
	return self
end

function MsgDef.Msg1320102:decode(sm)
	self.reqType = sm:readInt8();
	self.zcTimes = sm:readInt32();
	return self
end

function MsgDef.Msg1320102:opcode()
	return 1320102
end

--[[ 请求领取收益(返回)--]]
MsgDef.Msg5320102 = {}
function MsgDef.Msg5320102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 收益--]]
	return msg
end

function MsgDef.Msg5320102:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5320102:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5320102:opcode()
	return 5320102
end
--[[ 请求旺财进阶--]]
MsgDef.Msg1320103 = {}

function MsgDef.Msg1320103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1320103:encode(sm)
	return self
end

function MsgDef.Msg1320103:decode(sm)
	return self
end

function MsgDef.Msg1320103:opcode()
	return 1320103
end

--[[ 请求旺财进阶(返回)--]]
MsgDef.Msg5320103 = {}
function MsgDef.Msg5320103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curLevel = 0 --[[(int32) 当前等级--]]
	msg.curExp = 0 --[[(int32) 当前经验值--]]
	return msg
end

function MsgDef.Msg5320103:encode(sm)
	sm:writeInt32(self.curLevel);
	sm:writeInt32(self.curExp);
	return self
end

function MsgDef.Msg5320103:decode(sm)
	self.curLevel = sm:readInt32();
	self.curExp = sm:readInt32();
	return self
end


function MsgDef.Msg5320103:opcode()
	return 5320103
end
--[[ 请求精英boss信息--]]
MsgDef.Msg1330101 = {}

function MsgDef.Msg1330101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330101:encode(sm)
	return self
end

function MsgDef.Msg1330101:decode(sm)
	return self
end

function MsgDef.Msg1330101:opcode()
	return 1330101
end

--[[ 请求精英boss信息(返回)--]]
MsgDef.Msg5330101 = {}
function MsgDef.Msg5330101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息列表--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 弹窗设置 key-sceneId,value-1勾选,0不勾选--]]
	return msg
end

function MsgDef.Msg5330101:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330101:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	self.leftTired = sm:readInt32();
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330101:opcode()
	return 5330101
end
--[[ 请求精英boss场景信息--]]
MsgDef.Msg1330102 = {}

function MsgDef.Msg1330102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330102:encode(sm)
	return self
end

function MsgDef.Msg1330102:decode(sm)
	return self
end

function MsgDef.Msg1330102:opcode()
	return 1330102
end

--[[ 请求精英boss场景信息(返回)--]]
MsgDef.Msg5330102 = {}
function MsgDef.Msg5330102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) 剩余挑战时间--]]
	msg.curHpPercent = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.myHurtMod = 0 --[[(int16) 我的伤害的万分制余数--]]
	msg.myHurtMul = 0 --[[(int32) 我的伤害的万分制倍数--]]
	msg.rankList = {} --[[(array<BossRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5330102:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt32(self.curHpPercent);
	sm:writeInt16(self.myHurtMod);
	sm:writeInt32(self.myHurtMul);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5330102:decode(sm)
	self.leftPlayTime = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	self.myHurtMod = sm:readInt16();
	self.myHurtMul = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.BossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5330102:opcode()
	return 5330102
end
--[[ 请求精英boss次数购买--]]
MsgDef.Msg1330103 = {}

function MsgDef.Msg1330103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 购买次数--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1330103:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1330103:decode(sm)
	self.count = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1330103:opcode()
	return 1330103
end

--[[ 请求精英boss次数购买(返回)--]]
MsgDef.Msg5330103 = {}
function MsgDef.Msg5330103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 购买次数--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.leftBuyCount = 0 --[[(int32) leftBuyCount--]]
	return msg
end

function MsgDef.Msg5330103:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.leftBuyCount);
	return self
end

function MsgDef.Msg5330103:decode(sm)
	self.count = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.leftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5330103:opcode()
	return 5330103
end
--[[ 请求精英boss弹窗提示设置--]]
MsgDef.Msg1330104 = {}

function MsgDef.Msg1330104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330104:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330104:decode(sm)
	self.sceneId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330104:opcode()
	return 1330104
end

--[[ 请求精英boss弹窗提示设置(返回)--]]
MsgDef.Msg5330104 = {}
function MsgDef.Msg5330104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) --]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330104:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330104:decode(sm)
	self.sceneId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330104:opcode()
	return 5330104
end
--[[ 请求世界boss信息--]]
MsgDef.Msg1330201 = {}

function MsgDef.Msg1330201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330201:encode(sm)
	return self
end

function MsgDef.Msg1330201:decode(sm)
	return self
end

function MsgDef.Msg1330201:opcode()
	return 1330201
end

--[[ 请求世界boss信息(返回)--]]
MsgDef.Msg5330201 = {}
function MsgDef.Msg5330201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.leftTired = 0 --[[(int32) leftTired--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) tipConfMap--]]
	msg.dayBuyCount = 0 --[[(int32) 今日购买次数--]]
	return msg
end

function MsgDef.Msg5330201:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.dayBuyCount);
	return self
end

function MsgDef.Msg5330201:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	self.leftTired = sm:readInt32();
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	self.dayBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5330201:opcode()
	return 5330201
end
--[[ 请求世界boss场景信息--]]
MsgDef.Msg1330202 = {}

function MsgDef.Msg1330202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330202:encode(sm)
	return self
end

function MsgDef.Msg1330202:decode(sm)
	return self
end

function MsgDef.Msg1330202:opcode()
	return 1330202
end

--[[ 请求世界boss场景信息(返回)--]]
MsgDef.Msg5330202 = {}
function MsgDef.Msg5330202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.bossList = {} --[[(array<WorldBossInfo>) boss列表--]]
	msg.first = 0 --[[(int8) 1:第一次弹窗 0:不是第一次--]]
	return msg
end

function MsgDef.Msg5330202:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt8(self.first);
	return self
end

function MsgDef.Msg5330202:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.WorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.first = sm:readInt8();
	return self
end


function MsgDef.Msg5330202:opcode()
	return 5330202
end
--[[ 请求世界boss关注--]]
MsgDef.Msg1330203 = {}

function MsgDef.Msg1330203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330203:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330203:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330203:opcode()
	return 1330203
end

--[[ 请求世界boss关注(返回)--]]
MsgDef.Msg5330203 = {}
function MsgDef.Msg5330203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330203:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330203:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330203:opcode()
	return 5330203
end
--[[ 请求世界BOSS帮派招募--]]
MsgDef.Msg1330204 = {}

function MsgDef.Msg1330204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330204:encode(sm)
	return self
end

function MsgDef.Msg1330204:decode(sm)
	return self
end

function MsgDef.Msg1330204:opcode()
	return 1330204
end

--[[ 请求世界BOSS帮派招募(返回)--]]
MsgDef.Msg5330204 = {}
function MsgDef.Msg5330204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.content = "" --[[(string) 跨服返回使用--]]
	return msg
end

function MsgDef.Msg5330204:encode(sm)
	sm:writeString(self.content);
	return self
end

function MsgDef.Msg5330204:decode(sm)
	self.content = sm:readString();
	return self
end


function MsgDef.Msg5330204:opcode()
	return 5330204
end
--[[ 请求跨服精英boss信息--]]
MsgDef.Msg1330301 = {}

function MsgDef.Msg1330301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330301:encode(sm)
	return self
end

function MsgDef.Msg1330301:decode(sm)
	return self
end

function MsgDef.Msg1330301:opcode()
	return 1330301
end

--[[ 请求跨服精英boss信息(返回)--]]
MsgDef.Msg5330301 = {}
function MsgDef.Msg5330301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息列表--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) tipConfMap--]]
	return msg
end

function MsgDef.Msg5330301:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330301:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	self.leftTired = sm:readInt32();
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330301:opcode()
	return 5330301
end
--[[ 请求跨服精英boss场景信息--]]
MsgDef.Msg1330302 = {}

function MsgDef.Msg1330302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330302:encode(sm)
	return self
end

function MsgDef.Msg1330302:decode(sm)
	return self
end

function MsgDef.Msg1330302:opcode()
	return 1330302
end

--[[ 请求跨服精英boss场景信息(返回)--]]
MsgDef.Msg5330302 = {}
function MsgDef.Msg5330302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) 剩余挑战时间--]]
	msg.curHpPercent = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.myHurtMul = 0 --[[(int32) 我的伤害的万分制倍数--]]
	msg.rankList = {} --[[(array<BossRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5330302:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt32(self.curHpPercent);
	sm:writeInt32(self.myHurtMul);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5330302:decode(sm)
	self.leftPlayTime = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	self.myHurtMul = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.BossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5330302:opcode()
	return 5330302
end
--[[ 请求跨服精英boss弹窗提示设置--]]
MsgDef.Msg1330303 = {}

function MsgDef.Msg1330303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330303:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330303:decode(sm)
	self.sceneId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330303:opcode()
	return 1330303
end

--[[ 请求跨服精英boss弹窗提示设置(返回)--]]
MsgDef.Msg5330303 = {}
function MsgDef.Msg5330303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	msg.sceneId = 0 --[[(int32) sceneId--]]
	return msg
end

function MsgDef.Msg5330303:encode(sm)
	sm:writeInt8(self.optionVal);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5330303:decode(sm)
	self.optionVal = sm:readInt8();
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5330303:opcode()
	return 5330303
end
--[[ 请求世界Boss抽奖--]]
MsgDef.Msg1330304 = {}

function MsgDef.Msg1330304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息1=抽奖--]]
	if msg.stage == nil then msg.stage = 0 end --[[(int32) 阶段1=50%血,2=100%血--]]
	return msg
end

function MsgDef.Msg1330304:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	return self
end

function MsgDef.Msg1330304:decode(sm)
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	return self
end

function MsgDef.Msg1330304:opcode()
	return 1330304
end

--[[ 请求世界Boss抽奖(返回)--]]
MsgDef.Msg5330304 = {}
function MsgDef.Msg5330304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.index = 0 --[[(int32) 抽到的道具下标--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	msg.leftCounts = {} --[[(map<int32,int32>) 剩余次数--]]
	msg.reqType = 0 --[[(int8) 0=信息1=抽奖--]]
	msg.stage = 0 --[[(int32) --]]
	msg.sceneId = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5330304:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.leftCounts))
	for kn,elm in ipairs(self.leftCounts) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5330304:decode(sm)
	self.index = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local leftCounts_size = sm:readInt16()
	for i = 1,leftCounts_size do
		local kv = sm:readInt32();
		self.leftCounts[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5330304:opcode()
	return 5330304
end
--[[ 请求仙域禁地boss信息--]]
MsgDef.Msg1330401 = {}

function MsgDef.Msg1330401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330401:encode(sm)
	return self
end

function MsgDef.Msg1330401:decode(sm)
	return self
end

function MsgDef.Msg1330401:opcode()
	return 1330401
end

--[[ 请求仙域禁地boss信息(返回)--]]
MsgDef.Msg5330401 = {}
function MsgDef.Msg5330401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.bossInfos = {} --[[(array<BossInfo>) 剩余次数--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 关注map--]]
	return msg
end

function MsgDef.Msg5330401:encode(sm)
	sm:writeInt32(self.leftCount);
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330401:decode(sm)
	self.leftCount = sm:readInt32();
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330401:opcode()
	return 5330401
end
--[[ 请求仙域禁地BOSS关注--]]
MsgDef.Msg1330402 = {}

function MsgDef.Msg1330402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330402:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330402:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330402:opcode()
	return 1330402
end

--[[ 请求仙域禁地BOSS关注(返回)--]]
MsgDef.Msg5330402 = {}
function MsgDef.Msg5330402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330402:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330402:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330402:opcode()
	return 5330402
end
--[[ 请求仙域禁地场景信息--]]
MsgDef.Msg1330403 = {}

function MsgDef.Msg1330403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330403:encode(sm)
	return self
end

function MsgDef.Msg1330403:decode(sm)
	return self
end

function MsgDef.Msg1330403:opcode()
	return 1330403
end

--[[ 请求仙域禁地场景信息(返回)--]]
MsgDef.Msg5330403 = {}
function MsgDef.Msg5330403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<XyjdBossInfo>) boss列表--]]
	msg.anger = 0 --[[(int32) 怒气值--]]
	return msg
end

function MsgDef.Msg5330403:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.anger);
	return self
end

function MsgDef.Msg5330403:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.XyjdBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.anger = sm:readInt32();
	return self
end


function MsgDef.Msg5330403:opcode()
	return 5330403
end
--[[ 请求Boss掉落记录--]]
MsgDef.Msg1330404 = {}

function MsgDef.Msg1330404:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330404:encode(sm)
	return self
end

function MsgDef.Msg1330404:decode(sm)
	return self
end

function MsgDef.Msg1330404:opcode()
	return 1330404
end

--[[ 请求Boss掉落记录(返回)--]]
MsgDef.Msg5330404 = {}
function MsgDef.Msg5330404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.records = {} --[[(array<string>) 记录--]]
	return msg
end

function MsgDef.Msg5330404:encode(sm)
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5330404:decode(sm)
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	return self
end


function MsgDef.Msg5330404:opcode()
	return 5330404
end
--[[ 请求宠物岛信息--]]
MsgDef.Msg1330501 = {}

function MsgDef.Msg1330501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330501:encode(sm)
	return self
end

function MsgDef.Msg1330501:decode(sm)
	return self
end

function MsgDef.Msg1330501:opcode()
	return 1330501
end

--[[ 请求宠物岛信息(返回)--]]
MsgDef.Msg5330501 = {}
function MsgDef.Msg5330501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.leftTired = 0 --[[(int32) leftTired--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) tipConfMap--]]
	msg.dayBuyCount = 0 --[[(int32) 每日购买次数--]]
	return msg
end

function MsgDef.Msg5330501:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.dayBuyCount);
	return self
end

function MsgDef.Msg5330501:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	self.leftTired = sm:readInt32();
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	self.dayBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5330501:opcode()
	return 5330501
end
--[[ 请求跨服世界BOSS场景信息--]]
MsgDef.Msg1330502 = {}

function MsgDef.Msg1330502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330502:encode(sm)
	return self
end

function MsgDef.Msg1330502:decode(sm)
	return self
end

function MsgDef.Msg1330502:opcode()
	return 1330502
end

--[[ 请求跨服世界BOSS场景信息(返回)--]]
MsgDef.Msg5330502 = {}
function MsgDef.Msg5330502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<CrossWorldBossInfo>) bossList--]]
	return msg
end

function MsgDef.Msg5330502:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5330502:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.CrossWorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end


function MsgDef.Msg5330502:opcode()
	return 5330502
end
--[[ 请求跨服世界Boss关注--]]
MsgDef.Msg1330503 = {}

function MsgDef.Msg1330503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330503:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330503:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330503:opcode()
	return 1330503
end

--[[ 请求跨服世界Boss关注(返回)--]]
MsgDef.Msg5330503 = {}
function MsgDef.Msg5330503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330503:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330503:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330503:opcode()
	return 5330503
end
--[[ 请求跨服仙域禁地boss信息--]]
MsgDef.Msg1330601 = {}

function MsgDef.Msg1330601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330601:encode(sm)
	return self
end

function MsgDef.Msg1330601:decode(sm)
	return self
end

function MsgDef.Msg1330601:opcode()
	return 1330601
end

--[[ 请求跨服仙域禁地boss信息(返回)--]]
MsgDef.Msg5330601 = {}
function MsgDef.Msg5330601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftCount = 0 --[[(int32) --]]
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) boss信息--]]
	return msg
end

function MsgDef.Msg5330601:encode(sm)
	sm:writeInt32(self.leftCount);
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330601:decode(sm)
	self.leftCount = sm:readInt32();
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330601:opcode()
	return 5330601
end
--[[ 请求跨服仙域禁地BOSS关注--]]
MsgDef.Msg1330602 = {}

function MsgDef.Msg1330602:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330602:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330602:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330602:opcode()
	return 1330602
end

--[[ 请求跨服仙域禁地BOSS关注(返回)--]]
MsgDef.Msg5330602 = {}
function MsgDef.Msg5330602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330602:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330602:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330602:opcode()
	return 5330602
end
--[[ 请求跨服仙域禁地场景信息--]]
MsgDef.Msg1330603 = {}

function MsgDef.Msg1330603:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330603:encode(sm)
	return self
end

function MsgDef.Msg1330603:decode(sm)
	return self
end

function MsgDef.Msg1330603:opcode()
	return 1330603
end

--[[ 请求跨服仙域禁地场景信息(返回)--]]
MsgDef.Msg5330603 = {}
function MsgDef.Msg5330603:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) --]]
	msg.bossList = {} --[[(array<XyjdBossInfo>) boss列表--]]
	msg.anger = 0 --[[(int32) 怒气值--]]
	return msg
end

function MsgDef.Msg5330603:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.anger);
	return self
end

function MsgDef.Msg5330603:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.XyjdBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.anger = sm:readInt32();
	return self
end


function MsgDef.Msg5330603:opcode()
	return 5330603
end
--[[ 请求使用BOSS刷新卡--]]
MsgDef.Msg1330701 = {}

function MsgDef.Msg1330701:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:使用--]]
	if msg.packIndex == nil then msg.packIndex = 0 end --[[(int32) 背包下标--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	return msg
end

function MsgDef.Msg1330701:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.packIndex);
	sm:writeInt32(self.monsterId);
	return self
end

function MsgDef.Msg1330701:decode(sm)
	self.reqType = sm:readInt8();
	self.packIndex = sm:readInt32();
	self.monsterId = sm:readInt32();
	return self
end

function MsgDef.Msg1330701:opcode()
	return 1330701
end

--[[ 请求使用BOSS刷新卡(返回)--]]
MsgDef.Msg5330701 = {}
function MsgDef.Msg5330701:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5330701:encode(sm)
	return self
end

function MsgDef.Msg5330701:decode(sm)
	return self
end


function MsgDef.Msg5330701:opcode()
	return 5330701
end
--[[ 请求击杀记录--]]
MsgDef.Msg1330702 = {}

function MsgDef.Msg1330702:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数1:开始--]]
	return msg
end

function MsgDef.Msg1330702:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1330702:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1330702:opcode()
	return 1330702
end

--[[ 请求击杀记录(返回)--]]
MsgDef.Msg5330702 = {}
function MsgDef.Msg5330702:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页数1:开始--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.killList = {} --[[(array<KillRecordInfo>) 击杀记录列表--]]
	return msg
end

function MsgDef.Msg5330702:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt16(#self.killList)
	for i,elm in ipairs(self.killList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5330702:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	local killList_size = sm:readInt16()
	for i = 1,killList_size do
		local element = MsgDef.KillRecordInfo:create():decode(sm)
		table.insert(self.killList, element)
	end
	return self
end


function MsgDef.Msg5330702:opcode()
	return 5330702
end
--[[ 请求皇陵之战信息--]]
MsgDef.Msg1340101 = {}

function MsgDef.Msg1340101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1340101:encode(sm)
	return self
end

function MsgDef.Msg1340101:decode(sm)
	return self
end

function MsgDef.Msg1340101:opcode()
	return 1340101
end

--[[ 请求皇陵之战信息(返回)--]]
MsgDef.Msg5340101 = {}
function MsgDef.Msg5340101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.open = 0 --[[(int8) 1:已开启,否则关闭--]]
	return msg
end

function MsgDef.Msg5340101:encode(sm)
	sm:writeInt8(self.open);
	return self
end

function MsgDef.Msg5340101:decode(sm)
	self.open = sm:readInt8();
	return self
end


function MsgDef.Msg5340101:opcode()
	return 5340101
end
--[[ 请求皇陵之战场景信息--]]
MsgDef.Msg1340102 = {}

function MsgDef.Msg1340102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1340102:encode(sm)
	return self
end

function MsgDef.Msg1340102:decode(sm)
	return self
end

function MsgDef.Msg1340102:opcode()
	return 1340102
end

--[[ 请求皇陵之战场景信息(返回)--]]
MsgDef.Msg5340102 = {}
function MsgDef.Msg5340102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskList = {} --[[(array<HuangLingTaskInfo>) 任务信息--]]
	msg.bossList = {} --[[(array<HuangLingBossInfo>) boss列表--]]
	msg.nextBossRefreshTime = 0 --[[(int32) 下一次boss刷新时间--]]
	msg.refreshBossNum = 0 --[[(int32) 已经刷新boss的数量--]]
	return msg
end

function MsgDef.Msg5340102:encode(sm)
	sm:writeInt16(#self.taskList)
	for i,elm in ipairs(self.taskList) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.nextBossRefreshTime);
	sm:writeInt32(self.refreshBossNum);
	return self
end

function MsgDef.Msg5340102:decode(sm)
	local taskList_size = sm:readInt16()
	for i = 1,taskList_size do
		local element = MsgDef.HuangLingTaskInfo:create():decode(sm)
		table.insert(self.taskList, element)
	end
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.HuangLingBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.nextBossRefreshTime = sm:readInt32();
	self.refreshBossNum = sm:readInt32();
	return self
end


function MsgDef.Msg5340102:opcode()
	return 5340102
end
--[[ 请求问鼎之战信息--]]
MsgDef.Msg1350101 = {}

function MsgDef.Msg1350101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1350101:encode(sm)
	return self
end

function MsgDef.Msg1350101:decode(sm)
	return self
end

function MsgDef.Msg1350101:opcode()
	return 1350101
end

--[[ 请求问鼎之战信息(返回)--]]
MsgDef.Msg5350101 = {}
function MsgDef.Msg5350101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.feats = 0 --[[(int32) 爬塔积分--]]
	msg.lastSceneId = 0 --[[(int32) 上次场景id--]]
	return msg
end

function MsgDef.Msg5350101:encode(sm)
	sm:writeInt32(self.feats);
	sm:writeInt32(self.lastSceneId);
	return self
end

function MsgDef.Msg5350101:decode(sm)
	self.feats = sm:readInt32();
	self.lastSceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5350101:opcode()
	return 5350101
end
--[[ 请求战场日志--]]
MsgDef.Msg1350102 = {}

function MsgDef.Msg1350102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页--]]
	return msg
end

function MsgDef.Msg1350102:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1350102:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1350102:opcode()
	return 1350102
end

--[[ 请求战场日志(返回)--]]
MsgDef.Msg5350102 = {}
function MsgDef.Msg5350102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页--]]
	msg.sumPage = 0 --[[(int32) 总页--]]
	msg.wenDingLogs = {} --[[(array<WenDingLogs>) 日志--]]
	return msg
end

function MsgDef.Msg5350102:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.sumPage);
	sm:writeInt16(#self.wenDingLogs)
	for i,elm in ipairs(self.wenDingLogs) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5350102:decode(sm)
	self.page = sm:readInt32();
	self.sumPage = sm:readInt32();
	local wenDingLogs_size = sm:readInt16()
	for i = 1,wenDingLogs_size do
		local element = MsgDef.WenDingLogs:create():decode(sm)
		table.insert(self.wenDingLogs, element)
	end
	return self
end


function MsgDef.Msg5350102:opcode()
	return 5350102
end
--[[ 请求条件信息--]]
MsgDef.Msg1350103 = {}

function MsgDef.Msg1350103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1350103:encode(sm)
	return self
end

function MsgDef.Msg1350103:decode(sm)
	return self
end

function MsgDef.Msg1350103:opcode()
	return 1350103
end

--[[ 请求条件信息(返回)--]]
MsgDef.Msg5350103 = {}
function MsgDef.Msg5350103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.conds = {} --[[(map<int32,int32>) 条件 层->击杀数--]]
	msg.holdFlagRoleId = 0 --[[(int64) 持战旗roleId--]]
	msg.isGotAwards = 0 --[[(int8) 是否领取奖励 1:已领取--]]
	msg.leftTime = 0 --[[(int32) 守旗倒计时--]]
	msg.holeName = "" --[[(string) 持有者名--]]
	msg.top20AvgLev = 0 --[[(int32) --]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	return msg
end

function MsgDef.Msg5350103:encode(sm)
	sm:writeInt16(get_map_size(self.conds))
	for kn,elm in ipairs(self.conds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt64(self.holdFlagRoleId);
	sm:writeInt8(self.isGotAwards);
	sm:writeInt32(self.leftTime);
	sm:writeString(self.holeName);
	sm:writeInt32(self.top20AvgLev);
	sm:writeInt32(self.myScore);
	return self
end

function MsgDef.Msg5350103:decode(sm)
	local conds_size = sm:readInt16()
	for i = 1,conds_size do
		local kv = sm:readInt32();
		self.conds[kv] = sm:readInt32();
	end
	self.holdFlagRoleId = sm:readInt64();
	self.isGotAwards = sm:readInt8();
	self.leftTime = sm:readInt32();
	self.holeName = sm:readString();
	self.top20AvgLev = sm:readInt32();
	self.myScore = sm:readInt32();
	return self
end


function MsgDef.Msg5350103:opcode()
	return 5350103
end
--[[ 请求排行信息--]]
MsgDef.Msg1350104 = {}

function MsgDef.Msg1350104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:个人积分 2:战旗信息  3:排行榜 4:前往抢夺--]]
	return msg
end

function MsgDef.Msg1350104:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1350104:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1350104:opcode()
	return 1350104
end

--[[ 请求排行信息(返回)--]]
MsgDef.Msg5350104 = {}
function MsgDef.Msg5350104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankInfos = {} --[[(array<WenDingLogs>) 排行信息--]]
	msg.myRank = MsgDef.WenDingLogs:create() --[[(WenDingLogs) 自己的排行信息--]]
	msg.score = 0 --[[(int32) 个人积分--]]
	msg.flagGotName = "" --[[(string) 战旗持有者名字--]]
	msg.flagGotTime = 0 --[[(int32) 战旗夺取时间--]]
	msg.reqType = 0 --[[(int8) 1:个人积分 2:战旗信息  3:排行榜  4:前往抢夺--]]
	msg.pox = 0 --[[(int16) 持战旗玩家坐标--]]
	msg.poy = 0 --[[(int16) 持战旗玩家坐标--]]
	return msg
end

function MsgDef.Msg5350104:encode(sm)
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	self.myRank:encode(sm)
	sm:writeInt32(self.score);
	sm:writeString(self.flagGotName);
	sm:writeInt32(self.flagGotTime);
	sm:writeInt8(self.reqType);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	return self
end

function MsgDef.Msg5350104:decode(sm)
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.WenDingLogs:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.myRank:decode(sm)
	self.score = sm:readInt32();
	self.flagGotName = sm:readString();
	self.flagGotTime = sm:readInt32();
	self.reqType = sm:readInt8();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	return self
end


function MsgDef.Msg5350104:opcode()
	return 5350104
end
--[[ 请求场景玩家位置--]]
MsgDef.Msg1350105 = {}

function MsgDef.Msg1350105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景--]]
	return msg
end

function MsgDef.Msg1350105:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1350105:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1350105:opcode()
	return 1350105
end

--[[ 请求场景玩家位置(返回)--]]
MsgDef.Msg5350105 = {}
function MsgDef.Msg5350105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景--]]
	msg.pos = MsgDef.Position:create() --[[(Position) 场景内某个玩家位置--]]
	return msg
end

function MsgDef.Msg5350105:encode(sm)
	sm:writeInt32(self.sceneId);
	self.pos:encode(sm)
	return self
end

function MsgDef.Msg5350105:decode(sm)
	self.sceneId = sm:readInt32();
	self.pos:decode(sm)
	return self
end


function MsgDef.Msg5350105:opcode()
	return 5350105
end
--[[ 请求仙盟战信息--]]
MsgDef.Msg1360101 = {}

function MsgDef.Msg1360101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360101:encode(sm)
	return self
end

function MsgDef.Msg1360101:decode(sm)
	return self
end

function MsgDef.Msg1360101:opcode()
	return 1360101
end

--[[ 请求仙盟战信息(返回)--]]
MsgDef.Msg5360101 = {}
function MsgDef.Msg5360101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastGangName = "" --[[(string) 上一次胜利帮派名字--]]
	msg.lastGangLeaderName = "" --[[(string) 上一次胜利帮主名字--]]
	msg.assignWarZone = 0 --[[(int32) 我的仙盟战区--]]
	msg.startLeftTime = 0 --[[(int32) 开始倒计时--]]
	msg.showRoles = {} --[[(array<XianMengWarShowUserInfo>) 展示用户--]]
	return msg
end

function MsgDef.Msg5360101:encode(sm)
	sm:writeString(self.lastGangName);
	sm:writeString(self.lastGangLeaderName);
	sm:writeInt32(self.assignWarZone);
	sm:writeInt32(self.startLeftTime);
	sm:writeInt16(#self.showRoles)
	for i,elm in ipairs(self.showRoles) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5360101:decode(sm)
	self.lastGangName = sm:readString();
	self.lastGangLeaderName = sm:readString();
	self.assignWarZone = sm:readInt32();
	self.startLeftTime = sm:readInt32();
	local showRoles_size = sm:readInt16()
	for i = 1,showRoles_size do
		local element = MsgDef.XianMengWarShowUserInfo:create():decode(sm)
		table.insert(self.showRoles, element)
	end
	return self
end


function MsgDef.Msg5360101:opcode()
	return 5360101
end
--[[ 请求仙盟战上一次积分排名--]]
MsgDef.Msg1360102 = {}

function MsgDef.Msg1360102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360102:encode(sm)
	return self
end

function MsgDef.Msg1360102:decode(sm)
	return self
end

function MsgDef.Msg1360102:opcode()
	return 1360102
end

--[[ 请求仙盟战上一次积分排名(返回)--]]
MsgDef.Msg5360102 = {}
function MsgDef.Msg5360102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankList = {} --[[(array<XianMengGangInfo>) 帮派积分排行榜--]]
	return msg
end

function MsgDef.Msg5360102:encode(sm)
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5360102:decode(sm)
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.XianMengGangInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5360102:opcode()
	return 5360102
end
--[[ 请求仙盟战场景排行榜--]]
MsgDef.Msg1360103 = {}

function MsgDef.Msg1360103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360103:encode(sm)
	return self
end

function MsgDef.Msg1360103:decode(sm)
	return self
end

function MsgDef.Msg1360103:opcode()
	return 1360103
end

--[[ 请求仙盟战场景排行榜(返回)--]]
MsgDef.Msg5360103 = {}
function MsgDef.Msg5360103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangScore = 0 --[[(int32) 仙盟积分--]]
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.userRanking = {} --[[(array<XianMengGangUserInfo>) 玩家排行榜--]]
	msg.gangRanking = {} --[[(array<XianMengGangInfo>) 仙盟排行榜--]]
	return msg
end

function MsgDef.Msg5360103:encode(sm)
	sm:writeInt32(self.gangScore);
	sm:writeInt32(self.score);
	sm:writeInt16(#self.userRanking)
	for i,elm in ipairs(self.userRanking) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.gangRanking)
	for i,elm in ipairs(self.gangRanking) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5360103:decode(sm)
	self.gangScore = sm:readInt32();
	self.score = sm:readInt32();
	local userRanking_size = sm:readInt16()
	for i = 1,userRanking_size do
		local element = MsgDef.XianMengGangUserInfo:create():decode(sm)
		table.insert(self.userRanking, element)
	end
	local gangRanking_size = sm:readInt16()
	for i = 1,gangRanking_size do
		local element = MsgDef.XianMengGangInfo:create():decode(sm)
		table.insert(self.gangRanking, element)
	end
	return self
end


function MsgDef.Msg5360103:opcode()
	return 5360103
end
--[[ 请求仙盟战场景奖励信息--]]
MsgDef.Msg1360104 = {}

function MsgDef.Msg1360104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360104:encode(sm)
	return self
end

function MsgDef.Msg1360104:decode(sm)
	return self
end

function MsgDef.Msg1360104:opcode()
	return 1360104
end

--[[ 请求仙盟战场景奖励信息(返回)--]]
MsgDef.Msg5360104 = {}
function MsgDef.Msg5360104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 我的积分--]]
	return msg
end

function MsgDef.Msg5360104:encode(sm)
	sm:writeInt32(self.score);
	return self
end

function MsgDef.Msg5360104:decode(sm)
	self.score = sm:readInt32();
	return self
end


function MsgDef.Msg5360104:opcode()
	return 5360104
end
--[[ 请求仙盟战场景信息--]]
MsgDef.Msg1360105 = {}

function MsgDef.Msg1360105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360105:encode(sm)
	return self
end

function MsgDef.Msg1360105:decode(sm)
	return self
end

function MsgDef.Msg1360105:opcode()
	return 1360105
end

--[[ 请求仙盟战场景信息(返回)--]]
MsgDef.Msg5360105 = {}
function MsgDef.Msg5360105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<XianMengBossInfo>) 仙盟boss信息--]]
	return msg
end

function MsgDef.Msg5360105:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5360105:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.XianMengBossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	return self
end


function MsgDef.Msg5360105:opcode()
	return 5360105
end
--[[ 请求参战资格列表--]]
MsgDef.Msg1360201 = {}

function MsgDef.Msg1360201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360201:encode(sm)
	return self
end

function MsgDef.Msg1360201:decode(sm)
	return self
end

function MsgDef.Msg1360201:opcode()
	return 1360201
end

--[[ 请求参战资格列表(返回)--]]
MsgDef.Msg5360201 = {}
function MsgDef.Msg5360201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.battleZoneInfo = {} --[[(array<XianMengBattleInfo>) 赛区信息--]]
	msg.curZoneId = 0 --[[(int32) 当前参赛赛区--]]
	msg.fightType = 0 --[[(int8) 0:未开始 1:第一阶段 2:第二阶段--]]
	msg.isTodayWar = 0 --[[(int8) 是否今天 1-7非今天 0:今天--]]
	msg.curWeek = 0 --[[(int8) 0:本周 1:下周--]]
	return msg
end

function MsgDef.Msg5360201:encode(sm)
	sm:writeInt16(#self.battleZoneInfo)
	for i,elm in ipairs(self.battleZoneInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curZoneId);
	sm:writeInt8(self.fightType);
	sm:writeInt8(self.isTodayWar);
	sm:writeInt8(self.curWeek);
	return self
end

function MsgDef.Msg5360201:decode(sm)
	local battleZoneInfo_size = sm:readInt16()
	for i = 1,battleZoneInfo_size do
		local element = MsgDef.XianMengBattleInfo:create():decode(sm)
		table.insert(self.battleZoneInfo, element)
	end
	self.curZoneId = sm:readInt32();
	self.fightType = sm:readInt8();
	self.isTodayWar = sm:readInt8();
	self.curWeek = sm:readInt8();
	return self
end


function MsgDef.Msg5360201:opcode()
	return 5360201
end
--[[ 请求主宰仙盟信息以及奖励--]]
MsgDef.Msg1360202 = {}

function MsgDef.Msg1360202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:主宰仙盟信息 2:领取俸禄--]]
	return msg
end

function MsgDef.Msg1360202:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1360202:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1360202:opcode()
	return 1360202
end

--[[ 请求主宰仙盟信息以及奖励(返回)--]]
MsgDef.Msg5360202 = {}
function MsgDef.Msg5360202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.winTimes = 0 --[[(int32) 当前连胜次数--]]
	msg.reqType = 0 --[[(int8) 1:主宰仙盟信息 2:领取俸禄--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 俸禄--]]
	msg.showRole = MsgDef.XianMengWarShowUserInfo:create() --[[(XianMengWarShowUserInfo) 展示信息--]]
	msg.firstGangName = "" --[[(string) 主宰仙盟--]]
	msg.flGot = 0 --[[(int8) 俸禄是否已领取 1:已领取--]]
	msg.killFp = 0 --[[(int8) 终结连胜是否可分配 1:可分配--]]
	msg.winFp = 0 --[[(int8) 连胜是否可分配 1:可分配--]]
	msg.firstGangId = 0 --[[(int64) 主宰仙盟id--]]
	return msg
end

function MsgDef.Msg5360202:encode(sm)
	sm:writeInt32(self.winTimes);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	self.showRole:encode(sm)
	sm:writeString(self.firstGangName);
	sm:writeInt8(self.flGot);
	sm:writeInt8(self.killFp);
	sm:writeInt8(self.winFp);
	sm:writeInt64(self.firstGangId);
	return self
end

function MsgDef.Msg5360202:decode(sm)
	self.winTimes = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.showRole:decode(sm)
	self.firstGangName = sm:readString();
	self.flGot = sm:readInt8();
	self.killFp = sm:readInt8();
	self.winFp = sm:readInt8();
	self.firstGangId = sm:readInt64();
	return self
end


function MsgDef.Msg5360202:opcode()
	return 5360202
end
--[[ 请求仙盟战追踪信息--]]
MsgDef.Msg1360203 = {}

function MsgDef.Msg1360203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360203:encode(sm)
	return self
end

function MsgDef.Msg1360203:decode(sm)
	return self
end

function MsgDef.Msg1360203:opcode()
	return 1360203
end

--[[ 请求仙盟战追踪信息(返回)--]]
MsgDef.Msg5360203 = {}
function MsgDef.Msg5360203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 结束时间--]]
	msg.ourRes = 0 --[[(int32) 我方资源--]]
	msg.otherRes = 0 --[[(int32) 敌方资源--]]
	msg.otherNum = 0 --[[(int32) 敌方总人数--]]
	msg.ourNum = 0 --[[(int32) 我方参与人数--]]
	msg.campType = 0 --[[(int32) 阵营--]]
	msg.crystalStatusMap = {} --[[(map<int32,int32>) 水晶状态--]]
	return msg
end

function MsgDef.Msg5360203:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.ourRes);
	sm:writeInt32(self.otherRes);
	sm:writeInt32(self.otherNum);
	sm:writeInt32(self.ourNum);
	sm:writeInt32(self.campType);
	sm:writeInt16(get_map_size(self.crystalStatusMap))
	for kn,elm in ipairs(self.crystalStatusMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5360203:decode(sm)
	self.lastTime = sm:readInt32();
	self.ourRes = sm:readInt32();
	self.otherRes = sm:readInt32();
	self.otherNum = sm:readInt32();
	self.ourNum = sm:readInt32();
	self.campType = sm:readInt32();
	local crystalStatusMap_size = sm:readInt16()
	for i = 1,crystalStatusMap_size do
		local kv = sm:readInt32();
		self.crystalStatusMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5360203:opcode()
	return 5360203
end
--[[ 请求分配奖励--]]
MsgDef.Msg1360204 = {}

function MsgDef.Msg1360204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:连胜信息 1:连胜分配 2:终结分配--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 分配对应的角色id--]]
	return msg
end

function MsgDef.Msg1360204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1360204:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1360204:opcode()
	return 1360204
end

--[[ 请求分配奖励(返回)--]]
MsgDef.Msg5360204 = {}
function MsgDef.Msg5360204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:连胜信息 1:连胜分配 2:终结分配--]]
	msg.winTimes = 0 --[[(int32) 当前连胜次数--]]
	msg.fpMap = {} --[[(map<int32,int32>) <对应连胜次数,分配：0:可分配 1:已分配 2:已错过>--]]
	msg.endFp = 0 --[[(int32) 终结分配 1:已分配--]]
	msg.endWinTimes = 0 --[[(int32) 终结连胜次数--]]
	return msg
end

function MsgDef.Msg5360204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.winTimes);
	sm:writeInt16(get_map_size(self.fpMap))
	for kn,elm in ipairs(self.fpMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.endFp);
	sm:writeInt32(self.endWinTimes);
	return self
end

function MsgDef.Msg5360204:decode(sm)
	self.reqType = sm:readInt8();
	self.winTimes = sm:readInt32();
	local fpMap_size = sm:readInt16()
	for i = 1,fpMap_size do
		local kv = sm:readInt32();
		self.fpMap[kv] = sm:readInt32();
	end
	self.endFp = sm:readInt32();
	self.endWinTimes = sm:readInt32();
	return self
end


function MsgDef.Msg5360204:opcode()
	return 5360204
end
--[[ 请求仙盟各个玩家位置信息--]]
MsgDef.Msg1360205 = {}

function MsgDef.Msg1360205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360205:encode(sm)
	return self
end

function MsgDef.Msg1360205:decode(sm)
	return self
end

function MsgDef.Msg1360205:opcode()
	return 1360205
end

--[[ 请求仙盟各个玩家位置信息(返回)--]]
MsgDef.Msg5360205 = {}
function MsgDef.Msg5360205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	return msg
end

function MsgDef.Msg5360205:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5360205:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	return self
end


function MsgDef.Msg5360205:opcode()
	return 5360205
end
--[[ 请求仙盟战场日志--]]
MsgDef.Msg1360206 = {}

function MsgDef.Msg1360206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页--]]
	return msg
end

function MsgDef.Msg1360206:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1360206:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1360206:opcode()
	return 1360206
end

--[[ 请求仙盟战场日志(返回)--]]
MsgDef.Msg5360206 = {}
function MsgDef.Msg5360206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.logs = {} --[[(array<XianMengBattleLog>) 仙盟战日志--]]
	msg.page = 0 --[[(int32) 页--]]
	msg.totalSum = 0 --[[(int32) 总页数--]]
	return msg
end

function MsgDef.Msg5360206:encode(sm)
	sm:writeInt16(#self.logs)
	for i,elm in ipairs(self.logs) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.totalSum);
	return self
end

function MsgDef.Msg5360206:decode(sm)
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local element = MsgDef.XianMengBattleLog:create():decode(sm)
		table.insert(self.logs, element)
	end
	self.page = sm:readInt32();
	self.totalSum = sm:readInt32();
	return self
end


function MsgDef.Msg5360206:opcode()
	return 5360206
end
--[[ 请求场景中任意一个玩家位置--]]
MsgDef.Msg1360207 = {}

function MsgDef.Msg1360207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1360207:encode(sm)
	return self
end

function MsgDef.Msg1360207:decode(sm)
	return self
end

function MsgDef.Msg1360207:opcode()
	return 1360207
end

--[[ 请求场景中任意一个玩家位置(返回)--]]
MsgDef.Msg5360207 = {}
function MsgDef.Msg5360207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pos = MsgDef.Position:create() --[[(Position) 任意敌方一人位置--]]
	return msg
end

function MsgDef.Msg5360207:encode(sm)
	self.pos:encode(sm)
	return self
end

function MsgDef.Msg5360207:decode(sm)
	self.pos:decode(sm)
	return self
end


function MsgDef.Msg5360207:opcode()
	return 5360207
end
--[[ 请求别的玩家的信息--]]
MsgDef.Msg1370101 = {}

function MsgDef.Msg1370101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 服务器id=0 表示自己的服务器--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家Id--]]
	return msg
end

function MsgDef.Msg1370101:encode(sm)
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1370101:decode(sm)
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1370101:opcode()
	return 1370101
end

--[[ 请求别的玩家的信息(返回)--]]
MsgDef.Msg5370101 = {}
function MsgDef.Msg5370101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.svrId = 0 --[[(int32) 服务器id=0表示自己的服务器--]]
	msg.vipTypes = {} --[[(array<int8>) vip类型 1:白银vip 2:黄金vip 3:钻石vip--]]
	msg.gangString = "" --[[(string) 帮派名称--]]
	msg.spouse = "" --[[(string) 配偶名称--]]
	msg.roleName = "" --[[(string) 玩家名称--]]
	msg.roleIcon = 0 --[[(int32) 头像--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.attris = {} --[[(map<int32,int32>) 32位属性map--]]
	msg.lev = 0 --[[(int32) 玩家等级--]]
	msg.skins = {} --[[(map<int32,int32>) 玩家皮肤--]]
	msg.equips = {} --[[(array<ItemInfo>) 装备--]]
	msg.xiuxianLevel = 0 --[[(int32) 修仙等级--]]
	msg.attris64 = {} --[[(map<int32,int64>) 64位属性字典--]]
	return msg
end

function MsgDef.Msg5370101:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	sm:writeInt16(get_map_size(self.vipTypes))
	for i,elm in ipairs(self.vipTypes) do
		sm:writeInt8(elm);
	end
	sm:writeString(self.gangString);
	sm:writeString(self.spouse);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lev);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.equips)
	for i,elm in ipairs(self.equips) do
		elm:encode(sm)
	end
	sm:writeInt32(self.xiuxianLevel);
	sm:writeInt16(get_map_size(self.attris64))
	for kn,elm in ipairs(self.attris64) do
		sm:writeInt32(kn);
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5370101:decode(sm)
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	local vipTypes_size = sm:readInt16()
	for i = 1,vipTypes_size do
		local ele = sm:readInt8();
		table.insert(self.vipTypes, ele)
	end
	self.gangString = sm:readString();
	self.spouse = sm:readString();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	self.power = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.lev = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equips, element)
	end
	self.xiuxianLevel = sm:readInt32();
	local attris64_size = sm:readInt16()
	for i = 1,attris64_size do
		local kv = sm:readInt32();
		self.attris64[kv] = sm:readInt64();
	end
	return self
end


function MsgDef.Msg5370101:opcode()
	return 5370101
end
--[[ 请求成长系统的信息--]]
MsgDef.Msg1370102 = {}

function MsgDef.Msg1370102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 服务器id=0 表示自己的服务器--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家Id--]]
	if msg.moduleId == nil then msg.moduleId = 0 end --[[(int32) 成长系统的Id--]]
	return msg
end

function MsgDef.Msg1370102:encode(sm)
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.moduleId);
	return self
end

function MsgDef.Msg1370102:decode(sm)
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	self.moduleId = sm:readInt32();
	return self
end

function MsgDef.Msg1370102:opcode()
	return 1370102
end

--[[ 请求成长系统的信息(返回)--]]
MsgDef.Msg5370102 = {}
function MsgDef.Msg5370102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.svrId = 0 --[[(int32) 服务器id=0 表示自己的服务器--]]
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.moduleId = 0 --[[(int32) 成长系统的Id--]]
	msg.lev = 0 --[[(int32) --]]
	msg.skills = {} --[[(map<int32,int32>) --]]
	msg.equips = {} --[[(map<int32,int32>) --]]
	msg.power = 0 --[[(int32) --]]
	msg.skins = {} --[[(array<int32>) --]]
	msg.zzdNum = 0 --[[(int32) --]]
	msg.qldNum = 0 --[[(int32) --]]
	msg.currentSkinId = 0 --[[(int32) --]]
	msg.partnerSkins = {} --[[(array<SkinInfo>) --]]
	msg.vipTypes = {} --[[(array<int8>) --]]
	msg.tempAttris = {} --[[(map<int32,int32>) --]]
	return msg
end

function MsgDef.Msg5370102:encode(sm)
	sm:writeInt32(self.svrId);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.moduleId);
	sm:writeInt32(self.lev);
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.currentSkinId);
	sm:writeInt16(#self.partnerSkins)
	for i,elm in ipairs(self.partnerSkins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.vipTypes))
	for i,elm in ipairs(self.vipTypes) do
		sm:writeInt8(elm);
	end
	sm:writeInt16(get_map_size(self.tempAttris))
	for kn,elm in ipairs(self.tempAttris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5370102:decode(sm)
	self.svrId = sm:readInt32();
	self.roleId = sm:readInt64();
	self.moduleId = sm:readInt32();
	self.lev = sm:readInt32();
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.currentSkinId = sm:readInt32();
	local partnerSkins_size = sm:readInt16()
	for i = 1,partnerSkins_size do
		local element = MsgDef.SkinInfo:create():decode(sm)
		table.insert(self.partnerSkins, element)
	end
	local vipTypes_size = sm:readInt16()
	for i = 1,vipTypes_size do
		local ele = sm:readInt8();
		table.insert(self.vipTypes, ele)
	end
	local tempAttris_size = sm:readInt16()
	for i = 1,tempAttris_size do
		local kv = sm:readInt32();
		self.tempAttris[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5370102:opcode()
	return 5370102
end
--[[ 请求跨服进阶副本信息--]]
MsgDef.Msg1380101 = {}

function MsgDef.Msg1380101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 通过链接快速加入的队伍id--]]
	return msg
end

function MsgDef.Msg1380101:encode(sm)
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg1380101:decode(sm)
	self.teamId = sm:readInt32();
	return self
end

function MsgDef.Msg1380101:opcode()
	return 1380101
end

--[[ 请求跨服进阶副本信息(返回)--]]
MsgDef.Msg5380101 = {}
function MsgDef.Msg5380101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.autoReady = 0 --[[(int8) 1:自动准备--]]
	msg.autoCreate = 0 --[[(int8) 1:自动创建队伍或者加入队伍--]]
	msg.curPassNum = 0 --[[(int32) 当前通关次数--]]
	msg.fubenFirstMap = {} --[[(map<int32,int32>) 副本首通标识,key->sceneId,value->1已通关--]]
	msg.teamId = 0 --[[(int32) 队伍id,0:表示没有队伍--]]
	msg.teams = {} --[[(array<CrossJJTeamInfo>) 队伍列表--]]
	msg.teamMembers = {} --[[(array<CrossJJTeamMemberInfo>) 队伍成员信息--]]
	msg.maxAutoPlay = 0 --[[(int8) 1:满员自动开始--]]
	msg.page = 0 --[[(int32) 当前页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.sceneId = 0 --[[(int32) 副本id--]]
	msg.doubleCost = 0 --[[(int8) 0: 非双倍消耗 1:双倍消耗 --]]
	return msg
end

function MsgDef.Msg5380101:encode(sm)
	sm:writeInt8(self.autoReady);
	sm:writeInt8(self.autoCreate);
	sm:writeInt32(self.curPassNum);
	sm:writeInt16(get_map_size(self.fubenFirstMap))
	for kn,elm in ipairs(self.fubenFirstMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.teams)
	for i,elm in ipairs(self.teams) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.teamMembers)
	for i,elm in ipairs(self.teamMembers) do
		elm:encode(sm)
	end
	sm:writeInt8(self.maxAutoPlay);
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.doubleCost);
	return self
end

function MsgDef.Msg5380101:decode(sm)
	self.autoReady = sm:readInt8();
	self.autoCreate = sm:readInt8();
	self.curPassNum = sm:readInt32();
	local fubenFirstMap_size = sm:readInt16()
	for i = 1,fubenFirstMap_size do
		local kv = sm:readInt32();
		self.fubenFirstMap[kv] = sm:readInt32();
	end
	self.teamId = sm:readInt32();
	local teams_size = sm:readInt16()
	for i = 1,teams_size do
		local element = MsgDef.CrossJJTeamInfo:create():decode(sm)
		table.insert(self.teams, element)
	end
	local teamMembers_size = sm:readInt16()
	for i = 1,teamMembers_size do
		local element = MsgDef.CrossJJTeamMemberInfo:create():decode(sm)
		table.insert(self.teamMembers, element)
	end
	self.maxAutoPlay = sm:readInt8();
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.doubleCost = sm:readInt8();
	return self
end


function MsgDef.Msg5380101:opcode()
	return 5380101
end
--[[ 请求跨服进阶队伍创建或加入--]]
MsgDef.Msg1380102 = {}

function MsgDef.Msg1380102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:创建队伍  2:加入队伍  3:快速加入队伍--]]
	if msg.password == nil then msg.password = 0 end --[[(int32) 密码:纯数字--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 想加入的队伍id--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 副本id--]]
	return msg
end

function MsgDef.Msg1380102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.password);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1380102:decode(sm)
	self.reqType = sm:readInt8();
	self.password = sm:readInt32();
	self.teamId = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1380102:opcode()
	return 1380102
end

--[[ 请求跨服进阶队伍创建或加入(返回)--]]
MsgDef.Msg5380102 = {}
function MsgDef.Msg5380102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:创建队伍  2:加入队伍  3:快速加入队伍--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.validate = 0 --[[(int8) 1:密码验证成功,否则失败--]]
	msg.teamMembers = {} --[[(array<CrossJJTeamMemberInfo>) 队伍成员信息--]]
	msg.sceneId = 0 --[[(int32) 副本id--]]
	return msg
end

function MsgDef.Msg5380102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.validate);
	sm:writeInt16(#self.teamMembers)
	for i,elm in ipairs(self.teamMembers) do
		elm:encode(sm)
	end
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5380102:decode(sm)
	self.reqType = sm:readInt8();
	self.teamId = sm:readInt32();
	self.validate = sm:readInt8();
	local teamMembers_size = sm:readInt16()
	for i = 1,teamMembers_size do
		local element = MsgDef.CrossJJTeamMemberInfo:create():decode(sm)
		table.insert(self.teamMembers, element)
	end
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5380102:opcode()
	return 5380102
end
--[[ 请求跨服进阶副本设置--]]
MsgDef.Msg1380103 = {}

function MsgDef.Msg1380103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:5秒后自动创建或加入队伍2:自动准备3:满员自动开启4:双倍消耗--]]
	return msg
end

function MsgDef.Msg1380103:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1380103:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1380103:opcode()
	return 1380103
end

--[[ 请求跨服进阶副本设置(返回)--]]
MsgDef.Msg5380103 = {}
function MsgDef.Msg5380103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:5秒后自动创建或加入队伍2:自动准备3:满员自动开启4:双倍消耗--]]
	msg.autoReady = 0 --[[(int8) 1:自动准备--]]
	msg.autoCreate = 0 --[[(int8) 1:自动创建队伍或者加入队伍--]]
	msg.maxAutoPlay = 0 --[[(int8) 1:满员自动开始--]]
	msg.doubleCost = 0 --[[(int8) 1:双倍消耗--]]
	return msg
end

function MsgDef.Msg5380103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.autoReady);
	sm:writeInt8(self.autoCreate);
	sm:writeInt8(self.maxAutoPlay);
	sm:writeInt8(self.doubleCost);
	return self
end

function MsgDef.Msg5380103:decode(sm)
	self.reqType = sm:readInt8();
	self.autoReady = sm:readInt8();
	self.autoCreate = sm:readInt8();
	self.maxAutoPlay = sm:readInt8();
	self.doubleCost = sm:readInt8();
	return self
end


function MsgDef.Msg5380103:opcode()
	return 5380103
end
--[[ 请求跨服进阶副本成员操作--]]
MsgDef.Msg1380104 = {}

function MsgDef.Msg1380104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:队长开始 2:队员准备 3:退出队伍 4:队长踢人 5:刷新成员列表--]]
	if msg.tarRoleId == nil then msg.tarRoleId = 0 end --[[(int64) 目标roleId--]]
	return msg
end

function MsgDef.Msg1380104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg1380104:decode(sm)
	self.reqType = sm:readInt8();
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1380104:opcode()
	return 1380104
end

--[[ 请求跨服进阶副本成员操作(返回)--]]
MsgDef.Msg5380104 = {}
function MsgDef.Msg5380104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:队长开始 2:队员准备 3:退出队伍 4:队长踢人 5:刷新成员列表--]]
	msg.teamMembers = {} --[[(array<CrossJJTeamMemberInfo>) 队伍成员信息--]]
	msg.maxAutoPlay = 0 --[[(int8) 满员自动开始--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	return msg
end

function MsgDef.Msg5380104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.teamMembers)
	for i,elm in ipairs(self.teamMembers) do
		elm:encode(sm)
	end
	sm:writeInt8(self.maxAutoPlay);
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg5380104:decode(sm)
	self.reqType = sm:readInt8();
	local teamMembers_size = sm:readInt16()
	for i = 1,teamMembers_size do
		local element = MsgDef.CrossJJTeamMemberInfo:create():decode(sm)
		table.insert(self.teamMembers, element)
	end
	self.maxAutoPlay = sm:readInt8();
	self.teamId = sm:readInt32();
	return self
end


function MsgDef.Msg5380104:opcode()
	return 5380104
end
--[[ 请求跨服进阶副本队伍列表刷新--]]
MsgDef.Msg1380105 = {}

function MsgDef.Msg1380105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数,从1开始--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 副本id--]]
	return msg
end

function MsgDef.Msg1380105:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1380105:decode(sm)
	self.page = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1380105:opcode()
	return 1380105
end

--[[ 请求跨服进阶副本队伍列表刷新(返回)--]]
MsgDef.Msg5380105 = {}
function MsgDef.Msg5380105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 当前页数,从1开始--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.teams = {} --[[(array<CrossJJTeamInfo>) 队伍列表--]]
	msg.sceneId = 0 --[[(int32) 副本id--]]
	return msg
end

function MsgDef.Msg5380105:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt16(#self.teams)
	for i,elm in ipairs(self.teams) do
		elm:encode(sm)
	end
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5380105:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	local teams_size = sm:readInt16()
	for i = 1,teams_size do
		local element = MsgDef.CrossJJTeamInfo:create():decode(sm)
		table.insert(self.teams, element)
	end
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5380105:opcode()
	return 5380105
end
--[[ 请求跨服组队喊话--]]
MsgDef.Msg1380106 = {}

function MsgDef.Msg1380106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1380106:encode(sm)
	return self
end

function MsgDef.Msg1380106:decode(sm)
	return self
end

function MsgDef.Msg1380106:opcode()
	return 1380106
end

--[[ 请求跨服组队喊话(返回)--]]
MsgDef.Msg5380106 = {}
function MsgDef.Msg5380106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5380106:encode(sm)
	return self
end

function MsgDef.Msg5380106:decode(sm)
	return self
end


function MsgDef.Msg5380106:opcode()
	return 5380106
end
--[[ 请求跨服进阶副本一键扫荡--]]
MsgDef.Msg1380107 = {}

function MsgDef.Msg1380107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1380107:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1380107:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1380107:opcode()
	return 1380107
end

--[[ 请求跨服进阶副本一键扫荡(返回)--]]
MsgDef.Msg5380107 = {}
function MsgDef.Msg5380107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curPassNum = 0 --[[(int32) 当前通关人数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具列表--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg5380107:encode(sm)
	sm:writeInt32(self.curPassNum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5380107:decode(sm)
	self.curPassNum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5380107:opcode()
	return 5380107
end
--[[ 请求跨服副本任务追踪--]]
MsgDef.Msg1380201 = {}

function MsgDef.Msg1380201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1380201:encode(sm)
	return self
end

function MsgDef.Msg1380201:decode(sm)
	return self
end

function MsgDef.Msg1380201:opcode()
	return 1380201
end

--[[ 请求跨服副本任务追踪(返回)--]]
MsgDef.Msg5380201 = {}
function MsgDef.Msg5380201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isFrist = 0 --[[(int8) =1是首次--]]
	msg.conMap = {} --[[(map<int32,int32>) 条件Map--]]
	msg.passId = 0 --[[(int32) 关卡id--]]
	msg.firstCanAwardPassId = 0 --[[(int32) 第一次能领取的关卡id--]]
	msg.firstTime = 0 --[[(int32) 第一次进入的时间--]]
	return msg
end

function MsgDef.Msg5380201:encode(sm)
	sm:writeInt8(self.isFrist);
	sm:writeInt16(get_map_size(self.conMap))
	for kn,elm in ipairs(self.conMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.passId);
	sm:writeInt32(self.firstCanAwardPassId);
	sm:writeInt32(self.firstTime);
	return self
end

function MsgDef.Msg5380201:decode(sm)
	self.isFrist = sm:readInt8();
	local conMap_size = sm:readInt16()
	for i = 1,conMap_size do
		local kv = sm:readInt32();
		self.conMap[kv] = sm:readInt32();
	end
	self.passId = sm:readInt32();
	self.firstCanAwardPassId = sm:readInt32();
	self.firstTime = sm:readInt32();
	return self
end


function MsgDef.Msg5380201:opcode()
	return 5380201
end
--[[ 请求赠送鲜花--]]
MsgDef.Msg1390101 = {}

function MsgDef.Msg1390101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 鲜花道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 使用鲜花数量--]]
	if msg.auto == nil then msg.auto = 0 end --[[(int8) 是否自动购买--]]
	if msg.source == nil then msg.source = 0 end --[[(int8) 来源 0:好友 1:非好友--]]
	return msg
end

function MsgDef.Msg1390101:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	sm:writeInt8(self.auto);
	sm:writeInt8(self.source);
	return self
end

function MsgDef.Msg1390101:decode(sm)
	self.roleId = sm:readInt64();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	self.auto = sm:readInt8();
	self.source = sm:readInt8();
	return self
end

function MsgDef.Msg1390101:opcode()
	return 1390101
end

--[[ 请求赠送鲜花(返回)--]]
MsgDef.Msg5390101 = {}
function MsgDef.Msg5390101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5390101:encode(sm)
	return self
end

function MsgDef.Msg5390101:decode(sm)
	return self
end


function MsgDef.Msg5390101:opcode()
	return 5390101
end
--[[ 请求求婚--]]
MsgDef.Msg1390102 = {}

function MsgDef.Msg1390102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.objRoleId == nil then msg.objRoleId = 0 end --[[(int64) 求婚对象--]]
	if msg.weddingGrade == nil then msg.weddingGrade = 0 end --[[(int32) 婚宴档次--]]
	return msg
end

function MsgDef.Msg1390102:encode(sm)
	sm:writeInt64(self.objRoleId);
	sm:writeInt32(self.weddingGrade);
	return self
end

function MsgDef.Msg1390102:decode(sm)
	self.objRoleId = sm:readInt64();
	self.weddingGrade = sm:readInt32();
	return self
end

function MsgDef.Msg1390102:opcode()
	return 1390102
end

--[[ 请求求婚(返回)--]]
MsgDef.Msg5390102 = {}
function MsgDef.Msg5390102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5390102:encode(sm)
	return self
end

function MsgDef.Msg5390102:decode(sm)
	return self
end


function MsgDef.Msg5390102:opcode()
	return 5390102
end
--[[ 请求求婚处理--]]
MsgDef.Msg1390103 = {}

function MsgDef.Msg1390103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reply == nil then msg.reply = 0 end --[[(int8) 1:同意 2:拒绝--]]
	if msg.reqRoleId == nil then msg.reqRoleId = 0 end --[[(int64) 求婚玩家id--]]
	if msg.grade == nil then msg.grade = 0 end --[[(int32) 档次--]]
	return msg
end

function MsgDef.Msg1390103:encode(sm)
	sm:writeInt8(self.reply);
	sm:writeInt64(self.reqRoleId);
	sm:writeInt32(self.grade);
	return self
end

function MsgDef.Msg1390103:decode(sm)
	self.reply = sm:readInt8();
	self.reqRoleId = sm:readInt64();
	self.grade = sm:readInt32();
	return self
end

function MsgDef.Msg1390103:opcode()
	return 1390103
end

--[[ 请求求婚处理(返回)--]]
MsgDef.Msg5390103 = {}
function MsgDef.Msg5390103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 求婚成功奖励道具--]]
	msg.reply = 0 --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg5390103:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reply);
	return self
end

function MsgDef.Msg5390103:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reply = sm:readInt8();
	return self
end


function MsgDef.Msg5390103:opcode()
	return 5390103
end
--[[ 请求离婚--]]
MsgDef.Msg1390104 = {}

function MsgDef.Msg1390104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:发起离婚 2:强制离婚 3:伴侣离线信息--]]
	return msg
end

function MsgDef.Msg1390104:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1390104:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1390104:opcode()
	return 1390104
end

--[[ 请求离婚(返回)--]]
MsgDef.Msg5390104 = {}
function MsgDef.Msg5390104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isOutline = 0 --[[(int8) 1:离线三天以上--]]
	msg.reqType = 0 --[[(int8) 1:发起离婚 2:强制离婚 3:伴侣离线信息--]]
	return msg
end

function MsgDef.Msg5390104:encode(sm)
	sm:writeInt8(self.isOutline);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5390104:decode(sm)
	self.isOutline = sm:readInt8();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5390104:opcode()
	return 5390104
end
--[[ 请求协议离婚处理--]]
MsgDef.Msg1390105 = {}

function MsgDef.Msg1390105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg1390105:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1390105:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1390105:opcode()
	return 1390105
end

--[[ 请求协议离婚处理(返回)--]]
MsgDef.Msg5390105 = {}
function MsgDef.Msg5390105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5390105:encode(sm)
	return self
end

function MsgDef.Msg5390105:decode(sm)
	return self
end


function MsgDef.Msg5390105:opcode()
	return 5390105
end
--[[ 请求爱情盒购买信息--]]
MsgDef.Msg1390106 = {}

function MsgDef.Msg1390106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 1:购买信息 2:购买--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 购买id--]]
	return msg
end

function MsgDef.Msg1390106:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1390106:decode(sm)
	self.reqType = sm:readInt32();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1390106:opcode()
	return 1390106
end

--[[ 请求爱情盒购买信息(返回)--]]
MsgDef.Msg5390106 = {}
function MsgDef.Msg5390106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 1:购买信息 2:购买--]]
	msg.buyLeftMap = {} --[[(map<int32,int32>) 剩余购买次数列表<id,次数>--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买获得--]]
	msg.marryDay = 0 --[[(int8) 是否结婚纪念日--]]
	return msg
end

function MsgDef.Msg5390106:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt16(get_map_size(self.buyLeftMap))
	for kn,elm in ipairs(self.buyLeftMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.marryDay);
	return self
end

function MsgDef.Msg5390106:decode(sm)
	self.reqType = sm:readInt32();
	local buyLeftMap_size = sm:readInt16()
	for i = 1,buyLeftMap_size do
		local kv = sm:readInt32();
		self.buyLeftMap[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.marryDay = sm:readInt8();
	return self
end


function MsgDef.Msg5390106:opcode()
	return 5390106
end
--[[ 请求异性玩家列表--]]
MsgDef.Msg1390107 = {}

function MsgDef.Msg1390107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:异性列表 2:领取鲜花--]]
	if msg.gotLevel == nil then msg.gotLevel = 0 end --[[(int32) 领取对应等级的鲜花--]]
	return msg
end

function MsgDef.Msg1390107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.gotLevel);
	return self
end

function MsgDef.Msg1390107:decode(sm)
	self.reqType = sm:readInt8();
	self.gotLevel = sm:readInt32();
	return self
end

function MsgDef.Msg1390107:opcode()
	return 1390107
end

--[[ 请求异性玩家列表(返回)--]]
MsgDef.Msg5390107 = {}
function MsgDef.Msg5390107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.oppoSexInfos = {} --[[(array<OppositeSex>) 异性玩家信息--]]
	msg.gotFlowerList = {} --[[(array<int32>) 已领取鲜花列表(预留)--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 鲜花奖励(预留)--]]
	msg.reqType = 0 --[[(int8) 1:异性列表 2:领取鲜花--]]
	return msg
end

function MsgDef.Msg5390107:encode(sm)
	sm:writeInt16(#self.oppoSexInfos)
	for i,elm in ipairs(self.oppoSexInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotFlowerList))
	for i,elm in ipairs(self.gotFlowerList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5390107:decode(sm)
	local oppoSexInfos_size = sm:readInt16()
	for i = 1,oppoSexInfos_size do
		local element = MsgDef.OppositeSex:create():decode(sm)
		table.insert(self.oppoSexInfos, element)
	end
	local gotFlowerList_size = sm:readInt16()
	for i = 1,gotFlowerList_size do
		local ele = sm:readInt32();
		table.insert(self.gotFlowerList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5390107:opcode()
	return 5390107
end
--[[ 请求在线异性好友列表--]]
MsgDef.Msg1390108 = {}

function MsgDef.Msg1390108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390108:encode(sm)
	return self
end

function MsgDef.Msg1390108:decode(sm)
	return self
end

function MsgDef.Msg1390108:opcode()
	return 1390108
end

--[[ 请求在线异性好友列表(返回)--]]
MsgDef.Msg5390108 = {}
function MsgDef.Msg5390108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.oppoFriends = {} --[[(array<OppositeSex>) 在线异性好友信息--]]
	return msg
end

function MsgDef.Msg5390108:encode(sm)
	sm:writeInt16(#self.oppoFriends)
	for i,elm in ipairs(self.oppoFriends) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390108:decode(sm)
	local oppoFriends_size = sm:readInt16()
	for i = 1,oppoFriends_size do
		local element = MsgDef.OppositeSex:create():decode(sm)
		table.insert(self.oppoFriends, element)
	end
	return self
end


function MsgDef.Msg5390108:opcode()
	return 5390108
end
--[[ 请求姻缘信息--]]
MsgDef.Msg1390201 = {}

function MsgDef.Msg1390201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390201:encode(sm)
	return self
end

function MsgDef.Msg1390201:decode(sm)
	return self
end

function MsgDef.Msg1390201:opcode()
	return 1390201
end

--[[ 请求姻缘信息(返回)--]]
MsgDef.Msg5390201 = {}
function MsgDef.Msg5390201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ringLev = 0 --[[(int32) 婚戒等级--]]
	msg.qyLev = 0 --[[(int32) 情缘等级--]]
	msg.treeLev = 0 --[[(int32) 姻缘树等级--]]
	msg.weddingTime = 0 --[[(int32) 结婚时间--]]
	msg.qmValue = 0 --[[(int32) 亲密度--]]
	msg.coupleLocNum = 0 --[[(int32) 已使用鸳鸯锁数量--]]
	msg.loveLockNum = 0 --[[(int32) 已使用同心锁数量--]]
	return msg
end

function MsgDef.Msg5390201:encode(sm)
	sm:writeInt32(self.ringLev);
	sm:writeInt32(self.qyLev);
	sm:writeInt32(self.treeLev);
	sm:writeInt32(self.weddingTime);
	sm:writeInt32(self.qmValue);
	sm:writeInt32(self.coupleLocNum);
	sm:writeInt32(self.loveLockNum);
	return self
end

function MsgDef.Msg5390201:decode(sm)
	self.ringLev = sm:readInt32();
	self.qyLev = sm:readInt32();
	self.treeLev = sm:readInt32();
	self.weddingTime = sm:readInt32();
	self.qmValue = sm:readInt32();
	self.coupleLocNum = sm:readInt32();
	self.loveLockNum = sm:readInt32();
	return self
end


function MsgDef.Msg5390201:opcode()
	return 5390201
end
--[[ 请求婚戒升级--]]
MsgDef.Msg1390202 = {}

function MsgDef.Msg1390202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390202:encode(sm)
	return self
end

function MsgDef.Msg1390202:decode(sm)
	return self
end

function MsgDef.Msg1390202:opcode()
	return 1390202
end

--[[ 请求婚戒升级(返回)--]]
MsgDef.Msg5390202 = {}
function MsgDef.Msg5390202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ringLev = 0 --[[(int32) 婚戒等级--]]
	return msg
end

function MsgDef.Msg5390202:encode(sm)
	sm:writeInt32(self.ringLev);
	return self
end

function MsgDef.Msg5390202:decode(sm)
	self.ringLev = sm:readInt32();
	return self
end


function MsgDef.Msg5390202:opcode()
	return 5390202
end
--[[ 请求情缘升级--]]
MsgDef.Msg1390203 = {}

function MsgDef.Msg1390203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390203:encode(sm)
	return self
end

function MsgDef.Msg1390203:decode(sm)
	return self
end

function MsgDef.Msg1390203:opcode()
	return 1390203
end

--[[ 请求情缘升级(返回)--]]
MsgDef.Msg5390203 = {}
function MsgDef.Msg5390203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qyLev = 0 --[[(int32) 情缘等级--]]
	msg.qmValue = 0 --[[(int32) 亲密度--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5390203:encode(sm)
	sm:writeInt32(self.qyLev);
	sm:writeInt32(self.qmValue);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5390203:decode(sm)
	self.qyLev = sm:readInt32();
	self.qmValue = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5390203:opcode()
	return 5390203
end
--[[ 请求姻缘树升级--]]
MsgDef.Msg1390204 = {}

function MsgDef.Msg1390204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:查看 1:升级 2:领取种子--]]
	return msg
end

function MsgDef.Msg1390204:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1390204:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1390204:opcode()
	return 1390204
end

--[[ 请求姻缘树升级(返回)--]]
MsgDef.Msg5390204 = {}
function MsgDef.Msg5390204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.treeLev = 0 --[[(int32) 姻缘树等级--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.reqType = 0 --[[(int8) 0:查看 1:升级 2:领取种子--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 种子奖励--]]
	msg.isGot = 0 --[[(int8) 今日是否已领取 1:已领取--]]
	msg.plantCount = 0 --[[(int32) 今日种树次数--]]
	msg.curExp = 0 --[[(int32) 当前经验值--]]
	msg.qyLev = 0 --[[(int32) 情缘等级--]]
	return msg
end

function MsgDef.Msg5390204:encode(sm)
	sm:writeInt32(self.treeLev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.isGot);
	sm:writeInt32(self.plantCount);
	sm:writeInt32(self.curExp);
	sm:writeInt32(self.qyLev);
	return self
end

function MsgDef.Msg5390204:decode(sm)
	self.treeLev = sm:readInt32();
	self.power = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.isGot = sm:readInt8();
	self.plantCount = sm:readInt32();
	self.curExp = sm:readInt32();
	self.qyLev = sm:readInt32();
	return self
end


function MsgDef.Msg5390204:opcode()
	return 5390204
end
--[[ 请求姻缘簿排行信息--]]
MsgDef.Msg1390301 = {}

function MsgDef.Msg1390301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数--]]
	return msg
end

function MsgDef.Msg1390301:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1390301:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1390301:opcode()
	return 1390301
end

--[[ 请求姻缘簿排行信息(返回)--]]
MsgDef.Msg5390301 = {}
function MsgDef.Msg5390301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dayLeftTime = 0 --[[(int32) 今日活动倒计时--]]
	msg.myRanking = 0 --[[(int32) 我的排名--]]
	msg.rankingInfo = {} --[[(array<MarryRankingInfo>) 排名信息--]]
	msg.marrySize = 0 --[[(int32) 今日全服豪华婚礼情侣数量--]]
	msg.page = 0 --[[(int32) 当前页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	return msg
end

function MsgDef.Msg5390301:encode(sm)
	sm:writeInt32(self.dayLeftTime);
	sm:writeInt32(self.myRanking);
	sm:writeInt16(#self.rankingInfo)
	for i,elm in ipairs(self.rankingInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.marrySize);
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	return self
end

function MsgDef.Msg5390301:decode(sm)
	self.dayLeftTime = sm:readInt32();
	self.myRanking = sm:readInt32();
	local rankingInfo_size = sm:readInt16()
	for i = 1,rankingInfo_size do
		local element = MsgDef.MarryRankingInfo:create():decode(sm)
		table.insert(self.rankingInfo, element)
	end
	self.marrySize = sm:readInt32();
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	return self
end


function MsgDef.Msg5390301:opcode()
	return 5390301
end
--[[ 请求预约婚礼--]]
MsgDef.Msg1390302 = {}

function MsgDef.Msg1390302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0显示1预约--]]
	if msg.time == nil then msg.time = 0 end --[[(int32) 时间段--]]
	if msg.weddingDc == nil then msg.weddingDc = 0 end --[[(int32) 婚宴档次--]]
	return msg
end

function MsgDef.Msg1390302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.time);
	sm:writeInt32(self.weddingDc);
	return self
end

function MsgDef.Msg1390302:decode(sm)
	self.reqType = sm:readInt8();
	self.time = sm:readInt32();
	self.weddingDc = sm:readInt32();
	return self
end

function MsgDef.Msg1390302:opcode()
	return 1390302
end

--[[ 请求预约婚礼(返回)--]]
MsgDef.Msg5390302 = {}
function MsgDef.Msg5390302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0显示1预约--]]
	msg.leftCount = 0 --[[(int32) 剩余预约次数--]]
	msg.weddingDc = 0 --[[(int32) 婚宴档次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 婚宴奖励--]]
	msg.weddingPreData = {} --[[(array<WeddingPredetermineData>) 婚宴预约数据--]]
	return msg
end

function MsgDef.Msg5390302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.weddingDc);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.weddingPreData)
	for i,elm in ipairs(self.weddingPreData) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390302:decode(sm)
	self.reqType = sm:readInt8();
	self.leftCount = sm:readInt32();
	self.weddingDc = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local weddingPreData_size = sm:readInt16()
	for i = 1,weddingPreData_size do
		local element = MsgDef.WeddingPredetermineData:create():decode(sm)
		table.insert(self.weddingPreData, element)
	end
	return self
end


function MsgDef.Msg5390302:opcode()
	return 5390302
end
--[[ 请求宾客列表--]]
MsgDef.Msg1390303 = {}

function MsgDef.Msg1390303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1好友2盟友3申请者4邀请5增加邀请人数--]]
	if msg.time == nil then msg.time = 0 end --[[(int32) 时间段--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 增加宾客人数--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 邀请人Id--]]
	return msg
end

function MsgDef.Msg1390303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.time);
	sm:writeInt32(self.num);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1390303:decode(sm)
	self.reqType = sm:readInt8();
	self.time = sm:readInt32();
	self.num = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1390303:opcode()
	return 1390303
end

--[[ 请求宾客列表(返回)--]]
MsgDef.Msg5390303 = {}
function MsgDef.Msg5390303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1好友2盟友3申请者4邀请5增加邀请人数--]]
	msg.inviteCount = 0 --[[(int32) 最大邀请人数--]]
	msg.invite = {} --[[(array<WeddingGuestsInfo>) 未邀请人--]]
	msg.invited = {} --[[(array<WeddingGuestsInfo>) 已邀请人--]]
	return msg
end

function MsgDef.Msg5390303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.inviteCount);
	sm:writeInt16(#self.invite)
	for i,elm in ipairs(self.invite) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.invited)
	for i,elm in ipairs(self.invited) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390303:decode(sm)
	self.reqType = sm:readInt8();
	self.inviteCount = sm:readInt32();
	local invite_size = sm:readInt16()
	for i = 1,invite_size do
		local element = MsgDef.WeddingGuestsInfo:create():decode(sm)
		table.insert(self.invite, element)
	end
	local invited_size = sm:readInt16()
	for i = 1,invited_size do
		local element = MsgDef.WeddingGuestsInfo:create():decode(sm)
		table.insert(self.invited, element)
	end
	return self
end


function MsgDef.Msg5390303:opcode()
	return 5390303
end
--[[ 请求祝福信息--]]
MsgDef.Msg1390304 = {}

function MsgDef.Msg1390304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1元宝2鲜花--]]
	if msg.id == nil then msg.id = 0 end --[[(int32) 目标--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 人物id--]]
	return msg
end

function MsgDef.Msg1390304:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.id);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1390304:decode(sm)
	self.reqType = sm:readInt8();
	self.id = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1390304:opcode()
	return 1390304
end

--[[ 请求祝福信息(返回)--]]
MsgDef.Msg5390304 = {}
function MsgDef.Msg5390304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0信息1元宝2鲜花--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.ower = {} --[[(array<WeddingUserInfo>) 当事人--]]
	return msg
end

function MsgDef.Msg5390304:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt16(#self.ower)
	for i,elm in ipairs(self.ower) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390304:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	local ower_size = sm:readInt16()
	for i = 1,ower_size do
		local element = MsgDef.WeddingUserInfo:create():decode(sm)
		table.insert(self.ower, element)
	end
	return self
end


function MsgDef.Msg5390304:opcode()
	return 5390304
end
--[[ 请求伴侣信息--]]
MsgDef.Msg1390305 = {}

function MsgDef.Msg1390305:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390305:encode(sm)
	return self
end

function MsgDef.Msg1390305:decode(sm)
	return self
end

function MsgDef.Msg1390305:opcode()
	return 1390305
end

--[[ 请求伴侣信息(返回)--]]
MsgDef.Msg5390305 = {}
function MsgDef.Msg5390305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) roleId--]]
	msg.roleName = "" --[[(string) roleName--]]
	msg.roleIcon = 0 --[[(int32) roleIcon--]]
	return msg
end

function MsgDef.Msg5390305:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.Msg5390305:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	return self
end


function MsgDef.Msg5390305:opcode()
	return 5390305
end
--[[ 请求索要请柬--]]
MsgDef.Msg1390306 = {}

function MsgDef.Msg1390306:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0信息1索要请柬--]]
	return msg
end

function MsgDef.Msg1390306:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1390306:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1390306:opcode()
	return 1390306
end

--[[ 请求索要请柬(返回)--]]
MsgDef.Msg5390306 = {}
function MsgDef.Msg5390306:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.time = 0 --[[(int32) 时间--]]
	msg.users = {} --[[(array<WeddingUserInfo>) 结婚用户信息--]]
	msg.reqType = 0 --[[(int8) 0信息1索要请柬--]]
	return msg
end

function MsgDef.Msg5390306:encode(sm)
	sm:writeInt32(self.time);
	sm:writeInt16(#self.users)
	for i,elm in ipairs(self.users) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5390306:decode(sm)
	self.time = sm:readInt32();
	local users_size = sm:readInt16()
	for i = 1,users_size do
		local element = MsgDef.WeddingUserInfo:create():decode(sm)
		table.insert(self.users, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5390306:opcode()
	return 5390306
end
--[[ 请求拜堂--]]
MsgDef.Msg1390307 = {}

function MsgDef.Msg1390307:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1请求2同意3拒绝--]]
	return msg
end

function MsgDef.Msg1390307:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1390307:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1390307:opcode()
	return 1390307
end

--[[ 请求拜堂(返回)--]]
MsgDef.Msg5390307 = {}
function MsgDef.Msg5390307:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5390307:encode(sm)
	return self
end

function MsgDef.Msg5390307:decode(sm)
	return self
end


function MsgDef.Msg5390307:opcode()
	return 5390307
end
--[[ 请求婚宴经验获取--]]
MsgDef.Msg1390308 = {}

function MsgDef.Msg1390308:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390308:encode(sm)
	return self
end

function MsgDef.Msg1390308:decode(sm)
	return self
end

function MsgDef.Msg1390308:opcode()
	return 1390308
end

--[[ 请求婚宴经验获取(返回)--]]
MsgDef.Msg5390308 = {}
function MsgDef.Msg5390308:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.exp = 0 --[[(int32) 经验--]]
	return msg
end

function MsgDef.Msg5390308:encode(sm)
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5390308:decode(sm)
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5390308:opcode()
	return 5390308
end
--[[ 请求婚宴场景信息--]]
MsgDef.Msg1390309 = {}

function MsgDef.Msg1390309:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390309:encode(sm)
	return self
end

function MsgDef.Msg1390309:decode(sm)
	return self
end

function MsgDef.Msg1390309:opcode()
	return 1390309
end

--[[ 请求婚宴场景信息(返回)--]]
MsgDef.Msg5390309 = {}
function MsgDef.Msg5390309:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.banquetCount = 0 --[[(int32) 酒席数量--]]
	msg.expPool = 0 --[[(int32) 经验数量--]]
	msg.joyfulCount = 0 --[[(int32) 糖果采集数量--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.hotProgress = 0 --[[(int32) 热度--]]
	msg.isOwer = 0 --[[(int8) 是否是当事人1是0不是--]]
	return msg
end

function MsgDef.Msg5390309:encode(sm)
	sm:writeInt32(self.banquetCount);
	sm:writeInt32(self.expPool);
	sm:writeInt32(self.joyfulCount);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.hotProgress);
	sm:writeInt8(self.isOwer);
	return self
end

function MsgDef.Msg5390309:decode(sm)
	self.banquetCount = sm:readInt32();
	self.expPool = sm:readInt32();
	self.joyfulCount = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.hotProgress = sm:readInt32();
	self.isOwer = sm:readInt8();
	return self
end


function MsgDef.Msg5390309:opcode()
	return 5390309
end
--[[ 请求宣言信息--]]
MsgDef.Msg1390401 = {}

function MsgDef.Msg1390401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页,每10个一页--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:宣言信息 1:追求--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 要追求的玩家id--]]
	return msg
end

function MsgDef.Msg1390401:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1390401:decode(sm)
	self.page = sm:readInt32();
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1390401:opcode()
	return 1390401
end

--[[ 请求宣言信息(返回)--]]
MsgDef.Msg5390401 = {}
function MsgDef.Msg5390401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页--]]
	msg.maxPage = 0 --[[(int32) 最大也--]]
	msg.dInfos = {} --[[(array<DeclarationInfo>) 宣言--]]
	msg.reqType = 0 --[[(int8) 0:宣言信息 1:追求--]]
	msg.roleId = 0 --[[(int64) 要追求的玩家id--]]
	return msg
end

function MsgDef.Msg5390401:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	sm:writeInt16(#self.dInfos)
	for i,elm in ipairs(self.dInfos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5390401:decode(sm)
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	local dInfos_size = sm:readInt16()
	for i = 1,dInfos_size do
		local element = MsgDef.DeclarationInfo:create():decode(sm)
		table.insert(self.dInfos, element)
	end
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5390401:opcode()
	return 5390401
end
--[[ 请求我的宣言--]]
MsgDef.Msg1390402 = {}

function MsgDef.Msg1390402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:宣言信息 1：发布宣言--]]
	if msg.declareStr == nil then msg.declareStr = "" end --[[(string) 宣言--]]
	return msg
end

function MsgDef.Msg1390402:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.declareStr);
	return self
end

function MsgDef.Msg1390402:decode(sm)
	self.reqType = sm:readInt8();
	self.declareStr = sm:readString();
	return self
end

function MsgDef.Msg1390402:opcode()
	return 1390402
end

--[[ 请求我的宣言(返回)--]]
MsgDef.Msg5390402 = {}
function MsgDef.Msg5390402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.declareStr = "" --[[(string) 宣言--]]
	msg.reqType = 0 --[[(int8) 0:宣言信息 1：发布宣言--]]
	msg.lastDeclareTime = 0 --[[(int32) 上次宣言时间--]]
	return msg
end

function MsgDef.Msg5390402:encode(sm)
	sm:writeString(self.declareStr);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastDeclareTime);
	return self
end

function MsgDef.Msg5390402:decode(sm)
	self.declareStr = sm:readString();
	self.reqType = sm:readInt8();
	self.lastDeclareTime = sm:readInt32();
	return self
end


function MsgDef.Msg5390402:opcode()
	return 5390402
end
--[[ 请求我的追求者信息--]]
MsgDef.Msg1390403 = {}

function MsgDef.Msg1390403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:拒绝 2:接受 3:全部拒绝 4:全部接受--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 拒绝/接受玩家的id--]]
	return msg
end

function MsgDef.Msg1390403:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1390403:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1390403:opcode()
	return 1390403
end

--[[ 请求我的追求者信息(返回)--]]
MsgDef.Msg5390403 = {}
function MsgDef.Msg5390403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:拒绝 2:接受 3:全部拒绝 4:全部接受--]]
	msg.infos = {} --[[(array<DeclarationInfo>) 追求者列表--]]
	return msg
end

function MsgDef.Msg5390403:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.infos)
	for i,elm in ipairs(self.infos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390403:decode(sm)
	self.reqType = sm:readInt8();
	local infos_size = sm:readInt16()
	for i = 1,infos_size do
		local element = MsgDef.DeclarationInfo:create():decode(sm)
		table.insert(self.infos, element)
	end
	return self
end


function MsgDef.Msg5390403:opcode()
	return 5390403
end
--[[ 请求跨服活动列表--]]
MsgDef.Msg1400101 = {}

function MsgDef.Msg1400101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.crossType == nil then msg.crossType = 0 end --[[(int8) crossType--]]
	return msg
end

function MsgDef.Msg1400101:encode(sm)
	sm:writeInt8(self.crossType);
	return self
end

function MsgDef.Msg1400101:decode(sm)
	self.crossType = sm:readInt8();
	return self
end

function MsgDef.Msg1400101:opcode()
	return 1400101
end

--[[ 请求跨服活动列表(返回)--]]
MsgDef.Msg5400101 = {}
function MsgDef.Msg5400101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.crossType = 0 --[[(int8) crossType--]]
	msg.willOpenTimes = {} --[[(map<int32,int32>) willOpenTimes--]]
	return msg
end

function MsgDef.Msg5400101:encode(sm)
	sm:writeInt8(self.crossType);
	sm:writeInt16(get_map_size(self.willOpenTimes))
	for kn,elm in ipairs(self.willOpenTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5400101:decode(sm)
	self.crossType = sm:readInt8();
	local willOpenTimes_size = sm:readInt16()
	for i = 1,willOpenTimes_size do
		local kv = sm:readInt32();
		self.willOpenTimes[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5400101:opcode()
	return 5400101
end
--[[ 请求三界争霸信息--]]
MsgDef.Msg1410101 = {}

function MsgDef.Msg1410101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1410101:encode(sm)
	return self
end

function MsgDef.Msg1410101:decode(sm)
	return self
end

function MsgDef.Msg1410101:opcode()
	return 1410101
end

--[[ 请求三界争霸信息(返回)--]]
MsgDef.Msg5410101 = {}
function MsgDef.Msg5410101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.openSign = 0 --[[(int8) 1已开启 0未开启--]]
	msg.openLeftTime = 0 --[[(int32) 开启倒计时--]]
	return msg
end

function MsgDef.Msg5410101:encode(sm)
	sm:writeInt8(self.openSign);
	sm:writeInt32(self.openLeftTime);
	return self
end

function MsgDef.Msg5410101:decode(sm)
	self.openSign = sm:readInt8();
	self.openLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5410101:opcode()
	return 5410101
end
--[[ 请求三界争霸场景信息--]]
MsgDef.Msg1410102 = {}

function MsgDef.Msg1410102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1410102:encode(sm)
	return self
end

function MsgDef.Msg1410102:decode(sm)
	return self
end

function MsgDef.Msg1410102:opcode()
	return 1410102
end

--[[ 请求三界争霸场景信息(返回)--]]
MsgDef.Msg5410102 = {}
function MsgDef.Msg5410102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 倒计时--]]
	msg.dailyTask = MsgDef.SjzbDailyTaskInfo:create() --[[(SjzbDailyTaskInfo) 日常杀怪任务--]]
	msg.carTask = MsgDef.SjzbCardTaskInfo:create() --[[(SjzbCardTaskInfo) 镖车任务--]]
	msg.boxTask = MsgDef.SjzbBoxTaskInfo:create() --[[(SjzbBoxTaskInfo) 寻宝任务--]]
	msg.zone = 0 --[[(int32) 自己所在服的区域1,2,3--]]
	msg.boxGrids = {} --[[(array<SjzbBoxGridInfo>) 宝箱格子信息--]]
	return msg
end

function MsgDef.Msg5410102:encode(sm)
	sm:writeInt32(self.leftTime);
	self.dailyTask:encode(sm)
	self.carTask:encode(sm)
	self.boxTask:encode(sm)
	sm:writeInt32(self.zone);
	sm:writeInt16(#self.boxGrids)
	for i,elm in ipairs(self.boxGrids) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5410102:decode(sm)
	self.leftTime = sm:readInt32();
	self.dailyTask:decode(sm)
	self.carTask:decode(sm)
	self.boxTask:decode(sm)
	self.zone = sm:readInt32();
	local boxGrids_size = sm:readInt16()
	for i = 1,boxGrids_size do
		local element = MsgDef.SjzbBoxGridInfo:create():decode(sm)
		table.insert(self.boxGrids, element)
	end
	return self
end


function MsgDef.Msg5410102:opcode()
	return 5410102
end
--[[ 请求三界争霸刷新镖车--]]
MsgDef.Msg1410104 = {}

function MsgDef.Msg1410104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) type--]]
	return msg
end

function MsgDef.Msg1410104:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1410104:decode(sm)
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1410104:opcode()
	return 1410104
end

--[[ 请求三界争霸刷新镖车(返回)--]]
MsgDef.Msg5410104 = {}
function MsgDef.Msg5410104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int8) type--]]
	msg.cardId = 0 --[[(int32) 镖车配置id--]]
	return msg
end

function MsgDef.Msg5410104:encode(sm)
	sm:writeInt8(self.type);
	sm:writeInt32(self.cardId);
	return self
end

function MsgDef.Msg5410104:decode(sm)
	self.type = sm:readInt8();
	self.cardId = sm:readInt32();
	return self
end


function MsgDef.Msg5410104:opcode()
	return 5410104
end
--[[ 请求三界争霸杀怪任务--]]
MsgDef.Msg1410201 = {}

function MsgDef.Msg1410201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) 0:查询 1:接受--]]
	return msg
end

function MsgDef.Msg1410201:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1410201:decode(sm)
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1410201:opcode()
	return 1410201
end

--[[ 请求三界争霸杀怪任务(返回)--]]
MsgDef.Msg5410201 = {}
function MsgDef.Msg5410201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dailyTask = MsgDef.SjzbDailyTaskInfo:create() --[[(SjzbDailyTaskInfo) 日常杀怪任务--]]
	msg.type = 0 --[[(int8) 0:查询 1:接受--]]
	return msg
end

function MsgDef.Msg5410201:encode(sm)
	self.dailyTask:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5410201:decode(sm)
	self.dailyTask:decode(sm)
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5410201:opcode()
	return 5410201
end
--[[ 请求三界争霸护送任务--]]
MsgDef.Msg1410202 = {}

function MsgDef.Msg1410202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) 0:查询 1:接受--]]
	return msg
end

function MsgDef.Msg1410202:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1410202:decode(sm)
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1410202:opcode()
	return 1410202
end

--[[ 请求三界争霸护送任务(返回)--]]
MsgDef.Msg5410202 = {}
function MsgDef.Msg5410202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cardTask = MsgDef.SjzbCardTaskInfo:create() --[[(SjzbCardTaskInfo) cardTask--]]
	msg.type = 0 --[[(int8) 0:查询 1:接受--]]
	return msg
end

function MsgDef.Msg5410202:encode(sm)
	self.cardTask:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5410202:decode(sm)
	self.cardTask:decode(sm)
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5410202:opcode()
	return 5410202
end
--[[ 请求三界争霸寻宝任务--]]
MsgDef.Msg1410203 = {}

function MsgDef.Msg1410203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) 0:查询 1:随机箱子 2:最高箱子--]]
	return msg
end

function MsgDef.Msg1410203:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1410203:decode(sm)
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1410203:opcode()
	return 1410203
end

--[[ 请求三界争霸寻宝任务(返回)--]]
MsgDef.Msg5410203 = {}
function MsgDef.Msg5410203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxGrids = {} --[[(array<SjzbBoxGridInfo>) 宝箱信息列表--]]
	msg.type = 0 --[[(int8) 0:查询 1:随机箱子 2:最高箱子--]]
	msg.boxTask = MsgDef.SjzbBoxTaskInfo:create() --[[(SjzbBoxTaskInfo) 宝箱信息列表--]]
	return msg
end

function MsgDef.Msg5410203:encode(sm)
	sm:writeInt16(#self.boxGrids)
	for i,elm in ipairs(self.boxGrids) do
		elm:encode(sm)
	end
	sm:writeInt8(self.type);
	self.boxTask:encode(sm)
	return self
end

function MsgDef.Msg5410203:decode(sm)
	local boxGrids_size = sm:readInt16()
	for i = 1,boxGrids_size do
		local element = MsgDef.SjzbBoxGridInfo:create():decode(sm)
		table.insert(self.boxGrids, element)
	end
	self.type = sm:readInt8();
	self.boxTask:decode(sm)
	return self
end


function MsgDef.Msg5410203:opcode()
	return 5410203
end
--[[ 请求三界争霸镖车位置--]]
MsgDef.Msg1410204 = {}

function MsgDef.Msg1410204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1410204:encode(sm)
	return self
end

function MsgDef.Msg1410204:decode(sm)
	return self
end

function MsgDef.Msg1410204:opcode()
	return 1410204
end

--[[ 请求三界争霸镖车位置(返回)--]]
MsgDef.Msg5410204 = {}
function MsgDef.Msg5410204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pox = 0 --[[(int16) pox--]]
	msg.poy = 0 --[[(int16) pox--]]
	msg.roleId = 0 --[[(int64) 镖车roleId--]]
	msg.curHp = 0 --[[(int32) curHp--]]
	msg.maxHp = 0 --[[(int32) maxHp--]]
	return msg
end

function MsgDef.Msg5410204:encode(sm)
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.curHp);
	sm:writeInt32(self.maxHp);
	return self
end

function MsgDef.Msg5410204:decode(sm)
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.roleId = sm:readInt64();
	self.curHp = sm:readInt32();
	self.maxHp = sm:readInt32();
	return self
end


function MsgDef.Msg5410204:opcode()
	return 5410204
end
--[[ 请求仙魔战场景信息--]]
MsgDef.Msg1420101 = {}

function MsgDef.Msg1420101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1420101:encode(sm)
	return self
end

function MsgDef.Msg1420101:decode(sm)
	return self
end

function MsgDef.Msg1420101:opcode()
	return 1420101
end

--[[ 请求仙魔战场景信息(返回)--]]
MsgDef.Msg5420101 = {}
function MsgDef.Msg5420101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.killCount = 0 --[[(int32) 我的击杀数量--]]
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.xianCampInfo = MsgDef.XianMoCampInfo:create() --[[(XianMoCampInfo) 仙阵营信息--]]
	msg.campId = 0 --[[(int32) 我的阵营id--]]
	msg.createTime = 0 --[[(int32) createTime--]]
	msg.moCampInfo = MsgDef.XianMoCampInfo:create() --[[(XianMoCampInfo) 魔阵营信息--]]
	msg.top20AvgLev = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5420101:encode(sm)
	sm:writeInt32(self.killCount);
	sm:writeInt32(self.score);
	self.xianCampInfo:encode(sm)
	sm:writeInt32(self.campId);
	sm:writeInt32(self.createTime);
	self.moCampInfo:encode(sm)
	sm:writeInt32(self.top20AvgLev);
	return self
end

function MsgDef.Msg5420101:decode(sm)
	self.killCount = sm:readInt32();
	self.score = sm:readInt32();
	self.xianCampInfo:decode(sm)
	self.campId = sm:readInt32();
	self.createTime = sm:readInt32();
	self.moCampInfo:decode(sm)
	self.top20AvgLev = sm:readInt32();
	return self
end


function MsgDef.Msg5420101:opcode()
	return 5420101
end
--[[ 请求仙魔战日志--]]
MsgDef.Msg1420102 = {}

function MsgDef.Msg1420102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) page--]]
	if msg.pageSum == nil then msg.pageSum = 0 end --[[(int32) pageSum--]]
	return msg
end

function MsgDef.Msg1420102:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	return self
end

function MsgDef.Msg1420102:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	return self
end

function MsgDef.Msg1420102:opcode()
	return 1420102
end

--[[ 请求仙魔战日志(返回)--]]
MsgDef.Msg5420102 = {}
function MsgDef.Msg5420102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.logs = {} --[[(array<XianMoRankInfo>) 日志--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.page = 0 --[[(int32) 当前页从1开始--]]
	return msg
end

function MsgDef.Msg5420102:encode(sm)
	sm:writeInt16(#self.logs)
	for i,elm in ipairs(self.logs) do
		elm:encode(sm)
	end
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg5420102:decode(sm)
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local element = MsgDef.XianMoRankInfo:create():decode(sm)
		table.insert(self.logs, element)
	end
	self.pageSum = sm:readInt32();
	self.page = sm:readInt32();
	return self
end


function MsgDef.Msg5420102:opcode()
	return 5420102
end
--[[ 请求仙魔战详情--]]
MsgDef.Msg1420103 = {}

function MsgDef.Msg1420103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1420103:encode(sm)
	return self
end

function MsgDef.Msg1420103:decode(sm)
	return self
end

function MsgDef.Msg1420103:opcode()
	return 1420103
end

--[[ 请求仙魔战详情(返回)--]]
MsgDef.Msg5420103 = {}
function MsgDef.Msg5420103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xianTops = {} --[[(array<XianMoRankInfo>) 仙阵营前x名--]]
	msg.moTops = {} --[[(array<XianMoRankInfo>) 魔阵营前x名--]]
	return msg
end

function MsgDef.Msg5420103:encode(sm)
	sm:writeInt16(#self.xianTops)
	for i,elm in ipairs(self.xianTops) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.moTops)
	for i,elm in ipairs(self.moTops) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5420103:decode(sm)
	local xianTops_size = sm:readInt16()
	for i = 1,xianTops_size do
		local element = MsgDef.XianMoRankInfo:create():decode(sm)
		table.insert(self.xianTops, element)
	end
	local moTops_size = sm:readInt16()
	for i = 1,moTops_size do
		local element = MsgDef.XianMoRankInfo:create():decode(sm)
		table.insert(self.moTops, element)
	end
	return self
end


function MsgDef.Msg5420103:opcode()
	return 5420103
end
--[[ 请求仙魔战玩家位置信息--]]
MsgDef.Msg1420104 = {}

function MsgDef.Msg1420104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:随机敌方玩家 2:追随 3:追杀--]]
	return msg
end

function MsgDef.Msg1420104:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1420104:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1420104:opcode()
	return 1420104
end

--[[ 请求仙魔战玩家位置信息(返回)--]]
MsgDef.Msg5420104 = {}
function MsgDef.Msg5420104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pox = 0 --[[(int16) x坐标--]]
	msg.poy = 0 --[[(int16) y坐标--]]
	msg.roleId = 0 --[[(int64) roleId--]]
	msg.reqType = 0 --[[(int8) 1:随机敌方玩家 2:追随 3:追杀--]]
	return msg
end

function MsgDef.Msg5420104:encode(sm)
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5420104:decode(sm)
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.roleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5420104:opcode()
	return 5420104
end
--[[ 请求仙魔战界面--]]
MsgDef.Msg1420105 = {}

function MsgDef.Msg1420105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1420105:encode(sm)
	return self
end

function MsgDef.Msg1420105:decode(sm)
	return self
end

function MsgDef.Msg1420105:opcode()
	return 1420105
end

--[[ 请求仙魔战界面(返回)--]]
MsgDef.Msg5420105 = {}
function MsgDef.Msg5420105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5420105:encode(sm)
	return self
end

function MsgDef.Msg5420105:decode(sm)
	return self
end


function MsgDef.Msg5420105:opcode()
	return 5420105
end
--[[ 请求剑神殿信息--]]
MsgDef.Msg1430101 = {}

function MsgDef.Msg1430101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1430101:encode(sm)
	return self
end

function MsgDef.Msg1430101:decode(sm)
	return self
end

function MsgDef.Msg1430101:opcode()
	return 1430101
end

--[[ 请求剑神殿信息(返回)--]]
MsgDef.Msg5430101 = {}
function MsgDef.Msg5430101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) 剩余玩耍时间--]]
	msg.sceneMap = {} --[[(map<int32,int32>) key:场景id, value:1已死亡,2已刷新--]]
	msg.crossWillOpenTime = 0 --[[(int32) 跨服场景即将开启时间--]]
	msg.tired = 0 --[[(int32) 疲劳值--]]
	msg.leftBuyTiredCount = 0 --[[(int32) 今日剩余购买疲劳值数量--]]
	return msg
end

function MsgDef.Msg5430101:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(get_map_size(self.sceneMap))
	for kn,elm in ipairs(self.sceneMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.crossWillOpenTime);
	sm:writeInt32(self.tired);
	sm:writeInt32(self.leftBuyTiredCount);
	return self
end

function MsgDef.Msg5430101:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local sceneMap_size = sm:readInt16()
	for i = 1,sceneMap_size do
		local kv = sm:readInt32();
		self.sceneMap[kv] = sm:readInt32();
	end
	self.crossWillOpenTime = sm:readInt32();
	self.tired = sm:readInt32();
	self.leftBuyTiredCount = sm:readInt32();
	return self
end


function MsgDef.Msg5430101:opcode()
	return 5430101
end
--[[ 请求剑神殿boss列表--]]
MsgDef.Msg1430102 = {}

function MsgDef.Msg1430102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1430102:encode(sm)
	return self
end

function MsgDef.Msg1430102:decode(sm)
	return self
end

function MsgDef.Msg1430102:opcode()
	return 1430102
end

--[[ 请求剑神殿boss列表(返回)--]]
MsgDef.Msg5430102 = {}
function MsgDef.Msg5430102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<JsdBossInfo>) boss列表--]]
	return msg
end

function MsgDef.Msg5430102:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5430102:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.JsdBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end


function MsgDef.Msg5430102:opcode()
	return 5430102
end
--[[ 请求剑神殿场景信息--]]
MsgDef.Msg1430103 = {}

function MsgDef.Msg1430103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1430103:encode(sm)
	return self
end

function MsgDef.Msg1430103:decode(sm)
	return self
end

function MsgDef.Msg1430103:opcode()
	return 1430103
end

--[[ 请求剑神殿场景信息(返回)--]]
MsgDef.Msg5430103 = {}
function MsgDef.Msg5430103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) --]]
	msg.leftDoubleTime = 0 --[[(int32) --]]
	msg.aliveBossNum = 0 --[[(int32) 存活boss数量--]]
	msg.tired = 0 --[[(int32) 疲劳值--]]
	msg.leftBuyTiredCount = 0 --[[(int32) 今日剩余购买疲劳值次数--]]
	return msg
end

function MsgDef.Msg5430103:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt32(self.leftDoubleTime);
	sm:writeInt32(self.aliveBossNum);
	sm:writeInt32(self.tired);
	sm:writeInt32(self.leftBuyTiredCount);
	return self
end

function MsgDef.Msg5430103:decode(sm)
	self.leftPlayTime = sm:readInt32();
	self.leftDoubleTime = sm:readInt32();
	self.aliveBossNum = sm:readInt32();
	self.tired = sm:readInt32();
	self.leftBuyTiredCount = sm:readInt32();
	return self
end


function MsgDef.Msg5430103:opcode()
	return 5430103
end
--[[ 请求剑神殿疲劳值使用--]]
MsgDef.Msg1430104 = {}

function MsgDef.Msg1430104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 使用数量--]]
	return msg
end

function MsgDef.Msg1430104:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1430104:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1430104:opcode()
	return 1430104
end

--[[ 请求剑神殿疲劳值使用(返回)--]]
MsgDef.Msg5430104 = {}
function MsgDef.Msg5430104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tired = 0 --[[(int32) 当前疲劳值--]]
	msg.leftPlayTime = 0 --[[(int32) 剩余玩耍时间--]]
	msg.count = 0 --[[(int32) 使用数量--]]
	return msg
end

function MsgDef.Msg5430104:encode(sm)
	sm:writeInt32(self.tired);
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg5430104:decode(sm)
	self.tired = sm:readInt32();
	self.leftPlayTime = sm:readInt32();
	self.count = sm:readInt32();
	return self
end


function MsgDef.Msg5430104:opcode()
	return 5430104
end
--[[ 请求剑神殿疲劳值购买--]]
MsgDef.Msg1430105 = {}

function MsgDef.Msg1430105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1430105:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1430105:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1430105:opcode()
	return 1430105
end

--[[ 请求剑神殿疲劳值购买(返回)--]]
MsgDef.Msg5430105 = {}
function MsgDef.Msg5430105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tired = 0 --[[(int32) 疲劳值--]]
	msg.leftBuyTiredCount = 0 --[[(int32) 剩余购买疲劳值数量--]]
	msg.count = 0 --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg5430105:encode(sm)
	sm:writeInt32(self.tired);
	sm:writeInt32(self.leftBuyTiredCount);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg5430105:decode(sm)
	self.tired = sm:readInt32();
	self.leftBuyTiredCount = sm:readInt32();
	self.count = sm:readInt32();
	return self
end


function MsgDef.Msg5430105:opcode()
	return 5430105
end
--[[ 请求仙尊boss信息--]]
MsgDef.Msg1440101 = {}

function MsgDef.Msg1440101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1440101:encode(sm)
	return self
end

function MsgDef.Msg1440101:decode(sm)
	return self
end

function MsgDef.Msg1440101:opcode()
	return 1440101
end

--[[ 请求仙尊boss信息(返回)--]]
MsgDef.Msg5440101 = {}
function MsgDef.Msg5440101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTimes = 0 --[[(int32) 挑战剩余次数--]]
	msg.leftBuyCount = 0 --[[(int32) 今日剩余购买次数--]]
	return msg
end

function MsgDef.Msg5440101:encode(sm)
	sm:writeInt32(self.leftTimes);
	sm:writeInt32(self.leftBuyCount);
	return self
end

function MsgDef.Msg5440101:decode(sm)
	self.leftTimes = sm:readInt32();
	self.leftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5440101:opcode()
	return 5440101
end
--[[ 请求购买仙尊Boss数据--]]
MsgDef.Msg1440102 = {}

function MsgDef.Msg1440102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=购买次数2购买入场券--]]
	return msg
end

function MsgDef.Msg1440102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1440102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1440102:opcode()
	return 1440102
end

--[[ 请求购买仙尊Boss数据(返回)--]]
MsgDef.Msg5440102 = {}
function MsgDef.Msg5440102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1=购买次数2购买入场券--]]
	msg.leftTimes = 0 --[[(int32) 剩余次数--]]
	msg.leftBuyCount = 0 --[[(int32) leftBuyCount--]]
	return msg
end

function MsgDef.Msg5440102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTimes);
	sm:writeInt32(self.leftBuyCount);
	return self
end

function MsgDef.Msg5440102:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTimes = sm:readInt32();
	self.leftBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5440102:opcode()
	return 5440102
end
--[[ 请求仙尊boss场景信息--]]
MsgDef.Msg1440103 = {}

function MsgDef.Msg1440103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1440103:encode(sm)
	return self
end

function MsgDef.Msg1440103:decode(sm)
	return self
end

function MsgDef.Msg1440103:opcode()
	return 1440103
end

--[[ 请求仙尊boss场景信息(返回)--]]
MsgDef.Msg5440103 = {}
function MsgDef.Msg5440103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5440103:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5440103:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5440103:opcode()
	return 5440103
end
--[[ 请求BOSS之家信息--]]
MsgDef.Msg1450101 = {}

function MsgDef.Msg1450101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1450101:encode(sm)
	return self
end

function MsgDef.Msg1450101:decode(sm)
	return self
end

function MsgDef.Msg1450101:opcode()
	return 1450101
end

--[[ 请求BOSS之家信息(返回)--]]
MsgDef.Msg5450101 = {}
function MsgDef.Msg5450101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) tipConfMap--]]
	return msg
end

function MsgDef.Msg5450101:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5450101:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5450101:opcode()
	return 5450101
end
--[[ 请求BOSS之家场景信息--]]
MsgDef.Msg1450102 = {}

function MsgDef.Msg1450102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1450102:encode(sm)
	return self
end

function MsgDef.Msg1450102:decode(sm)
	return self
end

function MsgDef.Msg1450102:opcode()
	return 1450102
end

--[[ 请求BOSS之家场景信息(返回)--]]
MsgDef.Msg5450102 = {}
function MsgDef.Msg5450102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<BossHomeBossInfo>) bossList--]]
	return msg
end

function MsgDef.Msg5450102:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5450102:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.BossHomeBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end


function MsgDef.Msg5450102:opcode()
	return 5450102
end
--[[ 请求BOSS之家关注--]]
MsgDef.Msg1450103 = {}

function MsgDef.Msg1450103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1450103:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1450103:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1450103:opcode()
	return 1450103
end

--[[ 请求BOSS之家关注(返回)--]]
MsgDef.Msg5450103 = {}
function MsgDef.Msg5450103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5450103:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5450103:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5450103:opcode()
	return 5450103
end
--[[ 请求家园拜访列表--]]
MsgDef.Msg1460101 = {}

function MsgDef.Msg1460101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:名字搜索2:附件3:好友4:仙盟--]]
	if msg.name == nil then msg.name = "" end --[[(string) 根据名字搜索--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1460101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.name);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1460101:decode(sm)
	self.reqType = sm:readInt8();
	self.name = sm:readString();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1460101:opcode()
	return 1460101
end

--[[ 请求家园拜访列表(返回)--]]
MsgDef.Msg5460101 = {}
function MsgDef.Msg5460101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:名字搜索2:附件3:好友4:仙盟--]]
	msg.visitList = {} --[[(array<HomeVisitInfo>) 家园列表--]]
	msg.name = "" --[[(string) 根据名字搜索--]]
	msg.page = 0 --[[(int32) 页数 10条--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	return msg
end

function MsgDef.Msg5460101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.visitList)
	for i,elm in ipairs(self.visitList) do
		elm:encode(sm)
	end
	sm:writeString(self.name);
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	return self
end

function MsgDef.Msg5460101:decode(sm)
	self.reqType = sm:readInt8();
	local visitList_size = sm:readInt16()
	for i = 1,visitList_size do
		local element = MsgDef.HomeVisitInfo:create():decode(sm)
		table.insert(self.visitList, element)
	end
	self.name = sm:readString();
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	return self
end


function MsgDef.Msg5460101:opcode()
	return 5460101
end
--[[ 请求家园温泉任务追踪信息--]]
MsgDef.Msg1460102 = {}

function MsgDef.Msg1460102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1460102:encode(sm)
	return self
end

function MsgDef.Msg1460102:decode(sm)
	return self
end

function MsgDef.Msg1460102:opcode()
	return 1460102
end

--[[ 请求家园温泉任务追踪信息(返回)--]]
MsgDef.Msg5460102 = {}
function MsgDef.Msg5460102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.income = 0 --[[(int32) 收益--]]
	msg.leftHotSpringSec = 0 --[[(int32) 剩余温泉秒数--]]
	msg.startHotSpringTime = 0 --[[(int32) 泡温泉的开始时间--]]
	msg.minIncome = 0 --[[(int32) 每分钟收益--]]
	return msg
end

function MsgDef.Msg5460102:encode(sm)
	sm:writeInt32(self.income);
	sm:writeInt32(self.leftHotSpringSec);
	sm:writeInt32(self.startHotSpringTime);
	sm:writeInt32(self.minIncome);
	return self
end

function MsgDef.Msg5460102:decode(sm)
	self.income = sm:readInt32();
	self.leftHotSpringSec = sm:readInt32();
	self.startHotSpringTime = sm:readInt32();
	self.minIncome = sm:readInt32();
	return self
end


function MsgDef.Msg5460102:opcode()
	return 5460102
end
--[[ 请求家园场景任务追踪--]]
MsgDef.Msg1460103 = {}

function MsgDef.Msg1460103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1460103:encode(sm)
	return self
end

function MsgDef.Msg1460103:decode(sm)
	return self
end

function MsgDef.Msg1460103:opcode()
	return 1460103
end

--[[ 请求家园场景任务追踪(返回)--]]
MsgDef.Msg5460103 = {}
function MsgDef.Msg5460103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.homeName = "" --[[(string) 家园名字--]]
	msg.houseLev = 0 --[[(int32) 宅邸等级--]]
	msg.wallLev = 0 --[[(int32) 围墙等级--]]
	msg.zooLev = 0 --[[(int32) 兽园等级--]]
	msg.hotSpringLev = 0 --[[(int32) 温泉等级--]]
	msg.hyssName = "" --[[(string) 护院神兽名字--]]
	msg.leftHotSpringSec = 0 --[[(int32) 剩余温泉秒数--]]
	msg.roleId = 0 --[[(int64) 拥有玩家id--]]
	msg.waterSelfCount = 0 --[[(int32) 浇水自己的次数--]]
	msg.waterOtherCount = 0 --[[(int32) 浇水他人的次数--]]
	msg.stealCount = 0 --[[(int32) 偷窃次数--]]
	msg.ownerName = "" --[[(string) 拥有者名字--]]
	msg.callCount = 0 --[[(int32) 召唤次数--]]
	return msg
end

function MsgDef.Msg5460103:encode(sm)
	sm:writeString(self.homeName);
	sm:writeInt32(self.houseLev);
	sm:writeInt32(self.wallLev);
	sm:writeInt32(self.zooLev);
	sm:writeInt32(self.hotSpringLev);
	sm:writeString(self.hyssName);
	sm:writeInt32(self.leftHotSpringSec);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.waterSelfCount);
	sm:writeInt32(self.waterOtherCount);
	sm:writeInt32(self.stealCount);
	sm:writeString(self.ownerName);
	sm:writeInt32(self.callCount);
	return self
end

function MsgDef.Msg5460103:decode(sm)
	self.homeName = sm:readString();
	self.houseLev = sm:readInt32();
	self.wallLev = sm:readInt32();
	self.zooLev = sm:readInt32();
	self.hotSpringLev = sm:readInt32();
	self.hyssName = sm:readString();
	self.leftHotSpringSec = sm:readInt32();
	self.roleId = sm:readInt64();
	self.waterSelfCount = sm:readInt32();
	self.waterOtherCount = sm:readInt32();
	self.stealCount = sm:readInt32();
	self.ownerName = sm:readString();
	self.callCount = sm:readInt32();
	return self
end


function MsgDef.Msg5460103:opcode()
	return 5460103
end
--[[ 请求设置家园--]]
MsgDef.Msg1460104 = {}

function MsgDef.Msg1460104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:设置信息1:修改名字2:开始潜修3:停止潜修4:灵兽开启防御--]]
	if msg.name == nil then msg.name = "" end --[[(string) 修改的名字--]]
	return msg
end

function MsgDef.Msg1460104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg1460104:decode(sm)
	self.reqType = sm:readInt8();
	self.name = sm:readString();
	return self
end

function MsgDef.Msg1460104:opcode()
	return 1460104
end

--[[ 请求设置家园(返回)--]]
MsgDef.Msg5460104 = {}
function MsgDef.Msg5460104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:设置信息1:修改名字2:开始潜修3:停止潜修4:灵兽开启防御--]]
	msg.leftPracticeSec = 0 --[[(int32) 剩余闭关修炼秒数--]]
	msg.practiceStatu = 0 --[[(int8) 0:未修炼1:正在修炼--]]
	msg.hyssStatu = 0 --[[(int8) 0:未开启防御1:已开启防御--]]
	msg.name = "" --[[(string) 修改的名字--]]
	msg.gotSkins = {} --[[(map<int32,int32>) 0:未穿戴,1:已穿戴--]]
	return msg
end

function MsgDef.Msg5460104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftPracticeSec);
	sm:writeInt8(self.practiceStatu);
	sm:writeInt8(self.hyssStatu);
	sm:writeString(self.name);
	sm:writeInt16(get_map_size(self.gotSkins))
	for kn,elm in ipairs(self.gotSkins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5460104:decode(sm)
	self.reqType = sm:readInt8();
	self.leftPracticeSec = sm:readInt32();
	self.practiceStatu = sm:readInt8();
	self.hyssStatu = sm:readInt8();
	self.name = sm:readString();
	local gotSkins_size = sm:readInt16()
	for i = 1,gotSkins_size do
		local kv = sm:readInt32();
		self.gotSkins[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5460104:opcode()
	return 5460104
end
--[[ 请求家园组件升级--]]
MsgDef.Msg1460105 = {}

function MsgDef.Msg1460105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 组件id 1001 宅邸...--]]
	return msg
end

function MsgDef.Msg1460105:encode(sm)
	sm:writeInt32(self.reqType);
	return self
end

function MsgDef.Msg1460105:decode(sm)
	self.reqType = sm:readInt32();
	return self
end

function MsgDef.Msg1460105:opcode()
	return 1460105
end

--[[ 请求家园组件升级(返回)--]]
MsgDef.Msg5460105 = {}
function MsgDef.Msg5460105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 组件id 1001 宅邸...--]]
	msg.lev = 0 --[[(int32) 等级--]]
	return msg
end

function MsgDef.Msg5460105:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.lev);
	return self
end

function MsgDef.Msg5460105:decode(sm)
	self.reqType = sm:readInt32();
	self.lev = sm:readInt32();
	return self
end


function MsgDef.Msg5460105:opcode()
	return 5460105
end
--[[ 请求家园组件皮肤改变--]]
MsgDef.Msg1460106 = {}

function MsgDef.Msg1460106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skins == nil then msg.skins = {} end --[[(array<int32>) 皮肤类型1,穿戴的皮肤配置1,皮肤类型2,穿戴的皮肤配置2--]]
	return msg
end

function MsgDef.Msg1460106:encode(sm)
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1460106:decode(sm)
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local elm = sm:readInt32();
		table.insert(self.skins, elm)
	end
	return self
end

function MsgDef.Msg1460106:opcode()
	return 1460106
end

--[[ 请求家园组件皮肤改变(返回)--]]
MsgDef.Msg5460106 = {}
function MsgDef.Msg5460106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skins = {} --[[(array<int32>) 皮肤类型1,穿戴的皮肤配置1,皮肤类型2,穿戴的皮肤配置2--]]
	return msg
end

function MsgDef.Msg5460106:encode(sm)
	sm:writeInt16(get_map_size(self.skins))
	for i,elm in ipairs(self.skins) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5460106:decode(sm)
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local ele = sm:readInt32();
		table.insert(self.skins, ele)
	end
	return self
end


function MsgDef.Msg5460106:opcode()
	return 5460106
end
--[[ 请求查看拜访记录--]]
MsgDef.Msg1460107 = {}

function MsgDef.Msg1460107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1460107:encode(sm)
	return self
end

function MsgDef.Msg1460107:decode(sm)
	return self
end

function MsgDef.Msg1460107:opcode()
	return 1460107
end

--[[ 请求查看拜访记录(返回)--]]
MsgDef.Msg5460107 = {}
function MsgDef.Msg5460107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.log = {} --[[(array<string>) 拜访记录--]]
	return msg
end

function MsgDef.Msg5460107:encode(sm)
	sm:writeInt16(get_map_size(self.log))
	for i,elm in ipairs(self.log) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5460107:decode(sm)
	local log_size = sm:readInt16()
	for i = 1,log_size do
		local ele = sm:readString();
		table.insert(self.log, ele)
	end
	return self
end


function MsgDef.Msg5460107:opcode()
	return 5460107
end
--[[ 请求家园拜访--]]
MsgDef.Msg1460108 = {}

function MsgDef.Msg1460108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	return msg
end

function MsgDef.Msg1460108:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1460108:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1460108:opcode()
	return 1460108
end

--[[ 请求家园拜访(返回)--]]
MsgDef.Msg5460108 = {}
function MsgDef.Msg5460108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) roleId--]]
	return msg
end

function MsgDef.Msg5460108:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5460108:decode(sm)
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5460108:opcode()
	return 5460108
end
--[[ 请求家园温泉操作--]]
MsgDef.Msg1460109 = {}

function MsgDef.Msg1460109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:泡温泉2:离开温泉--]]
	return msg
end

function MsgDef.Msg1460109:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1460109:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1460109:opcode()
	return 1460109
end

--[[ 请求家园温泉操作(返回)--]]
MsgDef.Msg5460109 = {}
function MsgDef.Msg5460109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:泡温泉2:离开温泉--]]
	return msg
end

function MsgDef.Msg5460109:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5460109:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5460109:opcode()
	return 5460109
end
--[[ 请求家园入口操作--]]
MsgDef.Msg1460110 = {}

function MsgDef.Msg1460110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息1:开启家园2:修复家园--]]
	return msg
end

function MsgDef.Msg1460110:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1460110:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1460110:opcode()
	return 1460110
end

--[[ 请求家园入口操作(返回)--]]
MsgDef.Msg5460110 = {}
function MsgDef.Msg5460110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息1:开启家园2:修复家园--]]
	msg.homeSign = 0 --[[(int8) 1:未开启家园2:已荒废--]]
	return msg
end

function MsgDef.Msg5460110:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.homeSign);
	return self
end

function MsgDef.Msg5460110:decode(sm)
	self.reqType = sm:readInt8();
	self.homeSign = sm:readInt8();
	return self
end


function MsgDef.Msg5460110:opcode()
	return 5460110
end
--[[ 请求家园灵田操作--]]
MsgDef.Msg1460111 = {}

function MsgDef.Msg1460111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:种植2:浇水3:催熟4:收获5:偷窃6:清除--]]
	if msg.confId == nil then msg.confId = {} end --[[(array<int32>) 灵田id--]]
	return msg
end

function MsgDef.Msg1460111:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.confId))
	for i,elm in ipairs(self.confId) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1460111:decode(sm)
	self.reqType = sm:readInt8();
	local confId_size = sm:readInt16()
	for i = 1,confId_size do
		local elm = sm:readInt32();
		table.insert(self.confId, elm)
	end
	return self
end

function MsgDef.Msg1460111:opcode()
	return 1460111
end

--[[ 请求家园灵田操作(返回)--]]
MsgDef.Msg5460111 = {}
function MsgDef.Msg5460111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:种植2:浇水3:催熟4:收获5:偷窃6:清除--]]
	msg.confId = {} --[[(array<int32>) 灵田id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) --]]
	return msg
end

function MsgDef.Msg5460111:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.confId))
	for i,elm in ipairs(self.confId) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5460111:decode(sm)
	self.reqType = sm:readInt8();
	local confId_size = sm:readInt16()
	for i = 1,confId_size do
		local ele = sm:readInt32();
		table.insert(self.confId, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5460111:opcode()
	return 5460111
end
--[[ 请求兽园场景任务追踪--]]
MsgDef.Msg1460112 = {}

function MsgDef.Msg1460112:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1460112:encode(sm)
	return self
end

function MsgDef.Msg1460112:decode(sm)
	return self
end

function MsgDef.Msg1460112:opcode()
	return 1460112
end

--[[ 请求兽园场景任务追踪(返回)--]]
MsgDef.Msg5460112 = {}
function MsgDef.Msg5460112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curHpPercent = 0 --[[(int32) 血量百分比--]]
	msg.hurtPercent = 0 --[[(int32) 我的伤害百分比--]]
	msg.rankList = {} --[[(array<HomeBossRankInfo>) 排行榜--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属名字--]]
	msg.attris = {} --[[(map<int32,int32>) 属性--]]
	msg.roleId = 0 --[[(int64) 怪物id--]]
	return msg
end

function MsgDef.Msg5460112:encode(sm)
	sm:writeInt32(self.curHpPercent);
	sm:writeInt32(self.hurtPercent);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	sm:writeString(self.hateRoleName);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5460112:decode(sm)
	self.curHpPercent = sm:readInt32();
	self.hurtPercent = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.HomeBossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	self.hateRoleName = sm:readString();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5460112:opcode()
	return 5460112
end
--[[ 请求我的家园种子列表--]]
MsgDef.Msg1460113 = {}

function MsgDef.Msg1460113:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1460113:encode(sm)
	return self
end

function MsgDef.Msg1460113:decode(sm)
	return self
end

function MsgDef.Msg1460113:opcode()
	return 1460113
end

--[[ 请求我的家园种子列表(返回)--]]
MsgDef.Msg5460113 = {}
function MsgDef.Msg5460113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.seeds = {} --[[(map<int32,int32>) key:confId,value->数量--]]
	return msg
end

function MsgDef.Msg5460113:encode(sm)
	sm:writeInt16(get_map_size(self.seeds))
	for kn,elm in ipairs(self.seeds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5460113:decode(sm)
	local seeds_size = sm:readInt16()
	for i = 1,seeds_size do
		local kv = sm:readInt32();
		self.seeds[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5460113:opcode()
	return 5460113
end
--[[ 请求家园BOSS操作--]]
MsgDef.Msg1460114 = {}

function MsgDef.Msg1460114:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:普通喂养2:元宝喂养3:召唤--]]
	return msg
end

function MsgDef.Msg1460114:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1460114:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1460114:opcode()
	return 1460114
end

--[[ 请求家园BOSS操作(返回)--]]
MsgDef.Msg5460114 = {}
function MsgDef.Msg5460114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:普通喂养2:元宝喂养3:召唤--]]
	msg.lev = 0 --[[(int32) boss等级--]]
	msg.callCount = 0 --[[(int32) 召唤boss次数--]]
	msg.exp = 0 --[[(int32) boss当前等级经验--]]
	return msg
end

function MsgDef.Msg5460114:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.callCount);
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5460114:decode(sm)
	self.reqType = sm:readInt8();
	self.lev = sm:readInt32();
	self.callCount = sm:readInt32();
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5460114:opcode()
	return 5460114
end
--[[ 请求雪人入口信息--]]
MsgDef.Msg1470101 = {}

function MsgDef.Msg1470101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1470101:encode(sm)
	return self
end

function MsgDef.Msg1470101:decode(sm)
	return self
end

function MsgDef.Msg1470101:opcode()
	return 1470101
end

--[[ 请求雪人入口信息(返回)--]]
MsgDef.Msg5470101 = {}
function MsgDef.Msg5470101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.nextStartTime = 0 --[[(int32) 下次开启时间--]]
	return msg
end

function MsgDef.Msg5470101:encode(sm)
	sm:writeInt32(self.leftSec);
	sm:writeInt32(self.nextStartTime);
	return self
end

function MsgDef.Msg5470101:decode(sm)
	self.leftSec = sm:readInt32();
	self.nextStartTime = sm:readInt32();
	return self
end


function MsgDef.Msg5470101:opcode()
	return 5470101
end
--[[ 请求雪人作战场景任务追踪--]]
MsgDef.Msg1470102 = {}

function MsgDef.Msg1470102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1470102:encode(sm)
	return self
end

function MsgDef.Msg1470102:decode(sm)
	return self
end

function MsgDef.Msg1470102:opcode()
	return 1470102
end

--[[ 请求雪人作战场景任务追踪(返回)--]]
MsgDef.Msg5470102 = {}
function MsgDef.Msg5470102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.bossList = {} --[[(array<SnowBossInfo>) 雪战boss--]]
	msg.openTime = 0 --[[(int32) 活动开始时间--]]
	msg.skills = {} --[[(map<int32,int32>) skillId->剩余次数--]]
	return msg
end

function MsgDef.Msg5470102:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.openTime);
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5470102:decode(sm)
	self.score = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SnowBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.openTime = sm:readInt32();
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5470102:opcode()
	return 5470102
end
--[[ 请求雪人大战排行榜--]]
MsgDef.Msg1470103 = {}

function MsgDef.Msg1470103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1470103:encode(sm)
	return self
end

function MsgDef.Msg1470103:decode(sm)
	return self
end

function MsgDef.Msg1470103:opcode()
	return 1470103
end

--[[ 请求雪人大战排行榜(返回)--]]
MsgDef.Msg5470103 = {}
function MsgDef.Msg5470103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.rank = 0 --[[(int32) 我的排名--]]
	msg.rankList = {} --[[(array<SnowBattleRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5470103:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt32(self.rank);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5470103:decode(sm)
	self.score = sm:readInt32();
	self.rank = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.SnowBattleRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5470103:opcode()
	return 5470103
end
--[[ 请求单人排位赛信息--]]
MsgDef.Msg1480101 = {}

function MsgDef.Msg1480101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480101:encode(sm)
	return self
end

function MsgDef.Msg1480101:decode(sm)
	return self
end

function MsgDef.Msg1480101:opcode()
	return 1480101
end

--[[ 请求单人排位赛信息(返回)--]]
MsgDef.Msg5480101 = {}
function MsgDef.Msg5480101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.playCount = 0 --[[(int32) 已挑战次数--]]
	msg.winRate = 0 --[[(int32) 胜率--]]
	msg.joinCount = 0 --[[(int32) 参与次数--]]
	msg.buyCount = 0 --[[(int32) 已购买次数--]]
	msg.pwLev = 0 --[[(int32) 排位等级--]]
	msg.matchStatu = 0 --[[(int32) 0:未开始匹配 1:已开始匹配--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 已领取的目标奖励--]]
	msg.open = 0 --[[(int32) 1:已开启 0:未开启--]]
	return msg
end

function MsgDef.Msg5480101:encode(sm)
	sm:writeInt32(self.playCount);
	sm:writeInt32(self.winRate);
	sm:writeInt32(self.joinCount);
	sm:writeInt32(self.buyCount);
	sm:writeInt32(self.pwLev);
	sm:writeInt32(self.matchStatu);
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.open);
	return self
end

function MsgDef.Msg5480101:decode(sm)
	self.playCount = sm:readInt32();
	self.winRate = sm:readInt32();
	self.joinCount = sm:readInt32();
	self.buyCount = sm:readInt32();
	self.pwLev = sm:readInt32();
	self.matchStatu = sm:readInt32();
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	self.open = sm:readInt32();
	return self
end


function MsgDef.Msg5480101:opcode()
	return 5480101
end
--[[ 请求单人排位赛竞技奖励--]]
MsgDef.Msg1480102 = {}

function MsgDef.Msg1480102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 奖励配置id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8)  0:显示 1:领取--]]
	return msg
end

function MsgDef.Msg1480102:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1480102:decode(sm)
	self.cfgId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1480102:opcode()
	return 1480102
end

--[[ 请求单人排位赛竞技奖励(返回)--]]
MsgDef.Msg5480102 = {}
function MsgDef.Msg5480102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.awardSigns = {} --[[(map<int32,int32>) 已领取的奖励配置id--]]
	msg.cfgId = 0 --[[(int32) 奖励配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.reqType = 0 --[[(int8)  0:显示 1:领取--]]
	msg.pwLev = 0 --[[(int32) 排位等级--]]
	return msg
end

function MsgDef.Msg5480102:encode(sm)
	sm:writeInt16(get_map_size(self.awardSigns))
	for kn,elm in ipairs(self.awardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.pwLev);
	return self
end

function MsgDef.Msg5480102:decode(sm)
	local awardSigns_size = sm:readInt16()
	for i = 1,awardSigns_size do
		local kv = sm:readInt32();
		self.awardSigns[kv] = sm:readInt32();
	end
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.pwLev = sm:readInt32();
	return self
end


function MsgDef.Msg5480102:opcode()
	return 5480102
end
--[[ 请求单人排位排行榜--]]
MsgDef.Msg1480103 = {}

function MsgDef.Msg1480103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1480103:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1480103:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1480103:opcode()
	return 1480103
end

--[[ 请求单人排位排行榜(返回)--]]
MsgDef.Msg5480103 = {}
function MsgDef.Msg5480103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myPwLev = 0 --[[(int32) 我的竞技积分--]]
	msg.rankList = {} --[[(array<PW1v1RankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5480103:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myPwLev);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5480103:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myPwLev = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.PW1v1RankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5480103:opcode()
	return 5480103
end
--[[ 请求单人排位赛目标奖励--]]
MsgDef.Msg1480104 = {}

function MsgDef.Msg1480104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) cfgId--]]
	return msg
end

function MsgDef.Msg1480104:encode(sm)
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1480104:decode(sm)
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1480104:opcode()
	return 1480104
end

--[[ 请求单人排位赛目标奖励(返回)--]]
MsgDef.Msg5480104 = {}
function MsgDef.Msg5480104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) cfgId--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 已领取的奖励id--]]
	return msg
end

function MsgDef.Msg5480104:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5480104:decode(sm)
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5480104:opcode()
	return 5480104
end
--[[ 请求单人排位赛购买次数--]]
MsgDef.Msg1480105 = {}

function MsgDef.Msg1480105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1480105:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1480105:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1480105:opcode()
	return 1480105
end

--[[ 请求单人排位赛购买次数(返回)--]]
MsgDef.Msg5480105 = {}
function MsgDef.Msg5480105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buyCount = 0 --[[(int32) 已购买次数--]]
	msg.count = 0 --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg5480105:encode(sm)
	sm:writeInt32(self.buyCount);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg5480105:decode(sm)
	self.buyCount = sm:readInt32();
	self.count = sm:readInt32();
	return self
end


function MsgDef.Msg5480105:opcode()
	return 5480105
end
--[[ 请求单人排位赛匹配--]]
MsgDef.Msg1480106 = {}

function MsgDef.Msg1480106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:匹配 2:取消匹配--]]
	return msg
end

function MsgDef.Msg1480106:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1480106:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1480106:opcode()
	return 1480106
end

--[[ 请求单人排位赛匹配(返回)--]]
MsgDef.Msg5480106 = {}
function MsgDef.Msg5480106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.matchStatu = 0 --[[(int32) 匹配状态--]]
	msg.reqType = 0 --[[(int8) 1:匹配 2:取消匹配--]]
	return msg
end

function MsgDef.Msg5480106:encode(sm)
	sm:writeInt32(self.matchStatu);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5480106:decode(sm)
	self.matchStatu = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5480106:opcode()
	return 5480106
end
--[[ 请求单人排位赛场景信息--]]
MsgDef.Msg1480107 = {}

function MsgDef.Msg1480107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480107:encode(sm)
	return self
end

function MsgDef.Msg1480107:decode(sm)
	return self
end

function MsgDef.Msg1480107:opcode()
	return 1480107
end

--[[ 请求单人排位赛场景信息(返回)--]]
MsgDef.Msg5480107 = {}
function MsgDef.Msg5480107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.curTime = 0 --[[(int32) 当前服务器时间--]]
	return msg
end

function MsgDef.Msg5480107:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5480107:decode(sm)
	self.startTime = sm:readInt32();
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5480107:opcode()
	return 5480107
end
--[[ 请求单人排位位置信息--]]
MsgDef.Msg1480108 = {}

function MsgDef.Msg1480108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480108:encode(sm)
	return self
end

function MsgDef.Msg1480108:decode(sm)
	return self
end

function MsgDef.Msg1480108:opcode()
	return 1480108
end

--[[ 请求单人排位位置信息(返回)--]]
MsgDef.Msg5480108 = {}
function MsgDef.Msg5480108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	return msg
end

function MsgDef.Msg5480108:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5480108:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	return self
end


function MsgDef.Msg5480108:opcode()
	return 5480108
end
--[[ 请求组队排位赛信息--]]
MsgDef.Msg1480201 = {}

function MsgDef.Msg1480201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480201:encode(sm)
	return self
end

function MsgDef.Msg1480201:decode(sm)
	return self
end

function MsgDef.Msg1480201:opcode()
	return 1480201
end

--[[ 请求组队排位赛信息(返回)--]]
MsgDef.Msg5480201 = {}
function MsgDef.Msg5480201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.canJoin = 0 --[[(int8) 1:有资格 0:没有资格--]]
	msg.teamId = 0 --[[(int32) 队伍id,大于0表示有队伍--]]
	msg.members = {} --[[(array<PwsTeamMemInfo>) 成员--]]
	msg.teamInfo = MsgDef.PwsTeamInfo:create() --[[(PwsTeamInfo) 队伍信息--]]
	msg.open = 0 --[[(int32) 1:已开启 0:未开启--]]
	msg.matchStatu = 0 --[[(int32) 1:正在匹配中 0:未匹配--]]
	msg.playCount = 0 --[[(int32) 已挑战次数--]]
	msg.winRate = 0 --[[(int32) 胜率--]]
	msg.joinCount = 0 --[[(int32) 已挑战次数--]]
	msg.buyCount = 0 --[[(int32) 已购买次数--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 目标奖励已领取的--]]
	return msg
end

function MsgDef.Msg5480201:encode(sm)
	sm:writeInt8(self.canJoin);
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	self.teamInfo:encode(sm)
	sm:writeInt32(self.open);
	sm:writeInt32(self.matchStatu);
	sm:writeInt32(self.playCount);
	sm:writeInt32(self.winRate);
	sm:writeInt32(self.joinCount);
	sm:writeInt32(self.buyCount);
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5480201:decode(sm)
	self.canJoin = sm:readInt8();
	self.teamId = sm:readInt32();
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.PwsTeamMemInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	self.teamInfo:decode(sm)
	self.open = sm:readInt32();
	self.matchStatu = sm:readInt32();
	self.playCount = sm:readInt32();
	self.winRate = sm:readInt32();
	self.joinCount = sm:readInt32();
	self.buyCount = sm:readInt32();
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5480201:opcode()
	return 5480201
end
--[[ 请求组队排位战队列表--]]
MsgDef.Msg1480202 = {}

function MsgDef.Msg1480202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数, 从1开始--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:正常 1:不显示满员队伍--]]
	return msg
end

function MsgDef.Msg1480202:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1480202:decode(sm)
	self.page = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1480202:opcode()
	return 1480202
end

--[[ 请求组队排位战队列表(返回)--]]
MsgDef.Msg5480202 = {}
function MsgDef.Msg5480202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页数  从1开始--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.teams = {} --[[(array<PwsTeamInfo>) 战队列表--]]
	msg.reqType = 0 --[[(int8) 0:正常 1:不显示满员队伍--]]
	return msg
end

function MsgDef.Msg5480202:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt16(#self.teams)
	for i,elm in ipairs(self.teams) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5480202:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	local teams_size = sm:readInt16()
	for i = 1,teams_size do
		local element = MsgDef.PwsTeamInfo:create():decode(sm)
		table.insert(self.teams, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5480202:opcode()
	return 5480202
end
--[[ 请求组队排位创建战队--]]
MsgDef.Msg1480203 = {}

function MsgDef.Msg1480203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 战队名字--]]
	if msg.icon == nil then msg.icon = 0 end --[[(int32) 战队图标--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:创建--]]
	if msg.joinTeamId == nil then msg.joinTeamId = 0 end --[[(int32) 加入的战队id--]]
	return msg
end

function MsgDef.Msg1480203:encode(sm)
	sm:writeString(self.teamName);
	sm:writeInt32(self.icon);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.joinTeamId);
	return self
end

function MsgDef.Msg1480203:decode(sm)
	self.teamName = sm:readString();
	self.icon = sm:readInt32();
	self.reqType = sm:readInt8();
	self.joinTeamId = sm:readInt32();
	return self
end

function MsgDef.Msg1480203:opcode()
	return 1480203
end

--[[ 请求组队排位创建战队(返回)--]]
MsgDef.Msg5480203 = {}
function MsgDef.Msg5480203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.icon = 0 --[[(int32) 战队图标--]]
	msg.reqType = 0 --[[(int8) 1:创建--]]
	msg.joinTeamId = 0 --[[(int32) 加入的战队id--]]
	msg.teamName = "" --[[(string) 战队名字--]]
	msg.teamInfo = MsgDef.PwsTeamInfo:create() --[[(PwsTeamInfo) 队伍信息--]]
	msg.members = {} --[[(array<PwsTeamMemInfo>) 成员信息--]]
	return msg
end

function MsgDef.Msg5480203:encode(sm)
	sm:writeInt32(self.icon);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.joinTeamId);
	sm:writeString(self.teamName);
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5480203:decode(sm)
	self.icon = sm:readInt32();
	self.reqType = sm:readInt8();
	self.joinTeamId = sm:readInt32();
	self.teamName = sm:readString();
	self.teamInfo:decode(sm)
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.PwsTeamMemInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	return self
end


function MsgDef.Msg5480203:opcode()
	return 5480203
end
--[[ 请求组队排位战队操作--]]
MsgDef.Msg1480204 = {}

function MsgDef.Msg1480204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:转移队长 2:剔人 3:解散队伍 4:退出 5:邀请加入 6:同意邀请 7:申请加入8:同意申请 9:拒绝申请10:一键拒绝 11:广播拒绝申请--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 目标id--]]
	return msg
end

function MsgDef.Msg1480204:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1480204:decode(sm)
	self.teamId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1480204:opcode()
	return 1480204
end

--[[ 请求组队排位战队操作(返回)--]]
MsgDef.Msg5480204 = {}
function MsgDef.Msg5480204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.reqType = 0 --[[(int8) 1:转移队长 2:剔人 3:解散队伍 4:退出 5:邀请加入 6:同意邀请 7:申请加入8:同意申请 9:拒绝申请10:一键拒绝 11:广播拒绝申请--]]
	msg.roleId = 0 --[[(int64) 目标id--]]
	return msg
end

function MsgDef.Msg5480204:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5480204:decode(sm)
	self.teamId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5480204:opcode()
	return 5480204
end
--[[ 请求组队排位赛开始匹配--]]
MsgDef.Msg1480205 = {}

function MsgDef.Msg1480205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:正式匹配 2:取消匹配 3:同意匹配 4:拒绝匹配 5:预匹配 --]]
	if msg.playCountMap == nil then msg.playCountMap = {} end --[[(map<int64,int32>) 队友的次数(服务端用)--]]
	return msg
end

function MsgDef.Msg1480205:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.playCountMap))
	for kn,elm in ipairs(self.playCountMap) do
		sm:writeInt64(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1480205:decode(sm)
	self.reqType = sm:readInt8();
	local playCountMap_size = sm:readInt16()
	for i = 1,playCountMap_size do
		local kv = sm:readInt64();
		self.playCountMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg1480205:opcode()
	return 1480205
end

--[[ 请求组队排位赛开始匹配(返回)--]]
MsgDef.Msg5480205 = {}
function MsgDef.Msg5480205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:正式匹配 2:取消匹配 3:同意匹配 4:拒绝匹配 5:预匹配 --]]
	msg.matchStatu = 0 --[[(int32) 0:未开始匹配 1:已开始匹配--]]
	msg.notNumber = 0 --[[(int32) 没有次数的玩家数量--]]
	return msg
end

function MsgDef.Msg5480205:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.matchStatu);
	sm:writeInt32(self.notNumber);
	return self
end

function MsgDef.Msg5480205:decode(sm)
	self.reqType = sm:readInt8();
	self.matchStatu = sm:readInt32();
	self.notNumber = sm:readInt32();
	return self
end


function MsgDef.Msg5480205:opcode()
	return 5480205
end
--[[ 请求组队排位赛段位奖励--]]
MsgDef.Msg1480206 = {}

function MsgDef.Msg1480206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:领取 0:显示--]]
	return msg
end

function MsgDef.Msg1480206:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1480206:decode(sm)
	self.cfgId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1480206:opcode()
	return 1480206
end

--[[ 请求组队排位赛段位奖励(返回)--]]
MsgDef.Msg5480206 = {}
function MsgDef.Msg5480206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.reqType = 0 --[[(int8) 1:领取 0:显示--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.awardSigns = {} --[[(map<int32,int32>) 已领取的奖励id--]]
	msg.pwLev = 0 --[[(int32) 排位等级--]]
	return msg
end

function MsgDef.Msg5480206:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.awardSigns))
	for kn,elm in ipairs(self.awardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.pwLev);
	return self
end

function MsgDef.Msg5480206:decode(sm)
	self.cfgId = sm:readInt32();
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local awardSigns_size = sm:readInt16()
	for i = 1,awardSigns_size do
		local kv = sm:readInt32();
		self.awardSigns[kv] = sm:readInt32();
	end
	self.pwLev = sm:readInt32();
	return self
end


function MsgDef.Msg5480206:opcode()
	return 5480206
end
--[[ 请求组队排位赛目标奖励--]]
MsgDef.Msg1480207 = {}

function MsgDef.Msg1480207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) cfgId--]]
	return msg
end

function MsgDef.Msg1480207:encode(sm)
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1480207:decode(sm)
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1480207:opcode()
	return 1480207
end

--[[ 请求组队排位赛目标奖励(返回)--]]
MsgDef.Msg5480207 = {}
function MsgDef.Msg5480207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cfgId = 0 --[[(int32) cfgId--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 已领取的奖励id--]]
	return msg
end

function MsgDef.Msg5480207:encode(sm)
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5480207:decode(sm)
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5480207:opcode()
	return 5480207
end
--[[ 请求组队排位赛排行榜--]]
MsgDef.Msg1480208 = {}

function MsgDef.Msg1480208:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1480208:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1480208:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1480208:opcode()
	return 1480208
end

--[[ 请求组队排位赛排行榜(返回)--]]
MsgDef.Msg5480208 = {}
function MsgDef.Msg5480208:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 页数--]]
	msg.pageSum = 0 --[[(int32) pageSum--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myPwLev = 0 --[[(int32) 我的排位等级--]]
	msg.rankList = {} --[[(array<PwsTeamRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg5480208:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myPwLev);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5480208:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myPwLev = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.PwsTeamRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end


function MsgDef.Msg5480208:opcode()
	return 5480208
end
--[[ 请求组队排位赛购买次数--]]
MsgDef.Msg1480209 = {}

function MsgDef.Msg1480209:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.count == nil then msg.count = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1480209:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1480209:decode(sm)
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1480209:opcode()
	return 1480209
end

--[[ 请求组队排位赛购买次数(返回)--]]
MsgDef.Msg5480209 = {}
function MsgDef.Msg5480209:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 购买次数--]]
	msg.buyCount = 0 --[[(int32) 已购买次数--]]
	return msg
end

function MsgDef.Msg5480209:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.buyCount);
	return self
end

function MsgDef.Msg5480209:decode(sm)
	self.count = sm:readInt32();
	self.buyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5480209:opcode()
	return 5480209
end
--[[ 请求组队排位邀请玩家列表--]]
MsgDef.Msg1480210 = {}

function MsgDef.Msg1480210:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数--]]
	return msg
end

function MsgDef.Msg1480210:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1480210:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1480210:opcode()
	return 1480210
end

--[[ 请求组队排位邀请玩家列表(返回)--]]
MsgDef.Msg5480210 = {}
function MsgDef.Msg5480210:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.page = 0 --[[(int32) 当前页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.roles = {} --[[(array<PwsRoleInfo>) 角色列表--]]
	return msg
end

function MsgDef.Msg5480210:encode(sm)
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt16(#self.roles)
	for i,elm in ipairs(self.roles) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5480210:decode(sm)
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	local roles_size = sm:readInt16()
	for i = 1,roles_size do
		local element = MsgDef.PwsRoleInfo:create():decode(sm)
		table.insert(self.roles, element)
	end
	return self
end


function MsgDef.Msg5480210:opcode()
	return 5480210
end
--[[ 请求组队排位玩家申请列表--]]
MsgDef.Msg1480211 = {}

function MsgDef.Msg1480211:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.page == nil then msg.page = 0 end --[[(int32) 页数--]]
	return msg
end

function MsgDef.Msg1480211:encode(sm)
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1480211:decode(sm)
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1480211:opcode()
	return 1480211
end

--[[ 请求组队排位玩家申请列表(返回)--]]
MsgDef.Msg5480211 = {}
function MsgDef.Msg5480211:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.applys = {} --[[(array<PwsTeamApplyInfo>) 申请列表--]]
	msg.page = 0 --[[(int32) 页数--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	return msg
end

function MsgDef.Msg5480211:encode(sm)
	sm:writeInt16(#self.applys)
	for i,elm in ipairs(self.applys) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	return self
end

function MsgDef.Msg5480211:decode(sm)
	local applys_size = sm:readInt16()
	for i = 1,applys_size do
		local element = MsgDef.PwsTeamApplyInfo:create():decode(sm)
		table.insert(self.applys, element)
	end
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	return self
end


function MsgDef.Msg5480211:opcode()
	return 5480211
end
--[[ 请求组队排位赛押注--]]
MsgDef.Msg1480212 = {}

function MsgDef.Msg1480212:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:押注 2:领取--]]
	if msg.stakeSId == nil then msg.stakeSId = 0 end --[[(int32) 押注的服务器id--]]
	return msg
end

function MsgDef.Msg1480212:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stakeSId);
	return self
end

function MsgDef.Msg1480212:decode(sm)
	self.reqType = sm:readInt8();
	self.stakeSId = sm:readInt32();
	return self
end

function MsgDef.Msg1480212:opcode()
	return 1480212
end

--[[ 请求组队排位赛押注(返回)--]]
MsgDef.Msg5480212 = {}
function MsgDef.Msg5480212:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.stakes = {} --[[(array<PwsStakeInfo>) 押注列表--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:押注 2:领取--]]
	msg.stakeCount = 0 --[[(int32) 我的当前押注数量--]]
	msg.stakeSId = 0 --[[(int32) 押注的服务器id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具列表--]]
	msg.stage = 0 --[[(int32) 0:暂未开始 1:押注阶段 2:领取阶段--]]
	msg.winSid = {} --[[(array<int32>) 赢的服务器id--]]
	return msg
end

function MsgDef.Msg5480212:encode(sm)
	sm:writeInt16(#self.stakes)
	for i,elm in ipairs(self.stakes) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stakeCount);
	sm:writeInt32(self.stakeSId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stage);
	sm:writeInt16(get_map_size(self.winSid))
	for i,elm in ipairs(self.winSid) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5480212:decode(sm)
	local stakes_size = sm:readInt16()
	for i = 1,stakes_size do
		local element = MsgDef.PwsStakeInfo:create():decode(sm)
		table.insert(self.stakes, element)
	end
	self.reqType = sm:readInt8();
	self.stakeCount = sm:readInt32();
	self.stakeSId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.stage = sm:readInt32();
	local winSid_size = sm:readInt16()
	for i = 1,winSid_size do
		local ele = sm:readInt32();
		table.insert(self.winSid, ele)
	end
	return self
end


function MsgDef.Msg5480212:opcode()
	return 5480212
end
--[[ 请求组队排位赛场景信息--]]
MsgDef.Msg1480213 = {}

function MsgDef.Msg1480213:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480213:encode(sm)
	return self
end

function MsgDef.Msg1480213:decode(sm)
	return self
end

function MsgDef.Msg1480213:opcode()
	return 1480213
end

--[[ 请求组队排位赛场景信息(返回)--]]
MsgDef.Msg5480213 = {}
function MsgDef.Msg5480213:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.hpInfos = {} --[[(array<PwsHpInfo>) 血量信息--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5480213:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5480213:decode(sm)
	self.startTime = sm:readInt32();
	self.teamId = sm:readInt32();
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.PwsHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5480213:opcode()
	return 5480213
end
--[[ 请求组队玩家位置信息--]]
MsgDef.Msg1480214 = {}

function MsgDef.Msg1480214:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480214:encode(sm)
	return self
end

function MsgDef.Msg1480214:decode(sm)
	return self
end

function MsgDef.Msg1480214:opcode()
	return 1480214
end

--[[ 请求组队玩家位置信息(返回)--]]
MsgDef.Msg5480214 = {}
function MsgDef.Msg5480214:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	msg.enemys = {} --[[(array<int64>) 敌方roleIds--]]
	return msg
end

function MsgDef.Msg5480214:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.enemys))
	for i,elm in ipairs(self.enemys) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5480214:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	local enemys_size = sm:readInt16()
	for i = 1,enemys_size do
		local ele = sm:readInt64();
		table.insert(self.enemys, ele)
	end
	return self
end


function MsgDef.Msg5480214:opcode()
	return 5480214
end
--[[ 请求季后赛排位信息--]]
MsgDef.Msg1480301 = {}

function MsgDef.Msg1480301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480301:encode(sm)
	return self
end

function MsgDef.Msg1480301:decode(sm)
	return self
end

function MsgDef.Msg1480301:opcode()
	return 1480301
end

--[[ 请求季后赛排位信息(返回)--]]
MsgDef.Msg5480301 = {}
function MsgDef.Msg5480301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.vsInfos = {} --[[(array<JhsVsInfo>) 对决信息--]]
	msg.open = 0 --[[(int32) 0:未开启 1:已开启--]]
	msg.canJoin = 0 --[[(int8) 1:有资格 0:没有资格--]]
	return msg
end

function MsgDef.Msg5480301:encode(sm)
	sm:writeInt16(#self.vsInfos)
	for i,elm in ipairs(self.vsInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.open);
	sm:writeInt8(self.canJoin);
	return self
end

function MsgDef.Msg5480301:decode(sm)
	local vsInfos_size = sm:readInt16()
	for i = 1,vsInfos_size do
		local element = MsgDef.JhsVsInfo:create():decode(sm)
		table.insert(self.vsInfos, element)
	end
	self.open = sm:readInt32();
	self.canJoin = sm:readInt8();
	return self
end


function MsgDef.Msg5480301:opcode()
	return 5480301
end
--[[ 请求季后赛场景信息--]]
MsgDef.Msg1480302 = {}

function MsgDef.Msg1480302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480302:encode(sm)
	return self
end

function MsgDef.Msg1480302:decode(sm)
	return self
end

function MsgDef.Msg1480302:opcode()
	return 1480302
end

--[[ 请求季后赛场景信息(返回)--]]
MsgDef.Msg5480302 = {}
function MsgDef.Msg5480302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hpInfos = {} --[[(array<PwsHpInfo>) 血量信息--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.bo = 0 --[[(int32) 第几波--]]
	msg.boStartTime = 0 --[[(int32) 波开始时间--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5480302:encode(sm)
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.bo);
	sm:writeInt32(self.boStartTime);
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5480302:decode(sm)
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.PwsHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.teamId = sm:readInt32();
	self.startTime = sm:readInt32();
	self.bo = sm:readInt32();
	self.boStartTime = sm:readInt32();
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5480302:opcode()
	return 5480302
end
--[[ 请求季后赛押注--]]
MsgDef.Msg1480303 = {}

function MsgDef.Msg1480303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:押注 2:领取--]]
	if msg.stakeTeamId == nil then msg.stakeTeamId = 0 end --[[(int32) 押注的队伍id--]]
	return msg
end

function MsgDef.Msg1480303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stakeTeamId);
	return self
end

function MsgDef.Msg1480303:decode(sm)
	self.reqType = sm:readInt8();
	self.stakeTeamId = sm:readInt32();
	return self
end

function MsgDef.Msg1480303:opcode()
	return 1480303
end

--[[ 请求季后赛押注(返回)--]]
MsgDef.Msg5480303 = {}
function MsgDef.Msg5480303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:押注 2:领取--]]
	msg.stakeTeamId = 0 --[[(int32) 押注的队伍id--]]
	msg.stakes = {} --[[(array<PwsStakeInfo>) 押注列表--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具列表--]]
	msg.stage = 0 --[[(int32) 0:暂未开始 1:押注阶段 2:领取阶段--]]
	msg.winTeamId = 0 --[[(int32) 赢的队伍id--]]
	msg.stakeCount = 0 --[[(int32) 我的当前押注数量--]]
	return msg
end

function MsgDef.Msg5480303:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stakeTeamId);
	sm:writeInt16(#self.stakes)
	for i,elm in ipairs(self.stakes) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stage);
	sm:writeInt32(self.winTeamId);
	sm:writeInt32(self.stakeCount);
	return self
end

function MsgDef.Msg5480303:decode(sm)
	self.reqType = sm:readInt8();
	self.stakeTeamId = sm:readInt32();
	local stakes_size = sm:readInt16()
	for i = 1,stakes_size do
		local element = MsgDef.PwsStakeInfo:create():decode(sm)
		table.insert(self.stakes, element)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.stage = sm:readInt32();
	self.winTeamId = sm:readInt32();
	self.stakeCount = sm:readInt32();
	return self
end


function MsgDef.Msg5480303:opcode()
	return 5480303
end
--[[ 请求季后赛玩家位置信息--]]
MsgDef.Msg1480304 = {}

function MsgDef.Msg1480304:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1480304:encode(sm)
	return self
end

function MsgDef.Msg1480304:decode(sm)
	return self
end

function MsgDef.Msg1480304:opcode()
	return 1480304
end

--[[ 请求季后赛玩家位置信息(返回)--]]
MsgDef.Msg5480304 = {}
function MsgDef.Msg5480304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	msg.enemys = {} --[[(array<int64>) 敌方角色id--]]
	return msg
end

function MsgDef.Msg5480304:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.enemys))
	for i,elm in ipairs(self.enemys) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5480304:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	local enemys_size = sm:readInt16()
	for i = 1,enemys_size do
		local ele = sm:readInt64();
		table.insert(self.enemys, ele)
	end
	return self
end


function MsgDef.Msg5480304:opcode()
	return 5480304
end
--[[ 请求宠物信息--]]
MsgDef.Msg1490101 = {}

function MsgDef.Msg1490101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1490101:encode(sm)
	return self
end

function MsgDef.Msg1490101:decode(sm)
	return self
end

function MsgDef.Msg1490101:opcode()
	return 1490101
end

--[[ 请求宠物信息(返回)--]]
MsgDef.Msg5490101 = {}
function MsgDef.Msg5490101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petInfos = {} --[[(array<PetInfo>) 宠物信息列表--]]
	msg.petRoleId = 0 --[[(int32) 当前出战宠物id--]]
	return msg
end

function MsgDef.Msg5490101:encode(sm)
	sm:writeInt16(#self.petInfos)
	for i,elm in ipairs(self.petInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg5490101:decode(sm)
	local petInfos_size = sm:readInt16()
	for i = 1,petInfos_size do
		local element = MsgDef.PetInfo:create():decode(sm)
		table.insert(self.petInfos, element)
	end
	self.petRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5490101:opcode()
	return 5490101
end
--[[ 请求宠物升级--]]
MsgDef.Msg1490102 = {}

function MsgDef.Msg1490102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物roleId--]]
	if msg.upLevel == nil then msg.upLevel = 0 end --[[(int32) 升级等级--]]
	return msg
end

function MsgDef.Msg1490102:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.upLevel);
	return self
end

function MsgDef.Msg1490102:decode(sm)
	self.petRoleId = sm:readInt32();
	self.upLevel = sm:readInt32();
	return self
end

function MsgDef.Msg1490102:opcode()
	return 1490102
end

--[[ 请求宠物升级(返回)--]]
MsgDef.Msg5490102 = {}
function MsgDef.Msg5490102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 等级--]]
	msg.exp = 0 --[[(int32) 经验--]]
	msg.petRoleId = 0 --[[(int32) 宠物roleId--]]
	return msg
end

function MsgDef.Msg5490102:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg5490102:decode(sm)
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	self.petRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5490102:opcode()
	return 5490102
end
--[[ 请求宠物进阶--]]
MsgDef.Msg1490103 = {}

function MsgDef.Msg1490103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物roleId--]]
	return msg
end

function MsgDef.Msg1490103:encode(sm)
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg1490103:decode(sm)
	self.petRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1490103:opcode()
	return 1490103
end

--[[ 请求宠物进阶(返回)--]]
MsgDef.Msg5490103 = {}
function MsgDef.Msg5490103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petRoleId = 0 --[[(int32) 宠物roleId--]]
	msg.name = "" --[[(string) 宠物名--]]
	return msg
end

function MsgDef.Msg5490103:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg5490103:decode(sm)
	self.petRoleId = sm:readInt32();
	self.name = sm:readString();
	return self
end


function MsgDef.Msg5490103:opcode()
	return 5490103
end
--[[ 请求宠物装备穿戴--]]
MsgDef.Msg1490104 = {}

function MsgDef.Msg1490104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:穿 2:脱--]]
	if msg.parts == nil then msg.parts = {} end --[[(array<int32>) 部位1~6--]]
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包index--]]
	return msg
end

function MsgDef.Msg1490104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.parts))
	for i,elm in ipairs(self.parts) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.petRoleId);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1490104:decode(sm)
	self.reqType = sm:readInt8();
	local parts_size = sm:readInt16()
	for i = 1,parts_size do
		local elm = sm:readInt32();
		table.insert(self.parts, elm)
	end
	self.petRoleId = sm:readInt32();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1490104:opcode()
	return 1490104
end

--[[ 请求宠物装备穿戴(返回)--]]
MsgDef.Msg5490104 = {}
function MsgDef.Msg5490104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:穿 2:脱--]]
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	msg.equipInfos = {} --[[(array<ItemInfo>) 当前已穿戴宠物的装备信息--]]
	return msg
end

function MsgDef.Msg5490104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.petRoleId);
	sm:writeInt16(#self.equipInfos)
	for i,elm in ipairs(self.equipInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5490104:decode(sm)
	self.reqType = sm:readInt8();
	self.petRoleId = sm:readInt32();
	local equipInfos_size = sm:readInt16()
	for i = 1,equipInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equipInfos, element)
	end
	return self
end


function MsgDef.Msg5490104:opcode()
	return 5490104
end
--[[ 请求宠物装备升级--]]
MsgDef.Msg1490105 = {}

function MsgDef.Msg1490105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int32) 升级部位id--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 吞噬的装备index--]]
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	return msg
end

function MsgDef.Msg1490105:encode(sm)
	sm:writeInt32(self.part);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg1490105:decode(sm)
	self.part = sm:readInt32();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	self.petRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1490105:opcode()
	return 1490105
end

--[[ 请求宠物装备升级(返回)--]]
MsgDef.Msg5490105 = {}
function MsgDef.Msg5490105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 装备等级--]]
	msg.exp = 0 --[[(int32) 装备经验--]]
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	msg.part = 0 --[[(int32) 升级部位id--]]
	return msg
end

function MsgDef.Msg5490105:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg5490105:decode(sm)
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	self.petRoleId = sm:readInt32();
	self.part = sm:readInt32();
	return self
end


function MsgDef.Msg5490105:opcode()
	return 5490105
end
--[[ 请求宠物出战--]]
MsgDef.Msg1490106 = {}

function MsgDef.Msg1490106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物roleId--]]
	return msg
end

function MsgDef.Msg1490106:encode(sm)
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg1490106:decode(sm)
	self.petRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1490106:opcode()
	return 1490106
end

--[[ 请求宠物出战(返回)--]]
MsgDef.Msg5490106 = {}
function MsgDef.Msg5490106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petRoleId = 0 --[[(int32) 宠物roleId--]]
	return msg
end

function MsgDef.Msg5490106:encode(sm)
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg5490106:decode(sm)
	self.petRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5490106:opcode()
	return 5490106
end
--[[ 请求宠物技能学习--]]
MsgDef.Msg1490107 = {}

function MsgDef.Msg1490107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 技能道具id--]]
	return msg
end

function MsgDef.Msg1490107:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1490107:decode(sm)
	self.petRoleId = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1490107:opcode()
	return 1490107
end

--[[ 请求宠物技能学习(返回)--]]
MsgDef.Msg5490107 = {}
function MsgDef.Msg5490107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	msg.skillDatas = {} --[[(map<int32,int32>) 技能信息<id,顺序>--]]
	return msg
end

function MsgDef.Msg5490107:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt16(get_map_size(self.skillDatas))
	for kn,elm in ipairs(self.skillDatas) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5490107:decode(sm)
	self.petRoleId = sm:readInt32();
	local skillDatas_size = sm:readInt16()
	for i = 1,skillDatas_size do
		local kv = sm:readInt32();
		self.skillDatas[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5490107:opcode()
	return 5490107
end
--[[ 请求宠物放生--]]
MsgDef.Msg1490108 = {}

function MsgDef.Msg1490108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	return msg
end

function MsgDef.Msg1490108:encode(sm)
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg1490108:decode(sm)
	self.petRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1490108:opcode()
	return 1490108
end

--[[ 请求宠物放生(返回)--]]
MsgDef.Msg5490108 = {}
function MsgDef.Msg5490108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 放生后返还道具--]]
	return msg
end

function MsgDef.Msg5490108:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5490108:decode(sm)
	self.petRoleId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5490108:opcode()
	return 5490108
end
--[[ 请求使用宠物成长丹修改成长值--]]
MsgDef.Msg1490109 = {}

function MsgDef.Msg1490109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	return msg
end

function MsgDef.Msg1490109:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1490109:decode(sm)
	self.petRoleId = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1490109:opcode()
	return 1490109
end

--[[ 请求使用宠物成长丹修改成长值(返回)--]]
MsgDef.Msg5490109 = {}
function MsgDef.Msg5490109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petRoleId = 0 --[[(int32) 宠物--]]
	msg.growValue = 0 --[[(int32) 成长值--]]
	return msg
end

function MsgDef.Msg5490109:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.growValue);
	return self
end

function MsgDef.Msg5490109:decode(sm)
	self.petRoleId = sm:readInt32();
	self.growValue = sm:readInt32();
	return self
end


function MsgDef.Msg5490109:opcode()
	return 5490109
end
--[[ 请求玩家单个宠物信息--]]
MsgDef.Msg1490110 = {}

function MsgDef.Msg1490110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 玩家主服id--]]
	if msg.viewType == nil then msg.viewType = 0 end --[[(int32) 客户端界面绑定类型--]]
	return msg
end

function MsgDef.Msg1490110:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.petRoleId);
	sm:writeInt32(self.svrId);
	sm:writeInt32(self.viewType);
	return self
end

function MsgDef.Msg1490110:decode(sm)
	self.roleId = sm:readInt64();
	self.petRoleId = sm:readInt32();
	self.svrId = sm:readInt32();
	self.viewType = sm:readInt32();
	return self
end

function MsgDef.Msg1490110:opcode()
	return 1490110
end

--[[ 请求玩家单个宠物信息(返回)--]]
MsgDef.Msg5490110 = {}
function MsgDef.Msg5490110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.petInfo = MsgDef.PetInfo:create() --[[(PetInfo) 宠物信息--]]
	msg.viewType = 0 --[[(int32) 客户端界面绑定类型--]]
	msg.svrId = 0 --[[(int32) 玩家主服id--]]
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg5490110:encode(sm)
	self.petInfo:encode(sm)
	sm:writeInt32(self.viewType);
	sm:writeInt32(self.svrId);
	sm:writeInt32(self.petRoleId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg5490110:decode(sm)
	self.petInfo:decode(sm)
	self.viewType = sm:readInt32();
	self.svrId = sm:readInt32();
	self.petRoleId = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end


function MsgDef.Msg5490110:opcode()
	return 5490110
end
--[[ 请求宠物改名--]]
MsgDef.Msg1490111 = {}

function MsgDef.Msg1490111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 宠物名--]]
	return msg
end

function MsgDef.Msg1490111:encode(sm)
	sm:writeInt32(self.petRoleId);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg1490111:decode(sm)
	self.petRoleId = sm:readInt32();
	self.name = sm:readString();
	return self
end

function MsgDef.Msg1490111:opcode()
	return 1490111
end

--[[ 请求宠物改名(返回)--]]
MsgDef.Msg5490111 = {}
function MsgDef.Msg5490111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.name = "" --[[(string) 宠物名--]]
	msg.petRoleId = 0 --[[(int32) 宠物id--]]
	return msg
end

function MsgDef.Msg5490111:encode(sm)
	sm:writeString(self.name);
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.Msg5490111:decode(sm)
	self.name = sm:readString();
	self.petRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5490111:opcode()
	return 5490111
end
--[[ 请求符文背包信息--]]
MsgDef.Msg1500101 = {}

function MsgDef.Msg1500101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1500101:encode(sm)
	return self
end

function MsgDef.Msg1500101:decode(sm)
	return self
end

function MsgDef.Msg1500101:opcode()
	return 1500101
end

--[[ 请求符文背包信息(返回)--]]
MsgDef.Msg5500101 = {}
function MsgDef.Msg5500101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.fwDatas = {} --[[(array<ItemInfo>) 符文信息--]]
	msg.equipFwDatas = {} --[[(array<ItemInfo>) 已装备符文数据--]]
	return msg
end

function MsgDef.Msg5500101:encode(sm)
	sm:writeInt16(#self.fwDatas)
	for i,elm in ipairs(self.fwDatas) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.equipFwDatas)
	for i,elm in ipairs(self.equipFwDatas) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5500101:decode(sm)
	local fwDatas_size = sm:readInt16()
	for i = 1,fwDatas_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.fwDatas, element)
	end
	local equipFwDatas_size = sm:readInt16()
	for i = 1,equipFwDatas_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equipFwDatas, element)
	end
	return self
end


function MsgDef.Msg5500101:opcode()
	return 5500101
end
--[[ 请求装备符文--]]
MsgDef.Msg1500102 = {}

function MsgDef.Msg1500102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0 信息 1:装备或替换符文 2:卸下--]]
	if msg.srcIndexs == nil then msg.srcIndexs = {} end --[[(array<int32>) 符文背包索引--]]
	if msg.dstIndexs == nil then msg.dstIndexs = {} end --[[(array<int32>) 符文孔--]]
	return msg
end

function MsgDef.Msg1500102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.srcIndexs))
	for i,elm in ipairs(self.srcIndexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.dstIndexs))
	for i,elm in ipairs(self.dstIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1500102:decode(sm)
	self.reqType = sm:readInt8();
	local srcIndexs_size = sm:readInt16()
	for i = 1,srcIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.srcIndexs, elm)
	end
	local dstIndexs_size = sm:readInt16()
	for i = 1,dstIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.dstIndexs, elm)
	end
	return self
end

function MsgDef.Msg1500102:opcode()
	return 1500102
end

--[[ 请求装备符文(返回)--]]
MsgDef.Msg5500102 = {}
function MsgDef.Msg5500102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0 信息 1:装备 2:卸下--]]
	msg.holeInfos = {} --[[(array<ItemInfo>) 符文孔信息--]]
	msg.towerMaxLevel = 0 --[[(int32) 塔最高层--]]
	msg.exp = 0 --[[(int32) 当前拥有符文经验--]]
	return msg
end

function MsgDef.Msg5500102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.holeInfos)
	for i,elm in ipairs(self.holeInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.towerMaxLevel);
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5500102:decode(sm)
	self.reqType = sm:readInt8();
	local holeInfos_size = sm:readInt16()
	for i = 1,holeInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.holeInfos, element)
	end
	self.towerMaxLevel = sm:readInt32();
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5500102:opcode()
	return 5500102
end
--[[ 请求符文升级--]]
MsgDef.Msg1500103 = {}

function MsgDef.Msg1500103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.holeId == nil then msg.holeId = 0 end --[[(int32) 符文孔--]]
	return msg
end

function MsgDef.Msg1500103:encode(sm)
	sm:writeInt32(self.holeId);
	return self
end

function MsgDef.Msg1500103:decode(sm)
	self.holeId = sm:readInt32();
	return self
end

function MsgDef.Msg1500103:opcode()
	return 1500103
end

--[[ 请求符文升级(返回)--]]
MsgDef.Msg5500103 = {}
function MsgDef.Msg5500103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.holeId = 0 --[[(int32) 符文孔--]]
	msg.level = 0 --[[(int32) 等级--]]
	msg.exp = 0 --[[(int32) 经验--]]
	return msg
end

function MsgDef.Msg5500103:encode(sm)
	sm:writeInt32(self.holeId);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5500103:decode(sm)
	self.holeId = sm:readInt32();
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5500103:opcode()
	return 5500103
end
--[[ 请求符文分解--]]
MsgDef.Msg1500104 = {}

function MsgDef.Msg1500104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:一键分解--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包index--]]
	return msg
end

function MsgDef.Msg1500104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1500104:decode(sm)
	self.reqType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1500104:opcode()
	return 1500104
end

--[[ 请求符文分解(返回)--]]
MsgDef.Msg5500104 = {}
function MsgDef.Msg5500104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:一键分解--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 分解获得--]]
	msg.exp = 0 --[[(int32) 符文经验--]]
	return msg
end

function MsgDef.Msg5500104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.Msg5500104:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.exp = sm:readInt32();
	return self
end


function MsgDef.Msg5500104:opcode()
	return 5500104
end
--[[ 请求符文合成--]]
MsgDef.Msg1500105 = {}

function MsgDef.Msg1500105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.dressIndexs == nil then msg.dressIndexs = {} end --[[(array<int32>) 身上符文孔位置--]]
	if msg.packIndexs == nil then msg.packIndexs = {} end --[[(array<int32>) 背包符文孔位置--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 合成符文道具id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息 2:合成--]]
	return msg
end

function MsgDef.Msg1500105:encode(sm)
	sm:writeInt16(get_map_size(self.dressIndexs))
	for i,elm in ipairs(self.dressIndexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.packIndexs))
	for i,elm in ipairs(self.packIndexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.itemId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1500105:decode(sm)
	local dressIndexs_size = sm:readInt16()
	for i = 1,dressIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.dressIndexs, elm)
	end
	local packIndexs_size = sm:readInt16()
	for i = 1,packIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.packIndexs, elm)
	end
	self.itemId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1500105:opcode()
	return 1500105
end

--[[ 请求符文合成(返回)--]]
MsgDef.Msg5500105 = {}
function MsgDef.Msg5500105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成符文--]]
	msg.reqType = 0 --[[(int8) 1=信息 2:合成--]]
	msg.stoneNum = 0 --[[(int32) 合成石数量--]]
	msg.holeInfos = {} --[[(array<ItemInfo>) 符文孔信息--]]
	msg.towerMaxLevel = 0 --[[(int32) 符文塔最高层--]]
	return msg
end

function MsgDef.Msg5500105:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stoneNum);
	sm:writeInt16(#self.holeInfos)
	for i,elm in ipairs(self.holeInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.towerMaxLevel);
	return self
end

function MsgDef.Msg5500105:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.stoneNum = sm:readInt32();
	local holeInfos_size = sm:readInt16()
	for i = 1,holeInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.holeInfos, element)
	end
	self.towerMaxLevel = sm:readInt32();
	return self
end


function MsgDef.Msg5500105:opcode()
	return 5500105
end
--[[  请求符文寻宝信息--]]
MsgDef.Msg1500201 = {}

function MsgDef.Msg1500201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1500201:encode(sm)
	return self
end

function MsgDef.Msg1500201:decode(sm)
	return self
end

function MsgDef.Msg1500201:opcode()
	return 1500201
end

--[[  请求符文寻宝信息(返回)--]]
MsgDef.Msg5500201 = {}
function MsgDef.Msg5500201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.towerMaxLevel = 0 --[[(int32) 符文塔通关最高层--]]
	return msg
end

function MsgDef.Msg5500201:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt32(self.towerMaxLevel);
	return self
end

function MsgDef.Msg5500201:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	self.towerMaxLevel = sm:readInt32();
	return self
end


function MsgDef.Msg5500201:opcode()
	return 5500201
end
--[[  请求符文商城碎片兑换--]]
MsgDef.Msg1500202 = {}

function MsgDef.Msg1500202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1=信息 2=兑换--]]
	return msg
end

function MsgDef.Msg1500202:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1500202:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1500202:opcode()
	return 1500202
end

--[[  请求符文商城碎片兑换(返回)--]]
MsgDef.Msg5500202 = {}
function MsgDef.Msg5500202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.spNum = 0 --[[(int32) 碎片数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	msg.reqType = 0 --[[(int8) 1=信息 2=兑换--]]
	msg.towerMaxLevel = 0 --[[(int32) 通关的符文塔最高层--]]
	return msg
end

function MsgDef.Msg5500202:encode(sm)
	sm:writeInt32(self.spNum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.towerMaxLevel);
	return self
end

function MsgDef.Msg5500202:decode(sm)
	self.spNum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.towerMaxLevel = sm:readInt32();
	return self
end


function MsgDef.Msg5500202:opcode()
	return 5500202
end
--[[  请求符文寻宝--]]
MsgDef.Msg1500203 = {}

function MsgDef.Msg1500203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1500203:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1500203:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1500203:opcode()
	return 1500203
end

--[[  请求符文寻宝(返回)--]]
MsgDef.Msg5500203 = {}
function MsgDef.Msg5500203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.spNum = 0 --[[(int32) 符文碎片--]]
	return msg
end

function MsgDef.Msg5500203:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.spNum);
	return self
end

function MsgDef.Msg5500203:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftFreeTimes = sm:readInt32();
	self.spNum = sm:readInt32();
	return self
end


function MsgDef.Msg5500203:opcode()
	return 5500203
end
--[[ 请求跨服城战占领信息--]]
MsgDef.Msg1510101 = {}

function MsgDef.Msg1510101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.awardGot == nil then msg.awardGot = 0 end --[[(int8) 奖励是否领取 1:已领取--]]
	return msg
end

function MsgDef.Msg1510101:encode(sm)
	sm:writeInt8(self.awardGot);
	return self
end

function MsgDef.Msg1510101:decode(sm)
	self.awardGot = sm:readInt8();
	return self
end

function MsgDef.Msg1510101:opcode()
	return 1510101
end

--[[ 请求跨服城战占领信息(返回)--]]
MsgDef.Msg5510101 = {}
function MsgDef.Msg5510101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.nextOpenWeekDay = 0 --[[(int32) 开启时间--]]
	msg.occupyInfos = {} --[[(map<int32,OccupyCityInfo>) 占领信息--]]
	msg.isXz = 0 --[[(int8) 是否有权限宣战 1:可宣战--]]
	msg.warSceneId = 0 --[[(int32) 已宣战城池id--]]
	msg.awardGot = 0 --[[(int8) 奖励是否领取 1:已领取--]]
	msg.otherReds = {} --[[(map<int32,int32>) 连胜或终结红点--]]
	return msg
end

function MsgDef.Msg5510101:encode(sm)
	sm:writeInt32(self.nextOpenWeekDay);
	sm:writeInt16(get_map_size(self.occupyInfos))
	for kn,elm in ipairs(self.occupyInfos) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt8(self.isXz);
	sm:writeInt32(self.warSceneId);
	sm:writeInt8(self.awardGot);
	sm:writeInt16(get_map_size(self.otherReds))
	for kn,elm in ipairs(self.otherReds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5510101:decode(sm)
	self.nextOpenWeekDay = sm:readInt32();
	local occupyInfos_size = sm:readInt16()
	for i = 1,occupyInfos_size do
		local kev = sm:readInt32(kn);
		self.occupyInfos[kev] = MsgDef.OccupyCityInfo:create():decode(sm)
	end
	self.isXz = sm:readInt8();
	self.warSceneId = sm:readInt32();
	self.awardGot = sm:readInt8();
	local otherReds_size = sm:readInt16()
	for i = 1,otherReds_size do
		local kv = sm:readInt32();
		self.otherReds[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5510101:opcode()
	return 5510101
end
--[[ 请求宣战城池--]]
MsgDef.Msg1510102 = {}

function MsgDef.Msg1510102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 宣战城池（场景id）--]]
	if msg.gangAdminName == nil then msg.gangAdminName = "" end --[[(string) 宗主(服务器用)--]]
	if msg.adminRoleId == nil then msg.adminRoleId = 0 end --[[(int64) 盟主id(服务器)--]]
	return msg
end

function MsgDef.Msg1510102:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeString(self.gangAdminName);
	sm:writeInt64(self.adminRoleId);
	return self
end

function MsgDef.Msg1510102:decode(sm)
	self.sceneId = sm:readInt32();
	self.gangAdminName = sm:readString();
	self.adminRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg1510102:opcode()
	return 1510102
end

--[[ 请求宣战城池(返回)--]]
MsgDef.Msg5510102 = {}
function MsgDef.Msg5510102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 宣战城池（场景id）--]]
	msg.occupyType = 0 --[[(int8) 宣战类型 1:已宣战 2:可宣战--]]
	return msg
end

function MsgDef.Msg5510102:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.occupyType);
	return self
end

function MsgDef.Msg5510102:decode(sm)
	self.sceneId = sm:readInt32();
	self.occupyType = sm:readInt8();
	return self
end


function MsgDef.Msg5510102:opcode()
	return 5510102
end
--[[ 请求跨服城战战报--]]
MsgDef.Msg1510103 = {}

function MsgDef.Msg1510103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1510103:encode(sm)
	return self
end

function MsgDef.Msg1510103:decode(sm)
	return self
end

function MsgDef.Msg1510103:opcode()
	return 1510103
end

--[[ 请求跨服城战战报(返回)--]]
MsgDef.Msg5510103 = {}
function MsgDef.Msg5510103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cityWarReports = {} --[[(array<CrossCityWarReport>) 战报--]]
	return msg
end

function MsgDef.Msg5510103:encode(sm)
	sm:writeInt16(#self.cityWarReports)
	for i,elm in ipairs(self.cityWarReports) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5510103:decode(sm)
	local cityWarReports_size = sm:readInt16()
	for i = 1,cityWarReports_size do
		local element = MsgDef.CrossCityWarReport:create():decode(sm)
		table.insert(self.cityWarReports, element)
	end
	return self
end


function MsgDef.Msg5510103:opcode()
	return 5510103
end
--[[ 请求面板状态信息--]]
MsgDef.Msg1510104 = {}

function MsgDef.Msg1510104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1510104:encode(sm)
	return self
end

function MsgDef.Msg1510104:decode(sm)
	return self
end

function MsgDef.Msg1510104:opcode()
	return 1510104
end

--[[ 请求面板状态信息(返回)--]]
MsgDef.Msg5510104 = {}
function MsgDef.Msg5510104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cityStatuInfos = {} --[[(array<CommonBossInfo>) 城门或者柱子信息--]]
	msg.breakCity  = 0 --[[(int8) 是否破城 1:已破--]]
	return msg
end

function MsgDef.Msg5510104:encode(sm)
	sm:writeInt16(#self.cityStatuInfos)
	for i,elm in ipairs(self.cityStatuInfos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.breakCity );
	return self
end

function MsgDef.Msg5510104:decode(sm)
	local cityStatuInfos_size = sm:readInt16()
	for i = 1,cityStatuInfos_size do
		local element = MsgDef.CommonBossInfo:create():decode(sm)
		table.insert(self.cityStatuInfos, element)
	end
	self.breakCity  = sm:readInt8();
	return self
end


function MsgDef.Msg5510104:opcode()
	return 5510104
end
--[[ 请求跨服城战每日奖励领取--]]
MsgDef.Msg1510105 = {}

function MsgDef.Msg1510105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1510105:encode(sm)
	return self
end

function MsgDef.Msg1510105:decode(sm)
	return self
end

function MsgDef.Msg1510105:opcode()
	return 1510105
end

--[[ 请求跨服城战每日奖励领取(返回)--]]
MsgDef.Msg5510105 = {}
function MsgDef.Msg5510105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5510105:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5510105:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5510105:opcode()
	return 5510105
end
--[[ 后台发送邮件--]]
MsgDef.Msg168002 = {}

function MsgDef.Msg168002:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rangeType == nil then msg.rangeType = 0 end --[[(int32) 范围类型(见备注)--]]
	if msg.ids == nil then msg.ids = {} end --[[(array<int64>) Id集合--]]
	if msg.rangeMin == nil then msg.rangeMin = 0 end --[[(int32) 范围左区间--]]
	if msg.rangeMax == nil then msg.rangeMax = 0 end --[[(int32) 范围右区间--]]
	if msg.titleStr == nil then msg.titleStr = "" end --[[(string) 邮件标题--]]
	if msg.contentStr == nil then msg.contentStr = "" end --[[(string) 邮件内容--]]
	if msg.sendTime == nil then msg.sendTime = 0 end --[[(int32) 发送时间(单位:秒)时间戳--]]
	if msg.atts == nil then msg.atts = {} end --[[(array<SimpleItemInfo>) 附件列表--]]
	return msg
end

function MsgDef.Msg168002:encode(sm)
	sm:writeInt32(self.rangeType);
	sm:writeInt16(get_map_size(self.ids))
	for i,elm in ipairs(self.ids) do
		sm:writeInt64(elm);
	end
	sm:writeInt32(self.rangeMin);
	sm:writeInt32(self.rangeMax);
	sm:writeString(self.titleStr);
	sm:writeString(self.contentStr);
	sm:writeInt32(self.sendTime);
	sm:writeInt16(#self.atts)
	for i,elm in ipairs(self.atts) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg168002:decode(sm)
	self.rangeType = sm:readInt32();
	local ids_size = sm:readInt16()
	for i = 1,ids_size do
		local elm = sm:readInt64();
		table.insert(self.ids, elm)
	end
	self.rangeMin = sm:readInt32();
	self.rangeMax = sm:readInt32();
	self.titleStr = sm:readString();
	self.contentStr = sm:readString();
	self.sendTime = sm:readInt32();
	local atts_size = sm:readInt16()
	for i = 1,atts_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.atts, element)
	end
	return self
end

function MsgDef.Msg168002:opcode()
	return 168002
end

--[[ 后台发送邮件(返回)--]]
MsgDef.Msg568002 = {}
function MsgDef.Msg568002:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.error = "" --[[(string) 错误信息,正确时没有--]]
	return msg
end

function MsgDef.Msg568002:encode(sm)
	sm:writeString(self.error);
	return self
end

function MsgDef.Msg568002:decode(sm)
	self.error = sm:readString();
	return self
end


function MsgDef.Msg568002:opcode()
	return 568002
end
--[[ 后台封号--]]
MsgDef.Msg168003 = {}

function MsgDef.Msg168003:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 操作类型(1：封号；2:禁言；3封ip )--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 要封号的角色id--]]
	if msg.ipStr == nil then msg.ipStr = "" end --[[(string) 目标ip--]]
	if msg.lastTime == nil then msg.lastTime = 0 end --[[(int32) 解禁时间--]]
	if msg.insertTime == nil then msg.insertTime = 0 end --[[(int32) 记录插入时间--]]
	if msg.reason == nil then msg.reason = "" end --[[(string) 理由--]]
	if msg.gmId == nil then msg.gmId = "" end --[[(string) 管理员id--]]
	return msg
end

function MsgDef.Msg168003:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt64(self.roleId);
	sm:writeString(self.ipStr);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.insertTime);
	sm:writeString(self.reason);
	sm:writeString(self.gmId);
	return self
end

function MsgDef.Msg168003:decode(sm)
	self.type = sm:readInt32();
	self.roleId = sm:readInt64();
	self.ipStr = sm:readString();
	self.lastTime = sm:readInt32();
	self.insertTime = sm:readInt32();
	self.reason = sm:readString();
	self.gmId = sm:readString();
	return self
end

function MsgDef.Msg168003:opcode()
	return 168003
end

--[[ 后台封号(返回)--]]
MsgDef.Msg568003 = {}
function MsgDef.Msg568003:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568003:encode(sm)
	return self
end

function MsgDef.Msg568003:decode(sm)
	return self
end


function MsgDef.Msg568003:opcode()
	return 568003
end
--[[ 后台解封--]]
MsgDef.Msg168004 = {}

function MsgDef.Msg168004:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 类型(1：封号；2:禁言；3封ip )--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	if msg.ipStr == nil then msg.ipStr = "" end --[[(string) --]]
	return msg
end

function MsgDef.Msg168004:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt64(self.roleId);
	sm:writeString(self.ipStr);
	return self
end

function MsgDef.Msg168004:decode(sm)
	self.type = sm:readInt32();
	self.roleId = sm:readInt64();
	self.ipStr = sm:readString();
	return self
end

function MsgDef.Msg168004:opcode()
	return 168004
end

--[[ 后台解封(返回)--]]
MsgDef.Msg568004 = {}
function MsgDef.Msg568004:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568004:encode(sm)
	return self
end

function MsgDef.Msg568004:decode(sm)
	return self
end


function MsgDef.Msg568004:opcode()
	return 568004
end
--[[ 后台充值--]]
MsgDef.Msg168008 = {}

function MsgDef.Msg168008:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.playerId == nil then msg.playerId = 0 end --[[(int64) 玩家id--]]
	if msg.first == nil then msg.first = 0 end --[[(int8) 是否首冲,1是,0不是--]]
	if msg.orderNum == nil then msg.orderNum = "" end --[[(string) 订单号--]]
	if msg.money == nil then msg.money = 0 end --[[(double) 充值金额(RMB)--]]
	if msg.gold == nil then msg.gold = 0 end --[[(int32) 充值钻石数--]]
	if msg.completeTime == nil then msg.completeTime = 0 end --[[(int32) 充值时间(单位:秒)时间戳--]]
	if msg.payType == nil then msg.payType = 0 end --[[(int32) 支付类型--]]
	if msg.payChannel == nil then msg.payChannel = 0 end --[[(int32) 支付渠道--]]
	if msg.extraYb == nil then msg.extraYb = 0 end --[[(int32) 额外元宝数--]]
	return msg
end

function MsgDef.Msg168008:encode(sm)
	sm:writeInt64(self.playerId);
	sm:writeInt8(self.first);
	sm:writeString(self.orderNum);
	sm:writeDouble(self.money);
	sm:writeInt32(self.gold);
	sm:writeInt32(self.completeTime);
	sm:writeInt32(self.payType);
	sm:writeInt32(self.payChannel);
	sm:writeInt32(self.extraYb);
	return self
end

function MsgDef.Msg168008:decode(sm)
	self.playerId = sm:readInt64();
	self.first = sm:readInt8();
	self.orderNum = sm:readString();
	self.money = sm:readDouble();
	self.gold = sm:readInt32();
	self.completeTime = sm:readInt32();
	self.payType = sm:readInt32();
	self.payChannel = sm:readInt32();
	self.extraYb = sm:readInt32();
	return self
end

function MsgDef.Msg168008:opcode()
	return 168008
end

--[[ 后台充值(返回)--]]
MsgDef.Msg568008 = {}
function MsgDef.Msg568008:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568008:encode(sm)
	return self
end

function MsgDef.Msg568008:decode(sm)
	return self
end


function MsgDef.Msg568008:opcode()
	return 568008
end
--[[ 后台充值2--]]
MsgDef.Msg168009 = {}

function MsgDef.Msg168009:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.playerId == nil then msg.playerId = 0 end --[[(int64) 玩家id--]]
	if msg.first == nil then msg.first = 0 end --[[(int8) 是否首冲,1是,0不是--]]
	if msg.orderNum == nil then msg.orderNum = "" end --[[(string) 订单号--]]
	if msg.money == nil then msg.money = 0 end --[[(double) 充值金额(RMB)--]]
	if msg.gold == nil then msg.gold = 0 end --[[(int32) 充值钻石数--]]
	if msg.completeTime == nil then msg.completeTime = 0 end --[[(int32) 充值时间(单位:秒)时间戳--]]
	if msg.payType == nil then msg.payType = 0 end --[[(int32) 支付类型--]]
	if msg.payChannel == nil then msg.payChannel = 0 end --[[(int32) 支付渠道--]]
	if msg.extraYb == nil then msg.extraYb = 0 end --[[(int32) 额外元宝数--]]
	if msg.orderId == nil then msg.orderId = "" end --[[(string) 平台订单号--]]
	return msg
end

function MsgDef.Msg168009:encode(sm)
	sm:writeInt64(self.playerId);
	sm:writeInt8(self.first);
	sm:writeString(self.orderNum);
	sm:writeDouble(self.money);
	sm:writeInt32(self.gold);
	sm:writeInt32(self.completeTime);
	sm:writeInt32(self.payType);
	sm:writeInt32(self.payChannel);
	sm:writeInt32(self.extraYb);
	sm:writeString(self.orderId);
	return self
end

function MsgDef.Msg168009:decode(sm)
	self.playerId = sm:readInt64();
	self.first = sm:readInt8();
	self.orderNum = sm:readString();
	self.money = sm:readDouble();
	self.gold = sm:readInt32();
	self.completeTime = sm:readInt32();
	self.payType = sm:readInt32();
	self.payChannel = sm:readInt32();
	self.extraYb = sm:readInt32();
	self.orderId = sm:readString();
	return self
end

function MsgDef.Msg168009:opcode()
	return 168009
end

--[[ 后台充值2(返回)--]]
MsgDef.Msg568009 = {}
function MsgDef.Msg568009:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568009:encode(sm)
	return self
end

function MsgDef.Msg568009:decode(sm)
	return self
end


function MsgDef.Msg568009:opcode()
	return 568009
end
--[[ 后台仙盟公告或解散--]]
MsgDef.Msg168010 = {}

function MsgDef.Msg168010:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 仙盟id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:查看公告内容 2:删除公告 3:解散仙盟--]]
	return msg
end

function MsgDef.Msg168010:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg168010:decode(sm)
	self.gangId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg168010:opcode()
	return 168010
end

--[[ 后台仙盟公告或解散(返回)--]]
MsgDef.Msg568010 = {}
function MsgDef.Msg568010:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.notice = "" --[[(string) 公告内容--]]
	return msg
end

function MsgDef.Msg568010:encode(sm)
	sm:writeString(self.notice);
	return self
end

function MsgDef.Msg568010:decode(sm)
	self.notice = sm:readString();
	return self
end


function MsgDef.Msg568010:opcode()
	return 568010
end
--[[ 请求扣除道具--]]
MsgDef.Msg168011 = {}

function MsgDef.Msg168011:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 道具数量--]]
	if msg.itemType == nil then msg.itemType = 0 end --[[(int8) 1:背包物品 2:货币--]]
	return msg
end

function MsgDef.Msg168011:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	sm:writeInt8(self.itemType);
	return self
end

function MsgDef.Msg168011:decode(sm)
	self.roleId = sm:readInt64();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	self.itemType = sm:readInt8();
	return self
end

function MsgDef.Msg168011:opcode()
	return 168011
end

--[[ 请求扣除道具(返回)--]]
MsgDef.Msg568011 = {}
function MsgDef.Msg568011:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568011:encode(sm)
	return self
end

function MsgDef.Msg568011:decode(sm)
	return self
end


function MsgDef.Msg568011:opcode()
	return 568011
end
--[[ 后台同步跨服战区--]]
MsgDef.Msg168101 = {}

function MsgDef.Msg168101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.kfId == nil then msg.kfId = 0 end --[[(int32) kfId--]]
	return msg
end

function MsgDef.Msg168101:encode(sm)
	sm:writeInt32(self.kfId);
	return self
end

function MsgDef.Msg168101:decode(sm)
	self.kfId = sm:readInt32();
	return self
end

function MsgDef.Msg168101:opcode()
	return 168101
end

--[[ 后台同步跨服战区(返回)--]]
MsgDef.Msg568101 = {}
function MsgDef.Msg568101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568101:encode(sm)
	return self
end

function MsgDef.Msg568101:decode(sm)
	return self
end


function MsgDef.Msg568101:opcode()
	return 568101
end
--[[ 请求活动开关--]]
MsgDef.Msg168102 = {}

function MsgDef.Msg168102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 1：关闭某个活动 2:开启已关闭的活动--]]
	return msg
end

function MsgDef.Msg168102:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg168102:decode(sm)
	self.actId = sm:readInt32();
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg168102:opcode()
	return 168102
end

--[[ 请求活动开关(返回)--]]
MsgDef.Msg568102 = {}
function MsgDef.Msg568102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568102:encode(sm)
	return self
end

function MsgDef.Msg568102:decode(sm)
	return self
end


function MsgDef.Msg568102:opcode()
	return 568102
end
--[[ 后台同步合服信息--]]
MsgDef.Msg168103 = {}

function MsgDef.Msg168103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg168103:encode(sm)
	return self
end

function MsgDef.Msg168103:decode(sm)
	return self
end

function MsgDef.Msg168103:opcode()
	return 168103
end

--[[ 后台同步合服信息(返回)--]]
MsgDef.Msg568103 = {}
function MsgDef.Msg568103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568103:encode(sm)
	return self
end

function MsgDef.Msg568103:decode(sm)
	return self
end


function MsgDef.Msg568103:opcode()
	return 568103
end
--[[ 后台删除背包道具--]]
MsgDef.Msg168201 = {}

function MsgDef.Msg168201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.playerId == nil then msg.playerId = 0 end --[[(int64) 玩家id--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 位置--]]
	return msg
end

function MsgDef.Msg168201:encode(sm)
	sm:writeInt64(self.playerId);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg168201:decode(sm)
	self.playerId = sm:readInt64();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg168201:opcode()
	return 168201
end

--[[ 后台删除背包道具(返回)--]]
MsgDef.Msg568201 = {}
function MsgDef.Msg568201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.errorStr = "" --[[(string) 错误提示 --]]
	return msg
end

function MsgDef.Msg568201:encode(sm)
	sm:writeString(self.errorStr);
	return self
end

function MsgDef.Msg568201:decode(sm)
	self.errorStr = sm:readString();
	return self
end


function MsgDef.Msg568201:opcode()
	return 568201
end
--[[ 后台开关交易功能--]]
MsgDef.Msg168301 = {}

function MsgDef.Msg168301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 1:开启交易 2:关闭--]]
	return msg
end

function MsgDef.Msg168301:encode(sm)
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg168301:decode(sm)
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg168301:opcode()
	return 168301
end

--[[ 后台开关交易功能(返回)--]]
MsgDef.Msg568301 = {}
function MsgDef.Msg568301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568301:encode(sm)
	return self
end

function MsgDef.Msg568301:decode(sm)
	return self
end


function MsgDef.Msg568301:opcode()
	return 568301
end
--[[ 后台修改权限--]]
MsgDef.Msg168902 = {}

function MsgDef.Msg168902:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.playerId == nil then msg.playerId = 0 end --[[(int64) 玩家Id--]]
	if msg.auth == nil then msg.auth = 0 end --[[(int8) 权限 1=GM 5=限制玩家交易--]]
	return msg
end

function MsgDef.Msg168902:encode(sm)
	sm:writeInt64(self.playerId);
	sm:writeInt8(self.auth);
	return self
end

function MsgDef.Msg168902:decode(sm)
	self.playerId = sm:readInt64();
	self.auth = sm:readInt8();
	return self
end

function MsgDef.Msg168902:opcode()
	return 168902
end

--[[ 后台修改权限(返回)--]]
MsgDef.Msg568902 = {}
function MsgDef.Msg568902:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568902:encode(sm)
	return self
end

function MsgDef.Msg568902:decode(sm)
	return self
end


function MsgDef.Msg568902:opcode()
	return 568902
end
--[[ 后台发跑马灯公告--]]
MsgDef.Msg168903 = {}

function MsgDef.Msg168903:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.content == nil then msg.content = "" end --[[(string) 公告内容--]]
	return msg
end

function MsgDef.Msg168903:encode(sm)
	sm:writeString(self.content);
	return self
end

function MsgDef.Msg168903:decode(sm)
	self.content = sm:readString();
	return self
end

function MsgDef.Msg168903:opcode()
	return 168903
end

--[[ 后台发跑马灯公告(返回)--]]
MsgDef.Msg568903 = {}
function MsgDef.Msg568903:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568903:encode(sm)
	return self
end

function MsgDef.Msg568903:decode(sm)
	return self
end


function MsgDef.Msg568903:opcode()
	return 568903
end
--[[ 后台发送跑马灯2--]]
MsgDef.Msg168904 = {}

function MsgDef.Msg168904:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) 1:设置(直接替换),2:删除--]]
	if msg.pmdId == nil then msg.pmdId = 0 end --[[(int32) 跑马灯id--]]
	if msg.startTime == nil then msg.startTime = 0 end --[[(int32) 开始时间(unix时间戳)--]]
	if msg.endTime == nil then msg.endTime = 0 end --[[(int32) 结束时间(unix时间戳)--]]
	if msg.interval == nil then msg.interval = 0 end --[[(int32) 间隔(秒)--]]
	if msg.content == nil then msg.content = "" end --[[(string) 内容--]]
	if msg.channels == nil then msg.channels = "" end --[[(string) 渠道列表,用逗号分割--]]
	return msg
end

function MsgDef.Msg168904:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt32(self.pmdId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.endTime);
	sm:writeInt32(self.interval);
	sm:writeString(self.content);
	sm:writeString(self.channels);
	return self
end

function MsgDef.Msg168904:decode(sm)
	self.opType = sm:readInt8();
	self.pmdId = sm:readInt32();
	self.startTime = sm:readInt32();
	self.endTime = sm:readInt32();
	self.interval = sm:readInt32();
	self.content = sm:readString();
	self.channels = sm:readString();
	return self
end

function MsgDef.Msg168904:opcode()
	return 168904
end

--[[ 后台发送跑马灯2(返回)--]]
MsgDef.Msg568904 = {}
function MsgDef.Msg568904:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568904:encode(sm)
	return self
end

function MsgDef.Msg568904:decode(sm)
	return self
end


function MsgDef.Msg568904:opcode()
	return 568904
end
--[[ 后台开启或关闭注册功能--]]
MsgDef.Msg168906 = {}

function MsgDef.Msg168906:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int32) 0开启,1关闭注册功能--]]
	return msg
end

function MsgDef.Msg168906:encode(sm)
	sm:writeInt32(self.opType);
	return self
end

function MsgDef.Msg168906:decode(sm)
	self.opType = sm:readInt32();
	return self
end

function MsgDef.Msg168906:opcode()
	return 168906
end

--[[ 后台开启或关闭注册功能(返回)--]]
MsgDef.Msg568906 = {}
function MsgDef.Msg568906:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568906:encode(sm)
	return self
end

function MsgDef.Msg568906:decode(sm)
	return self
end


function MsgDef.Msg568906:opcode()
	return 568906
end
--[[ 后台邮件删除--]]
MsgDef.Msg168907 = {}

function MsgDef.Msg168907:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mailId == nil then msg.mailId = 0 end --[[(int64) 邮件id--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg168907:encode(sm)
	sm:writeInt64(self.mailId);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg168907:decode(sm)
	self.mailId = sm:readInt64();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg168907:opcode()
	return 168907
end

--[[ 后台邮件删除(返回)--]]
MsgDef.Msg568907 = {}
function MsgDef.Msg568907:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568907:encode(sm)
	return self
end

function MsgDef.Msg568907:decode(sm)
	return self
end


function MsgDef.Msg568907:opcode()
	return 568907
end
--[[ 后台测试命令--]]
MsgDef.Msg168908 = {}

function MsgDef.Msg168908:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cmdStr == nil then msg.cmdStr = "" end --[[(string) 测试命令--]]
	return msg
end

function MsgDef.Msg168908:encode(sm)
	sm:writeString(self.cmdStr);
	return self
end

function MsgDef.Msg168908:decode(sm)
	self.cmdStr = sm:readString();
	return self
end

function MsgDef.Msg168908:opcode()
	return 168908
end

--[[ 后台测试命令(返回)--]]
MsgDef.Msg568908 = {}
function MsgDef.Msg568908:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.resultStr = "" --[[(string) resultStr--]]
	return msg
end

function MsgDef.Msg568908:encode(sm)
	sm:writeString(self.resultStr);
	return self
end

function MsgDef.Msg568908:decode(sm)
	self.resultStr = sm:readString();
	return self
end


function MsgDef.Msg568908:opcode()
	return 568908
end
--[[ 场景切换--]]
MsgDef.Msg1810101 = {}

function MsgDef.Msg1810101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.type == nil then msg.type = 0 end --[[(int16) --]]
	if msg.ext01 == nil then msg.ext01 = 0 end --[[(int32) --]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	return msg
end

function MsgDef.Msg1810101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(self.type);
	sm:writeInt32(self.ext01);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1810101:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.type = sm:readInt16();
	self.ext01 = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1810101:opcode()
	return 1810101
end

--[[ 场景切换(返回)--]]
MsgDef.Msg5810101 = {}
function MsgDef.Msg5810101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810101:encode(sm)
	return self
end

function MsgDef.Msg5810101:decode(sm)
	return self
end


function MsgDef.Msg5810101:opcode()
	return 5810101
end
--[[ 请求场景移动--]]
MsgDef.Msg1810102 = {}

function MsgDef.Msg1810102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.dir == nil then msg.dir = 0 end --[[(int32) 方向--]]
	if msg.opt == nil then msg.opt = 0 end --[[(int16) 操作（1:移动,2停止）--]]
	if msg.startPox == nil then msg.startPox = 0 end --[[(int16) 当前位置x--]]
	if msg.startPoy == nil then msg.startPoy = 0 end --[[(int16) 当前位置y--]]
	return msg
end

function MsgDef.Msg1810102:encode(sm)
	sm:writeInt32(self.dir);
	sm:writeInt16(self.opt);
	sm:writeInt16(self.startPox);
	sm:writeInt16(self.startPoy);
	return self
end

function MsgDef.Msg1810102:decode(sm)
	self.dir = sm:readInt32();
	self.opt = sm:readInt16();
	self.startPox = sm:readInt16();
	self.startPoy = sm:readInt16();
	return self
end

function MsgDef.Msg1810102:opcode()
	return 1810102
end

--[[ 请求场景移动(返回)--]]
MsgDef.Msg5810102 = {}
function MsgDef.Msg5810102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dir = 0 --[[(int32) --]]
	msg.opt = 0 --[[(int16) 返回发送的值--]]
	return msg
end

function MsgDef.Msg5810102:encode(sm)
	sm:writeInt32(self.dir);
	sm:writeInt16(self.opt);
	return self
end

function MsgDef.Msg5810102:decode(sm)
	self.dir = sm:readInt32();
	self.opt = sm:readInt16();
	return self
end


function MsgDef.Msg5810102:opcode()
	return 5810102
end
--[[ 请求场景加载完成--]]
MsgDef.Msg1810103 = {}

function MsgDef.Msg1810103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.width == nil then msg.width = 0 end --[[(int16) 屏幕宽度--]]
	if msg.height == nil then msg.height = 0 end --[[(int16) 屏幕高度--]]
	return msg
end

function MsgDef.Msg1810103:encode(sm)
	sm:writeInt16(self.width);
	sm:writeInt16(self.height);
	return self
end

function MsgDef.Msg1810103:decode(sm)
	self.width = sm:readInt16();
	self.height = sm:readInt16();
	return self
end

function MsgDef.Msg1810103:opcode()
	return 1810103
end

--[[ 请求场景加载完成(返回)--]]
MsgDef.Msg5810103 = {}
function MsgDef.Msg5810103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810103:encode(sm)
	return self
end

function MsgDef.Msg5810103:decode(sm)
	return self
end


function MsgDef.Msg5810103:opcode()
	return 5810103
end
--[[ 请求场景退出--]]
MsgDef.Msg1810104 = {}

function MsgDef.Msg1810104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.exitType == nil then msg.exitType = 0 end --[[(int8) 1:下线退出 2:手动退出--]]
	return msg
end

function MsgDef.Msg1810104:encode(sm)
	sm:writeInt8(self.exitType);
	return self
end

function MsgDef.Msg1810104:decode(sm)
	self.exitType = sm:readInt8();
	return self
end

function MsgDef.Msg1810104:opcode()
	return 1810104
end

--[[ 请求场景退出(返回)--]]
MsgDef.Msg5810104 = {}
function MsgDef.Msg5810104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810104:encode(sm)
	return self
end

function MsgDef.Msg5810104:decode(sm)
	return self
end


function MsgDef.Msg5810104:opcode()
	return 5810104
end
--[[ 请求问鼎活动场景切换--]]
MsgDef.Msg1810105 = {}

function MsgDef.Msg1810105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 目标场景id--]]
	return msg
end

function MsgDef.Msg1810105:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1810105:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1810105:opcode()
	return 1810105
end

--[[ 请求问鼎活动场景切换(返回)--]]
MsgDef.Msg5810105 = {}
function MsgDef.Msg5810105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 目标场景id--]]
	return msg
end

function MsgDef.Msg5810105:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg5810105:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end


function MsgDef.Msg5810105:opcode()
	return 5810105
end
--[[ 请求技能战斗(玩家)--]]
MsgDef.Msg1810201 = {}

function MsgDef.Msg1810201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.uTargets == nil then msg.uTargets = {} end --[[(array<int64>) 攻击目标(玩家)--]]
	if msg.mTargets == nil then msg.mTargets = {} end --[[(array<int64>) 攻击目标(怪物)--]]
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能Id--]]
	if msg.atkPox == nil then msg.atkPox = 0 end --[[(int16) 攻击点x--]]
	if msg.atkPoy == nil then msg.atkPoy = 0 end --[[(int16) 攻击点x--]]
	if msg.tarPox == nil then msg.tarPox = 0 end --[[(int16) 目标点x--]]
	if msg.tarPoy == nil then msg.tarPoy = 0 end --[[(int16) 目标点y--]]
	if msg.opt == nil then msg.opt = 0 end --[[(int8) 攻击类型--]]
	if msg.lockType == nil then msg.lockType = 0 end --[[(int8) 1:玩家,2怪物--]]
	return msg
end

function MsgDef.Msg1810201:encode(sm)
	sm:writeInt16(get_map_size(self.uTargets))
	for i,elm in ipairs(self.uTargets) do
		sm:writeInt64(elm);
	end
	sm:writeInt16(get_map_size(self.mTargets))
	for i,elm in ipairs(self.mTargets) do
		sm:writeInt64(elm);
	end
	sm:writeInt32(self.skillId);
	sm:writeInt16(self.atkPox);
	sm:writeInt16(self.atkPoy);
	sm:writeInt16(self.tarPox);
	sm:writeInt16(self.tarPoy);
	sm:writeInt8(self.opt);
	sm:writeInt8(self.lockType);
	return self
end

function MsgDef.Msg1810201:decode(sm)
	local uTargets_size = sm:readInt16()
	for i = 1,uTargets_size do
		local elm = sm:readInt64();
		table.insert(self.uTargets, elm)
	end
	local mTargets_size = sm:readInt16()
	for i = 1,mTargets_size do
		local elm = sm:readInt64();
		table.insert(self.mTargets, elm)
	end
	self.skillId = sm:readInt32();
	self.atkPox = sm:readInt16();
	self.atkPoy = sm:readInt16();
	self.tarPox = sm:readInt16();
	self.tarPoy = sm:readInt16();
	self.opt = sm:readInt8();
	self.lockType = sm:readInt8();
	return self
end

function MsgDef.Msg1810201:opcode()
	return 1810201
end

--[[ 请求技能战斗(玩家)(返回)--]]
MsgDef.Msg5810201 = {}
function MsgDef.Msg5810201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810201:encode(sm)
	return self
end

function MsgDef.Msg5810201:decode(sm)
	return self
end


function MsgDef.Msg5810201:opcode()
	return 5810201
end
--[[ 请求攻击（宠物）--]]
MsgDef.Msg1810202 = {}

function MsgDef.Msg1810202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1810202:encode(sm)
	return self
end

function MsgDef.Msg1810202:decode(sm)
	return self
end

function MsgDef.Msg1810202:opcode()
	return 1810202
end

--[[ 请求攻击（宠物）(返回)--]]
MsgDef.Msg5810202 = {}
function MsgDef.Msg5810202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810202:encode(sm)
	return self
end

function MsgDef.Msg5810202:decode(sm)
	return self
end


function MsgDef.Msg5810202:opcode()
	return 5810202
end
--[[ 请求变身--]]
MsgDef.Msg1810203 = {}

function MsgDef.Msg1810203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.flag == nil then msg.flag = 0 end --[[(int8) --]]
	return msg
end

function MsgDef.Msg1810203:encode(sm)
	sm:writeInt8(self.flag);
	return self
end

function MsgDef.Msg1810203:decode(sm)
	self.flag = sm:readInt8();
	return self
end

function MsgDef.Msg1810203:opcode()
	return 1810203
end

--[[ 请求变身(返回)--]]
MsgDef.Msg5810203 = {}
function MsgDef.Msg5810203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810203:encode(sm)
	return self
end

function MsgDef.Msg5810203:decode(sm)
	return self
end


function MsgDef.Msg5810203:opcode()
	return 5810203
end
--[[ 请求跳跃--]]
MsgDef.Msg1810204 = {}

function MsgDef.Msg1810204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.jumpPos == nil then msg.jumpPos = {} end --[[(array<Position>) 跳跃点信息--]]
	if msg.type == nil then msg.type = 0 end --[[(int8) 1:请求跳跃2:停止跳跃--]]
	if msg.jumpType == nil then msg.jumpType = 0 end --[[(int32) 跳跃类型--]]
	return msg
end

function MsgDef.Msg1810204:encode(sm)
	sm:writeInt16(#self.jumpPos)
	for i,elm in ipairs(self.jumpPos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.type);
	sm:writeInt32(self.jumpType);
	return self
end

function MsgDef.Msg1810204:decode(sm)
	local jumpPos_size = sm:readInt16()
	for i = 1,jumpPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.jumpPos, element)
	end
	self.type = sm:readInt8();
	self.jumpType = sm:readInt32();
	return self
end

function MsgDef.Msg1810204:opcode()
	return 1810204
end

--[[ 请求跳跃(返回)--]]
MsgDef.Msg5810204 = {}
function MsgDef.Msg5810204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810204:encode(sm)
	return self
end

function MsgDef.Msg5810204:decode(sm)
	return self
end


function MsgDef.Msg5810204:opcode()
	return 5810204
end
--[[ 请求场景信息(机器人)--]]
MsgDef.Msg1810205 = {}

function MsgDef.Msg1810205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1810205:encode(sm)
	return self
end

function MsgDef.Msg1810205:decode(sm)
	return self
end

function MsgDef.Msg1810205:opcode()
	return 1810205
end

--[[ 请求场景信息(机器人)(返回)--]]
MsgDef.Msg5810205 = {}
function MsgDef.Msg5810205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810205:encode(sm)
	return self
end

function MsgDef.Msg5810205:decode(sm)
	return self
end


function MsgDef.Msg5810205:opcode()
	return 5810205
end
--[[ 请求自己的buf列表--]]
MsgDef.Msg1810206 = {}

function MsgDef.Msg1810206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1810206:encode(sm)
	return self
end

function MsgDef.Msg1810206:decode(sm)
	return self
end

function MsgDef.Msg1810206:opcode()
	return 1810206
end

--[[ 请求自己的buf列表(返回)--]]
MsgDef.Msg5810206 = {}
function MsgDef.Msg5810206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810206:encode(sm)
	return self
end

function MsgDef.Msg5810206:decode(sm)
	return self
end


function MsgDef.Msg5810206:opcode()
	return 5810206
end
--[[ 请求场景道具拾取--]]
MsgDef.Msg1810301 = {}

function MsgDef.Msg1810301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.tarPox == nil then msg.tarPox = 0 end --[[(int16) x坐标--]]
	if msg.tarPoy == nil then msg.tarPoy = 0 end --[[(int16) y坐标--]]
	return msg
end

function MsgDef.Msg1810301:encode(sm)
	sm:writeInt16(self.tarPox);
	sm:writeInt16(self.tarPoy);
	return self
end

function MsgDef.Msg1810301:decode(sm)
	self.tarPox = sm:readInt16();
	self.tarPoy = sm:readInt16();
	return self
end

function MsgDef.Msg1810301:opcode()
	return 1810301
end

--[[ 请求场景道具拾取(返回)--]]
MsgDef.Msg5810301 = {}
function MsgDef.Msg5810301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810301:encode(sm)
	return self
end

function MsgDef.Msg5810301:decode(sm)
	return self
end


function MsgDef.Msg5810301:opcode()
	return 5810301
end
--[[ 请求场景采集物采集--]]
MsgDef.Msg1810302 = {}

function MsgDef.Msg1810302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1 采集 2 取消采集 3 快速采集 4采集水晶(占领) 5占领--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 采集物的角色id--]]
	return msg
end

function MsgDef.Msg1810302:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1810302:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1810302:opcode()
	return 1810302
end

--[[ 请求场景采集物采集(返回)--]]
MsgDef.Msg5810302 = {}
function MsgDef.Msg5810302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810302:encode(sm)
	return self
end

function MsgDef.Msg5810302:decode(sm)
	return self
end


function MsgDef.Msg5810302:opcode()
	return 5810302
end
--[[ 请求场景姻缘树操作--]]
MsgDef.Msg1810303 = {}

function MsgDef.Msg1810303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.treeId == nil then msg.treeId = 0 end --[[(int64) 树唯一id--]]
	if msg.optType == nil then msg.optType = 0 end --[[(int8) 1:浇水 2:除虫 3:松土 4:收货--]]
	return msg
end

function MsgDef.Msg1810303:encode(sm)
	sm:writeInt64(self.treeId);
	sm:writeInt8(self.optType);
	return self
end

function MsgDef.Msg1810303:decode(sm)
	self.treeId = sm:readInt64();
	self.optType = sm:readInt8();
	return self
end

function MsgDef.Msg1810303:opcode()
	return 1810303
end

--[[ 请求场景姻缘树操作(返回)--]]
MsgDef.Msg5810303 = {}
function MsgDef.Msg5810303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.optType = 0 --[[(int8) 1:浇水 2:除虫 3:松土 4:收货--]]
	msg.treeStatues = 0 --[[(int32) 树状态--]]
	return msg
end

function MsgDef.Msg5810303:encode(sm)
	sm:writeInt8(self.optType);
	sm:writeInt32(self.treeStatues);
	return self
end

function MsgDef.Msg5810303:decode(sm)
	self.optType = sm:readInt8();
	self.treeStatues = sm:readInt32();
	return self
end


function MsgDef.Msg5810303:opcode()
	return 5810303
end
--[[ 请求同步场景技能信息--]]
MsgDef.Msg1810401 = {}

function MsgDef.Msg1810401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillLists == nil then msg.skillLists = {} end --[[(array<int32>) 技能列表--]]
	if msg.buffLists == nil then msg.buffLists = {} end --[[(array<int32>) buff列表--]]
	return msg
end

function MsgDef.Msg1810401:encode(sm)
	sm:writeInt16(get_map_size(self.skillLists))
	for i,elm in ipairs(self.skillLists) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.buffLists))
	for i,elm in ipairs(self.buffLists) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1810401:decode(sm)
	local skillLists_size = sm:readInt16()
	for i = 1,skillLists_size do
		local elm = sm:readInt32();
		table.insert(self.skillLists, elm)
	end
	local buffLists_size = sm:readInt16()
	for i = 1,buffLists_size do
		local elm = sm:readInt32();
		table.insert(self.buffLists, elm)
	end
	return self
end

function MsgDef.Msg1810401:opcode()
	return 1810401
end

--[[ 请求同步场景技能信息(返回)--]]
MsgDef.Msg5810401 = {}
function MsgDef.Msg5810401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810401:encode(sm)
	return self
end

function MsgDef.Msg5810401:decode(sm)
	return self
end


function MsgDef.Msg5810401:opcode()
	return 5810401
end
--[[ 请求同步场景buff信息--]]
MsgDef.Msg1810402 = {}

function MsgDef.Msg1810402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.moduleId == nil then msg.moduleId = 0 end --[[(int32) 需要添加的buff--]]
	if msg.opType == nil then msg.opType = 0 end --[[(int8) 1:添加,2移除--]]
	return msg
end

function MsgDef.Msg1810402:encode(sm)
	sm:writeInt32(self.moduleId);
	sm:writeInt8(self.opType);
	return self
end

function MsgDef.Msg1810402:decode(sm)
	self.moduleId = sm:readInt32();
	self.opType = sm:readInt8();
	return self
end

function MsgDef.Msg1810402:opcode()
	return 1810402
end

--[[ 请求同步场景buff信息(返回)--]]
MsgDef.Msg5810402 = {}
function MsgDef.Msg5810402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810402:encode(sm)
	return self
end

function MsgDef.Msg5810402:decode(sm)
	return self
end


function MsgDef.Msg5810402:opcode()
	return 5810402
end
--[[ 请求三界争霸宝箱拾取--]]
MsgDef.Msg1810501 = {}

function MsgDef.Msg1810501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 宝箱id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:采集2:取消--]]
	return msg
end

function MsgDef.Msg1810501:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1810501:decode(sm)
	self.roleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1810501:opcode()
	return 1810501
end

--[[ 请求三界争霸宝箱拾取(返回)--]]
MsgDef.Msg5810501 = {}
function MsgDef.Msg5810501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810501:encode(sm)
	return self
end

function MsgDef.Msg5810501:decode(sm)
	return self
end


function MsgDef.Msg5810501:opcode()
	return 5810501
end
--[[ 请求三界争霸宝箱触发出现--]]
MsgDef.Msg1810502 = {}

function MsgDef.Msg1810502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gridIds == nil then msg.gridIds = {} end --[[(array<int32>) 格子id--]]
	return msg
end

function MsgDef.Msg1810502:encode(sm)
	sm:writeInt16(get_map_size(self.gridIds))
	for i,elm in ipairs(self.gridIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1810502:decode(sm)
	local gridIds_size = sm:readInt16()
	for i = 1,gridIds_size do
		local elm = sm:readInt32();
		table.insert(self.gridIds, elm)
	end
	return self
end

function MsgDef.Msg1810502:opcode()
	return 1810502
end

--[[ 请求三界争霸宝箱触发出现(返回)--]]
MsgDef.Msg5810502 = {}
function MsgDef.Msg5810502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810502:encode(sm)
	return self
end

function MsgDef.Msg5810502:decode(sm)
	return self
end


function MsgDef.Msg5810502:opcode()
	return 5810502
end
--[[ 请求跨服场景内部传送--]]
MsgDef.Msg1810601 = {}

function MsgDef.Msg1810601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景--]]
	if msg.ext01 == nil then msg.ext01 = 0 end --[[(int32) 传送阵--]]
	return msg
end

function MsgDef.Msg1810601:encode(sm)
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.ext01);
	return self
end

function MsgDef.Msg1810601:decode(sm)
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.sceneId = sm:readInt32();
	self.ext01 = sm:readInt32();
	return self
end

function MsgDef.Msg1810601:opcode()
	return 1810601
end

--[[ 请求跨服场景内部传送(返回)--]]
MsgDef.Msg5810601 = {}
function MsgDef.Msg5810601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5810601:encode(sm)
	return self
end

function MsgDef.Msg5810601:decode(sm)
	return self
end


function MsgDef.Msg5810601:opcode()
	return 5810601
end
--[[ 内部场景切换--]]
MsgDef.Msg1820101 = {}

function MsgDef.Msg1820101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景Id--]]
	if msg.lineId == nil then msg.lineId = 0 end --[[(int32) 线Id--]]
	if msg.opt == nil then msg.opt = 0 end --[[(int32) 操作--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.jsonData == nil then msg.jsonData = 0 end --[[(int8) 玩家信息--]]
	return msg
end

function MsgDef.Msg1820101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.lineId);
	sm:writeInt32(self.opt);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt8(self.jsonData);
	return self
end

function MsgDef.Msg1820101:decode(sm)
	self.sceneId = sm:readInt32();
	self.lineId = sm:readInt32();
	self.opt = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.jsonData = sm:readInt8();
	return self
end

function MsgDef.Msg1820101:opcode()
	return 1820101
end

--[[ 内部场景切换(返回)--]]
MsgDef.Msg5820101 = {}
function MsgDef.Msg5820101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) --]]
	msg.opt = 0 --[[(int32) --]]
	return msg
end

function MsgDef.Msg5820101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.opt);
	return self
end

function MsgDef.Msg5820101:decode(sm)
	self.sceneId = sm:readInt32();
	self.opt = sm:readInt32();
	return self
end


function MsgDef.Msg5820101:opcode()
	return 5820101
end
--[[ 请求进入场景地图--]]
MsgDef.Msg1820102 = {}

function MsgDef.Msg1820102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.width == nil then msg.width = 0 end --[[(int16) --]]
	if msg.height == nil then msg.height = 0 end --[[(int16) --]]
	return msg
end

function MsgDef.Msg1820102:encode(sm)
	sm:writeInt16(self.width);
	sm:writeInt16(self.height);
	return self
end

function MsgDef.Msg1820102:decode(sm)
	self.width = sm:readInt16();
	self.height = sm:readInt16();
	return self
end

function MsgDef.Msg1820102:opcode()
	return 1820102
end

--[[ 请求进入场景地图(返回)--]]
MsgDef.Msg5820102 = {}
function MsgDef.Msg5820102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820102:encode(sm)
	return self
end

function MsgDef.Msg5820102:decode(sm)
	return self
end


function MsgDef.Msg5820102:opcode()
	return 5820102
end
--[[ 请求切换关卡--]]
MsgDef.Msg1820103 = {}

function MsgDef.Msg1820103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mapId == nil then msg.mapId = 0 end --[[(int32) mapId--]]
	if msg.nextPassId == nil then msg.nextPassId = 0 end --[[(int32) nextPassId--]]
	if msg.send == nil then msg.send = 0 end --[[(int8) send--]]
	return msg
end

function MsgDef.Msg1820103:encode(sm)
	sm:writeInt32(self.mapId);
	sm:writeInt32(self.nextPassId);
	sm:writeInt8(self.send);
	return self
end

function MsgDef.Msg1820103:decode(sm)
	self.mapId = sm:readInt32();
	self.nextPassId = sm:readInt32();
	self.send = sm:readInt8();
	return self
end

function MsgDef.Msg1820103:opcode()
	return 1820103
end

--[[ 请求切换关卡(返回)--]]
MsgDef.Msg5820103 = {}
function MsgDef.Msg5820103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820103:encode(sm)
	return self
end

function MsgDef.Msg5820103:decode(sm)
	return self
end


function MsgDef.Msg5820103:opcode()
	return 5820103
end
--[[ 请求场景复活--]]
MsgDef.Msg1820104 = {}

function MsgDef.Msg1820104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reviveType == nil then msg.reviveType = 0 end --[[(int32) 复活方式,1-原地复活2-自动购买原地复活3-复活点复活--]]
	return msg
end

function MsgDef.Msg1820104:encode(sm)
	sm:writeInt32(self.reviveType);
	return self
end

function MsgDef.Msg1820104:decode(sm)
	self.reviveType = sm:readInt32();
	return self
end

function MsgDef.Msg1820104:opcode()
	return 1820104
end

--[[ 请求场景复活(返回)--]]
MsgDef.Msg5820104 = {}
function MsgDef.Msg5820104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820104:encode(sm)
	return self
end

function MsgDef.Msg5820104:decode(sm)
	return self
end


function MsgDef.Msg5820104:opcode()
	return 5820104
end
--[[ 请求种树--]]
MsgDef.Msg1820201 = {}

function MsgDef.Msg1820201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.treeLevel == nil then msg.treeLevel = 0 end --[[(int32) 树等级--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 树配置id--]]
	return msg
end

function MsgDef.Msg1820201:encode(sm)
	sm:writeInt32(self.treeLevel);
	sm:writeInt32(self.monsterId);
	return self
end

function MsgDef.Msg1820201:decode(sm)
	self.treeLevel = sm:readInt32();
	self.monsterId = sm:readInt32();
	return self
end

function MsgDef.Msg1820201:opcode()
	return 1820201
end

--[[ 请求种树(返回)--]]
MsgDef.Msg5820201 = {}
function MsgDef.Msg5820201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820201:encode(sm)
	return self
end

function MsgDef.Msg5820201:decode(sm)
	return self
end


function MsgDef.Msg5820201:opcode()
	return 5820201
end
--[[ 请求跨服三界争霸添加镖车--]]
MsgDef.Msg1820202 = {}

function MsgDef.Msg1820202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pox == nil then msg.pox = 0 end --[[(int32) pox--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int32) poy--]]
	if msg.mId == nil then msg.mId = 0 end --[[(int32) mId--]]
	return msg
end

function MsgDef.Msg1820202:encode(sm)
	sm:writeInt32(self.pox);
	sm:writeInt32(self.poy);
	sm:writeInt32(self.mId);
	return self
end

function MsgDef.Msg1820202:decode(sm)
	self.pox = sm:readInt32();
	self.poy = sm:readInt32();
	self.mId = sm:readInt32();
	return self
end

function MsgDef.Msg1820202:opcode()
	return 1820202
end

--[[ 请求跨服三界争霸添加镖车(返回)--]]
MsgDef.Msg5820202 = {}
function MsgDef.Msg5820202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820202:encode(sm)
	return self
end

function MsgDef.Msg5820202:decode(sm)
	return self
end


function MsgDef.Msg5820202:opcode()
	return 5820202
end
--[[ 请求更新家园组件信息--]]
MsgDef.Msg1820203 = {}

function MsgDef.Msg1820203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.thingIds == nil then msg.thingIds = {} end --[[(array<int32>) --]]
	return msg
end

function MsgDef.Msg1820203:encode(sm)
	sm:writeInt16(get_map_size(self.thingIds))
	for i,elm in ipairs(self.thingIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1820203:decode(sm)
	local thingIds_size = sm:readInt16()
	for i = 1,thingIds_size do
		local elm = sm:readInt32();
		table.insert(self.thingIds, elm)
	end
	return self
end

function MsgDef.Msg1820203:opcode()
	return 1820203
end

--[[ 请求更新家园组件信息(返回)--]]
MsgDef.Msg5820203 = {}
function MsgDef.Msg5820203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820203:encode(sm)
	return self
end

function MsgDef.Msg5820203:decode(sm)
	return self
end


function MsgDef.Msg5820203:opcode()
	return 5820203
end
--[[  请求家园场景操作--]]
MsgDef.Msg1820204 = {}

function MsgDef.Msg1820204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:召唤boss--]]
	if msg.ext01 == nil then msg.ext01 = 0 end --[[(int32) 额外情况01--]]
	return msg
end

function MsgDef.Msg1820204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.ext01);
	return self
end

function MsgDef.Msg1820204:decode(sm)
	self.reqType = sm:readInt8();
	self.ext01 = sm:readInt32();
	return self
end

function MsgDef.Msg1820204:opcode()
	return 1820204
end

--[[  请求家园场景操作(返回)--]]
MsgDef.Msg5820204 = {}
function MsgDef.Msg5820204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820204:encode(sm)
	return self
end

function MsgDef.Msg5820204:decode(sm)
	return self
end


function MsgDef.Msg5820204:opcode()
	return 5820204
end
--[[ 请求场景测试命令--]]
MsgDef.Msg1820205 = {}

function MsgDef.Msg1820205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cmd == nil then msg.cmd = "" end --[[(string) 命令--]]
	return msg
end

function MsgDef.Msg1820205:encode(sm)
	sm:writeString(self.cmd);
	return self
end

function MsgDef.Msg1820205:decode(sm)
	self.cmd = sm:readString();
	return self
end

function MsgDef.Msg1820205:opcode()
	return 1820205
end

--[[ 请求场景测试命令(返回)--]]
MsgDef.Msg5820205 = {}
function MsgDef.Msg5820205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820205:encode(sm)
	return self
end

function MsgDef.Msg5820205:decode(sm)
	return self
end


function MsgDef.Msg5820205:opcode()
	return 5820205
end
--[[ 请求生成年兽BOSS--]]
MsgDef.Msg1820206 = {}

function MsgDef.Msg1820206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	return msg
end

function MsgDef.Msg1820206:encode(sm)
	sm:writeInt32(self.monsterId);
	return self
end

function MsgDef.Msg1820206:decode(sm)
	self.monsterId = sm:readInt32();
	return self
end

function MsgDef.Msg1820206:opcode()
	return 1820206
end

--[[ 请求生成年兽BOSS(返回)--]]
MsgDef.Msg5820206 = {}
function MsgDef.Msg5820206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820206:encode(sm)
	return self
end

function MsgDef.Msg5820206:decode(sm)
	return self
end


function MsgDef.Msg5820206:opcode()
	return 5820206
end
--[[ 请求内部使用场景刷新卡--]]
MsgDef.Msg1820207 = {}

function MsgDef.Msg1820207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:使用--]]
	if msg.packIndex == nil then msg.packIndex = 0 end --[[(int32) 背包下标--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int64) 怪物id--]]
	return msg
end

function MsgDef.Msg1820207:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.packIndex);
	sm:writeInt64(self.monsterId);
	return self
end

function MsgDef.Msg1820207:decode(sm)
	self.reqType = sm:readInt8();
	self.packIndex = sm:readInt32();
	self.monsterId = sm:readInt64();
	return self
end

function MsgDef.Msg1820207:opcode()
	return 1820207
end

--[[ 请求内部使用场景刷新卡(返回)--]]
MsgDef.Msg5820207 = {}
function MsgDef.Msg5820207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5820207:encode(sm)
	return self
end

function MsgDef.Msg5820207:decode(sm)
	return self
end


function MsgDef.Msg5820207:opcode()
	return 5820207
end
--[[ 错误通知广播--]]
MsgDef.Msg8010101 = {}

function MsgDef.Msg8010101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.errorId = 0 --[[(int32) 错误号--]]
	msg.errorDes = "" --[[(string) 错误描述--]]
	return msg
end

function MsgDef.Msg8010101:encode(sm)
	sm:writeInt32(self.errorId);
	sm:writeString(self.errorDes);
	return self
end

function MsgDef.Msg8010101:decode(sm)
	self.errorId = sm:readInt32();
	self.errorDes = sm:readString();
	return self
end

function MsgDef.Msg8010101:opcode()
	return 8010101
end

--[[ 出现广播（玩家、怪物）--]]
MsgDef.Msg8020101 = {}

function MsgDef.Msg8020101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.users = {} --[[(array<UserInfo>) 玩家信息列表--]]
	msg.monsters = {} --[[(array<MonsterInfo>) 怪物列表--]]
	msg.widgets = {} --[[(array<WidgetInfo>) 部件列表--]]
	msg.dUsers = {} --[[(array<int64>) 移除玩家列表--]]
	msg.dMonsters = {} --[[(array<int64>) 移除怪物列表--]]
	msg.dWidgets = {} --[[(array<int64>) 移除部件列表--]]
	return msg
end

function MsgDef.Msg8020101:encode(sm)
	sm:writeInt16(#self.users)
	for i,elm in ipairs(self.users) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.monsters)
	for i,elm in ipairs(self.monsters) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.widgets)
	for i,elm in ipairs(self.widgets) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.dUsers))
	for i,elm in ipairs(self.dUsers) do
		sm:writeInt64(elm);
	end
	sm:writeInt16(get_map_size(self.dMonsters))
	for i,elm in ipairs(self.dMonsters) do
		sm:writeInt64(elm);
	end
	sm:writeInt16(get_map_size(self.dWidgets))
	for i,elm in ipairs(self.dWidgets) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8020101:decode(sm)
	local users_size = sm:readInt16()
	for i = 1,users_size do
		local element = MsgDef.UserInfo:create():decode(sm)
		table.insert(self.users, element)
	end
	local monsters_size = sm:readInt16()
	for i = 1,monsters_size do
		local element = MsgDef.MonsterInfo:create():decode(sm)
		table.insert(self.monsters, element)
	end
	local widgets_size = sm:readInt16()
	for i = 1,widgets_size do
		local element = MsgDef.WidgetInfo:create():decode(sm)
		table.insert(self.widgets, element)
	end
	local dUsers_size = sm:readInt16()
	for i = 1,dUsers_size do
		local elm = sm:readInt64();
		table.insert(self.dUsers, elm)
	end
	local dMonsters_size = sm:readInt16()
	for i = 1,dMonsters_size do
		local elm = sm:readInt64();
		table.insert(self.dMonsters, elm)
	end
	local dWidgets_size = sm:readInt16()
	for i = 1,dWidgets_size do
		local elm = sm:readInt64();
		table.insert(self.dWidgets, elm)
	end
	return self
end

function MsgDef.Msg8020101:opcode()
	return 8020101
end

--[[ 移动广播（玩家）--]]
MsgDef.Msg8020102 = {}

function MsgDef.Msg8020102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.startPox = 0 --[[(int16) --]]
	msg.startPoy = 0 --[[(int16) --]]
	msg.dir = 0 --[[(int16) 方向--]]
	msg.speed = 0 --[[(int32) 速度--]]
	msg.opt = 0 --[[(int16) 操作(1移动，2停止移动)--]]
	return msg
end

function MsgDef.Msg8020102:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(self.startPox);
	sm:writeInt16(self.startPoy);
	sm:writeInt16(self.dir);
	sm:writeInt32(self.speed);
	sm:writeInt16(self.opt);
	return self
end

function MsgDef.Msg8020102:decode(sm)
	self.roleId = sm:readInt64();
	self.startPox = sm:readInt16();
	self.startPoy = sm:readInt16();
	self.dir = sm:readInt16();
	self.speed = sm:readInt32();
	self.opt = sm:readInt16();
	return self
end

function MsgDef.Msg8020102:opcode()
	return 8020102
end

--[[ 移除广播（玩家）--]]
MsgDef.Msg8020103 = {}

function MsgDef.Msg8020103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.dJumps = {} --[[(array<JumpInfo>) 移除跳跃列表--]]
	return msg
end

function MsgDef.Msg8020103:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(#self.dJumps)
	for i,elm in ipairs(self.dJumps) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8020103:decode(sm)
	self.roleId = sm:readInt64();
	local dJumps_size = sm:readInt16()
	for i = 1,dJumps_size do
		local element = MsgDef.JumpInfo:create():decode(sm)
		table.insert(self.dJumps, element)
	end
	return self
end

function MsgDef.Msg8020103:opcode()
	return 8020103
end

--[[ 切换场景广播--]]
MsgDef.Msg8020104 = {}

function MsgDef.Msg8020104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景Id--]]
	msg.pox = 0 --[[(int32) --]]
	msg.poy = 0 --[[(int32) --]]
	msg.mapId = 0 --[[(int32) 地图Id--]]
	msg.serverMapId = 0 --[[(int32) 服务器地图自增id(跨服同步单服用)--]]
	return msg
end

function MsgDef.Msg8020104:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pox);
	sm:writeInt32(self.poy);
	sm:writeInt32(self.mapId);
	sm:writeInt32(self.serverMapId);
	return self
end

function MsgDef.Msg8020104:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt32();
	self.poy = sm:readInt32();
	self.mapId = sm:readInt32();
	self.serverMapId = sm:readInt32();
	return self
end

function MsgDef.Msg8020104:opcode()
	return 8020104
end

--[[ 移除广播（怪物）--]]
MsgDef.Msg8020105 = {}

function MsgDef.Msg8020105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 怪物Id--]]
	msg.killerId = 0 --[[(int64) 击杀着Id(有可能为0)--]]
	return msg
end

function MsgDef.Msg8020105:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.killerId);
	return self
end

function MsgDef.Msg8020105:decode(sm)
	self.roleId = sm:readInt64();
	self.killerId = sm:readInt64();
	return self
end

function MsgDef.Msg8020105:opcode()
	return 8020105
end

--[[ 复活广播（怪物）--]]
MsgDef.Msg8020106 = {}

function MsgDef.Msg8020106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterInfo = MsgDef.MonsterInfo:create() --[[(MonsterInfo) 怪物信息--]]
	return msg
end

function MsgDef.Msg8020106:encode(sm)
	self.monsterInfo:encode(sm)
	return self
end

function MsgDef.Msg8020106:decode(sm)
	self.monsterInfo:decode(sm)
	return self
end

function MsgDef.Msg8020106:opcode()
	return 8020106
end

--[[ 出现广播（玩家）--]]
MsgDef.Msg8020107 = {}

function MsgDef.Msg8020107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.userInfo = MsgDef.UserInfo:create() --[[(UserInfo) --]]
	return msg
end

function MsgDef.Msg8020107:encode(sm)
	self.userInfo:encode(sm)
	return self
end

function MsgDef.Msg8020107:decode(sm)
	self.userInfo:decode(sm)
	return self
end

function MsgDef.Msg8020107:opcode()
	return 8020107
end

--[[ 移动广播（怪物）--]]
MsgDef.Msg8020108 = {}

function MsgDef.Msg8020108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 怪物Id--]]
	msg.startPox = 0 --[[(int16) --]]
	msg.startPoy = 0 --[[(int16) --]]
	msg.endPox = 0 --[[(int16) --]]
	msg.endPoy = 0 --[[(int16) --]]
	msg.speed = 0 --[[(int32) --]]
	msg.opt = 0 --[[(int16) 操作(1移动，2停止移动)--]]
	return msg
end

function MsgDef.Msg8020108:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(self.startPox);
	sm:writeInt16(self.startPoy);
	sm:writeInt16(self.endPox);
	sm:writeInt16(self.endPoy);
	sm:writeInt32(self.speed);
	sm:writeInt16(self.opt);
	return self
end

function MsgDef.Msg8020108:decode(sm)
	self.roleId = sm:readInt64();
	self.startPox = sm:readInt16();
	self.startPoy = sm:readInt16();
	self.endPox = sm:readInt16();
	self.endPoy = sm:readInt16();
	self.speed = sm:readInt32();
	self.opt = sm:readInt16();
	return self
end

function MsgDef.Msg8020108:opcode()
	return 8020108
end

--[[ 移除广播（怪物列表）--]]
MsgDef.Msg8020109 = {}

function MsgDef.Msg8020109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dMonsters = {} --[[(array<int64>) 移除怪物列表--]]
	return msg
end

function MsgDef.Msg8020109:encode(sm)
	sm:writeInt16(get_map_size(self.dMonsters))
	for i,elm in ipairs(self.dMonsters) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8020109:decode(sm)
	local dMonsters_size = sm:readInt16()
	for i = 1,dMonsters_size do
		local elm = sm:readInt64();
		table.insert(self.dMonsters, elm)
	end
	return self
end

function MsgDef.Msg8020109:opcode()
	return 8020109
end

--[[ 玩家死亡广播--]]
MsgDef.Msg8020110 = {}

function MsgDef.Msg8020110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.reviveType = 0 --[[(int8) 复活处理类型:0默认,1弹窗挑战失败--]]
	msg.atkName = "" --[[(string) 攻击者名称--]]
	msg.reviveTime = 0 --[[(int32) 复活剩余时间--]]
	msg.aktType = 0 --[[(int8) 1被玩家杀，2被怪物--]]
	return msg
end

function MsgDef.Msg8020110:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reviveType);
	sm:writeString(self.atkName);
	sm:writeInt32(self.reviveTime);
	sm:writeInt8(self.aktType);
	return self
end

function MsgDef.Msg8020110:decode(sm)
	self.roleId = sm:readInt64();
	self.reviveType = sm:readInt8();
	self.atkName = sm:readString();
	self.reviveTime = sm:readInt32();
	self.aktType = sm:readInt8();
	return self
end

function MsgDef.Msg8020110:opcode()
	return 8020110
end

--[[ 玩家复活成功广播--]]
MsgDef.Msg8020111 = {}

function MsgDef.Msg8020111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.reviveType = 0 --[[(int32) --]]
	msg.currHp = 0 --[[(int32) --]]
	msg.maxHp = 0 --[[(int32) --]]
	msg.buffs = {} --[[(array<BuffInfo>) buffs--]]
	return msg
end

function MsgDef.Msg8020111:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.reviveType);
	sm:writeInt32(self.currHp);
	sm:writeInt32(self.maxHp);
	sm:writeInt16(#self.buffs)
	for i,elm in ipairs(self.buffs) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8020111:decode(sm)
	self.roleId = sm:readInt64();
	self.reviveType = sm:readInt32();
	self.currHp = sm:readInt32();
	self.maxHp = sm:readInt32();
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local element = MsgDef.BuffInfo:create():decode(sm)
		table.insert(self.buffs, element)
	end
	return self
end

function MsgDef.Msg8020111:opcode()
	return 8020111
end

--[[ 玩家场景改变位置广播--]]
MsgDef.Msg8020112 = {}

function MsgDef.Msg8020112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.sceneId = 0 --[[(int32) --]]
	msg.pox = 0 --[[(int16) --]]
	msg.poy = 0 --[[(int16) --]]
	return msg
end

function MsgDef.Msg8020112:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	return self
end

function MsgDef.Msg8020112:decode(sm)
	self.roleId = sm:readInt64();
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	return self
end

function MsgDef.Msg8020112:opcode()
	return 8020112
end

--[[ 移除广播(部件列表)--]]
MsgDef.Msg8020113 = {}

function MsgDef.Msg8020113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dWidgets = {} --[[(array<int64>) 移除的部件列表--]]
	return msg
end

function MsgDef.Msg8020113:encode(sm)
	sm:writeInt16(get_map_size(self.dWidgets))
	for i,elm in ipairs(self.dWidgets) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8020113:decode(sm)
	local dWidgets_size = sm:readInt16()
	for i = 1,dWidgets_size do
		local elm = sm:readInt64();
		table.insert(self.dWidgets, elm)
	end
	return self
end

function MsgDef.Msg8020113:opcode()
	return 8020113
end

--[[ 复活广播(部件)--]]
MsgDef.Msg8020114 = {}

function MsgDef.Msg8020114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.widgets = {} --[[(array<WidgetInfo>) 出现的部件--]]
	return msg
end

function MsgDef.Msg8020114:encode(sm)
	sm:writeInt16(#self.widgets)
	for i,elm in ipairs(self.widgets) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8020114:decode(sm)
	local widgets_size = sm:readInt16()
	for i = 1,widgets_size do
		local element = MsgDef.WidgetInfo:create():decode(sm)
		table.insert(self.widgets, element)
	end
	return self
end

function MsgDef.Msg8020114:opcode()
	return 8020114
end

--[[ 移除广播(部件)--]]
MsgDef.Msg8020115 = {}

function MsgDef.Msg8020115:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) roleId--]]
	msg.killerId = 0 --[[(int64) killerId--]]
	return msg
end

function MsgDef.Msg8020115:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.killerId);
	return self
end

function MsgDef.Msg8020115:decode(sm)
	self.roleId = sm:readInt64();
	self.killerId = sm:readInt64();
	return self
end

function MsgDef.Msg8020115:opcode()
	return 8020115
end

--[[ 更新组件属性--]]
MsgDef.Msg8020116 = {}

function MsgDef.Msg8020116:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.widgets = {} --[[(array<WidgetInfo>) 组件--]]
	return msg
end

function MsgDef.Msg8020116:encode(sm)
	sm:writeInt16(#self.widgets)
	for i,elm in ipairs(self.widgets) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8020116:decode(sm)
	local widgets_size = sm:readInt16()
	for i = 1,widgets_size do
		local element = MsgDef.WidgetInfo:create():decode(sm)
		table.insert(self.widgets, element)
	end
	return self
end

function MsgDef.Msg8020116:opcode()
	return 8020116
end

--[[ 更新玩家属性--]]
MsgDef.Msg8020201 = {}

function MsgDef.Msg8020201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.attris = {} --[[(map<int32,int32>) 32位玩家属性值map--]]
	msg.attris64 = {} --[[(map<int32,int64>) 64位属性map--]]
	return msg
end

function MsgDef.Msg8020201:encode(sm)
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.attris64))
	for kn,elm in ipairs(self.attris64) do
		sm:writeInt32(kn);
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8020201:decode(sm)
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local attris64_size = sm:readInt16()
	for i = 1,attris64_size do
		local kv = sm:readInt32();
		self.attris64[kv] = sm:readInt64();
	end
	return self
end

function MsgDef.Msg8020201:opcode()
	return 8020201
end

--[[ 更新外观--]]
MsgDef.Msg8020202 = {}

function MsgDef.Msg8020202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinMap = {} --[[(map<int32,int32>) 发生改变的外观 key->外观id,value->模型id--]]
	msg.roleId = 0 --[[(int64) 发生改变的玩家id--]]
	return msg
end

function MsgDef.Msg8020202:encode(sm)
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg8020202:decode(sm)
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg8020202:opcode()
	return 8020202
end

--[[ 广播属性给周围玩家--]]
MsgDef.Msg8020203 = {}

function MsgDef.Msg8020203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 改变的玩家--]]
	msg.attris = {} --[[(map<int32,int32>) 属性--]]
	msg.attris64 = {} --[[(map<int32,int64>) 64位属性字典--]]
	return msg
end

function MsgDef.Msg8020203:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.attris64))
	for kn,elm in ipairs(self.attris64) do
		sm:writeInt32(kn);
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8020203:decode(sm)
	self.roleId = sm:readInt64();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local attris64_size = sm:readInt16()
	for i = 1,attris64_size do
		local kv = sm:readInt32();
		self.attris64[kv] = sm:readInt64();
	end
	return self
end

function MsgDef.Msg8020203:opcode()
	return 8020203
end

--[[ 广播自己的buff列表--]]
MsgDef.Msg8020204 = {}

function MsgDef.Msg8020204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.buffs = {} --[[(array<BuffInfo>) buff列表--]]
	return msg
end

function MsgDef.Msg8020204:encode(sm)
	sm:writeInt16(#self.buffs)
	for i,elm in ipairs(self.buffs) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8020204:decode(sm)
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local element = MsgDef.BuffInfo:create():decode(sm)
		table.insert(self.buffs, element)
	end
	return self
end

function MsgDef.Msg8020204:opcode()
	return 8020204
end

--[[ 道具改变广播--]]
MsgDef.Msg8030101 = {}

function MsgDef.Msg8030101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.changeItems = {} --[[(array<ItemInfo>) 改变的道具列表--]]
	msg.itemSeq = 0 --[[(int32) 道具存放类型:仓库=100000,背包=200000,装备=300000--]]
	msg.srcSeq = 0 --[[(int32) 源存储类型:=1任务中获得装备不提示 =2吞噬获得伙伴经验 仓库100000,背包200000,装备300000--]]
	return msg
end

function MsgDef.Msg8030101:encode(sm)
	sm:writeInt16(#self.changeItems)
	for i,elm in ipairs(self.changeItems) do
		elm:encode(sm)
	end
	sm:writeInt32(self.itemSeq);
	sm:writeInt32(self.srcSeq);
	return self
end

function MsgDef.Msg8030101:decode(sm)
	local changeItems_size = sm:readInt16()
	for i = 1,changeItems_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.changeItems, element)
	end
	self.itemSeq = sm:readInt32();
	self.srcSeq = sm:readInt32();
	return self
end

function MsgDef.Msg8030101:opcode()
	return 8030101
end

--[[ 任务广播--]]
MsgDef.Msg8030102 = {}

function MsgDef.Msg8030102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskInfos = {} --[[(array<TaskInfo>) 任务列表--]]
	return msg
end

function MsgDef.Msg8030102:encode(sm)
	sm:writeInt16(#self.taskInfos)
	for i,elm in ipairs(self.taskInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8030102:decode(sm)
	local taskInfos_size = sm:readInt16()
	for i = 1,taskInfos_size do
		local element = MsgDef.TaskInfo:create():decode(sm)
		table.insert(self.taskInfos, element)
	end
	return self
end

function MsgDef.Msg8030102:opcode()
	return 8030102
end

--[[ 金钱广播--]]
MsgDef.Msg8030103 = {}

function MsgDef.Msg8030103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.moneyMap = {} --[[(map<int32,int32>) 金钱字典,key->金钱类型(int,前后端的约定),value->金钱值--]]
	return msg
end

function MsgDef.Msg8030103:encode(sm)
	sm:writeInt16(get_map_size(self.moneyMap))
	for kn,elm in ipairs(self.moneyMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8030103:decode(sm)
	local moneyMap_size = sm:readInt16()
	for i = 1,moneyMap_size do
		local kv = sm:readInt32();
		self.moneyMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8030103:opcode()
	return 8030103
end

--[[ 聊天广播--]]
MsgDef.Msg8030104 = {}

function MsgDef.Msg8030104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int8) 类型:--]]
	msg.content = "" --[[(string) 内容--]]
	msg.tarName = "" --[[(string) 目标玩家名字--]]
	msg.sendName = "" --[[(string) 发送玩家的名字--]]
	msg.sendRoleId = 0 --[[(int64) 发送玩家的roleId--]]
	msg.sendRoleIcon = 0 --[[(int32) 发送玩家头像--]]
	msg.sendRoleLev = 0 --[[(int32) 发送玩家等级--]]
	msg.gangJob = 0 --[[(int8) 帮派职位0帮众,1精英,2长老,3副帮主,4帮主--]]
	msg.tarRoleLev = 0 --[[(int32) 对方人物等级--]]
	msg.powerRank = 0 --[[(int8) 战力前10排名--]]
	msg.relation = 0 --[[(int8) 关系0陌生人1好友--]]
	msg.extStr = "" --[[(string) 额外的信息--]]
	msg.voiceStr = "" --[[(string) 语音字符串--]]
	msg.isVoice = 0 --[[(int8) 是否语音--]]
	msg.sendMainSrvId = 0 --[[(int32) 主服id--]]
	msg.paopaoId = 0 --[[(int32) 发送者的泡泡id--]]
	return msg
end

function MsgDef.Msg8030104:encode(sm)
	sm:writeInt8(self.type);
	sm:writeString(self.content);
	sm:writeString(self.tarName);
	sm:writeString(self.sendName);
	sm:writeInt64(self.sendRoleId);
	sm:writeInt32(self.sendRoleIcon);
	sm:writeInt32(self.sendRoleLev);
	sm:writeInt8(self.gangJob);
	sm:writeInt32(self.tarRoleLev);
	sm:writeInt8(self.powerRank);
	sm:writeInt8(self.relation);
	sm:writeString(self.extStr);
	sm:writeString(self.voiceStr);
	sm:writeInt8(self.isVoice);
	sm:writeInt32(self.sendMainSrvId);
	sm:writeInt32(self.paopaoId);
	return self
end

function MsgDef.Msg8030104:decode(sm)
	self.type = sm:readInt8();
	self.content = sm:readString();
	self.tarName = sm:readString();
	self.sendName = sm:readString();
	self.sendRoleId = sm:readInt64();
	self.sendRoleIcon = sm:readInt32();
	self.sendRoleLev = sm:readInt32();
	self.gangJob = sm:readInt8();
	self.tarRoleLev = sm:readInt32();
	self.powerRank = sm:readInt8();
	self.relation = sm:readInt8();
	self.extStr = sm:readString();
	self.voiceStr = sm:readString();
	self.isVoice = sm:readInt8();
	self.sendMainSrvId = sm:readInt32();
	self.paopaoId = sm:readInt32();
	return self
end

function MsgDef.Msg8030104:opcode()
	return 8030104
end

--[[ 自己掉落道具广播--]]
MsgDef.Msg8030105 = {}

function MsgDef.Msg8030105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SelfDropItem>) 道具--]]
	return msg
end

function MsgDef.Msg8030105:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8030105:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SelfDropItem:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8030105:opcode()
	return 8030105
end

--[[ 获得外观--]]
MsgDef.Msg8030106 = {}

function MsgDef.Msg8030106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinMap = {} --[[(map<int32,int32>) 发生改变的外观 key->外观id,value->道具id--]]
	return msg
end

function MsgDef.Msg8030106:encode(sm)
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8030106:decode(sm)
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8030106:opcode()
	return 8030106
end

--[[ boss掉落道具显示--]]
MsgDef.Msg8030107 = {}

function MsgDef.Msg8030107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<RoundDropItem>) 物品--]]
	msg.roleId = 0 --[[(int64) 拥有者的角色id--]]
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.sx = 0 --[[(int16) 怪物源坐标--]]
	msg.sy = 0 --[[(int16) 怪物源坐标--]]
	return msg
end

function MsgDef.Msg8030107:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.monsterId);
	sm:writeInt16(self.sx);
	sm:writeInt16(self.sy);
	return self
end

function MsgDef.Msg8030107:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.RoundDropItem:create():decode(sm)
		table.insert(self.items, element)
	end
	self.roleId = sm:readInt64();
	self.monsterId = sm:readInt32();
	self.sx = sm:readInt16();
	self.sy = sm:readInt16();
	return self
end

function MsgDef.Msg8030107:opcode()
	return 8030107
end

--[[ 符文改变广播--]]
MsgDef.Msg8030201 = {}

function MsgDef.Msg8030201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.changeItems = {} --[[(array<ItemInfo>) 改变的道具列表--]]
	return msg
end

function MsgDef.Msg8030201:encode(sm)
	sm:writeInt16(#self.changeItems)
	for i,elm in ipairs(self.changeItems) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8030201:decode(sm)
	local changeItems_size = sm:readInt16()
	for i = 1,changeItems_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.changeItems, element)
	end
	return self
end

function MsgDef.Msg8030201:opcode()
	return 8030201
end

--[[ 技能战斗广播--]]
MsgDef.Msg8040101 = {}

function MsgDef.Msg8040101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.opt = 0 --[[(int8) 操作,1:玩家攻击,2:怪物攻击,3-宠物攻击--]]
	msg.atkId = 0 --[[(int64) 攻击者Id--]]
	msg.uTargets = {} --[[(array<FightTarget>) 被攻击者(玩家)--]]
	msg.mTargets = {} --[[(array<FightTarget>) 被攻击者(怪物)--]]
	msg.skillId = 0 --[[(int32) 技能Id--]]
	msg.atkPox = 0 --[[(int16) 攻击点x--]]
	msg.atkPoy = 0 --[[(int16) 攻击点y--]]
	msg.tarPox = 0 --[[(int16) 目标点x--]]
	msg.tarPoy = 0 --[[(int16) 目标点y--]]
	msg.extAtk = 0 --[[(int8) 是否触发影卫攻击--]]
	msg.atkPkState = 0 --[[(int8) 攻击者pk状态--]]
	return msg
end

function MsgDef.Msg8040101:encode(sm)
	sm:writeInt8(self.opt);
	sm:writeInt64(self.atkId);
	sm:writeInt16(#self.uTargets)
	for i,elm in ipairs(self.uTargets) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.mTargets)
	for i,elm in ipairs(self.mTargets) do
		elm:encode(sm)
	end
	sm:writeInt32(self.skillId);
	sm:writeInt16(self.atkPox);
	sm:writeInt16(self.atkPoy);
	sm:writeInt16(self.tarPox);
	sm:writeInt16(self.tarPoy);
	sm:writeInt8(self.extAtk);
	sm:writeInt8(self.atkPkState);
	return self
end

function MsgDef.Msg8040101:decode(sm)
	self.opt = sm:readInt8();
	self.atkId = sm:readInt64();
	local uTargets_size = sm:readInt16()
	for i = 1,uTargets_size do
		local element = MsgDef.FightTarget:create():decode(sm)
		table.insert(self.uTargets, element)
	end
	local mTargets_size = sm:readInt16()
	for i = 1,mTargets_size do
		local element = MsgDef.FightTarget:create():decode(sm)
		table.insert(self.mTargets, element)
	end
	self.skillId = sm:readInt32();
	self.atkPox = sm:readInt16();
	self.atkPoy = sm:readInt16();
	self.tarPox = sm:readInt16();
	self.tarPoy = sm:readInt16();
	self.extAtk = sm:readInt8();
	self.atkPkState = sm:readInt8();
	return self
end

function MsgDef.Msg8040101:opcode()
	return 8040101
end

--[[ 广播跳跃信息--]]
MsgDef.Msg8040102 = {}

function MsgDef.Msg8040102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.jumpPos = {} --[[(array<Position>) 跳跃点信息--]]
	msg.jumpType = 0 --[[(int32) 跳跃类型--]]
	return msg
end

function MsgDef.Msg8040102:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(#self.jumpPos)
	for i,elm in ipairs(self.jumpPos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.jumpType);
	return self
end

function MsgDef.Msg8040102:decode(sm)
	self.roleId = sm:readInt64();
	local jumpPos_size = sm:readInt16()
	for i = 1,jumpPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.jumpPos, element)
	end
	self.jumpType = sm:readInt32();
	return self
end

function MsgDef.Msg8040102:opcode()
	return 8040102
end

--[[ 添加Buff广播--]]
MsgDef.Msg8040201 = {}

function MsgDef.Msg8040201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.sourceId = 0 --[[(int64) --]]
	msg.buffInfo = MsgDef.BuffInfo:create() --[[(BuffInfo) buff信息--]]
	return msg
end

function MsgDef.Msg8040201:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.sourceId);
	self.buffInfo:encode(sm)
	return self
end

function MsgDef.Msg8040201:decode(sm)
	self.roleId = sm:readInt64();
	self.sourceId = sm:readInt64();
	self.buffInfo:decode(sm)
	return self
end

function MsgDef.Msg8040201:opcode()
	return 8040201
end

--[[ 移除buff广播--]]
MsgDef.Msg8040202 = {}

function MsgDef.Msg8040202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色Id--]]
	msg.buffId = 0 --[[(int32) 移除buffId--]]
	return msg
end

function MsgDef.Msg8040202:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.buffId);
	return self
end

function MsgDef.Msg8040202:decode(sm)
	self.roleId = sm:readInt64();
	self.buffId = sm:readInt32();
	return self
end

function MsgDef.Msg8040202:opcode()
	return 8040202
end

--[[ 玩家战斗属性广播--]]
MsgDef.Msg8040203 = {}

function MsgDef.Msg8040203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.attris = {} --[[(map<int32,int32>) --]]
	return msg
end

function MsgDef.Msg8040203:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8040203:decode(sm)
	self.roleId = sm:readInt64();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8040203:opcode()
	return 8040203
end

--[[ 修改pk模式广播--]]
MsgDef.Msg8040204 = {}

function MsgDef.Msg8040204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) --]]
	msg.pkState = 0 --[[(int32) 0-和平,1-,2-,3-,4---]]
	return msg
end

function MsgDef.Msg8040204:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.pkState);
	return self
end

function MsgDef.Msg8040204:decode(sm)
	self.roleId = sm:readInt64();
	self.pkState = sm:readInt32();
	return self
end

function MsgDef.Msg8040204:opcode()
	return 8040204
end

--[[ 广播开始采集--]]
MsgDef.Msg8040205 = {}

function MsgDef.Msg8040205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 采集的玩家id--]]
	msg.mRoleId = 0 --[[(int64) 采集物怪物id--]]
	msg.type = 0 --[[(int8) 1 采集 2 取消采集 3 快速采集--]]
	msg.mid = 0 --[[(int32) 采集物配置id--]]
	return msg
end

function MsgDef.Msg8040205:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.mRoleId);
	sm:writeInt8(self.type);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg8040205:decode(sm)
	self.roleId = sm:readInt64();
	self.mRoleId = sm:readInt64();
	self.type = sm:readInt8();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg8040205:opcode()
	return 8040205
end

--[[ 广播采集动作移除--]]
MsgDef.Msg8040206 = {}

function MsgDef.Msg8040206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 采集的玩家id--]]
	msg.mRoleId = 0 --[[(int64) 采集物id--]]
	return msg
end

function MsgDef.Msg8040206:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.mRoleId);
	return self
end

function MsgDef.Msg8040206:decode(sm)
	self.roleId = sm:readInt64();
	self.mRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg8040206:opcode()
	return 8040206
end

--[[ 副本结束通知广播--]]
MsgDef.Msg8050101 = {}

function MsgDef.Msg8050101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.pass = 0 --[[(int32) 当前关卡--]]
	msg.state = 0 --[[(int32) 状态1=完成,2失败,3超时--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.star = 0 --[[(int8) 星星数--]]
	msg.doubleCost = 0 --[[(int8) 1:双倍消耗--]]
	msg.stoneNum = 0 --[[(int32) 合成石(符文塔副本)--]]
	return msg
end

function MsgDef.Msg8050101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pass);
	sm:writeInt32(self.state);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.star);
	sm:writeInt8(self.doubleCost);
	sm:writeInt32(self.stoneNum);
	return self
end

function MsgDef.Msg8050101:decode(sm)
	self.sceneId = sm:readInt32();
	self.pass = sm:readInt32();
	self.state = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.star = sm:readInt8();
	self.doubleCost = sm:readInt8();
	self.stoneNum = sm:readInt32();
	return self
end

function MsgDef.Msg8050101:opcode()
	return 8050101
end

--[[ 副本条件变化广播--]]
MsgDef.Msg8050201 = {}

function MsgDef.Msg8050201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.conMap = {} --[[(map<int32,int32>) 条件完成情况--]]
	msg.passId = 0 --[[(int32) 关卡id--]]
	return msg
end

function MsgDef.Msg8050201:encode(sm)
	sm:writeInt16(get_map_size(self.conMap))
	for kn,elm in ipairs(self.conMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.passId);
	return self
end

function MsgDef.Msg8050201:decode(sm)
	local conMap_size = sm:readInt16()
	for i = 1,conMap_size do
		local kv = sm:readInt32();
		self.conMap[kv] = sm:readInt32();
	end
	self.passId = sm:readInt32();
	return self
end

function MsgDef.Msg8050201:opcode()
	return 8050201
end

--[[ 提示玩家打副本广播--]]
MsgDef.Msg8050301 = {}

function MsgDef.Msg8050301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.minCanFubenId = {} --[[(array<int32>) 最小可打副本的id--]]
	msg.isLoginCheck = 0 --[[(int8) 0:非登录检测 1:登录检测--]]
	return msg
end

function MsgDef.Msg8050301:encode(sm)
	sm:writeInt16(get_map_size(self.minCanFubenId))
	for i,elm in ipairs(self.minCanFubenId) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.isLoginCheck);
	return self
end

function MsgDef.Msg8050301:decode(sm)
	local minCanFubenId_size = sm:readInt16()
	for i = 1,minCanFubenId_size do
		local elm = sm:readInt32();
		table.insert(self.minCanFubenId, elm)
	end
	self.isLoginCheck = sm:readInt8();
	return self
end

function MsgDef.Msg8050301:opcode()
	return 8050301
end

--[[ 祝福值提示广播--]]
MsgDef.Msg8050401 = {}

function MsgDef.Msg8050401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.moduleId = 0 --[[(int32) 模块id--]]
	msg.bless = 0 --[[(int32) 祝福值--]]
	msg.time = 0 --[[(int32) 祝福值时间--]]
	return msg
end

function MsgDef.Msg8050401:encode(sm)
	sm:writeInt32(self.moduleId);
	sm:writeInt32(self.bless);
	sm:writeInt32(self.time);
	return self
end

function MsgDef.Msg8050401:decode(sm)
	self.moduleId = sm:readInt32();
	self.bless = sm:readInt32();
	self.time = sm:readInt32();
	return self
end

function MsgDef.Msg8050401:opcode()
	return 8050401
end

--[[ 帮派广播--]]
MsgDef.Msg8060101 = {}

function MsgDef.Msg8060101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.noticeType = 0 --[[(int8) =1加入帮派=2被开除=3换职位=4被协助 =5帮派名变更--]]
	msg.gangName = "" --[[(string) 帮派名字--]]
	msg.gangId = 0 --[[(int64) 帮派id--]]
	msg.tarRoleId = 0 --[[(int64) 目标roleId--]]
	msg.gangJob = 0 --[[(int8) 职位--]]
	return msg
end

function MsgDef.Msg8060101:encode(sm)
	sm:writeInt8(self.noticeType);
	sm:writeString(self.gangName);
	sm:writeInt64(self.gangId);
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.gangJob);
	return self
end

function MsgDef.Msg8060101:decode(sm)
	self.noticeType = sm:readInt8();
	self.gangName = sm:readString();
	self.gangId = sm:readInt64();
	self.tarRoleId = sm:readInt64();
	self.gangJob = sm:readInt8();
	return self
end

function MsgDef.Msg8060101:opcode()
	return 8060101
end

--[[ 交易广播--]]
MsgDef.Msg8070101 = {}

function MsgDef.Msg8070101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.noticeType = 0 --[[(int8) 1申请交易2同意申请3拒绝申请4广播交易状态5取消交易--]]
	msg.originRoleId = 0 --[[(int64) 发起人roleId--]]
	msg.roleName = "" --[[(string) 玩家名字--]]
	msg.invitedRoleId = 0 --[[(int64) 被邀请人的roleId--]]
	msg.invitedRoleName = "" --[[(string) 被邀请人名字--]]
	msg.tradeStatu = 0 --[[(int8) 1:发起者锁定2:被邀请者锁定3:全部锁定 7邀请者确定 11交易者确定 15双方确定,交易完成--]]
	return msg
end

function MsgDef.Msg8070101:encode(sm)
	sm:writeInt8(self.noticeType);
	sm:writeInt64(self.originRoleId);
	sm:writeString(self.roleName);
	sm:writeInt64(self.invitedRoleId);
	sm:writeString(self.invitedRoleName);
	sm:writeInt8(self.tradeStatu);
	return self
end

function MsgDef.Msg8070101:decode(sm)
	self.noticeType = sm:readInt8();
	self.originRoleId = sm:readInt64();
	self.roleName = sm:readString();
	self.invitedRoleId = sm:readInt64();
	self.invitedRoleName = sm:readString();
	self.tradeStatu = sm:readInt8();
	return self
end

function MsgDef.Msg8070101:opcode()
	return 8070101
end

--[[ 交易物品变化广播--]]
MsgDef.Msg8070102 = {}

function MsgDef.Msg8070102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.opType = 0 --[[(int8) 1添加2移除--]]
	msg.changeItem = MsgDef.ItemInfo:create() --[[(ItemInfo) 改变的道具--]]
	return msg
end

function MsgDef.Msg8070102:encode(sm)
	sm:writeInt8(self.opType);
	self.changeItem:encode(sm)
	return self
end

function MsgDef.Msg8070102:decode(sm)
	self.opType = sm:readInt8();
	self.changeItem:decode(sm)
	return self
end

function MsgDef.Msg8070102:opcode()
	return 8070102
end

--[[ 交易金钱变化广播--]]
MsgDef.Msg8070103 = {}

function MsgDef.Msg8070103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gold = 0 --[[(int32) 现有金币--]]
	msg.copper = 0 --[[(int32) 现有铜钱--]]
	return msg
end

function MsgDef.Msg8070103:encode(sm)
	sm:writeInt32(self.gold);
	sm:writeInt32(self.copper);
	return self
end

function MsgDef.Msg8070103:decode(sm)
	self.gold = sm:readInt32();
	self.copper = sm:readInt32();
	return self
end

function MsgDef.Msg8070103:opcode()
	return 8070103
end

--[[ 队伍广播--]]
MsgDef.Msg8080101 = {}

function MsgDef.Msg8080101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1邀请入队2同意邀请3拒绝邀请4申请入队5同意申请6拒绝申请--]]
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.roleName = "" --[[(string) 角色名--]]
	msg.power = 0 --[[(int32) 战力--]]
	msg.targetId = 0 --[[(int32) 队伍目标--]]
	msg.level = 0 --[[(int32) 玩家等级--]]
	return msg
end

function MsgDef.Msg8080101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.level);
	return self
end

function MsgDef.Msg8080101:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt32();
	self.targetId = sm:readInt32();
	self.level = sm:readInt32();
	return self
end

function MsgDef.Msg8080101:opcode()
	return 8080101
end

--[[ 队伍新成员加入--]]
MsgDef.Msg8080102 = {}

function MsgDef.Msg8080102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.member = MsgDef.TeamMemberInfo:create() --[[(TeamMemberInfo) 新成员--]]
	return msg
end

function MsgDef.Msg8080102:encode(sm)
	self.member:encode(sm)
	return self
end

function MsgDef.Msg8080102:decode(sm)
	self.member:decode(sm)
	return self
end

function MsgDef.Msg8080102:opcode()
	return 8080102
end

--[[ 广播队伍信息--]]
MsgDef.Msg8080103 = {}

function MsgDef.Msg8080103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.members = {} --[[(array<TeamMemberInfo>) 成员--]]
	msg.targetId = 0 --[[(int32) 目标类型--]]
	msg.minLvl = 0 --[[(int32) minLvl--]]
	msg.maxLvl = 0 --[[(int32) maxLvl--]]
	return msg
end

function MsgDef.Msg8080103:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	return self
end

function MsgDef.Msg8080103:decode(sm)
	self.teamId = sm:readInt32();
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.TeamMemberInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	self.targetId = sm:readInt32();
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	return self
end

function MsgDef.Msg8080103:opcode()
	return 8080103
end

--[[  队伍附件的人广播--]]
MsgDef.Msg8080104 = {}

function MsgDef.Msg8080104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.teamCaptain = 0 --[[(int8) 1队长--]]
	return msg
end

function MsgDef.Msg8080104:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.teamCaptain);
	return self
end

function MsgDef.Msg8080104:decode(sm)
	self.roleId = sm:readInt64();
	self.teamId = sm:readInt32();
	self.teamCaptain = sm:readInt8();
	return self
end

function MsgDef.Msg8080104:opcode()
	return 8080104
end

--[[ 队伍操作广播--]]
MsgDef.Msg8080105 = {}

function MsgDef.Msg8080105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:队长申请进入异空间 2:同意 3:拒绝 4:某玩家等级不满足--]]
	msg.roleId = 0 --[[(int64) 操作的玩家id--]]
	msg.roleName = "" --[[(string) 角色名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg8080105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8080105:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8080105:opcode()
	return 8080105
end

--[[ 队伍在线状态广播--]]
MsgDef.Msg8080106 = {}

function MsgDef.Msg8080106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 离线玩家id--]]
	msg.online = 0 --[[(int8) 1:在线 2:离线--]]
	return msg
end

function MsgDef.Msg8080106:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.online);
	return self
end

function MsgDef.Msg8080106:decode(sm)
	self.roleId = sm:readInt64();
	self.online = sm:readInt8();
	return self
end

function MsgDef.Msg8080106:opcode()
	return 8080106
end

--[[ 练级谷收益变化广播--]]
MsgDef.Msg8090101 = {}

function MsgDef.Msg8090101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.incomeMap = {} --[[(map<int32,int32>) 收益--]]
	return msg
end

function MsgDef.Msg8090101:encode(sm)
	sm:writeInt16(get_map_size(self.incomeMap))
	for kn,elm in ipairs(self.incomeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8090101:decode(sm)
	local incomeMap_size = sm:readInt16()
	for i = 1,incomeMap_size do
		local kv = sm:readInt32();
		self.incomeMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8090101:opcode()
	return 8090101
end

--[[ 竞技场广播进入场景--]]
MsgDef.Msg8100101 = {}

function MsgDef.Msg8100101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg8100101:encode(sm)
	return self
end

function MsgDef.Msg8100101:decode(sm)
	return self
end

function MsgDef.Msg8100101:opcode()
	return 8100101
end

--[[ 竞技场结束广播--]]
MsgDef.Msg8100102 = {}

function MsgDef.Msg8100102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 现在的排名--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.win = 0 --[[(int8) =1胜利 否则失败--]]
	msg.type = 0 --[[(int8) 0:竞技场 1:离线挂机--]]
	return msg
end

function MsgDef.Msg8100102:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.win);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg8100102:decode(sm)
	self.rank = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.win = sm:readInt8();
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg8100102:opcode()
	return 8100102
end

--[[ 精英boss排行榜刷新广播--]]
MsgDef.Msg8110101 = {}

function MsgDef.Msg8110101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankList = {} --[[(array<BossRankInfo>) boss排行榜--]]
	return msg
end

function MsgDef.Msg8110101:encode(sm)
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110101:decode(sm)
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.BossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end

function MsgDef.Msg8110101:opcode()
	return 8110101
end

--[[ 精英boss攻击伤害广播--]]
MsgDef.Msg8110102 = {}

function MsgDef.Msg8110102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.myHurtMul = 0 --[[(int32) 我的伤害百分比--]]
	return msg
end

function MsgDef.Msg8110102:encode(sm)
	sm:writeInt32(self.myHurtMul);
	return self
end

function MsgDef.Msg8110102:decode(sm)
	self.myHurtMul = sm:readInt32();
	return self
end

function MsgDef.Msg8110102:opcode()
	return 8110102
end

--[[ 精英boss血条变化广播--]]
MsgDef.Msg8110103 = {}

function MsgDef.Msg8110103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curHpPercent = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.attris = {} --[[(map<int32,int32>) 属性--]]
	msg.roleId = 0 --[[(int64) 怪物roleId--]]
	return msg
end

function MsgDef.Msg8110103:encode(sm)
	sm:writeInt32(self.curHpPercent);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg8110103:decode(sm)
	self.curHpPercent = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg8110103:opcode()
	return 8110103
end

--[[ 通用boss血条变化广播--]]
MsgDef.Msg8110111 = {}

function MsgDef.Msg8110111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curHpPercent = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.attris = {} --[[(map<int32,int32>) 属性--]]
	msg.hateRoleName = "" --[[(string) 仇恨玩家名字--]]
	msg.roleId = 0 --[[(int64) 怪物roleId--]]
	return msg
end

function MsgDef.Msg8110111:encode(sm)
	sm:writeInt32(self.curHpPercent);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.hateRoleName);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg8110111:decode(sm)
	self.curHpPercent = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.hateRoleName = sm:readString();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg8110111:opcode()
	return 8110111
end

--[[ 世界boss血量参与奖励--]]
MsgDef.Msg8110112 = {}

function MsgDef.Msg8110112:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字 --]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属奖励--]]
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	return msg
end

function MsgDef.Msg8110112:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeString(self.hateRoleName);
	sm:writeInt32(self.monsterId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110112:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.monsterId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8110112:opcode()
	return 8110112
end

--[[ 精英boss1分钟提示广播--]]
MsgDef.Msg8110113 = {}

function MsgDef.Msg8110113:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.bossName = "" --[[(string) boss名字--]]
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	return msg
end

function MsgDef.Msg8110113:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeString(self.bossName);
	sm:writeInt32(self.monsterId);
	return self
end

function MsgDef.Msg8110113:decode(sm)
	self.sceneId = sm:readInt32();
	self.bossName = sm:readString();
	self.monsterId = sm:readInt32();
	return self
end

function MsgDef.Msg8110113:opcode()
	return 8110113
end

--[[ 精英boss结束广播--]]
MsgDef.Msg8110114 = {}

function MsgDef.Msg8110114:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) boss名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.ranking = {} --[[(array<BossRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg8110114:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110114:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.BossRankInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	return self
end

function MsgDef.Msg8110114:opcode()
	return 8110114
end

--[[ 世界BOSS伤害排名广播--]]
MsgDef.Msg8110115 = {}

function MsgDef.Msg8110115:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ranks = {} --[[(array<WorldBossHateRankInfo>) 排行榜--]]
	msg.myHpPercent = 0 --[[(int32) 我的血量百分比--]]
	return msg
end

function MsgDef.Msg8110115:encode(sm)
	sm:writeInt16(#self.ranks)
	for i,elm in ipairs(self.ranks) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myHpPercent);
	return self
end

function MsgDef.Msg8110115:decode(sm)
	local ranks_size = sm:readInt16()
	for i = 1,ranks_size do
		local element = MsgDef.WorldBossHateRankInfo:create():decode(sm)
		table.insert(self.ranks, element)
	end
	self.myHpPercent = sm:readInt32();
	return self
end

function MsgDef.Msg8110115:opcode()
	return 8110115
end

--[[ 世界BOSS血量变化广播--]]
MsgDef.Msg8110116 = {}

function MsgDef.Msg8110116:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<WorldBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110116:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110116:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.WorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110116:opcode()
	return 8110116
end

--[[ 世界BOSS疲劳值退出广播--]]
MsgDef.Msg8110117 = {}

function MsgDef.Msg8110117:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.tired = 0 --[[(int32) 当前疲劳值--]]
	return msg
end

function MsgDef.Msg8110117:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.tired);
	return self
end

function MsgDef.Msg8110117:decode(sm)
	self.sceneId = sm:readInt32();
	self.tired = sm:readInt32();
	return self
end

function MsgDef.Msg8110117:opcode()
	return 8110117
end

--[[ BOSS血量广播--]]
MsgDef.Msg8110118 = {}

function MsgDef.Msg8110118:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<CommonBossInfo>) 怪物信息--]]
	return msg
end

function MsgDef.Msg8110118:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110118:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.CommonBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110118:opcode()
	return 8110118
end

--[[ BOSS之家BOSS血量广播--]]
MsgDef.Msg8110201 = {}

function MsgDef.Msg8110201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<BossHomeBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110201:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110201:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.BossHomeBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110201:opcode()
	return 8110201
end

--[[ BOSS之家结算广播--]]
MsgDef.Msg8110202 = {}

function MsgDef.Msg8110202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.hateRoleName = "" --[[(string) hateRoleName--]]
	msg.items = {} --[[(array<SimpleItemInfo>) items--]]
	return msg
end

function MsgDef.Msg8110202:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.monsterId);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110202:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.monsterId = sm:readInt32();
	self.hateRoleName = sm:readString();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8110202:opcode()
	return 8110202
end

--[[ 仙域禁地BOSS血量广播--]]
MsgDef.Msg8110301 = {}

function MsgDef.Msg8110301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<XyjdBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110301:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110301:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.XyjdBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110301:opcode()
	return 8110301
end

--[[ 仙域禁地结算广播--]]
MsgDef.Msg8110302 = {}

function MsgDef.Msg8110302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.hateRoleName = "" --[[(string) hateRoleName--]]
	msg.items = {} --[[(array<SimpleItemInfo>) items--]]
	return msg
end

function MsgDef.Msg8110302:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.monsterId);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110302:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.monsterId = sm:readInt32();
	self.hateRoleName = sm:readString();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8110302:opcode()
	return 8110302
end

--[[ 仙域禁地怒气值广播--]]
MsgDef.Msg8110303 = {}

function MsgDef.Msg8110303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.anger = 0 --[[(int32) 怒气值--]]
	return msg
end

function MsgDef.Msg8110303:encode(sm)
	sm:writeInt32(self.anger);
	return self
end

function MsgDef.Msg8110303:decode(sm)
	self.anger = sm:readInt32();
	return self
end

function MsgDef.Msg8110303:opcode()
	return 8110303
end

--[[ 雪战BOSS血量广播--]]
MsgDef.Msg8110304 = {}

function MsgDef.Msg8110304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<SnowBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110304:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110304:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SnowBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110304:opcode()
	return 8110304
end

--[[ 雪战通知广播--]]
MsgDef.Msg8110305 = {}

function MsgDef.Msg8110305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:宝箱刷新--]]
	msg.mid = 0 --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg8110305:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg8110305:decode(sm)
	self.reqType = sm:readInt8();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg8110305:opcode()
	return 8110305
end

--[[ 雪战技能次数广播--]]
MsgDef.Msg8110306 = {}

function MsgDef.Msg8110306:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skills = {} --[[(map<int32,int32>) 技能id->剩余次数--]]
	return msg
end

function MsgDef.Msg8110306:encode(sm)
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8110306:decode(sm)
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8110306:opcode()
	return 8110306
end

--[[ 跨服世界BOSS血量变化广播--]]
MsgDef.Msg8110401 = {}

function MsgDef.Msg8110401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<CrossWorldBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110401:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110401:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.CrossWorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110401:opcode()
	return 8110401
end

--[[ 跨服世界Boss结算广播--]]
MsgDef.Msg8110402 = {}

function MsgDef.Msg8110402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字--]]
	msg.sceneId = 0 --[[(int32) sceneId--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属奖励--]]
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg8110402:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeString(self.hateRoleName);
	sm:writeInt32(self.monsterId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110402:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.monsterId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8110402:opcode()
	return 8110402
end

--[[ 猜灯谜会答题刷新广播--]]
MsgDef.Msg8110501 = {}

function MsgDef.Msg8110501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.subjectId = 0 --[[(int32) 当前题目id--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.myScore = 0 --[[(int32) 积分--]]
	msg.subjectLeftSec = 0 --[[(int32) 剩余秒--]]
	msg.curQuestionNum = 0 --[[(int32) 进度--]]
	return msg
end

function MsgDef.Msg8110501:encode(sm)
	sm:writeInt32(self.subjectId);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.subjectLeftSec);
	sm:writeInt32(self.curQuestionNum);
	return self
end

function MsgDef.Msg8110501:decode(sm)
	self.subjectId = sm:readInt32();
	self.ranking = sm:readInt32();
	self.myScore = sm:readInt32();
	self.subjectLeftSec = sm:readInt32();
	self.curQuestionNum = sm:readInt32();
	return self
end

function MsgDef.Msg8110501:opcode()
	return 8110501
end

--[[ 广播皇陵奇遇任务信息--]]
MsgDef.Msg8120101 = {}

function MsgDef.Msg8120101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.changes = {} --[[(array<HuangLingTaskInfo>) 改变的任务列表--]]
	return msg
end

function MsgDef.Msg8120101:encode(sm)
	sm:writeInt16(#self.changes)
	for i,elm in ipairs(self.changes) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8120101:decode(sm)
	local changes_size = sm:readInt16()
	for i = 1,changes_size do
		local element = MsgDef.HuangLingTaskInfo:create():decode(sm)
		table.insert(self.changes, element)
	end
	return self
end

function MsgDef.Msg8120101:opcode()
	return 8120101
end

--[[ 广播黄陵boss血条变化--]]
MsgDef.Msg8120102 = {}

function MsgDef.Msg8120102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curHpPercent = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.attris = {} --[[(map<int32,int32>) 属性--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属玩家名字--]]
	msg.roleId = 0 --[[(int64) 怪物roleId--]]
	msg.refreshBossNum = 0 --[[(int32) refreshBossNum--]]
	return msg
end

function MsgDef.Msg8120102:encode(sm)
	sm:writeInt32(self.curHpPercent);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.hateRoleName);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.refreshBossNum);
	return self
end

function MsgDef.Msg8120102:decode(sm)
	self.curHpPercent = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.hateRoleName = sm:readString();
	self.roleId = sm:readInt64();
	self.refreshBossNum = sm:readInt32();
	return self
end

function MsgDef.Msg8120102:opcode()
	return 8120102
end

--[[ 广播黄陵结束奖励预览--]]
MsgDef.Msg8120103 = {}

function MsgDef.Msg8120103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg8120103:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8120103:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8120103:opcode()
	return 8120103
end

--[[ 广播黄陵boss下次刷新时间--]]
MsgDef.Msg8120104 = {}

function MsgDef.Msg8120104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.nextBossRefreshTime = 0 --[[(int32) nextBossRefreshTime--]]
	return msg
end

function MsgDef.Msg8120104:encode(sm)
	sm:writeInt32(self.nextBossRefreshTime);
	return self
end

function MsgDef.Msg8120104:decode(sm)
	self.nextBossRefreshTime = sm:readInt32();
	return self
end

function MsgDef.Msg8120104:opcode()
	return 8120104
end

--[[ 问鼎之战结束奖励广播--]]
MsgDef.Msg8130101 = {}

function MsgDef.Msg8130101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 已获得奖励信息--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.maxFloor = 0 --[[(int32) 到达层数--]]
	msg.ranking = 0 --[[(int32) 积分排名 0：未上榜--]]
	msg.keepFlagTimes = 0 --[[(int32) 守旗次数--]]
	return msg
end

function MsgDef.Msg8130101:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.maxFloor);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.keepFlagTimes);
	return self
end

function MsgDef.Msg8130101:decode(sm)
	self.sceneId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.myScore = sm:readInt32();
	self.maxFloor = sm:readInt32();
	self.ranking = sm:readInt32();
	self.keepFlagTimes = sm:readInt32();
	return self
end

function MsgDef.Msg8130101:opcode()
	return 8130101
end

--[[ 问鼎之战击杀数广播--]]
MsgDef.Msg8130102 = {}

function MsgDef.Msg8130102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.conds = {} --[[(map<int32,int32>) 层->击杀数--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg8130102:encode(sm)
	sm:writeInt16(get_map_size(self.conds))
	for kn,elm in ipairs(self.conds) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8130102:decode(sm)
	local conds_size = sm:readInt16()
	for i = 1,conds_size do
		local kv = sm:readInt32();
		self.conds[kv] = sm:readInt32();
	end
	self.myScore = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8130102:opcode()
	return 8130102
end

--[[ 问鼎之战战旗持有者--]]
MsgDef.Msg8130103 = {}

function MsgDef.Msg8130103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.flagHoldRoleId = 0 --[[(int64) 战旗持有者--]]
	msg.leftTime = 0 --[[(int32) 守旗剩余时间--]]
	msg.holeName = "" --[[(string) 持有者名--]]
	return msg
end

function MsgDef.Msg8130103:encode(sm)
	sm:writeInt64(self.flagHoldRoleId);
	sm:writeInt32(self.leftTime);
	sm:writeString(self.holeName);
	return self
end

function MsgDef.Msg8130103:decode(sm)
	self.flagHoldRoleId = sm:readInt64();
	self.leftTime = sm:readInt32();
	self.holeName = sm:readString();
	return self
end

function MsgDef.Msg8130103:opcode()
	return 8130103
end

--[[ 仙盟战血条广播--]]
MsgDef.Msg8140101 = {}

function MsgDef.Msg8140101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<XianMengBossInfo>) bossList--]]
	return msg
end

function MsgDef.Msg8140101:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8140101:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.XianMengBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8140101:opcode()
	return 8140101
end

--[[ 仙盟战结束广播--]]
MsgDef.Msg8140102 = {}

function MsgDef.Msg8140102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ranks = {} --[[(array<XianMengWarFinishRank>) 排名--]]
	return msg
end

function MsgDef.Msg8140102:encode(sm)
	sm:writeInt16(#self.ranks)
	for i,elm in ipairs(self.ranks) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8140102:decode(sm)
	local ranks_size = sm:readInt16()
	for i = 1,ranks_size do
		local element = MsgDef.XianMengWarFinishRank:create():decode(sm)
		table.insert(self.ranks, element)
	end
	return self
end

function MsgDef.Msg8140102:opcode()
	return 8140102
end

--[[ 仙盟战追踪信息广播--]]
MsgDef.Msg8140103 = {}

function MsgDef.Msg8140103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourRes = 0 --[[(int32) 我方资源--]]
	msg.otherRes = 0 --[[(int32) 地方资源--]]
	msg.ourNum = 0 --[[(int32) 我方参与人数--]]
	msg.otherNum = 0 --[[(int32) 敌方参与人数--]]
	return msg
end

function MsgDef.Msg8140103:encode(sm)
	sm:writeInt32(self.ourRes);
	sm:writeInt32(self.otherRes);
	sm:writeInt32(self.ourNum);
	sm:writeInt32(self.otherNum);
	return self
end

function MsgDef.Msg8140103:decode(sm)
	self.ourRes = sm:readInt32();
	self.otherRes = sm:readInt32();
	self.ourNum = sm:readInt32();
	self.otherNum = sm:readInt32();
	return self
end

function MsgDef.Msg8140103:opcode()
	return 8140103
end

--[[ 仙盟战结束广播--]]
MsgDef.Msg8140104 = {}

function MsgDef.Msg8140104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.winGangId = 0 --[[(int64) 胜利仙盟--]]
	msg.failGangId = 0 --[[(int64) 负仙盟--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	msg.campType = 0 --[[(int8) 阵营：1:攻方 2:守方--]]
	msg.logs = {} --[[(array<XianMengBattleLog>) 日志--]]
	return msg
end

function MsgDef.Msg8140104:encode(sm)
	sm:writeInt64(self.winGangId);
	sm:writeInt64(self.failGangId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.campType);
	sm:writeInt16(#self.logs)
	for i,elm in ipairs(self.logs) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8140104:decode(sm)
	self.winGangId = sm:readInt64();
	self.failGangId = sm:readInt64();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.campType = sm:readInt8();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local element = MsgDef.XianMengBattleLog:create():decode(sm)
		table.insert(self.logs, element)
	end
	return self
end

function MsgDef.Msg8140104:opcode()
	return 8140104
end

--[[ 仙盟战水晶状态广播--]]
MsgDef.Msg8140105 = {}

function MsgDef.Msg8140105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.crystalStatusMap = {} --[[(map<int32,int32>) 水晶状态广播<mid,0:无归属 1:我方归属 2:敌方归属>--]]
	return msg
end

function MsgDef.Msg8140105:encode(sm)
	sm:writeInt16(get_map_size(self.crystalStatusMap))
	for kn,elm in ipairs(self.crystalStatusMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8140105:decode(sm)
	local crystalStatusMap_size = sm:readInt16()
	for i = 1,crystalStatusMap_size do
		local kv = sm:readInt32();
		self.crystalStatusMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8140105:opcode()
	return 8140105
end

--[[ 跨服城战结束广播--]]
MsgDef.Msg8140201 = {}

function MsgDef.Msg8140201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reports = {} --[[(array<CrossCityWarReport>) 结果战报--]]
	return msg
end

function MsgDef.Msg8140201:encode(sm)
	sm:writeInt16(#self.reports)
	for i,elm in ipairs(self.reports) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8140201:decode(sm)
	local reports_size = sm:readInt16()
	for i = 1,reports_size do
		local element = MsgDef.CrossCityWarReport:create():decode(sm)
		table.insert(self.reports, element)
	end
	return self
end

function MsgDef.Msg8140201:opcode()
	return 8140201
end

--[[ 跨服城战追踪信息广播--]]
MsgDef.Msg8140202 = {}

function MsgDef.Msg8140202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.breakCity = 0 --[[(int8) 是否破城 1:已破--]]
	msg.cityStatuInfos = {} --[[(array<CommonBossInfo>) 城门或城内柱子信息--]]
	return msg
end

function MsgDef.Msg8140202:encode(sm)
	sm:writeInt8(self.breakCity);
	sm:writeInt16(#self.cityStatuInfos)
	for i,elm in ipairs(self.cityStatuInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8140202:decode(sm)
	self.breakCity = sm:readInt8();
	local cityStatuInfos_size = sm:readInt16()
	for i = 1,cityStatuInfos_size do
		local element = MsgDef.CommonBossInfo:create():decode(sm)
		table.insert(self.cityStatuInfos, element)
	end
	return self
end

function MsgDef.Msg8140202:opcode()
	return 8140202
end

--[[ 跨服进阶副本队伍状态广播--]]
MsgDef.Msg8150101 = {}

function MsgDef.Msg8150101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:队长开始 2:队员准备 3退出队伍 4:队长踢人--]]
	msg.tarRoleId = 0 --[[(int64) 操作的角色id--]]
	return msg
end

function MsgDef.Msg8150101:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg8150101:decode(sm)
	self.reqType = sm:readInt8();
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg8150101:opcode()
	return 8150101
end

--[[ 跨服进阶副本伤害排行榜广播--]]
MsgDef.Msg8150102 = {}

function MsgDef.Msg8150102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ranks = {} --[[(array<CrossJJRankInfo>) 排行榜--]]
	return msg
end

function MsgDef.Msg8150102:encode(sm)
	sm:writeInt16(#self.ranks)
	for i,elm in ipairs(self.ranks) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8150102:decode(sm)
	local ranks_size = sm:readInt16()
	for i = 1,ranks_size do
		local element = MsgDef.CrossJJRankInfo:create():decode(sm)
		table.insert(self.ranks, element)
	end
	return self
end

function MsgDef.Msg8150102:opcode()
	return 8150102
end

--[[ 模块功能开关广播--]]
MsgDef.Msg8160101 = {}

function MsgDef.Msg8160101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.moduleLists = {} --[[(array<int32>) 需要关闭的模块id--]]
	return msg
end

function MsgDef.Msg8160101:encode(sm)
	sm:writeInt16(get_map_size(self.moduleLists))
	for i,elm in ipairs(self.moduleLists) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8160101:decode(sm)
	local moduleLists_size = sm:readInt16()
	for i = 1,moduleLists_size do
		local elm = sm:readInt32();
		table.insert(self.moduleLists, elm)
	end
	return self
end

function MsgDef.Msg8160101:opcode()
	return 8160101
end

--[[ 仙盟邀请广播--]]
MsgDef.Msg8160102 = {}

function MsgDef.Msg8160102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqRoleId = 0 --[[(int64) 邀请人roleId--]]
	msg.beReqRoleId = 0 --[[(int64) 被邀请人roleId--]]
	msg.reqType = 0 --[[(int8) 1=发送邀请，2=同意邀请，3=拒绝邀请--]]
	msg.roleName = "" --[[(string) 邀请人名--]]
	msg.gangName = "" --[[(string) 目标帮派--]]
	return msg
end

function MsgDef.Msg8160102:encode(sm)
	sm:writeInt64(self.reqRoleId);
	sm:writeInt64(self.beReqRoleId);
	sm:writeInt8(self.reqType);
	sm:writeString(self.roleName);
	sm:writeString(self.gangName);
	return self
end

function MsgDef.Msg8160102:decode(sm)
	self.reqRoleId = sm:readInt64();
	self.beReqRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.roleName = sm:readString();
	self.gangName = sm:readString();
	return self
end

function MsgDef.Msg8160102:opcode()
	return 8160102
end

--[[ 求婚广播--]]
MsgDef.Msg8170101 = {}

function MsgDef.Msg8170101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqName = "" --[[(string) 求婚玩家名--]]
	msg.reqRoleId = 0 --[[(int64) 求婚玩家id--]]
	msg.grade = 0 --[[(int32) 求婚档次--]]
	msg.roleIcon = 0 --[[(int32) 求婚者头像--]]
	return msg
end

function MsgDef.Msg8170101:encode(sm)
	sm:writeString(self.reqName);
	sm:writeInt64(self.reqRoleId);
	sm:writeInt32(self.grade);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.Msg8170101:decode(sm)
	self.reqName = sm:readString();
	self.reqRoleId = sm:readInt64();
	self.grade = sm:readInt32();
	self.roleIcon = sm:readInt32();
	return self
end

function MsgDef.Msg8170101:opcode()
	return 8170101
end

--[[ 赠送鲜花广播--]]
MsgDef.Msg8170102 = {}

function MsgDef.Msg8170102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mid = 0 --[[(int32) 鲜花道具id--]]
	msg.roleId = 0 --[[(int64) 送花人roleId--]]
	msg.roleName = "" --[[(string) 送花人名--]]
	msg.amount = 0 --[[(int32) 鲜花数量--]]
	msg.tarRoleId = 0 --[[(int64) 被送花roleId--]]
	return msg
end

function MsgDef.Msg8170102:encode(sm)
	sm:writeInt32(self.mid);
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.amount);
	sm:writeInt64(self.tarRoleId);
	return self
end

function MsgDef.Msg8170102:decode(sm)
	self.mid = sm:readInt32();
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.amount = sm:readInt32();
	self.tarRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg8170102:opcode()
	return 8170102
end

--[[ 求婚结束广播--]]
MsgDef.Msg8170103 = {}

function MsgDef.Msg8170103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.result = 0 --[[(int8) 1:求婚成功 2:拒绝求婚 3:离婚 4:全服广播--]]
	msg.reqName = "" --[[(string) 求婚者名--]]
	msg.rspName = "" --[[(string) 被求婚者名--]]
	msg.grade = 0 --[[(int32) 婚宴档次--]]
	return msg
end

function MsgDef.Msg8170103:encode(sm)
	sm:writeInt8(self.result);
	sm:writeString(self.reqName);
	sm:writeString(self.rspName);
	sm:writeInt32(self.grade);
	return self
end

function MsgDef.Msg8170103:decode(sm)
	self.result = sm:readInt8();
	self.reqName = sm:readString();
	self.rspName = sm:readString();
	self.grade = sm:readInt32();
	return self
end

function MsgDef.Msg8170103:opcode()
	return 8170103
end

--[[ 昵称变化广播--]]
MsgDef.Msg8170104 = {}

function MsgDef.Msg8170104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.grade = 0 --[[(int32) 档次--]]
	msg.coupleName = "" --[[(string) 夫妻名--]]
	return msg
end

function MsgDef.Msg8170104:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.grade);
	sm:writeString(self.coupleName);
	return self
end

function MsgDef.Msg8170104:decode(sm)
	self.roleId = sm:readInt64();
	self.grade = sm:readInt32();
	self.coupleName = sm:readString();
	return self
end

function MsgDef.Msg8170104:opcode()
	return 8170104
end

--[[ 婚宴热度进度广播--]]
MsgDef.Msg8170105 = {}

function MsgDef.Msg8170105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hotProgress = 0 --[[(int32) 热度进度--]]
	msg.itemId = 0 --[[(int32) 使用的道具Id--]]
	return msg
end

function MsgDef.Msg8170105:encode(sm)
	sm:writeInt32(self.hotProgress);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg8170105:decode(sm)
	self.hotProgress = sm:readInt32();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg8170105:opcode()
	return 8170105
end

--[[ 拜堂广播--]]
MsgDef.Msg8170106 = {}

function MsgDef.Msg8170106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int8) 1请求拜堂2拒绝拜堂3广播拜堂--]]
	return msg
end

function MsgDef.Msg8170106:encode(sm)
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg8170106:decode(sm)
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg8170106:opcode()
	return 8170106
end

--[[ 婚礼个人数据广播--]]
MsgDef.Msg8170107 = {}

function MsgDef.Msg8170107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.joyfulCount = 0 --[[(int32) 糖果采集数量--]]
	msg.banquetCount = 0 --[[(int32) 酒席使用数量--]]
	msg.type = 0 --[[(int8) 1糖果刷新2酒席采集--]]
	return msg
end

function MsgDef.Msg8170107:encode(sm)
	sm:writeInt32(self.joyfulCount);
	sm:writeInt32(self.banquetCount);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg8170107:decode(sm)
	self.joyfulCount = sm:readInt32();
	self.banquetCount = sm:readInt32();
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg8170107:opcode()
	return 8170107
end

--[[ 情缘副本挑战通知另一方广播--]]
MsgDef.Msg8180101 = {}

function MsgDef.Msg8180101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标id--]]
	msg.reqType = 0 --[[(int8) 1:挑战通知 2:对方拒绝--]]
	msg.tarName = "" --[[(string) 名字--]]
	return msg
end

function MsgDef.Msg8180101:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt8(self.reqType);
	sm:writeString(self.tarName);
	return self
end

function MsgDef.Msg8180101:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.reqType = sm:readInt8();
	self.tarName = sm:readString();
	return self
end

function MsgDef.Msg8180101:opcode()
	return 8180101
end

--[[ 情缘副本结算广播--]]
MsgDef.Msg8180102 = {}

function MsgDef.Msg8180102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.passBo = 0 --[[(int32) 已通关xx波--]]
	msg.passSec = 0 --[[(int32) 用时--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得--]]
	msg.jnrAdd = 0 --[[(int8) 1:纪念日加成--]]
	return msg
end

function MsgDef.Msg8180102:encode(sm)
	sm:writeInt32(self.passBo);
	sm:writeInt32(self.passSec);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.jnrAdd);
	return self
end

function MsgDef.Msg8180102:decode(sm)
	self.passBo = sm:readInt32();
	self.passSec = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.jnrAdd = sm:readInt8();
	return self
end

function MsgDef.Msg8180102:opcode()
	return 8180102
end

--[[ 情缘副本任务广播--]]
MsgDef.Msg8180103 = {}

function MsgDef.Msg8180103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.boLeftSec = 0 --[[(int32) 本波剩余倒计时--]]
	msg.killBo = 0 --[[(int32) 已击杀波--]]
	return msg
end

function MsgDef.Msg8180103:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.killBo);
	return self
end

function MsgDef.Msg8180103:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.killBo = sm:readInt32();
	return self
end

function MsgDef.Msg8180103:opcode()
	return 8180103
end

--[[ 广播渡劫操作--]]
MsgDef.Msg8180201 = {}

function MsgDef.Msg8180201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:队长申请渡劫 2:同意渡劫 3:拒绝渡劫--]]
	msg.roleId = 0 --[[(int64) 操作的玩家id--]]
	msg.roleName = "" --[[(string) 角色名字--]]
	return msg
end

function MsgDef.Msg8180201:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.Msg8180201:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	return self
end

function MsgDef.Msg8180201:opcode()
	return 8180201
end

--[[ 渡劫副本结束广播--]]
MsgDef.Msg8180202 = {}

function MsgDef.Msg8180202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.manType = 0 --[[(int8) 1:渡劫人 2:护法人--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.pass = 0 --[[(int32) 当前关卡--]]
	msg.state = 0 --[[(int32) 状态1=完成,2失败,3超时--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.level = 0 --[[(int32) 等级--]]
	return msg
end

function MsgDef.Msg8180202:encode(sm)
	sm:writeInt8(self.manType);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pass);
	sm:writeInt32(self.state);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.level);
	return self
end

function MsgDef.Msg8180202:decode(sm)
	self.manType = sm:readInt8();
	self.sceneId = sm:readInt32();
	self.pass = sm:readInt32();
	self.state = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.level = sm:readInt32();
	return self
end

function MsgDef.Msg8180202:opcode()
	return 8180202
end

--[[ 三界争霸任务结算--]]
MsgDef.Msg8180301 = {}

function MsgDef.Msg8180301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskType = 0 --[[(int32) 任务类型--]]
	msg.mId = 0 --[[(int32) 对应任务的具体配置id--]]
	msg.sucFlag = 0 --[[(int8) 1:成功 2:失败--]]
	msg.costTime = 0 --[[(int32) 花费时间--]]
	msg.extStr01 = "" --[[(string) 护送任务:劫镖人的名字  寻宝任务时:抢夺宝箱玩家的名字--]]
	msg.calcType = 0 --[[(int8) --]]
	return msg
end

function MsgDef.Msg8180301:encode(sm)
	sm:writeInt32(self.taskType);
	sm:writeInt32(self.mId);
	sm:writeInt8(self.sucFlag);
	sm:writeInt32(self.costTime);
	sm:writeString(self.extStr01);
	sm:writeInt8(self.calcType);
	return self
end

function MsgDef.Msg8180301:decode(sm)
	self.taskType = sm:readInt32();
	self.mId = sm:readInt32();
	self.sucFlag = sm:readInt8();
	self.costTime = sm:readInt32();
	self.extStr01 = sm:readString();
	self.calcType = sm:readInt8();
	return self
end

function MsgDef.Msg8180301:opcode()
	return 8180301
end

--[[ 三界争霸广播日常任务进度--]]
MsgDef.Msg8180302 = {}

function MsgDef.Msg8180302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dailyTask = MsgDef.SjzbDailyTaskInfo:create() --[[(SjzbDailyTaskInfo) 日常杀怪任务--]]
	return msg
end

function MsgDef.Msg8180302:encode(sm)
	self.dailyTask:encode(sm)
	return self
end

function MsgDef.Msg8180302:decode(sm)
	self.dailyTask:decode(sm)
	return self
end

function MsgDef.Msg8180302:opcode()
	return 8180302
end

--[[ 三界争霸广播宝箱任务--]]
MsgDef.Msg8180303 = {}

function MsgDef.Msg8180303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boxTask = MsgDef.SjzbBoxTaskInfo:create() --[[(SjzbBoxTaskInfo) 宝箱任务--]]
	msg.boxGrids = {} --[[(array<SjzbBoxGridInfo>) 格子了--]]
	return msg
end

function MsgDef.Msg8180303:encode(sm)
	self.boxTask:encode(sm)
	sm:writeInt16(#self.boxGrids)
	for i,elm in ipairs(self.boxGrids) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8180303:decode(sm)
	self.boxTask:decode(sm)
	local boxGrids_size = sm:readInt16()
	for i = 1,boxGrids_size do
		local element = MsgDef.SjzbBoxGridInfo:create():decode(sm)
		table.insert(self.boxGrids, element)
	end
	return self
end

function MsgDef.Msg8180303:opcode()
	return 8180303
end

--[[ 三界争霸劫镖广播--]]
MsgDef.Msg8180304 = {}

function MsgDef.Msg8180304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleName = "" --[[(string) roleName--]]
	msg.carId = 0 --[[(int32) 镖车配置id--]]
	msg.ownerLev = 0 --[[(int32) 拥有者的等级--]]
	return msg
end

function MsgDef.Msg8180304:encode(sm)
	sm:writeString(self.roleName);
	sm:writeInt32(self.carId);
	sm:writeInt32(self.ownerLev);
	return self
end

function MsgDef.Msg8180304:decode(sm)
	self.roleName = sm:readString();
	self.carId = sm:readInt32();
	self.ownerLev = sm:readInt32();
	return self
end

function MsgDef.Msg8180304:opcode()
	return 8180304
end

--[[ 仙魔战阵营信息广播--]]
MsgDef.Msg8180401 = {}

function MsgDef.Msg8180401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xianCampInfo = MsgDef.XianMoCampInfo:create() --[[(XianMoCampInfo) 仙阵营信息--]]
	msg.moCampInfo = MsgDef.XianMoCampInfo:create() --[[(XianMoCampInfo) 魔阵营信息--]]
	return msg
end

function MsgDef.Msg8180401:encode(sm)
	self.xianCampInfo:encode(sm)
	self.moCampInfo:encode(sm)
	return self
end

function MsgDef.Msg8180401:decode(sm)
	self.xianCampInfo:decode(sm)
	self.moCampInfo:decode(sm)
	return self
end

function MsgDef.Msg8180401:opcode()
	return 8180401
end

--[[ 仙魔战我的信息广播--]]
MsgDef.Msg8180402 = {}

function MsgDef.Msg8180402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.killCount = 0 --[[(int32) 我的击杀数量--]]
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.campId = 0 --[[(int32) 我的阵营--]]
	msg.leftTime = 0 --[[(int32) 活动倒计时--]]
	return msg
end

function MsgDef.Msg8180402:encode(sm)
	sm:writeInt32(self.killCount);
	sm:writeInt32(self.score);
	sm:writeInt32(self.campId);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg8180402:decode(sm)
	self.killCount = sm:readInt32();
	self.score = sm:readInt32();
	self.campId = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end

function MsgDef.Msg8180402:opcode()
	return 8180402
end

--[[ 仙魔战战报广播--]]
MsgDef.Msg8180403 = {}

function MsgDef.Msg8180403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:阵营第一名被击杀2:捷报己方连杀3警报敌方连杀--]]
	msg.roleName = "" --[[(string) 玩家名字--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.roleCampId = 0 --[[(int64) 玩家阵营id--]]
	msg.value = 0 --[[(int32) reqType = 2 或者 3 时表示连杀次数--]]
	msg.killerName = "" --[[(string) 击杀的玩家名--]]
	return msg
end

function MsgDef.Msg8180403:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.roleName);
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.roleCampId);
	sm:writeInt32(self.value);
	sm:writeString(self.killerName);
	return self
end

function MsgDef.Msg8180403:decode(sm)
	self.reqType = sm:readInt8();
	self.roleName = sm:readString();
	self.roleId = sm:readInt64();
	self.roleCampId = sm:readInt64();
	self.value = sm:readInt32();
	self.killerName = sm:readString();
	return self
end

function MsgDef.Msg8180403:opcode()
	return 8180403
end

--[[ 仙魔战结束广播--]]
MsgDef.Msg8180404 = {}

function MsgDef.Msg8180404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.killCount = 0 --[[(int32) 击杀数量--]]
	msg.maxConKillCount = 0 --[[(int32) 最高连杀--]]
	msg.winCampId = 0 --[[(int8) 胜利的阵营id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励记录--]]
	msg.score = 0 --[[(int32) 我的积分--]]
	msg.gotExp = 0 --[[(int32) 获得的经验--]]
	return msg
end

function MsgDef.Msg8180404:encode(sm)
	sm:writeInt32(self.killCount);
	sm:writeInt32(self.maxConKillCount);
	sm:writeInt8(self.winCampId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.gotExp);
	return self
end

function MsgDef.Msg8180404:decode(sm)
	self.killCount = sm:readInt32();
	self.maxConKillCount = sm:readInt32();
	self.winCampId = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	self.gotExp = sm:readInt32();
	return self
end

function MsgDef.Msg8180404:opcode()
	return 8180404
end

--[[ 剑神殿boss血量广播--]]
MsgDef.Msg8180501 = {}

function MsgDef.Msg8180501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<JsdBossInfo>) boss列表--]]
	return msg
end

function MsgDef.Msg8180501:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8180501:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.JsdBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8180501:opcode()
	return 8180501
end

--[[ 剑神殿boss结算广播--]]
MsgDef.Msg8180502 = {}

function MsgDef.Msg8180502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属名字--]]
	msg.killerName = "" --[[(string) 击杀玩家名字--]]
	return msg
end

function MsgDef.Msg8180502:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.monsterId);
	sm:writeString(self.hateRoleName);
	sm:writeString(self.killerName);
	return self
end

function MsgDef.Msg8180502:decode(sm)
	self.sceneId = sm:readInt32();
	self.monsterId = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.killerName = sm:readString();
	return self
end

function MsgDef.Msg8180502:opcode()
	return 8180502
end

--[[ 仙域灵塔结算广播--]]
MsgDef.Msg8180601 = {}

function MsgDef.Msg8180601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.passBo = 0 --[[(int32) passSec--]]
	msg.passSec = 0 --[[(int32) 用时--]]
	msg.sceneId = 0 --[[(int32) sceneId--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.leftCount = 0 --[[(int32) 剩余挑战次数--]]
	msg.doubleCost = 0 --[[(int8) 1:合并0:正常--]]
	return msg
end

function MsgDef.Msg8180601:encode(sm)
	sm:writeInt32(self.passBo);
	sm:writeInt32(self.passSec);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftCount);
	sm:writeInt8(self.doubleCost);
	return self
end

function MsgDef.Msg8180601:decode(sm)
	self.passBo = sm:readInt32();
	self.passSec = sm:readInt32();
	self.sceneId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftCount = sm:readInt32();
	self.doubleCost = sm:readInt8();
	return self
end

function MsgDef.Msg8180601:opcode()
	return 8180601
end

--[[ 仙域灵塔任务追踪广播--]]
MsgDef.Msg8180602 = {}

function MsgDef.Msg8180602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.boLeftSec = 0 --[[(int32) 本波剩余倒计时--]]
	msg.killBo = 0 --[[(int32) 已击杀波--]]
	msg.sceneId = 0 --[[(int32)  场景id--]]
	msg.drops = {} --[[(map<int32,int32>) 掉落--]]
	return msg
end

function MsgDef.Msg8180602:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.killBo);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.drops))
	for kn,elm in ipairs(self.drops) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8180602:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.killBo = sm:readInt32();
	self.sceneId = sm:readInt32();
	local drops_size = sm:readInt16()
	for i = 1,drops_size do
		local kv = sm:readInt32();
		self.drops[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8180602:opcode()
	return 8180602
end

--[[ 秘境修炼任务追踪广播--]]
MsgDef.Msg8180701 = {}

function MsgDef.Msg8180701:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.exp = 0 --[[(int32) 经验获得--]]
	msg.expDrup = 0 --[[(int32) 经验加成--]]
	msg.dieNum = 0 --[[(int32) 怪物死亡数量--]]
	return msg
end

function MsgDef.Msg8180701:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.expDrup);
	sm:writeInt32(self.dieNum);
	return self
end

function MsgDef.Msg8180701:decode(sm)
	self.curBo = sm:readInt32();
	self.exp = sm:readInt32();
	self.expDrup = sm:readInt32();
	self.dieNum = sm:readInt32();
	return self
end

function MsgDef.Msg8180701:opcode()
	return 8180701
end

--[[ 秘境修炼结算广播--]]
MsgDef.Msg8180702 = {}

function MsgDef.Msg8180702:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 通过波--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	msg.useTime = 0 --[[(int32) 用时--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.sceneId = 0 --[[(int32) 场景--]]
	return msg
end

function MsgDef.Msg8180702:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.useTime);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8180702:decode(sm)
	self.curBo = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.useTime = sm:readInt32();
	self.leftCount = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8180702:opcode()
	return 8180702
end

--[[ 幻境镇妖结算广播--]]
MsgDef.Msg8180703 = {}

function MsgDef.Msg8180703:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 通过波--]]
	msg.useTime = 0 --[[(int32) 用时--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得奖励--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.sceneId = 0 --[[(int32) 场景--]]
	return msg
end

function MsgDef.Msg8180703:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.useTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8180703:decode(sm)
	self.curBo = sm:readInt32();
	self.useTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftCount = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8180703:opcode()
	return 8180703
end

--[[ 剑神守护结算广播--]]
MsgDef.Msg8180801 = {}

function MsgDef.Msg8180801:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.passBo = 0 --[[(int32) passBo--]]
	msg.passSec = 0 --[[(int32) passSec--]]
	msg.sceneId = 0 --[[(int32) sceneId--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	return msg
end

function MsgDef.Msg8180801:encode(sm)
	sm:writeInt32(self.passBo);
	sm:writeInt32(self.passSec);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftCount);
	return self
end

function MsgDef.Msg8180801:decode(sm)
	self.passBo = sm:readInt32();
	self.passSec = sm:readInt32();
	self.sceneId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftCount = sm:readInt32();
	return self
end

function MsgDef.Msg8180801:opcode()
	return 8180801
end

--[[ 剑神守护任务追踪广播--]]
MsgDef.Msg8180802 = {}

function MsgDef.Msg8180802:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curBo = 0 --[[(int32) 当前波--]]
	msg.boLeftSec = 0 --[[(int32) 本波剩余倒计时--]]
	msg.killBo = 0 --[[(int32) 已击杀波--]]
	return msg
end

function MsgDef.Msg8180802:encode(sm)
	sm:writeInt32(self.curBo);
	sm:writeInt32(self.boLeftSec);
	sm:writeInt32(self.killBo);
	return self
end

function MsgDef.Msg8180802:decode(sm)
	self.curBo = sm:readInt32();
	self.boLeftSec = sm:readInt32();
	self.killBo = sm:readInt32();
	return self
end

function MsgDef.Msg8180802:opcode()
	return 8180802
end

--[[ 组队副本倒计时广播--]]
MsgDef.Msg8180901 = {}

function MsgDef.Msg8180901:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.teamKind = 0 --[[(int32) 队伍类型--]]
	return msg
end

function MsgDef.Msg8180901:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.teamKind);
	return self
end

function MsgDef.Msg8180901:decode(sm)
	self.sceneId = sm:readInt32();
	self.teamKind = sm:readInt32();
	return self
end

function MsgDef.Msg8180901:opcode()
	return 8180901
end

--[[ 姻缘树操作广播--]]
MsgDef.Msg8190101 = {}

function MsgDef.Msg8190101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.optType = 0 --[[(int8) 0:查看 1:浇水 2:除虫 3:松土 4:收货--]]
	msg.attachName = "" --[[(string) 树归属roleId--]]
	msg.treeStatus = 0 --[[(int32) 树状态--]]
	msg.optTimesMap = {} --[[(map<int32,int32>) 操作次数<类型,次数> 类型：1:浇水 2:除虫 3:松土--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 收获获得--]]
	msg.treeRoleId = 0 --[[(int64) 树唯一id--]]
	return msg
end

function MsgDef.Msg8190101:encode(sm)
	sm:writeInt8(self.optType);
	sm:writeString(self.attachName);
	sm:writeInt32(self.treeStatus);
	sm:writeInt16(get_map_size(self.optTimesMap))
	for kn,elm in ipairs(self.optTimesMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt64(self.treeRoleId);
	return self
end

function MsgDef.Msg8190101:decode(sm)
	self.optType = sm:readInt8();
	self.attachName = sm:readString();
	self.treeStatus = sm:readInt32();
	local optTimesMap_size = sm:readInt16()
	for i = 1,optTimesMap_size do
		local kv = sm:readInt32();
		self.optTimesMap[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.treeRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg8190101:opcode()
	return 8190101
end

--[[ 魅力温泉赠送广播--]]
MsgDef.Msg8190201 = {}

function MsgDef.Msg8190201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarName = "" --[[(string) 赠送人--]]
	msg.mid = 0 --[[(int32) 赠送道具--]]
	return msg
end

function MsgDef.Msg8190201:encode(sm)
	sm:writeString(self.tarName);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg8190201:decode(sm)
	self.tarName = sm:readString();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg8190201:opcode()
	return 8190201
end

--[[ 魅力温泉刷新礼物广播--]]
MsgDef.Msg8190202 = {}

function MsgDef.Msg8190202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:第一波刷新 2:非第一波--]]
	msg.nextRefreshTime = 0 --[[(int32) 下次刷新时间--]]
	return msg
end

function MsgDef.Msg8190202:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.nextRefreshTime);
	return self
end

function MsgDef.Msg8190202:decode(sm)
	self.reqType = sm:readInt8();
	self.nextRefreshTime = sm:readInt32();
	return self
end

function MsgDef.Msg8190202:opcode()
	return 8190202
end

--[[ 魅力温泉采集广播--]]
MsgDef.Msg8190203 = {}

function MsgDef.Msg8190203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.cid = 0 --[[(int32) 类型 1:小黄鸭 2:肥皂--]]
	return msg
end

function MsgDef.Msg8190203:encode(sm)
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg8190203:decode(sm)
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg8190203:opcode()
	return 8190203
end

--[[ 双修邀请广播--]]
MsgDef.Msg8200101 = {}

function MsgDef.Msg8200101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqRoleName = "" --[[(string) 邀请人名--]]
	msg.reqRoleId = 0 --[[(int64) 邀请人id--]]
	msg.type = 0 --[[(int8) 1=邀请 2=自动匹配 =3同意邀请 =4停止修炼--]]
	msg.pox = 0 --[[(int32) 坐标x--]]
	msg.poy = 0 --[[(int32) 坐标y--]]
	msg.roleList = {} --[[(array<int64>) 修炼玩家列表--]]
	return msg
end

function MsgDef.Msg8200101:encode(sm)
	sm:writeString(self.reqRoleName);
	sm:writeInt64(self.reqRoleId);
	sm:writeInt8(self.type);
	sm:writeInt32(self.pox);
	sm:writeInt32(self.poy);
	sm:writeInt16(get_map_size(self.roleList))
	for i,elm in ipairs(self.roleList) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg8200101:decode(sm)
	self.reqRoleName = sm:readString();
	self.reqRoleId = sm:readInt64();
	self.type = sm:readInt8();
	self.pox = sm:readInt32();
	self.poy = sm:readInt32();
	local roleList_size = sm:readInt16()
	for i = 1,roleList_size do
		local elm = sm:readInt64();
		table.insert(self.roleList, elm)
	end
	return self
end

function MsgDef.Msg8200101:opcode()
	return 8200101
end

--[[ 双修状态广播--]]
MsgDef.Msg8200102 = {}

function MsgDef.Msg8200102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.practice = 0 --[[(int8) 双修状态 0:非双修 1:双修邀请方 2:双修被邀请方--]]
	return msg
end

function MsgDef.Msg8200102:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.practice);
	return self
end

function MsgDef.Msg8200102:decode(sm)
	self.roleId = sm:readInt64();
	self.practice = sm:readInt8();
	return self
end

function MsgDef.Msg8200102:opcode()
	return 8200102
end

--[[ 仙盟圣火活动信息广播--]]
MsgDef.Msg8210101 = {}

function MsgDef.Msg8210101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.joinCount = 0 --[[(int32) 参与人数--]]
	msg.rate = 0 --[[(int32) 经验倍率--]]
	msg.questionNum = 0 --[[(int32) 答题进度--]]
	return msg
end

function MsgDef.Msg8210101:encode(sm)
	sm:writeInt32(self.joinCount);
	sm:writeInt32(self.rate);
	sm:writeInt32(self.questionNum);
	return self
end

function MsgDef.Msg8210101:decode(sm)
	self.joinCount = sm:readInt32();
	self.rate = sm:readInt32();
	self.questionNum = sm:readInt32();
	return self
end

function MsgDef.Msg8210101:opcode()
	return 8210101
end

--[[ 家园boss血量广播--]]
MsgDef.Msg8220101 = {}

function MsgDef.Msg8220101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.attris = {} --[[(map<int32,int32>) 属性map--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属名字--]]
	msg.curHpPercent = 0 --[[(int32) boss当前血量百分比--]]
	msg.hurtPercent = 0 --[[(int32) 我的伤害百分比--]]
	msg.rankList = {} --[[(array<HomeBossRankInfo>) 排行榜信息--]]
	return msg
end

function MsgDef.Msg8220101:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.hateRoleName);
	sm:writeInt32(self.curHpPercent);
	sm:writeInt32(self.hurtPercent);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8220101:decode(sm)
	self.roleId = sm:readInt64();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.hateRoleName = sm:readString();
	self.curHpPercent = sm:readInt32();
	self.hurtPercent = sm:readInt32();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.HomeBossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	return self
end

function MsgDef.Msg8220101:opcode()
	return 8220101
end

--[[ 家园BOSS归属奖励广播--]]
MsgDef.Msg8220102 = {}

function MsgDef.Msg8220102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属名字--]]
	msg.bossName = "" --[[(string) boss名字--]]
	return msg
end

function MsgDef.Msg8220102:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeString(self.hateRoleName);
	sm:writeString(self.bossName);
	return self
end

function MsgDef.Msg8220102:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.hateRoleName = sm:readString();
	self.bossName = sm:readString();
	return self
end

function MsgDef.Msg8220102:opcode()
	return 8220102
end

--[[ 家园BOSS任务追踪更新--]]
MsgDef.Msg8220103 = {}

function MsgDef.Msg8220103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.homeName = "" --[[(string) --]]
	msg.houseLev = 0 --[[(int32) --]]
	msg.wallLev = 0 --[[(int32) --]]
	msg.zooLev = 0 --[[(int32) --]]
	msg.ownerName = "" --[[(string) --]]
	msg.hotSpringLev = 0 --[[(int32) 温泉等级--]]
	msg.hyssName = "" --[[(string) 狗的名字--]]
	return msg
end

function MsgDef.Msg8220103:encode(sm)
	sm:writeString(self.homeName);
	sm:writeInt32(self.houseLev);
	sm:writeInt32(self.wallLev);
	sm:writeInt32(self.zooLev);
	sm:writeString(self.ownerName);
	sm:writeInt32(self.hotSpringLev);
	sm:writeString(self.hyssName);
	return self
end

function MsgDef.Msg8220103:decode(sm)
	self.homeName = sm:readString();
	self.houseLev = sm:readInt32();
	self.wallLev = sm:readInt32();
	self.zooLev = sm:readInt32();
	self.ownerName = sm:readString();
	self.hotSpringLev = sm:readInt32();
	self.hyssName = sm:readString();
	return self
end

function MsgDef.Msg8220103:opcode()
	return 8220103
end

--[[ 单人排位结算广播--]]
MsgDef.Msg8230101 = {}

function MsgDef.Msg8230101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.pwLev = 0 --[[(int32) 当前排位等级--]]
	msg.win = 0 --[[(int8) 0:输 1:赢--]]
	msg.gotExp = 0 --[[(int32) 获得经验--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得道具--]]
	msg.pwLevTime = 0 --[[(int32) 升级成功时间--]]
	msg.oldPwLev = 0 --[[(int32) 旧的排位赛等级--]]
	return msg
end

function MsgDef.Msg8230101:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.pwLev);
	sm:writeInt8(self.win);
	sm:writeInt32(self.gotExp);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.pwLevTime);
	sm:writeInt32(self.oldPwLev);
	return self
end

function MsgDef.Msg8230101:decode(sm)
	self.roleId = sm:readInt64();
	self.pwLev = sm:readInt32();
	self.win = sm:readInt8();
	self.gotExp = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.pwLevTime = sm:readInt32();
	self.oldPwLev = sm:readInt32();
	return self
end

function MsgDef.Msg8230101:opcode()
	return 8230101
end

--[[ 单人排位匹配成功--]]
MsgDef.Msg8230102 = {}

function MsgDef.Msg8230102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.reqType = 0 --[[(int8) 1:匹配成功 2:匹配失败--]]
	return msg
end

function MsgDef.Msg8230102:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg8230102:decode(sm)
	self.sceneId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg8230102:opcode()
	return 8230102
end

--[[ 组队排位战队操作--]]
MsgDef.Msg8230201 = {}

function MsgDef.Msg8230201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:暂无2:踢人3:解散4:退出--]]
	msg.roleId = 0 --[[(int64) 目标角色id--]]
	return msg
end

function MsgDef.Msg8230201:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg8230201:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg8230201:opcode()
	return 8230201
end

--[[ 组队排位邀请广播--]]
MsgDef.Msg8230202 = {}

function MsgDef.Msg8230202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:邀请 2申请 3:拒绝--]]
	msg.roleName = "" --[[(string) 显示的名字--]]
	msg.teamName = "" --[[(string) 战队名字--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.rolePower = 0 --[[(int32) 玩家战力--]]
	return msg
end

function MsgDef.Msg8230202:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.roleName);
	sm:writeString(self.teamName);
	sm:writeInt32(self.teamId);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.rolePower);
	return self
end

function MsgDef.Msg8230202:decode(sm)
	self.reqType = sm:readInt8();
	self.roleName = sm:readString();
	self.teamName = sm:readString();
	self.teamId = sm:readInt32();
	self.roleId = sm:readInt64();
	self.rolePower = sm:readInt32();
	return self
end

function MsgDef.Msg8230202:opcode()
	return 8230202
end

--[[ 组队排位队伍更新广播--]]
MsgDef.Msg8230203 = {}

function MsgDef.Msg8230203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamInfo = MsgDef.PwsTeamInfo:create() --[[(PwsTeamInfo) 队伍信息--]]
	msg.members = {} --[[(array<PwsTeamMemInfo>) 成员信息--]]
	return msg
end

function MsgDef.Msg8230203:encode(sm)
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8230203:decode(sm)
	self.teamInfo:decode(sm)
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.PwsTeamMemInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	return self
end

function MsgDef.Msg8230203:opcode()
	return 8230203
end

--[[ 组队排位赛匹配操作广播--]]
MsgDef.Msg8230204 = {}

function MsgDef.Msg8230204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:发起匹配 2:匹配中 3:取消匹配 4:拒绝匹配 5:同意匹配--]]
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.members = {} --[[(array<PwsTeamMemInfo>) 成员信息--]]
	msg.captainRoleId = 0 --[[(int64) 队长角色id--]]
	return msg
end

function MsgDef.Msg8230204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeInt16(#self.members)
	for i,elm in ipairs(self.members) do
		elm:encode(sm)
	end
	sm:writeInt64(self.captainRoleId);
	return self
end

function MsgDef.Msg8230204:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	local members_size = sm:readInt16()
	for i = 1,members_size do
		local element = MsgDef.PwsTeamMemInfo:create():decode(sm)
		table.insert(self.members, element)
	end
	self.captainRoleId = sm:readInt64();
	return self
end

function MsgDef.Msg8230204:opcode()
	return 8230204
end

--[[ 组队排位匹配成功广播--]]
MsgDef.Msg8230205 = {}

function MsgDef.Msg8230205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:匹配成功 2:匹配失败--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg8230205:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8230205:decode(sm)
	self.reqType = sm:readInt8();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8230205:opcode()
	return 8230205
end

--[[ 组队排位赛结算广播--]]
MsgDef.Msg8230206 = {}

function MsgDef.Msg8230206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.win = 0 --[[(int8) 1:胜利 2:失败--]]
	msg.clacInfos = {} --[[(array<ZdPwsClacInfo>) 结算成员信息--]]
	msg.myTeamId = 0 --[[(int32) 我的队伍id--]]
	return msg
end

function MsgDef.Msg8230206:encode(sm)
	sm:writeInt8(self.win);
	sm:writeInt16(#self.clacInfos)
	for i,elm in ipairs(self.clacInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myTeamId);
	return self
end

function MsgDef.Msg8230206:decode(sm)
	self.win = sm:readInt8();
	local clacInfos_size = sm:readInt16()
	for i = 1,clacInfos_size do
		local element = MsgDef.ZdPwsClacInfo:create():decode(sm)
		table.insert(self.clacInfos, element)
	end
	self.myTeamId = sm:readInt32();
	return self
end

function MsgDef.Msg8230206:opcode()
	return 8230206
end

--[[ 组队排位赛血量广播--]]
MsgDef.Msg8230207 = {}

function MsgDef.Msg8230207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hpInfos = {} --[[(array<PwsHpInfo>) 血量信息--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	return msg
end

function MsgDef.Msg8230207:encode(sm)
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg8230207:decode(sm)
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.PwsHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.teamId = sm:readInt32();
	return self
end

function MsgDef.Msg8230207:opcode()
	return 8230207
end

--[[ 季后赛每场开始广播--]]
MsgDef.Msg8230301 = {}

function MsgDef.Msg8230301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bo = 0 --[[(int32) 第几场--]]
	msg.boStartTime = 0 --[[(int32) 第几场开始时间--]]
	return msg
end

function MsgDef.Msg8230301:encode(sm)
	sm:writeInt32(self.bo);
	sm:writeInt32(self.boStartTime);
	return self
end

function MsgDef.Msg8230301:decode(sm)
	self.bo = sm:readInt32();
	self.boStartTime = sm:readInt32();
	return self
end

function MsgDef.Msg8230301:opcode()
	return 8230301
end

--[[ 季后赛排位赛结算广播--]]
MsgDef.Msg8230302 = {}

function MsgDef.Msg8230302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.win = 0 --[[(int8) 1:胜利 2:失败--]]
	msg.myTeamId = 0 --[[(int32) 我的队伍id--]]
	msg.clacInfos = {} --[[(array<ZdPwsClacInfo>) 结算成员信息--]]
	return msg
end

function MsgDef.Msg8230302:encode(sm)
	sm:writeInt8(self.win);
	sm:writeInt32(self.myTeamId);
	sm:writeInt16(#self.clacInfos)
	for i,elm in ipairs(self.clacInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8230302:decode(sm)
	self.win = sm:readInt8();
	self.myTeamId = sm:readInt32();
	local clacInfos_size = sm:readInt16()
	for i = 1,clacInfos_size do
		local element = MsgDef.ZdPwsClacInfo:create():decode(sm)
		table.insert(self.clacInfos, element)
	end
	return self
end

function MsgDef.Msg8230302:opcode()
	return 8230302
end

--[[ BOSS刷新卡返回信息--]]
MsgDef.Msg8230401 = {}

function MsgDef.Msg8230401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<BossRefreshInfo>) 待刷新的BOSS列表--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:使用--]]
	msg.packIndex = 0 --[[(int32) packIndex--]]
	return msg
end

function MsgDef.Msg8230401:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.packIndex);
	return self
end

function MsgDef.Msg8230401:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.BossRefreshInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.reqType = sm:readInt8();
	self.packIndex = sm:readInt32();
	return self
end

function MsgDef.Msg8230401:opcode()
	return 8230401
end

--[[ 成就信息--]]
MsgDef.AchieveInfo = {}

function MsgDef.AchieveInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.achieveId == nil then msg.achieveId = 0 end --[[(int32) 成就id--]]
	if msg.process == nil then msg.process = 0 end --[[(int32) 成就进度--]]
	if msg.status == nil then msg.status = 0 end --[[(int8) 成就状态 1:未完成 2:已完成，可领取 3:已领取--]]
	return msg
end

function MsgDef.AchieveInfo:encode(sm)
	sm:writeInt32(self.achieveId);
	sm:writeInt32(self.process);
	sm:writeInt8(self.status);
	return self
end

function MsgDef.AchieveInfo:decode(sm)
	self.achieveId = sm:readInt32();
	self.process = sm:readInt32();
	self.status = sm:readInt8();
	return self
end

function MsgDef.AchieveInfo:opcode()
	return "AchieveInfo"
end

--[[ 竞技场玩家信息--]]
MsgDef.ArenaRoleInfo = {}

function MsgDef.ArenaRoleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战斗力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.skins == nil then msg.skins = {} end --[[(map<int32,int32>) 外观--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 玩家排名--]]
	if msg.robot == nil then msg.robot = 0 end --[[(int8) 1表示机器人--]]
	return msg
end

function MsgDef.ArenaRoleInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.rank);
	sm:writeInt8(self.robot);
	return self
end

function MsgDef.ArenaRoleInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	self.rank = sm:readInt32();
	self.robot = sm:readInt8();
	return self
end

function MsgDef.ArenaRoleInfo:opcode()
	return "ArenaRoleInfo"
end

--[[ 黑名单信息--]]
MsgDef.BlackNameInfo = {}

function MsgDef.BlackNameInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	if msg.charmStepId == nil then msg.charmStepId = 0 end --[[(int32) 魅力等级id--]]
	return msg
end

function MsgDef.BlackNameInfo:encode(sm)
	sm:writeString(self.roleName);
	sm:writeInt32(self.level);
	sm:writeInt32(self.roleIcon);
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.power);
	sm:writeInt32(self.charmStepId);
	return self
end

function MsgDef.BlackNameInfo:decode(sm)
	self.roleName = sm:readString();
	self.level = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.roleId = sm:readInt64();
	self.power = sm:readInt64();
	self.charmStepId = sm:readInt32();
	return self
end

function MsgDef.BlackNameInfo:opcode()
	return "BlackNameInfo"
end

--[[ BOSS之家BOSS信息--]]
MsgDef.BossHomeBossInfo = {}

function MsgDef.BossHomeBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.BossHomeBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.BossHomeBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.BossHomeBossInfo:opcode()
	return "BossHomeBossInfo"
end

--[[ boss信息--]]
MsgDef.BossInfo = {}

function MsgDef.BossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.bossStatu == nil then msg.bossStatu = 0 end --[[(int8) 精英boss1:已死亡;世界boss1:已死亡,2未刷新,3已刷新--]]
	if msg.lastRefreshTime == nil then msg.lastRefreshTime = 0 end --[[(int32) 上一次刷新时间--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.lastKillName == nil then msg.lastKillName = "" end --[[(string) 上一次击杀者的名字--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	return msg
end

function MsgDef.BossInfo:encode(sm)
	sm:writeInt8(self.bossStatu);
	sm:writeInt32(self.lastRefreshTime);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeInt32(self.sceneId);
	sm:writeString(self.lastKillName);
	sm:writeInt32(self.monsterId);
	return self
end

function MsgDef.BossInfo:decode(sm)
	self.bossStatu = sm:readInt8();
	self.lastRefreshTime = sm:readInt32();
	self.nextRefreshTime = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.lastKillName = sm:readString();
	self.monsterId = sm:readInt32();
	return self
end

function MsgDef.BossInfo:opcode()
	return "BossInfo"
end

--[[ Boss有奖数据--]]
MsgDef.BossPrizeInfo = {}

function MsgDef.BossPrizeInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.bossInfo == nil then msg.bossInfo = {} end --[[(array<BossInfo>) Boss信息--]]
	return msg
end

function MsgDef.BossPrizeInfo:encode(sm)
	sm:writeInt16(#self.bossInfo)
	for i,elm in ipairs(self.bossInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.BossPrizeInfo:decode(sm)
	local bossInfo_size = sm:readInt16()
	for i = 1,bossInfo_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfo, element)
	end
	return self
end

function MsgDef.BossPrizeInfo:opcode()
	return "BossPrizeInfo"
end

--[[ boss排名信息--]]
MsgDef.BossRankInfo = {}

function MsgDef.BossRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色Id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.hurtPercent == nil then msg.hurtPercent = 0 end --[[(int32) 伤害百分比--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.BossRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.hurtPercent);
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.BossRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.hurtPercent = sm:readInt32();
	self.rank = sm:readInt32();
	return self
end

function MsgDef.BossRankInfo:opcode()
	return "BossRankInfo"
end

--[[ BOSS刷新信息你--]]
MsgDef.BossRefreshInfo = {}

function MsgDef.BossRefreshInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	return msg
end

function MsgDef.BossRefreshInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.monsterId);
	sm:writeInt32(self.nextRefreshTime);
	return self
end

function MsgDef.BossRefreshInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.monsterId = sm:readInt32();
	self.nextRefreshTime = sm:readInt32();
	return self
end

function MsgDef.BossRefreshInfo:opcode()
	return "BossRefreshInfo"
end

--[[ Buff信息--]]
MsgDef.BuffInfo = {}

function MsgDef.BuffInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.buffId == nil then msg.buffId = 0 end --[[(int32) --]]
	if msg.modelId == nil then msg.modelId = 0 end --[[(int32) Buff配置id--]]
	if msg.startTime == nil then msg.startTime = 0 end --[[(int32) 开始时间，-1为不移除buff--]]
	if msg.overlay == nil then msg.overlay = 0 end --[[(int32) 叠加层数--]]
	if msg.extArgs == nil then msg.extArgs = {} end --[[(map<int32,int32>) 扩展参数--]]
	if msg.endTime == nil then msg.endTime = 0 end --[[(int32) buff结束时间--]]
	if msg.reserves == nil then msg.reserves = 0 end --[[(int32) 容量--]]
	return msg
end

function MsgDef.BuffInfo:encode(sm)
	sm:writeInt32(self.buffId);
	sm:writeInt32(self.modelId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.overlay);
	sm:writeInt16(get_map_size(self.extArgs))
	for kn,elm in ipairs(self.extArgs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.endTime);
	sm:writeInt32(self.reserves);
	return self
end

function MsgDef.BuffInfo:decode(sm)
	self.buffId = sm:readInt32();
	self.modelId = sm:readInt32();
	self.startTime = sm:readInt32();
	self.overlay = sm:readInt32();
	local extArgs_size = sm:readInt16()
	for i = 1,extArgs_size do
		local kv = sm:readInt32();
		self.extArgs[kv] = sm:readInt32();
	end
	self.endTime = sm:readInt32();
	self.reserves = sm:readInt32();
	return self
end

function MsgDef.BuffInfo:opcode()
	return "BuffInfo"
end

--[[ 玩家聊天信息--]]
MsgDef.ChatInfo = {}

function MsgDef.ChatInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int8) 类型世界2,喇叭3,附近4,私人5--]]
	if msg.content == nil then msg.content = "" end --[[(string) 内容--]]
	if msg.tarName == nil then msg.tarName = "" end --[[(string) 目标玩家名字--]]
	if msg.sendName == nil then msg.sendName = "" end --[[(string) --]]
	if msg.sendRoleId == nil then msg.sendRoleId = 0 end --[[(int64) --]]
	if msg.sendRoleIcon == nil then msg.sendRoleIcon = 0 end --[[(int32) --]]
	if msg.sendRoleLev == nil then msg.sendRoleLev = 0 end --[[(int32) --]]
	if msg.gangJob == nil then msg.gangJob = 0 end --[[(int8) 帮派职位0帮众,1精英,2长老,3副帮主,4帮主--]]
	if msg.tarRoleLev == nil then msg.tarRoleLev = 0 end --[[(int32) --]]
	if msg.powerRank == nil then msg.powerRank = 0 end --[[(int8) --]]
	if msg.relation == nil then msg.relation = 0 end --[[(int8) 关系0陌生人1好友--]]
	if msg.extStr == nil then msg.extStr = "" end --[[(string) --]]
	if msg.voiceStr == nil then msg.voiceStr = "" end --[[(string) --]]
	if msg.isVoice == nil then msg.isVoice = 0 end --[[(int8) --]]
	if msg.sendMainSrvId == nil then msg.sendMainSrvId = 0 end --[[(int32) 主服id--]]
	return msg
end

function MsgDef.ChatInfo:encode(sm)
	sm:writeInt8(self.type);
	sm:writeString(self.content);
	sm:writeString(self.tarName);
	sm:writeString(self.sendName);
	sm:writeInt64(self.sendRoleId);
	sm:writeInt32(self.sendRoleIcon);
	sm:writeInt32(self.sendRoleLev);
	sm:writeInt8(self.gangJob);
	sm:writeInt32(self.tarRoleLev);
	sm:writeInt8(self.powerRank);
	sm:writeInt8(self.relation);
	sm:writeString(self.extStr);
	sm:writeString(self.voiceStr);
	sm:writeInt8(self.isVoice);
	sm:writeInt32(self.sendMainSrvId);
	return self
end

function MsgDef.ChatInfo:decode(sm)
	self.type = sm:readInt8();
	self.content = sm:readString();
	self.tarName = sm:readString();
	self.sendName = sm:readString();
	self.sendRoleId = sm:readInt64();
	self.sendRoleIcon = sm:readInt32();
	self.sendRoleLev = sm:readInt32();
	self.gangJob = sm:readInt8();
	self.tarRoleLev = sm:readInt32();
	self.powerRank = sm:readInt8();
	self.relation = sm:readInt8();
	self.extStr = sm:readString();
	self.voiceStr = sm:readString();
	self.isVoice = sm:readInt8();
	self.sendMainSrvId = sm:readInt32();
	return self
end

function MsgDef.ChatInfo:opcode()
	return "ChatInfo"
end

--[[ 私聊玩家信息--]]
MsgDef.ChatUserInfo = {}

function MsgDef.ChatUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家Id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.RoleIcon == nil then msg.RoleIcon = 0 end --[[(int32) 玩家Icon--]]
	if msg.RoleLev == nil then msg.RoleLev = 0 end --[[(int32) 玩家等级--]]
	if msg.relation == nil then msg.relation = 0 end --[[(int8) 关系0陌生人1好友--]]
	if msg.readFlag == nil then msg.readFlag = 0 end --[[(int8) 是否有未读1为有未读--]]
	return msg
end

function MsgDef.ChatUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.RoleIcon);
	sm:writeInt32(self.RoleLev);
	sm:writeInt8(self.relation);
	sm:writeInt8(self.readFlag);
	return self
end

function MsgDef.ChatUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.RoleIcon = sm:readInt32();
	self.RoleLev = sm:readInt32();
	self.relation = sm:readInt8();
	self.readFlag = sm:readInt8();
	return self
end

function MsgDef.ChatUserInfo:opcode()
	return "ChatUserInfo"
end

--[[ 圣诞活动排行信息--]]
MsgDef.ChristmasRankingInfo = {}

function MsgDef.ChristmasRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排行--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	if msg.commitCount == nil then msg.commitCount = 0 end --[[(int32) 上交数量--]]
	return msg
end

function MsgDef.ChristmasRankingInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.name);
	sm:writeInt32(self.commitCount);
	return self
end

function MsgDef.ChristmasRankingInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.name = sm:readString();
	self.commitCount = sm:readInt32();
	return self
end

function MsgDef.ChristmasRankingInfo:opcode()
	return "ChristmasRankingInfo"
end

--[[ 通用BOSS信息--]]
MsgDef.CommonBossInfo = {}

function MsgDef.CommonBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 归属帮派id(跨服城战)--]]
	return msg
end

function MsgDef.CommonBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curHpPercent);
	sm:writeInt64(self.gangId);
	return self
end

function MsgDef.CommonBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	self.gangId = sm:readInt64();
	return self
end

function MsgDef.CommonBossInfo:opcode()
	return "CommonBossInfo"
end

--[[ 跨服城战战报信息--]]
MsgDef.CrossCityWarReport = {}

function MsgDef.CrossCityWarReport:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名--]]
	if msg.result == nil then msg.result = 0 end --[[(int8) 结果：1:胜 2:败--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 城池--]]
	return msg
end

function MsgDef.CrossCityWarReport:encode(sm)
	sm:writeString(self.gangName);
	sm:writeInt8(self.result);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.CrossCityWarReport:decode(sm)
	self.gangName = sm:readString();
	self.result = sm:readInt8();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.CrossCityWarReport:opcode()
	return "CrossCityWarReport"
end

--[[ 跨服进阶组队副本伤害排名信息--]]
MsgDef.CrossJJRankInfo = {}

function MsgDef.CrossJJRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int8) 排名--]]
	if msg.hurt == nil then msg.hurt = 0 end --[[(int32) 以千为最小单位,21代表2.1万--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	return msg
end

function MsgDef.CrossJJRankInfo:encode(sm)
	sm:writeInt8(self.rank);
	sm:writeInt32(self.hurt);
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.CrossJJRankInfo:decode(sm)
	self.rank = sm:readInt8();
	self.hurt = sm:readInt32();
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	return self
end

function MsgDef.CrossJJRankInfo:opcode()
	return "CrossJJRankInfo"
end

--[[ 跨服进阶副本队伍信息--]]
MsgDef.CrossJJTeamInfo = {}

function MsgDef.CrossJJTeamInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.captainRoleName == nil then msg.captainRoleName = "" end --[[(string) 队长名字--]]
	if msg.memberNum == nil then msg.memberNum = 0 end --[[(int8) 队员数量--]]
	if msg.maxAutoPlay == nil then msg.maxAutoPlay = 0 end --[[(int8) 满员自动开始--]]
	if msg.captainRoleId == nil then msg.captainRoleId = 0 end --[[(int64) 队长角色id--]]
	if msg.hasPassword == nil then msg.hasPassword = 0 end --[[(int8) 1有密码--]]
	return msg
end

function MsgDef.CrossJJTeamInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeString(self.captainRoleName);
	sm:writeInt8(self.memberNum);
	sm:writeInt8(self.maxAutoPlay);
	sm:writeInt64(self.captainRoleId);
	sm:writeInt8(self.hasPassword);
	return self
end

function MsgDef.CrossJJTeamInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.captainRoleName = sm:readString();
	self.memberNum = sm:readInt8();
	self.maxAutoPlay = sm:readInt8();
	self.captainRoleId = sm:readInt64();
	self.hasPassword = sm:readInt8();
	return self
end

function MsgDef.CrossJJTeamInfo:opcode()
	return "CrossJJTeamInfo"
end

--[[ 跨服进阶队伍详细信息--]]
MsgDef.CrossJJTeamMemberInfo = {}

function MsgDef.CrossJJTeamMemberInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) roleName--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) roleIcon--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) power--]]
	if msg.captain == nil then msg.captain = 0 end --[[(int8) 1:队长--]]
	if msg.teamMemberReady == nil then msg.teamMemberReady = 0 end --[[(int8) 1:已准备--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 人物等级--]]
	return msg
end

function MsgDef.CrossJJTeamMemberInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.power);
	sm:writeInt8(self.captain);
	sm:writeInt8(self.teamMemberReady);
	sm:writeInt32(self.level);
	return self
end

function MsgDef.CrossJJTeamMemberInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	self.power = sm:readInt32();
	self.captain = sm:readInt8();
	self.teamMemberReady = sm:readInt8();
	self.level = sm:readInt32();
	return self
end

function MsgDef.CrossJJTeamMemberInfo:opcode()
	return "CrossJJTeamMemberInfo"
end

--[[ 跨服世界BOSS信息--]]
MsgDef.CrossWorldBossInfo = {}

function MsgDef.CrossWorldBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.CrossWorldBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.CrossWorldBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.CrossWorldBossInfo:opcode()
	return "CrossWorldBossInfo"
end

--[[ 充值列表项--]]
MsgDef.CzItemInfo = {}

function MsgDef.CzItemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) --]]
	if msg.rmb == nil then msg.rmb = 0 end --[[(int32) 充值金额--]]
	if msg.moneyYb == nil then msg.moneyYb = 0 end --[[(int32) 充值充值获得元宝--]]
	if msg.isFirst == nil then msg.isFirst = 0 end --[[(int8) 1为首充--]]
	if msg.todayFirstCz == nil then msg.todayFirstCz = 0 end --[[(int8) 1今日首充--]]
	return msg
end

function MsgDef.CzItemInfo:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.rmb);
	sm:writeInt32(self.moneyYb);
	sm:writeInt8(self.isFirst);
	sm:writeInt8(self.todayFirstCz);
	return self
end

function MsgDef.CzItemInfo:decode(sm)
	self.itemId = sm:readInt32();
	self.rmb = sm:readInt32();
	self.moneyYb = sm:readInt32();
	self.isFirst = sm:readInt8();
	self.todayFirstCz = sm:readInt8();
	return self
end

function MsgDef.CzItemInfo:opcode()
	return "CzItemInfo"
end

--[[ 结婚宣言信息--]]
MsgDef.DeclarationInfo = {}

function MsgDef.DeclarationInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.declareStr == nil then msg.declareStr = "" end --[[(string) 宣言--]]
	if msg.seekFlag == nil then msg.seekFlag = 0 end --[[(int8) 是否已追求 1:已追求--]]
	return msg
end

function MsgDef.DeclarationInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.level);
	sm:writeInt32(self.power);
	sm:writeString(self.declareStr);
	sm:writeInt8(self.seekFlag);
	return self
end

function MsgDef.DeclarationInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	self.level = sm:readInt32();
	self.power = sm:readInt32();
	self.declareStr = sm:readString();
	self.seekFlag = sm:readInt8();
	return self
end

function MsgDef.DeclarationInfo:opcode()
	return "DeclarationInfo"
end

--[[ 双修玩家列表信息--]]
MsgDef.DoubleRepairInfo = {}

function MsgDef.DoubleRepairInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int32) 性别--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名--]]
	return msg
end

function MsgDef.DoubleRepairInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.sex);
	sm:writeString(self.gangName);
	return self
end

function MsgDef.DoubleRepairInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.sex = sm:readInt32();
	self.gangName = sm:readString();
	return self
end

function MsgDef.DoubleRepairInfo:opcode()
	return "DoubleRepairInfo"
end

--[[ 仇人信息--]]
MsgDef.EnemyInfo = {}

function MsgDef.EnemyInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.charmStepId == nil then msg.charmStepId = 0 end --[[(int32) 魅力等级id--]]
	if msg.killCount == nil then msg.killCount = 0 end --[[(int32) 被仇人击杀的次数--]]
	if msg.offLineTime == nil then msg.offLineTime = 0 end --[[(int32) 离线时间--]]
	return msg
end

function MsgDef.EnemyInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt64(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.level);
	sm:writeInt32(self.charmStepId);
	sm:writeInt32(self.killCount);
	sm:writeInt32(self.offLineTime);
	return self
end

function MsgDef.EnemyInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt64();
	self.roleIcon = sm:readInt32();
	self.level = sm:readInt32();
	self.charmStepId = sm:readInt32();
	self.killCount = sm:readInt32();
	self.offLineTime = sm:readInt32();
	return self
end

function MsgDef.EnemyInfo:opcode()
	return "EnemyInfo"
end

--[[ 装备觉醒--]]
MsgDef.EquipAwakenInfo = {}

function MsgDef.EquipAwakenInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	if msg.zxLev == nil then msg.zxLev = 0 end --[[(int32) 诛仙等级--]]
	if msg.zsLev == nil then msg.zsLev = 0 end --[[(int32) 诸神等级--]]
	if msg.effectZxLev == nil then msg.effectZxLev = 0 end --[[(int32) 有效的诛仙等级--]]
	if msg.effectZsLev == nil then msg.effectZsLev = 0 end --[[(int32) 有效的诸神等级--]]
	return msg
end

function MsgDef.EquipAwakenInfo:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt32(self.zxLev);
	sm:writeInt32(self.zsLev);
	sm:writeInt32(self.effectZxLev);
	sm:writeInt32(self.effectZsLev);
	return self
end

function MsgDef.EquipAwakenInfo:decode(sm)
	self.part = sm:readInt8();
	self.zxLev = sm:readInt32();
	self.zsLev = sm:readInt32();
	self.effectZxLev = sm:readInt32();
	self.effectZsLev = sm:readInt32();
	return self
end

function MsgDef.EquipAwakenInfo:opcode()
	return "EquipAwakenInfo"
end

--[[ 装备套装锻造--]]
MsgDef.EquipSuitForge = {}

function MsgDef.EquipSuitForge:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	if msg.zhuxian == nil then msg.zhuxian = 0 end --[[(int8) 诛仙套装是否已锻造--]]
	if msg.zhushen == nil then msg.zhushen = 0 end --[[(int8) 诸神套装是否已锻造--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 装备道具id--]]
	if msg.jie == nil then msg.jie = 0 end --[[(int32) 装备阶数--]]
	return msg
end

function MsgDef.EquipSuitForge:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt8(self.zhuxian);
	sm:writeInt8(self.zhushen);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.jie);
	return self
end

function MsgDef.EquipSuitForge:decode(sm)
	self.part = sm:readInt8();
	self.zhuxian = sm:readInt8();
	self.zhushen = sm:readInt8();
	self.mid = sm:readInt32();
	self.jie = sm:readInt32();
	return self
end

function MsgDef.EquipSuitForge:opcode()
	return "EquipSuitForge"
end

--[[ 时装信息--]]
MsgDef.FashionInfo = {}

function MsgDef.FashionInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.fashionId == nil then msg.fashionId = 0 end --[[(int32) 时装id--]]
	if msg.gotTime == nil then msg.gotTime = 0 end --[[(int32) 时装获取时间--]]
	if msg.isWear == nil then msg.isWear = 0 end --[[(int8) 是否佩戴 0:未佩戴 1:已佩戴--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 部位1:衣服 2:武器--]]
	if msg.endTime == nil then msg.endTime = 0 end --[[(int32) 失效时间 0表示永久--]]
	if msg.starNum == nil then msg.starNum = 0 end --[[(int32) 升星数--]]
	return msg
end

function MsgDef.FashionInfo:encode(sm)
	sm:writeInt32(self.fashionId);
	sm:writeInt32(self.gotTime);
	sm:writeInt8(self.isWear);
	sm:writeInt32(self.type);
	sm:writeInt32(self.endTime);
	sm:writeInt32(self.starNum);
	return self
end

function MsgDef.FashionInfo:decode(sm)
	self.fashionId = sm:readInt32();
	self.gotTime = sm:readInt32();
	self.isWear = sm:readInt8();
	self.type = sm:readInt32();
	self.endTime = sm:readInt32();
	self.starNum = sm:readInt32();
	return self
end

function MsgDef.FashionInfo:opcode()
	return "FashionInfo"
end

--[[ 时装套装信息--]]
MsgDef.FashionSuitInfo = {}

function MsgDef.FashionSuitInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.idList == nil then msg.idList = {} end --[[(array<int32>) 时装套装位置id--]]
	return msg
end

function MsgDef.FashionSuitInfo:encode(sm)
	sm:writeInt16(get_map_size(self.idList))
	for i,elm in ipairs(self.idList) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.FashionSuitInfo:decode(sm)
	local idList_size = sm:readInt16()
	for i = 1,idList_size do
		local elm = sm:readInt32();
		table.insert(self.idList, elm)
	end
	return self
end

function MsgDef.FashionSuitInfo:opcode()
	return "FashionSuitInfo"
end

--[[ 战斗目标--]]
MsgDef.FightTarget = {}

function MsgDef.FightTarget:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	if msg.hurts == nil then msg.hurts = {} end --[[(array<HurtInfo>) --]]
	return msg
end

function MsgDef.FightTarget:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(#self.hurts)
	for i,elm in ipairs(self.hurts) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.FightTarget:decode(sm)
	self.roleId = sm:readInt64();
	local hurts_size = sm:readInt16()
	for i = 1,hurts_size do
		local element = MsgDef.HurtInfo:create():decode(sm)
		table.insert(self.hurts, element)
	end
	return self
end

function MsgDef.FightTarget:opcode()
	return "FightTarget"
end

--[[ 好友信息--]]
MsgDef.FriendInfo = {}

function MsgDef.FriendInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 好友id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 好友名字--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.offLineTime == nil then msg.offLineTime = 0 end --[[(int32) 离线时间--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	if msg.applyStatu == nil then msg.applyStatu = 0 end --[[(int8) ==1申请中--]]
	if msg.charmStepId == nil then msg.charmStepId = 0 end --[[(int32) 魅力等级Id--]]
	if msg.recvHeartStatus == nil then msg.recvHeartStatus = 0 end --[[(int8) 领取爱心状态 0:未赠送(需提醒) 1:可领取 2:已领取 3:已提醒--]]
	if msg.presentStatus == nil then msg.presentStatus = 0 end --[[(int8) 赠送爱心状态 0:未赠送 1:已赠送--]]
	if msg.qm == nil then msg.qm = 0 end --[[(int32) 亲密度--]]
	return msg
end

function MsgDef.FriendInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.name);
	sm:writeInt32(self.level);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.offLineTime);
	sm:writeInt64(self.power);
	sm:writeInt8(self.applyStatu);
	sm:writeInt32(self.charmStepId);
	sm:writeInt8(self.recvHeartStatus);
	sm:writeInt8(self.presentStatus);
	sm:writeInt32(self.qm);
	return self
end

function MsgDef.FriendInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.name = sm:readString();
	self.level = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.offLineTime = sm:readInt32();
	self.power = sm:readInt64();
	self.applyStatu = sm:readInt8();
	self.charmStepId = sm:readInt32();
	self.recvHeartStatus = sm:readInt8();
	self.presentStatus = sm:readInt8();
	self.qm = sm:readInt32();
	return self
end

function MsgDef.FriendInfo:opcode()
	return "FriendInfo"
end

--[[ 帮派申请信息--]]
MsgDef.GangApplyInfo = {}

function MsgDef.GangApplyInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.roleLev == nil then msg.roleLev = 0 end --[[(int32) 登记--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	return msg
end

function MsgDef.GangApplyInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleLev);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.GangApplyInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleLev = sm:readInt32();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	return self
end

function MsgDef.GangApplyInfo:opcode()
	return "GangApplyInfo"
end

--[[ 帮派宝箱信息--]]
MsgDef.GangBoxInfo = {}

function MsgDef.GangBoxInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.startTime == nil then msg.startTime = 0 end --[[(int32) 宝箱开启开始时间--]]
	if msg.needSec == nil then msg.needSec = 0 end --[[(int32) 开启需要的时间--]]
	if msg.boxIndex == nil then msg.boxIndex = 0 end --[[(int32) 宝箱index格子位置--]]
	if msg.assistedStatu == nil then msg.assistedStatu = 0 end --[[(int8) 是否被协助过=1被协助过--]]
	if msg.assistName == nil then msg.assistName = "" end --[[(string) 协助者名字--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 宝箱主人名字--]]
	if msg.boxColor == nil then msg.boxColor = 0 end --[[(int8) 宝箱品质--]]
	return msg
end

function MsgDef.GangBoxInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.needSec);
	sm:writeInt32(self.boxIndex);
	sm:writeInt8(self.assistedStatu);
	sm:writeString(self.assistName);
	sm:writeString(self.roleName);
	sm:writeInt8(self.boxColor);
	return self
end

function MsgDef.GangBoxInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.startTime = sm:readInt32();
	self.needSec = sm:readInt32();
	self.boxIndex = sm:readInt32();
	self.assistedStatu = sm:readInt8();
	self.assistName = sm:readString();
	self.roleName = sm:readString();
	self.boxColor = sm:readInt8();
	return self
end

function MsgDef.GangBoxInfo:opcode()
	return "GangBoxInfo"
end

--[[ 公会信息--]]
MsgDef.GangInfo = {}

function MsgDef.GangInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 帮派id--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.gangLev == nil then msg.gangLev = 0 end --[[(int32) 帮派等级--]]
	if msg.adminName == nil then msg.adminName = "" end --[[(string) 帮主名字--]]
	if msg.gangPower == nil then msg.gangPower = 0 end --[[(int64) 帮派战力--]]
	if msg.memberNum == nil then msg.memberNum = 0 end --[[(int32) 帮派人数--]]
	if msg.gangNotice == nil then msg.gangNotice = "" end --[[(string) 帮派公告--]]
	if msg.applyStatu == nil then msg.applyStatu = 0 end --[[(int8) 1已结申请过;0未申请过--]]
	if msg.gangExp == nil then msg.gangExp = 0 end --[[(int32) 帮派经验--]]
	if msg.gangType == nil then msg.gangType = 0 end --[[(int8) 帮派类型：0普通，1VIP--]]
	if msg.maxMemberNum == nil then msg.maxMemberNum = 0 end --[[(int32) 帮派最大人数--]]
	return msg
end

function MsgDef.GangInfo:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeString(self.gangName);
	sm:writeInt32(self.gangLev);
	sm:writeString(self.adminName);
	sm:writeInt64(self.gangPower);
	sm:writeInt32(self.memberNum);
	sm:writeString(self.gangNotice);
	sm:writeInt8(self.applyStatu);
	sm:writeInt32(self.gangExp);
	sm:writeInt8(self.gangType);
	sm:writeInt32(self.maxMemberNum);
	return self
end

function MsgDef.GangInfo:decode(sm)
	self.gangId = sm:readInt64();
	self.gangName = sm:readString();
	self.gangLev = sm:readInt32();
	self.adminName = sm:readString();
	self.gangPower = sm:readInt64();
	self.memberNum = sm:readInt32();
	self.gangNotice = sm:readString();
	self.applyStatu = sm:readInt8();
	self.gangExp = sm:readInt32();
	self.gangType = sm:readInt8();
	self.maxMemberNum = sm:readInt32();
	return self
end

function MsgDef.GangInfo:opcode()
	return "GangInfo"
end

--[[ 公会副本关卡信息--]]
MsgDef.GangPassVo = {}

function MsgDef.GangPassVo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.passId == nil then msg.passId = 0 end --[[(int32) 关卡id--]]
	if msg.passMemNum == nil then msg.passMemNum = 0 end --[[(int32) 通关人数--]]
	if msg.tarAwardSign == nil then msg.tarAwardSign = 0 end --[[(int8) 目标奖励领取标识1已领取--]]
	if msg.attrPercent == nil then msg.attrPercent = 0 end --[[(int32) 属性加成百分比--]]
	if msg.firstAwardSign == nil then msg.firstAwardSign = 0 end --[[(int8) 首通奖励标识1已领取--]]
	return msg
end

function MsgDef.GangPassVo:encode(sm)
	sm:writeInt32(self.passId);
	sm:writeInt32(self.passMemNum);
	sm:writeInt8(self.tarAwardSign);
	sm:writeInt32(self.attrPercent);
	sm:writeInt8(self.firstAwardSign);
	return self
end

function MsgDef.GangPassVo:decode(sm)
	self.passId = sm:readInt32();
	self.passMemNum = sm:readInt32();
	self.tarAwardSign = sm:readInt8();
	self.attrPercent = sm:readInt32();
	self.firstAwardSign = sm:readInt8();
	return self
end

function MsgDef.GangPassVo:opcode()
	return "GangPassVo"
end

--[[ 帮派排行信息--]]
MsgDef.GangRankInfo = {}

function MsgDef.GangRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 帮派id--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.gangLev == nil then msg.gangLev = 0 end --[[(int32) 帮派等级--]]
	if msg.adminName == nil then msg.adminName = "" end --[[(string) 帮主名字--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.GangRankInfo:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeString(self.gangName);
	sm:writeInt32(self.gangLev);
	sm:writeString(self.adminName);
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.GangRankInfo:decode(sm)
	self.gangId = sm:readInt64();
	self.gangName = sm:readString();
	self.gangLev = sm:readInt32();
	self.adminName = sm:readString();
	self.rank = sm:readInt32();
	return self
end

function MsgDef.GangRankInfo:opcode()
	return "GangRankInfo"
end

--[[ 仙盟排名信息--]]
MsgDef.GangRankingInfo = {}

function MsgDef.GangRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 获得积分--]]
	if msg.bossNum == nil then msg.bossNum = 0 end --[[(int32) 世界boss归属数量--]]
	if msg.warWinTimes == nil then msg.warWinTimes = 0 end --[[(int32) 仙盟战获胜次数--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名--]]
	return msg
end

function MsgDef.GangRankingInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.score);
	sm:writeInt32(self.bossNum);
	sm:writeInt32(self.warWinTimes);
	sm:writeString(self.gangName);
	return self
end

function MsgDef.GangRankingInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.score = sm:readInt32();
	self.bossNum = sm:readInt32();
	self.warWinTimes = sm:readInt32();
	self.gangName = sm:readString();
	return self
end

function MsgDef.GangRankingInfo:opcode()
	return "GangRankingInfo"
end

--[[ 帮派排名玩家--]]
MsgDef.GangRankUserInfo = {}

function MsgDef.GangRankUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.roleLev == nil then msg.roleLev = 0 end --[[(int32) 等级--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 帮派id--]]
	if msg.rankValue == nil then msg.rankValue = 0 end --[[(int32) 排行值--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.mbCount == nil then msg.mbCount = 0 end --[[(int32) 被膜拜次数--]]
	return msg
end

function MsgDef.GangRankUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.roleLev);
	sm:writeString(self.gangName);
	sm:writeInt64(self.gangId);
	sm:writeInt32(self.rankValue);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.mbCount);
	return self
end

function MsgDef.GangRankUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	self.roleLev = sm:readInt32();
	self.gangName = sm:readString();
	self.gangId = sm:readInt64();
	self.rankValue = sm:readInt32();
	self.rank = sm:readInt32();
	self.mbCount = sm:readInt32();
	return self
end

function MsgDef.GangRankUserInfo:opcode()
	return "GangRankUserInfo"
end

--[[ 帮派成员信息--]]
MsgDef.GangUserInfo = {}

function MsgDef.GangUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.roleLev == nil then msg.roleLev = 0 end --[[(int32) 角色等级--]]
	if msg.job == nil then msg.job = 0 end --[[(int32) 职位--]]
	if msg.gx == nil then msg.gx = 0 end --[[(int32) 帮派贡献--]]
	if msg.offLineTime == nil then msg.offLineTime = 0 end --[[(int32) =0表示在线--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.vipLevel == nil then msg.vipLevel = 0 end --[[(int32) Vip等级--]]
	if msg.relation == nil then msg.relation = 0 end --[[(int8) 0:陌生人 1:好友--]]
	return msg
end

function MsgDef.GangUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleLev);
	sm:writeInt32(self.job);
	sm:writeInt32(self.gx);
	sm:writeInt32(self.offLineTime);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.vipLevel);
	sm:writeInt8(self.relation);
	return self
end

function MsgDef.GangUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleLev = sm:readInt32();
	self.job = sm:readInt32();
	self.gx = sm:readInt32();
	self.offLineTime = sm:readInt32();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.vipLevel = sm:readInt32();
	self.relation = sm:readInt8();
	return self
end

function MsgDef.GangUserInfo:opcode()
	return "GangUserInfo"
end

--[[ 头像信息--]]
MsgDef.HeadInfo = {}

function MsgDef.HeadInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.headId == nil then msg.headId = 0 end --[[(int32) 头像id--]]
	if msg.gotTime == nil then msg.gotTime = 0 end --[[(int32) 获取时间--]]
	if msg.isUse == nil then msg.isUse = 0 end --[[(int8) 是否使用--]]
	return msg
end

function MsgDef.HeadInfo:encode(sm)
	sm:writeInt32(self.headId);
	sm:writeInt32(self.gotTime);
	sm:writeInt8(self.isUse);
	return self
end

function MsgDef.HeadInfo:decode(sm)
	self.headId = sm:readInt32();
	self.gotTime = sm:readInt32();
	self.isUse = sm:readInt8();
	return self
end

function MsgDef.HeadInfo:opcode()
	return "HeadInfo"
end

--[[ 爱心记录--]]
MsgDef.HeartRecord = {}

function MsgDef.HeartRecord:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.name == nil then msg.name = "" end --[[(string) 角色名--]]
	if msg.heartSum == nil then msg.heartSum = 0 end --[[(int32) 累计爱心记录--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.HeartRecord:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.name);
	sm:writeInt32(self.heartSum);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.level);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.HeartRecord:decode(sm)
	self.rank = sm:readInt32();
	self.name = sm:readString();
	self.heartSum = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.level = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.HeartRecord:opcode()
	return "HeartRecord"
end

--[[ 幻境镇妖排行榜信息--]]
MsgDef.HjzyRankInfo = {}

function MsgDef.HjzyRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.maxBo == nil then msg.maxBo = 0 end --[[(int32) 最高波数--]]
	if msg.passSec == nil then msg.passSec = 0 end --[[(int32) 通关秒数--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 通关玩家列表--]]
	return msg
end

function MsgDef.HjzyRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.maxBo);
	sm:writeInt32(self.passSec);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.HjzyRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.maxBo = sm:readInt32();
	self.passSec = sm:readInt32();
	self.roleName = sm:readString();
	return self
end

function MsgDef.HjzyRankInfo:opcode()
	return "HjzyRankInfo"
end

--[[ 家园BOSS排行榜信息--]]
MsgDef.HomeBossRankInfo = {}

function MsgDef.HomeBossRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hurtPercent == nil then msg.hurtPercent = 0 end --[[(int32) 伤害百分比--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.HomeBossRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.hurtPercent);
	sm:writeString(self.roleName);
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.HomeBossRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hurtPercent = sm:readInt32();
	self.roleName = sm:readString();
	self.rank = sm:readInt32();
	return self
end

function MsgDef.HomeBossRankInfo:opcode()
	return "HomeBossRankInfo"
end

--[[ 家园信息--]]
MsgDef.HomeInfo = {}

function MsgDef.HomeInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.homeName == nil then msg.homeName = "" end --[[(string) 家园名字--]]
	if msg.houseLev == nil then msg.houseLev = 0 end --[[(int32) 宅邸等级--]]
	if msg.wallLev == nil then msg.wallLev = 0 end --[[(int32) 围墙等级--]]
	if msg.zooLev == nil then msg.zooLev = 0 end --[[(int32) 兽园等级--]]
	if msg.hotSpringLev == nil then msg.hotSpringLev = 0 end --[[(int32) 温泉等级--]]
	if msg.hyssName == nil then msg.hyssName = "" end --[[(string) 护院神兽名字--]]
	if msg.leftHotSpringSec == nil then msg.leftHotSpringSec = 0 end --[[(int32) 剩余温泉秒数--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 拥有玩家id--]]
	return msg
end

function MsgDef.HomeInfo:encode(sm)
	sm:writeString(self.homeName);
	sm:writeInt32(self.houseLev);
	sm:writeInt32(self.wallLev);
	sm:writeInt32(self.zooLev);
	sm:writeInt32(self.hotSpringLev);
	sm:writeString(self.hyssName);
	sm:writeInt32(self.leftHotSpringSec);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.HomeInfo:decode(sm)
	self.homeName = sm:readString();
	self.houseLev = sm:readInt32();
	self.wallLev = sm:readInt32();
	self.zooLev = sm:readInt32();
	self.hotSpringLev = sm:readInt32();
	self.hyssName = sm:readString();
	self.leftHotSpringSec = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.HomeInfo:opcode()
	return "HomeInfo"
end

--[[ 家园拜访项信息--]]
MsgDef.HomeVisitInfo = {}

function MsgDef.HomeVisitInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.roleLev == nil then msg.roleLev = 0 end --[[(int32) 玩家等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 玩家战力--]]
	if msg.qx == nil then msg.qx = 0 end --[[(int8) 1已开始潜修 0未开始潜修--]]
	return msg
end

function MsgDef.HomeVisitInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleLev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.qx);
	return self
end

function MsgDef.HomeVisitInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.roleLev = sm:readInt32();
	self.power = sm:readInt32();
	self.qx = sm:readInt8();
	return self
end

function MsgDef.HomeVisitInfo:opcode()
	return "HomeVisitInfo"
end

--[[ 皇陵boss信息--]]
MsgDef.HuangLingBossInfo = {}

function MsgDef.HuangLingBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属玩家名--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	return msg
end

function MsgDef.HuangLingBossInfo:encode(sm)
	sm:writeInt32(self.curHpPercent);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.HuangLingBossInfo:decode(sm)
	self.curHpPercent = sm:readInt32();
	self.hateRoleName = sm:readString();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.HuangLingBossInfo:opcode()
	return "HuangLingBossInfo"
end

--[[ 皇陵奇遇任务--]]
MsgDef.HuangLingTaskInfo = {}

function MsgDef.HuangLingTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务Id--]]
	if msg.conMap == nil then msg.conMap = {} end --[[(map<int32,int32>) 任务进度 kei->id,value->已击杀或者采集次数--]]
	if msg.special == nil then msg.special = 0 end --[[(int8) 1为特殊任务--]]
	if msg.taskFlag == nil then msg.taskFlag = 0 end --[[(int8) 任务标识1已完成--]]
	if msg.startTime == nil then msg.startTime = 0 end --[[(int32) 任务开始时间--]]
	return msg
end

function MsgDef.HuangLingTaskInfo:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt16(get_map_size(self.conMap))
	for kn,elm in ipairs(self.conMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.special);
	sm:writeInt8(self.taskFlag);
	sm:writeInt32(self.startTime);
	return self
end

function MsgDef.HuangLingTaskInfo:decode(sm)
	self.taskId = sm:readInt32();
	local conMap_size = sm:readInt16()
	for i = 1,conMap_size do
		local kv = sm:readInt32();
		self.conMap[kv] = sm:readInt32();
	end
	self.special = sm:readInt8();
	self.taskFlag = sm:readInt8();
	self.startTime = sm:readInt32();
	return self
end

function MsgDef.HuangLingTaskInfo:opcode()
	return "HuangLingTaskInfo"
end

--[[ 战斗伤害信息--]]
MsgDef.HurtInfo = {}

function MsgDef.HurtInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.setp == nil then msg.setp = 0 end --[[(int8) --]]
	if msg.hurts == nil then msg.hurts = {} end --[[(map<int32,int32>) 飘字,伤害,暴击,闪避等--]]
	if msg.buffs == nil then msg.buffs = {} end --[[(map<int32,int32>) --]]
	return msg
end

function MsgDef.HurtInfo:encode(sm)
	sm:writeInt8(self.setp);
	sm:writeInt16(get_map_size(self.hurts))
	for kn,elm in ipairs(self.hurts) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.buffs))
	for kn,elm in ipairs(self.buffs) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.HurtInfo:decode(sm)
	self.setp = sm:readInt8();
	local hurts_size = sm:readInt16()
	for i = 1,hurts_size do
		local kv = sm:readInt32();
		self.hurts[kv] = sm:readInt32();
	end
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local kv = sm:readInt32();
		self.buffs[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.HurtInfo:opcode()
	return "HurtInfo"
end

--[[ 整形int键值对组--]]
MsgDef.IntGroup = {}

function MsgDef.IntGroup:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 类型--]]
	if msg.value == nil then msg.value = 0 end --[[(int32) 值--]]
	return msg
end

function MsgDef.IntGroup:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.value);
	return self
end

function MsgDef.IntGroup:decode(sm)
	self.type = sm:readInt32();
	self.value = sm:readInt32();
	return self
end

function MsgDef.IntGroup:opcode()
	return "IntGroup"
end

--[[ 邀请码玩家信息--]]
MsgDef.InviteRoleInfo = {}

function MsgDef.InviteRoleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.friendFlag == nil then msg.friendFlag = 0 end --[[(int8) 1:代表成为好友--]]
	if msg.levFlag == nil then msg.levFlag = 0 end --[[(int8) 1:好友达到100级--]]
	if msg.zdmjFlag == nil then msg.zdmjFlag = 0 end --[[(int8) 1:代表完成x次组队秘境--]]
	return msg
end

function MsgDef.InviteRoleInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt8(self.friendFlag);
	sm:writeInt8(self.levFlag);
	sm:writeInt8(self.zdmjFlag);
	return self
end

function MsgDef.InviteRoleInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.friendFlag = sm:readInt8();
	self.levFlag = sm:readInt8();
	self.zdmjFlag = sm:readInt8();
	return self
end

function MsgDef.InviteRoleInfo:opcode()
	return "InviteRoleInfo"
end

--[[ 道具信息--]]
MsgDef.ItemInfo = {}

function MsgDef.ItemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 背包索引--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 数量--]]
	if msg.propMap == nil then msg.propMap = {} end --[[(map<int32,int32>) 属性字典 --> [key:属性id,value:属性值]--]]
	if msg.updateNum == nil then msg.updateNum = 0 end --[[(int32) 此次更新数量--]]
	if msg.bind == nil then msg.bind = 0 end --[[(int8) 1绑定,0不绑定--]]
	if msg.colorAttris == nil then msg.colorAttris = {} end --[[(array<IntGroup>) 极品属性列表--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 道具等级--]]
	if msg.exp == nil then msg.exp = 0 end --[[(int32) 道具经验--]]
	return msg
end

function MsgDef.ItemInfo:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	sm:writeInt16(get_map_size(self.propMap))
	for kn,elm in ipairs(self.propMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.updateNum);
	sm:writeInt8(self.bind);
	sm:writeInt16(#self.colorAttris)
	for i,elm in ipairs(self.colorAttris) do
		elm:encode(sm)
	end
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	return self
end

function MsgDef.ItemInfo:decode(sm)
	self.index = sm:readInt32();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	local propMap_size = sm:readInt16()
	for i = 1,propMap_size do
		local kv = sm:readInt32();
		self.propMap[kv] = sm:readInt32();
	end
	self.updateNum = sm:readInt32();
	self.bind = sm:readInt8();
	local colorAttris_size = sm:readInt16()
	for i = 1,colorAttris_size do
		local element = MsgDef.IntGroup:create():decode(sm)
		table.insert(self.colorAttris, element)
	end
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	return self
end

function MsgDef.ItemInfo:opcode()
	return "ItemInfo"
end

--[[ 季后赛对决信息--]]
MsgDef.JhsVsInfo = {}

function MsgDef.JhsVsInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.round == nil then msg.round = 0 end --[[(int32) 回合--]]
	if msg.aName == nil then msg.aName = "" end --[[(string) a队伍名字--]]
	if msg.bName == nil then msg.bName = "" end --[[(string) b队伍名字--]]
	if msg.aTeamId == nil then msg.aTeamId = 0 end --[[(int32) a队伍id--]]
	if msg.bTeamId == nil then msg.bTeamId = 0 end --[[(int32) b队伍id--]]
	if msg.winTeamId == nil then msg.winTeamId = 0 end --[[(int32) 赢得队伍id--]]
	if msg.aCaptainRoleId == nil then msg.aCaptainRoleId = 0 end --[[(int64) a队伍队长id--]]
	if msg.bCaptainRoleId == nil then msg.bCaptainRoleId = 0 end --[[(int64) b队伍队长id--]]
	return msg
end

function MsgDef.JhsVsInfo:encode(sm)
	sm:writeInt32(self.round);
	sm:writeString(self.aName);
	sm:writeString(self.bName);
	sm:writeInt32(self.aTeamId);
	sm:writeInt32(self.bTeamId);
	sm:writeInt32(self.winTeamId);
	sm:writeInt64(self.aCaptainRoleId);
	sm:writeInt64(self.bCaptainRoleId);
	return self
end

function MsgDef.JhsVsInfo:decode(sm)
	self.round = sm:readInt32();
	self.aName = sm:readString();
	self.bName = sm:readString();
	self.aTeamId = sm:readInt32();
	self.bTeamId = sm:readInt32();
	self.winTeamId = sm:readInt32();
	self.aCaptainRoleId = sm:readInt64();
	self.bCaptainRoleId = sm:readInt64();
	return self
end

function MsgDef.JhsVsInfo:opcode()
	return "JhsVsInfo"
end

--[[ 剑神殿Boss信息--]]
MsgDef.JsdBossInfo = {}

function MsgDef.JsdBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.leftRefTime == nil then msg.leftRefTime = 0 end --[[(int32) 刷新倒计时--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属玩家名--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.JsdBossInfo:encode(sm)
	sm:writeInt32(self.leftRefTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.JsdBossInfo:decode(sm)
	self.leftRefTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.JsdBossInfo:opcode()
	return "JsdBossInfo"
end

--[[ 剑神守护排行榜信息--]]
MsgDef.JsshRankInfo = {}

function MsgDef.JsshRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.maxBo == nil then msg.maxBo = 0 end --[[(int32) 最高波数--]]
	if msg.passSec == nil then msg.passSec = 0 end --[[(int32) 通关秒数--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名字--]]
	return msg
end

function MsgDef.JsshRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.roleName);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.maxBo);
	sm:writeInt32(self.passSec);
	sm:writeString(self.gangName);
	return self
end

function MsgDef.JsshRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.roleName = sm:readString();
	self.roleId = sm:readInt64();
	self.maxBo = sm:readInt32();
	self.passSec = sm:readInt32();
	self.gangName = sm:readString();
	return self
end

function MsgDef.JsshRankInfo:opcode()
	return "JsshRankInfo"
end

--[[ 跳跃信息--]]
MsgDef.JumpInfo = {}

function MsgDef.JumpInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.jumpType == nil then msg.jumpType = 0 end --[[(int32) 跳跃表现类型--]]
	if msg.jumpPos == nil then msg.jumpPos = {} end --[[(array<Position>) 跳跃点--]]
	return msg
end

function MsgDef.JumpInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.jumpType);
	sm:writeInt16(#self.jumpPos)
	for i,elm in ipairs(self.jumpPos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.JumpInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.jumpType = sm:readInt32();
	local jumpPos_size = sm:readInt16()
	for i = 1,jumpPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.jumpPos, element)
	end
	return self
end

function MsgDef.JumpInfo:opcode()
	return "JumpInfo"
end

--[[ 击杀记录信息--]]
MsgDef.KillRecordInfo = {}

function MsgDef.KillRecordInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.lastKillTime == nil then msg.lastKillTime = 0 end --[[(int32) 击杀时间--]]
	return msg
end

function MsgDef.KillRecordInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.lastKillTime);
	return self
end

function MsgDef.KillRecordInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.lastKillTime = sm:readInt32();
	return self
end

function MsgDef.KillRecordInfo:opcode()
	return "KillRecordInfo"
end

--[[ 腊八消费排行信息--]]
MsgDef.LabaConsumptionRankInfo = {}

function MsgDef.LabaConsumptionRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.money == nil then msg.money = 0 end --[[(int32) 积分--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int8) 性别--]]
	return msg
end

function MsgDef.LabaConsumptionRankInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.roleName);
	sm:writeInt32(self.money);
	sm:writeInt8(self.sex);
	return self
end

function MsgDef.LabaConsumptionRankInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.roleName = sm:readString();
	self.money = sm:readInt32();
	self.sex = sm:readInt8();
	return self
end

function MsgDef.LabaConsumptionRankInfo:opcode()
	return "LabaConsumptionRankInfo"
end

--[[ 登录奖励领取状态信息--]]
MsgDef.LoginAwardInfo = {}

function MsgDef.LoginAwardInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	if msg.time == nil then msg.time = 0 end --[[(int32) 对应天时间戳--]]
	if msg.gotStatus == nil then msg.gotStatus = 0 end --[[(int32) 领取状态0:不可领取 1:已领取 2:错过 3:可领取--]]
	return msg
end

function MsgDef.LoginAwardInfo:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.time);
	sm:writeInt32(self.gotStatus);
	return self
end

function MsgDef.LoginAwardInfo:decode(sm)
	self.cid = sm:readInt32();
	self.time = sm:readInt32();
	self.gotStatus = sm:readInt32();
	return self
end

function MsgDef.LoginAwardInfo:opcode()
	return "LoginAwardInfo"
end

--[[  邮件信息--]]
MsgDef.MailInfo = {}

function MsgDef.MailInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mailId == nil then msg.mailId = 0 end --[[(int64) 邮件id--]]
	if msg.titleStr == nil then msg.titleStr = "" end --[[(string) 标题--]]
	if msg.contentStr == nil then msg.contentStr = "" end --[[(string) 邮件内容--]]
	if msg.mState == nil then msg.mState = 0 end --[[(int32) 状态(已读,未读)--]]
	if msg.lastTime == nil then msg.lastTime = 0 end --[[(int32) 剩余过期时间(秒数)--]]
	if msg.sendRoleId == nil then msg.sendRoleId = 0 end --[[(int64) 发送者roleId--]]
	if msg.items == nil then msg.items = {} end --[[(array<SimpleItemInfo>) 附件--]]
	if msg.mailFrom == nil then msg.mailFrom = "" end --[[(string) 邮件产出--]]
	if msg.createTime == nil then msg.createTime = 0 end --[[(int32) 创建时间--]]
	return msg
end

function MsgDef.MailInfo:encode(sm)
	sm:writeInt64(self.mailId);
	sm:writeString(self.titleStr);
	sm:writeString(self.contentStr);
	sm:writeInt32(self.mState);
	sm:writeInt32(self.lastTime);
	sm:writeInt64(self.sendRoleId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeString(self.mailFrom);
	sm:writeInt32(self.createTime);
	return self
end

function MsgDef.MailInfo:decode(sm)
	self.mailId = sm:readInt64();
	self.titleStr = sm:readString();
	self.contentStr = sm:readString();
	self.mState = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.sendRoleId = sm:readInt64();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mailFrom = sm:readString();
	self.createTime = sm:readInt32();
	return self
end

function MsgDef.MailInfo:opcode()
	return "MailInfo"
end

--[[ 市场物品信息--]]
MsgDef.MarkItemInfo = {}

function MsgDef.MarkItemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 道具拥有者角色id--]]
	if msg.price == nil then msg.price = 0 end --[[(int32) 价格--]]
	if msg.dealTme == nil then msg.dealTme = 0 end --[[(int32) 时间--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 道具数量--]]
	if msg.index == nil then msg.index = 0 end --[[(int64) 物品id索引--]]
	if msg.tradeId == nil then msg.tradeId = 0 end --[[(int32) 交易id,单个商品交易唯一id--]]
	if msg.canGot == nil then msg.canGot = 0 end --[[(int8) 是否可提取 1:可提取 2:已提取--]]
	if msg.srvId == nil then msg.srvId = 0 end --[[(int32) 主服务器id--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 装备战力--]]
	if msg.colorAttris == nil then msg.colorAttris = {} end --[[(array<IntGroup>) 极品属性--]]
	if msg.passSet == nil then msg.passSet = 0 end --[[(int8) 是否有设置密码 1:有密码--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.exp == nil then msg.exp = 0 end --[[(int32) 经验--]]
	if msg.petInfo == nil then msg.petInfo = MsgDef.PetSimpleInfo:create() end --[[(PetSimpleInfo) 宠物简化信息--]]
	return msg
end

function MsgDef.MarkItemInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.price);
	sm:writeInt32(self.dealTme);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	sm:writeInt64(self.index);
	sm:writeInt32(self.tradeId);
	sm:writeInt8(self.canGot);
	sm:writeInt32(self.srvId);
	sm:writeInt32(self.power);
	sm:writeInt16(#self.colorAttris)
	for i,elm in ipairs(self.colorAttris) do
		elm:encode(sm)
	end
	sm:writeInt8(self.passSet);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	self.petInfo:encode(sm)
	return self
end

function MsgDef.MarkItemInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.price = sm:readInt32();
	self.dealTme = sm:readInt32();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	self.index = sm:readInt64();
	self.tradeId = sm:readInt32();
	self.canGot = sm:readInt8();
	self.srvId = sm:readInt32();
	self.power = sm:readInt32();
	local colorAttris_size = sm:readInt16()
	for i = 1,colorAttris_size do
		local element = MsgDef.IntGroup:create():decode(sm)
		table.insert(self.colorAttris, element)
	end
	self.passSet = sm:readInt8();
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	self.petInfo:decode(sm)
	return self
end

function MsgDef.MarkItemInfo:opcode()
	return "MarkItemInfo"
end

--[[ 结婚相关排行信息--]]
MsgDef.MarryRankingInfo = {}

function MsgDef.MarryRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.firstName == nil then msg.firstName = "" end --[[(string) 名1--]]
	if msg.secondName == nil then msg.secondName = "" end --[[(string) 名2--]]
	if msg.value == nil then msg.value = 0 end --[[(int32) 值--]]
	return msg
end

function MsgDef.MarryRankingInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.firstName);
	sm:writeString(self.secondName);
	sm:writeInt32(self.value);
	return self
end

function MsgDef.MarryRankingInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.firstName = sm:readString();
	self.secondName = sm:readString();
	self.value = sm:readInt32();
	return self
end

function MsgDef.MarryRankingInfo:opcode()
	return "MarryRankingInfo"
end

--[[ 魅力温泉礼物记录--]]
MsgDef.MlwqGiftRecord = {}

function MsgDef.MlwqGiftRecord:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.name == nil then msg.name = "" end --[[(string) 玩家名--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.count == nil then msg.count = 0 end --[[(int32) 赠送、收到次数--]]
	return msg
end

function MsgDef.MlwqGiftRecord:encode(sm)
	sm:writeString(self.name);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.MlwqGiftRecord:decode(sm)
	self.name = sm:readString();
	self.roleId = sm:readInt64();
	self.count = sm:readInt32();
	return self
end

function MsgDef.MlwqGiftRecord:opcode()
	return "MlwqGiftRecord"
end

--[[ 魅力温泉排行信息--]]
MsgDef.MlwqRankInfo = {}

function MsgDef.MlwqRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.name == nil then msg.name = "" end --[[(string) 玩家名--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名--]]
	if msg.ml == nil then msg.ml = 0 end --[[(int32) 魅力值--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.MlwqRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.name);
	sm:writeString(self.gangName);
	sm:writeInt32(self.ml);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.MlwqRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.name = sm:readString();
	self.gangName = sm:readString();
	self.ml = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.MlwqRankInfo:opcode()
	return "MlwqRankInfo"
end

--[[ 怪物信息--]]
MsgDef.MonsterInfo = {}

function MsgDef.MonsterInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 怪物唯一id--]]
	if msg.mId == nil then msg.mId = 0 end --[[(int32) 配置Id--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) 属性--]]
	if msg.buffs == nil then msg.buffs = {} end --[[(array<BuffInfo>) 出现带的buffs--]]
	if msg.kind == nil then msg.kind = 0 end --[[(int8) 4:场景道具--]]
	if msg.angle == nil then msg.angle = 0 end --[[(int16) 角度--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	return msg
end

function MsgDef.MonsterInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.mId);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.buffs)
	for i,elm in ipairs(self.buffs) do
		elm:encode(sm)
	end
	sm:writeInt8(self.kind);
	sm:writeInt16(self.angle);
	sm:writeString(self.name);
	return self
end

function MsgDef.MonsterInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.mId = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local element = MsgDef.BuffInfo:create():decode(sm)
		table.insert(self.buffs, element)
	end
	self.kind = sm:readInt8();
	self.angle = sm:readInt16();
	self.name = sm:readString();
	return self
end

function MsgDef.MonsterInfo:opcode()
	return "MonsterInfo"
end

--[[ 跨服城战占领信息--]]
MsgDef.OccupyCityInfo = {}

function MsgDef.OccupyCityInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id(城池)--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 占领宗门--]]
	if msg.gangAdminName == nil then msg.gangAdminName = "" end --[[(string) 占领宗主名--]]
	if msg.occupyDay == nil then msg.occupyDay = 0 end --[[(int32) 占领天数--]]
	if msg.warNum == nil then msg.warNum = 0 end --[[(int32) 宣战数量--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 占领仙盟id--]]
	return msg
end

function MsgDef.OccupyCityInfo:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeString(self.gangName);
	sm:writeString(self.gangAdminName);
	sm:writeInt32(self.occupyDay);
	sm:writeInt32(self.warNum);
	sm:writeInt64(self.gangId);
	return self
end

function MsgDef.OccupyCityInfo:decode(sm)
	self.sceneId = sm:readInt32();
	self.gangName = sm:readString();
	self.gangAdminName = sm:readString();
	self.occupyDay = sm:readInt32();
	self.warNum = sm:readInt32();
	self.gangId = sm:readInt64();
	return self
end

function MsgDef.OccupyCityInfo:opcode()
	return "OccupyCityInfo"
end

--[[ 开服等级排行--]]
MsgDef.OpenLevelRankInfo = {}

function MsgDef.OpenLevelRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.exp == nil then msg.exp = 0 end --[[(int32) 经验值--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	return msg
end

function MsgDef.OpenLevelRankInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.roleName);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp);
	sm:writeInt64(self.power);
	return self
end

function MsgDef.OpenLevelRankInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.roleName = sm:readString();
	self.level = sm:readInt32();
	self.exp = sm:readInt32();
	self.power = sm:readInt64();
	return self
end

function MsgDef.OpenLevelRankInfo:opcode()
	return "OpenLevelRankInfo"
end

--[[ 开服每日进阶排行榜信息--]]
MsgDef.OpenRankInfo = {}

function MsgDef.OpenRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.step == nil then msg.step = 0 end --[[(int32) 阶数--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	return msg
end

function MsgDef.OpenRankInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.roleName);
	sm:writeInt32(self.step);
	sm:writeInt64(self.power);
	return self
end

function MsgDef.OpenRankInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.roleName = sm:readString();
	self.step = sm:readInt32();
	self.power = sm:readInt64();
	return self
end

function MsgDef.OpenRankInfo:opcode()
	return "OpenRankInfo"
end

--[[ 开服任务信息--]]
MsgDef.OpenTaskInfo = {}

function MsgDef.OpenTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务Id--]]
	if msg.process == nil then msg.process = 0 end --[[(int32) 任务进度--]]
	if msg.taskStatus == nil then msg.taskStatus = 0 end --[[(int32) 任务状态 1:未完成 2:已完成未领取 3:已领取--]]
	return msg
end

function MsgDef.OpenTaskInfo:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt32(self.process);
	sm:writeInt32(self.taskStatus);
	return self
end

function MsgDef.OpenTaskInfo:decode(sm)
	self.taskId = sm:readInt32();
	self.process = sm:readInt32();
	self.taskStatus = sm:readInt32();
	return self
end

function MsgDef.OpenTaskInfo:opcode()
	return "OpenTaskInfo"
end

--[[ 异性玩家信息--]]
MsgDef.OppositeSex = {}

function MsgDef.OppositeSex:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 角色名--]]
	if msg.qm == nil then msg.qm = 0 end --[[(int32) 亲密度--]]
	if msg.isFriend == nil then msg.isFriend = 0 end --[[(int8) 是否好友 1:是--]]
	if msg.isBd == nil then msg.isBd = 0 end --[[(int8) 是否爆灯 1:是--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	return msg
end

function MsgDef.OppositeSex:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.name);
	sm:writeInt32(self.qm);
	sm:writeInt8(self.isFriend);
	sm:writeInt8(self.isBd);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.OppositeSex:decode(sm)
	self.roleId = sm:readInt64();
	self.name = sm:readString();
	self.qm = sm:readInt32();
	self.isFriend = sm:readInt8();
	self.isBd = sm:readInt8();
	self.roleIcon = sm:readInt32();
	return self
end

function MsgDef.OppositeSex:opcode()
	return "OppositeSex"
end

--[[ 离线掠夺信息--]]
MsgDef.OutlineRobInfo = {}

function MsgDef.OutlineRobInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 玩家名--]]
	if msg.outlineTime == nil then msg.outlineTime = 0 end --[[(int32) 离线时间(s)--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	if msg.canRob == nil then msg.canRob = 0 end --[[(int8) 1:可抢夺 2:保护中--]]
	if msg.isEnemy == nil then msg.isEnemy = 0 end --[[(int8) 是否仇人 1:是--]]
	return msg
end

function MsgDef.OutlineRobInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.name);
	sm:writeInt32(self.outlineTime);
	sm:writeInt64(self.power);
	sm:writeInt8(self.canRob);
	sm:writeInt8(self.isEnemy);
	return self
end

function MsgDef.OutlineRobInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.name = sm:readString();
	self.outlineTime = sm:readInt32();
	self.power = sm:readInt64();
	self.canRob = sm:readInt8();
	self.isEnemy = sm:readInt8();
	return self
end

function MsgDef.OutlineRobInfo:opcode()
	return "OutlineRobInfo"
end

--[[ 装备部位信息--]]
MsgDef.PartInfo = {}

function MsgDef.PartInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位1~10--]]
	if msg.strenLev == nil then msg.strenLev = 0 end --[[(int32) 强化等级--]]
	if msg.starLev == nil then msg.starLev = 0 end --[[(int32) 升星等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 装备战力--]]
	if msg.gemMap == nil then msg.gemMap = {} end --[[(map<int32,int32>) 宝石map--]]
	if msg.gemPolish == nil then msg.gemPolish = {} end --[[(map<int32,GemAttri>) 宝石属性--]]
	return msg
end

function MsgDef.PartInfo:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt32(self.strenLev);
	sm:writeInt32(self.starLev);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.gemMap))
	for kn,elm in ipairs(self.gemMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gemPolish))
	for kn,elm in ipairs(self.gemPolish) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	return self
end

function MsgDef.PartInfo:decode(sm)
	self.part = sm:readInt8();
	self.strenLev = sm:readInt32();
	self.starLev = sm:readInt32();
	self.power = sm:readInt32();
	local gemMap_size = sm:readInt16()
	for i = 1,gemMap_size do
		local kv = sm:readInt32();
		self.gemMap[kv] = sm:readInt32();
	end
	local gemPolish_size = sm:readInt16()
	for i = 1,gemPolish_size do
		local kev = sm:readInt32(kn);
		self.gemPolish[kev] = MsgDef.GemAttri:create():decode(sm)
	end
	return self
end

function MsgDef.PartInfo:opcode()
	return "PartInfo"
end

--[[ 宠物信息--]]
MsgDef.PetInfo = {}

function MsgDef.PetInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petId == nil then msg.petId = 0 end --[[(int32) 配置id--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 宠物等级--]]
	if msg.name == nil then msg.name = "" end --[[(string) 宠物名字--]]
	if msg.exp == nil then msg.exp = 0 end --[[(int32) 当前经验--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.growValue == nil then msg.growValue = 0 end --[[(int32) 成长值--]]
	if msg.skillDatas == nil then msg.skillDatas = {} end --[[(map<int32,int32>) 技能信息<id,顺序>--]]
	if msg.equipInfos == nil then msg.equipInfos = {} end --[[(array<ItemInfo>) 装备信息--]]
	if msg.petRoleId == nil then msg.petRoleId = 0 end --[[(int32) 宠物roleId--]]
	return msg
end

function MsgDef.PetInfo:encode(sm)
	sm:writeInt32(self.petId);
	sm:writeInt32(self.level);
	sm:writeString(self.name);
	sm:writeInt32(self.exp);
	sm:writeInt32(self.power);
	sm:writeInt32(self.growValue);
	sm:writeInt16(get_map_size(self.skillDatas))
	for kn,elm in ipairs(self.skillDatas) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.equipInfos)
	for i,elm in ipairs(self.equipInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.petRoleId);
	return self
end

function MsgDef.PetInfo:decode(sm)
	self.petId = sm:readInt32();
	self.level = sm:readInt32();
	self.name = sm:readString();
	self.exp = sm:readInt32();
	self.power = sm:readInt32();
	self.growValue = sm:readInt32();
	local skillDatas_size = sm:readInt16()
	for i = 1,skillDatas_size do
		local kv = sm:readInt32();
		self.skillDatas[kv] = sm:readInt32();
	end
	local equipInfos_size = sm:readInt16()
	for i = 1,equipInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equipInfos, element)
	end
	self.petRoleId = sm:readInt32();
	return self
end

function MsgDef.PetInfo:opcode()
	return "PetInfo"
end

--[[ 宠物简单信息--]]
MsgDef.PetSimpleInfo = {}

function MsgDef.PetSimpleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petId == nil then msg.petId = 0 end --[[(int32) 宠物配置id--]]
	if msg.growValue == nil then msg.growValue = 0 end --[[(int32) 宠物成长值--]]
	if msg.name == nil then msg.name = "" end --[[(string) 宠物名--]]
	if msg.skillInfos == nil then msg.skillInfos = {} end --[[(map<int32,int32>) 宠物技能信息--]]
	return msg
end

function MsgDef.PetSimpleInfo:encode(sm)
	sm:writeInt32(self.petId);
	sm:writeInt32(self.growValue);
	sm:writeString(self.name);
	sm:writeInt16(get_map_size(self.skillInfos))
	for kn,elm in ipairs(self.skillInfos) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.PetSimpleInfo:decode(sm)
	self.petId = sm:readInt32();
	self.growValue = sm:readInt32();
	self.name = sm:readString();
	local skillInfos_size = sm:readInt16()
	for i = 1,skillInfos_size do
		local kv = sm:readInt32();
		self.skillInfos[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.PetSimpleInfo:opcode()
	return "PetSimpleInfo"
end

--[[ 位置信息--]]
MsgDef.Position = {}

function MsgDef.Position:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	return msg
end

function MsgDef.Position:encode(sm)
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	return self
end

function MsgDef.Position:decode(sm)
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	return self
end

function MsgDef.Position:opcode()
	return "Position"
end

--[[ 排位赛单人排行榜对象--]]
MsgDef.PW1v1RankInfo = {}

function MsgDef.PW1v1RankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.pwLev == nil then msg.pwLev = 0 end --[[(int32) 排位等级(可算出段位)--]]
	return msg
end

function MsgDef.PW1v1RankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.power);
	sm:writeString(self.gangName);
	sm:writeString(self.roleName);
	sm:writeInt32(self.pwLev);
	return self
end

function MsgDef.PW1v1RankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.rank = sm:readInt32();
	self.power = sm:readInt32();
	self.gangName = sm:readString();
	self.roleName = sm:readString();
	self.pwLev = sm:readInt32();
	return self
end

function MsgDef.PW1v1RankInfo:opcode()
	return "PW1v1RankInfo"
end

--[[ 排位赛血量信息--]]
MsgDef.PwsHpInfo = {}

function MsgDef.PwsHpInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hp == nil then msg.hp = 0 end --[[(int32) 当前血量--]]
	if msg.hpMax == nil then msg.hpMax = 0 end --[[(int32) 最大血--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	return msg
end

function MsgDef.PwsHpInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.hp);
	sm:writeInt32(self.hpMax);
	sm:writeInt32(self.roleIcon);
	sm:writeString(self.roleName);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.lev);
	return self
end

function MsgDef.PwsHpInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hp = sm:readInt32();
	self.hpMax = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.roleName = sm:readString();
	self.teamId = sm:readInt32();
	self.lev = sm:readInt32();
	return self
end

function MsgDef.PwsHpInfo:opcode()
	return "PwsHpInfo"
end

--[[ 排位赛玩家信息--]]
MsgDef.PwsRoleInfo = {}

function MsgDef.PwsRoleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	if msg.icon == nil then msg.icon = 0 end --[[(int32) 头像--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	return msg
end

function MsgDef.PwsRoleInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.icon);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.PwsRoleInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.lev = sm:readInt32();
	self.icon = sm:readInt32();
	self.power = sm:readInt32();
	return self
end

function MsgDef.PwsRoleInfo:opcode()
	return "PwsRoleInfo"
end

--[[ 排位赛押注信息--]]
MsgDef.PwsStakeInfo = {}

function MsgDef.PwsStakeInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.agentServerId == nil then msg.agentServerId = 0 end --[[(int32) 服务器id--]]
	if msg.stakeValue == nil then msg.stakeValue = 0 end --[[(int32) 总押注--]]
	if msg.myStake == nil then msg.myStake = 0 end --[[(int32) 我的押注--]]
	if msg.awardSign == nil then msg.awardSign = 0 end --[[(int8) 1:已领取--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	return msg
end

function MsgDef.PwsStakeInfo:encode(sm)
	sm:writeInt32(self.agentServerId);
	sm:writeInt32(self.stakeValue);
	sm:writeInt32(self.myStake);
	sm:writeInt8(self.awardSign);
	sm:writeInt32(self.teamId);
	sm:writeString(self.teamName);
	return self
end

function MsgDef.PwsStakeInfo:decode(sm)
	self.agentServerId = sm:readInt32();
	self.stakeValue = sm:readInt32();
	self.myStake = sm:readInt32();
	self.awardSign = sm:readInt8();
	self.teamId = sm:readInt32();
	self.teamName = sm:readString();
	return self
end

function MsgDef.PwsStakeInfo:opcode()
	return "PwsStakeInfo"
end

--[[ 排位赛申请信息--]]
MsgDef.PwsTeamApplyInfo = {}

function MsgDef.PwsTeamApplyInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	return msg
end

function MsgDef.PwsTeamApplyInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.PwsTeamApplyInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end

function MsgDef.PwsTeamApplyInfo:opcode()
	return "PwsTeamApplyInfo"
end

--[[ 排位赛战队信息--]]
MsgDef.PwsTeamInfo = {}

function MsgDef.PwsTeamInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.captainRoleId == nil then msg.captainRoleId = 0 end --[[(int64) 队长角色id--]]
	if msg.captainName == nil then msg.captainName = "" end --[[(string) 队长名字--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	if msg.icon == nil then msg.icon = 0 end --[[(int32) 图标--]]
	if msg.pwLev == nil then msg.pwLev = 0 end --[[(int32) 排位等级--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.apply == nil then msg.apply = 0 end --[[(int8) 1:已申请 0:未申请--]]
	if msg.memberCount == nil then msg.memberCount = 0 end --[[(int8) 成员数量--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 队伍总战力--]]
	return msg
end

function MsgDef.PwsTeamInfo:encode(sm)
	sm:writeInt64(self.captainRoleId);
	sm:writeString(self.captainName);
	sm:writeString(self.teamName);
	sm:writeInt32(self.icon);
	sm:writeInt32(self.pwLev);
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.apply);
	sm:writeInt8(self.memberCount);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.PwsTeamInfo:decode(sm)
	self.captainRoleId = sm:readInt64();
	self.captainName = sm:readString();
	self.teamName = sm:readString();
	self.icon = sm:readInt32();
	self.pwLev = sm:readInt32();
	self.teamId = sm:readInt32();
	self.apply = sm:readInt8();
	self.memberCount = sm:readInt8();
	self.power = sm:readInt32();
	return self
end

function MsgDef.PwsTeamInfo:opcode()
	return "PwsTeamInfo"
end

--[[ 排位赛战队成员信息--]]
MsgDef.PwsTeamMemInfo = {}

function MsgDef.PwsTeamMemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.skinMap == nil then msg.skinMap = {} end --[[(map<int32,int32>) 外观--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int8) 性别--]]
	if msg.ready == nil then msg.ready = 0 end --[[(int8) 1:已准备 0:未准备--]]
	return msg
end

function MsgDef.PwsTeamMemInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.level);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.sex);
	sm:writeInt8(self.ready);
	return self
end

function MsgDef.PwsTeamMemInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.level = sm:readInt32();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.sex = sm:readInt8();
	self.ready = sm:readInt8();
	return self
end

function MsgDef.PwsTeamMemInfo:opcode()
	return "PwsTeamMemInfo"
end

--[[ 排位赛队伍排行榜对象--]]
MsgDef.PwsTeamRankInfo = {}

function MsgDef.PwsTeamRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.pwLev == nil then msg.pwLev = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 总战力--]]
	if msg.captainName == nil then msg.captainName = "" end --[[(string) 队长名字--]]
	if msg.captainRoleId == nil then msg.captainRoleId = 0 end --[[(int64) 队长id--]]
	return msg
end

function MsgDef.PwsTeamRankInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeString(self.teamName);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.pwLev);
	sm:writeInt32(self.power);
	sm:writeString(self.captainName);
	sm:writeInt64(self.captainRoleId);
	return self
end

function MsgDef.PwsTeamRankInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.teamName = sm:readString();
	self.rank = sm:readInt32();
	self.pwLev = sm:readInt32();
	self.power = sm:readInt32();
	self.captainName = sm:readString();
	self.captainRoleId = sm:readInt64();
	return self
end

function MsgDef.PwsTeamRankInfo:opcode()
	return "PwsTeamRankInfo"
end

--[[ 培元集气Boss数据--]]
MsgDef.PYJQBossInfo = {}

function MsgDef.PYJQBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.bossInfo == nil then msg.bossInfo = {} end --[[(array<BossInfo>) boss信息--]]
	return msg
end

function MsgDef.PYJQBossInfo:encode(sm)
	sm:writeInt16(#self.bossInfo)
	for i,elm in ipairs(self.bossInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.PYJQBossInfo:decode(sm)
	local bossInfo_size = sm:readInt16()
	for i = 1,bossInfo_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfo, element)
	end
	return self
end

function MsgDef.PYJQBossInfo:opcode()
	return "PYJQBossInfo"
end

--[[ 情缘排行榜对象--]]
MsgDef.QingYuanRankInfo = {}

function MsgDef.QingYuanRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.manName == nil then msg.manName = "" end --[[(string) 男士名称--]]
	if msg.ladyName == nil then msg.ladyName = "" end --[[(string) 女士名称--]]
	if msg.manRoleId == nil then msg.manRoleId = 0 end --[[(int64) 男士角色id--]]
	if msg.ladyRoleId == nil then msg.ladyRoleId = 0 end --[[(int64) 女士角色id--]]
	if msg.maxBo == nil then msg.maxBo = 0 end --[[(int32) 最高波数--]]
	if msg.passSec == nil then msg.passSec = 0 end --[[(int32) 通关秒数--]]
	return msg
end

function MsgDef.QingYuanRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.manName);
	sm:writeString(self.ladyName);
	sm:writeInt64(self.manRoleId);
	sm:writeInt64(self.ladyRoleId);
	sm:writeInt32(self.maxBo);
	sm:writeInt32(self.passSec);
	return self
end

function MsgDef.QingYuanRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.manName = sm:readString();
	self.ladyName = sm:readString();
	self.manRoleId = sm:readInt64();
	self.ladyRoleId = sm:readInt64();
	self.maxBo = sm:readInt32();
	self.passSec = sm:readInt32();
	return self
end

function MsgDef.QingYuanRankInfo:opcode()
	return "QingYuanRankInfo"
end

--[[ 排行榜玩家信息--]]
MsgDef.RankingUserInfo = {}

function MsgDef.RankingUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.rankingValue == nil then msg.rankingValue = 0 end --[[(int32) 排行榜值--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.rankType == nil then msg.rankType = 0 end --[[(int32) 排行榜类型--]]
	if msg.dzCount == nil then msg.dzCount = 0 end --[[(int32) 被点赞次数--]]
	if msg.skinMap == nil then msg.skinMap = {} end --[[(map<int32,int32>) 皮肤模型--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int8) 性别--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.myDz == nil then msg.myDz = 0 end --[[(int8) 1自己对该玩家的点赞过--]]
	if msg.extInt01 == nil then msg.extInt01 = 0 end --[[(int32) 额外参数--]]
	return msg
end

function MsgDef.RankingUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.rankingValue);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.rankType);
	sm:writeInt32(self.dzCount);
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.sex);
	sm:writeString(self.gangName);
	sm:writeInt8(self.myDz);
	sm:writeInt32(self.extInt01);
	return self
end

function MsgDef.RankingUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.rankingValue = sm:readInt32();
	self.rank = sm:readInt32();
	self.rankType = sm:readInt32();
	self.dzCount = sm:readInt32();
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.sex = sm:readInt8();
	self.gangName = sm:readString();
	self.myDz = sm:readInt8();
	self.extInt01 = sm:readInt32();
	return self
end

function MsgDef.RankingUserInfo:opcode()
	return "RankingUserInfo"
end

--[[ 红包信息--]]
MsgDef.RedBagInfo = {}

function MsgDef.RedBagInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBagId == nil then msg.redBagId = 0 end --[[(int64) 红包id--]]
	if msg.redBagMid == nil then msg.redBagMid = 0 end --[[(int32) 红包道具id--]]
	if msg.redBagStatus == nil then msg.redBagStatus = 0 end --[[(int8) 红包状态 0:不可抢 1:可抢--]]
	if msg.createTime == nil then msg.createTime = 0 end --[[(int32) 红包创建时间--]]
	if msg.icon == nil then msg.icon = 0 end --[[(int32) 发送玩家头像--]]
	if msg.name == nil then msg.name = "" end --[[(string) 发送玩家名字--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 发送玩家等级--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.RedBagInfo:encode(sm)
	sm:writeInt64(self.redBagId);
	sm:writeInt32(self.redBagMid);
	sm:writeInt8(self.redBagStatus);
	sm:writeInt32(self.createTime);
	sm:writeInt32(self.icon);
	sm:writeString(self.name);
	sm:writeInt32(self.level);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.RedBagInfo:decode(sm)
	self.redBagId = sm:readInt64();
	self.redBagMid = sm:readInt32();
	self.redBagStatus = sm:readInt8();
	self.createTime = sm:readInt32();
	self.icon = sm:readInt32();
	self.name = sm:readString();
	self.level = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.RedBagInfo:opcode()
	return "RedBagInfo"
end

--[[ 抢红包记录--]]
MsgDef.RedBagRecord = {}

function MsgDef.RedBagRecord:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBagId == nil then msg.redBagId = 0 end --[[(int64) 红包id--]]
	if msg.gotTime == nil then msg.gotTime = 0 end --[[(int32) 抢红包时间--]]
	if msg.money == nil then msg.money = 0 end --[[(int32) 抢到的金额--]]
	if msg.icon == nil then msg.icon = 0 end --[[(int32) 玩家头像--]]
	if msg.name == nil then msg.name = "" end --[[(string) 玩家名字--]]
	if msg.playerLevel == nil then msg.playerLevel = 0 end --[[(int32) 玩家等级--]]
	if msg.isBest == nil then msg.isBest = 0 end --[[(int8) 是否手气最佳 1:最佳--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.RedBagRecord:encode(sm)
	sm:writeInt64(self.redBagId);
	sm:writeInt32(self.gotTime);
	sm:writeInt32(self.money);
	sm:writeInt32(self.icon);
	sm:writeString(self.name);
	sm:writeInt32(self.playerLevel);
	sm:writeInt8(self.isBest);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.RedBagRecord:decode(sm)
	self.redBagId = sm:readInt64();
	self.gotTime = sm:readInt32();
	self.money = sm:readInt32();
	self.icon = sm:readInt32();
	self.name = sm:readString();
	self.playerLevel = sm:readInt32();
	self.isBest = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.RedBagRecord:opcode()
	return "RedBagRecord"
end

--[[ 资源找回信息--]]
MsgDef.ResourceRecoveryInfo = {}

function MsgDef.ResourceRecoveryInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.resourceType == nil then msg.resourceType = 0 end --[[(int32) 资源类型--]]
	if msg.notFinishCount == nil then msg.notFinishCount = 0 end --[[(int32) 昨日未完成数量--]]
	if msg.itemInfos == nil then msg.itemInfos = {} end --[[(array<SimpleItemInfo>) 可以获得道具信息--]]
	if msg.resourceId == nil then msg.resourceId = 0 end --[[(int32) 资源类型id--]]
	return msg
end

function MsgDef.ResourceRecoveryInfo:encode(sm)
	sm:writeInt32(self.resourceType);
	sm:writeInt32(self.notFinishCount);
	sm:writeInt16(#self.itemInfos)
	for i,elm in ipairs(self.itemInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.resourceId);
	return self
end

function MsgDef.ResourceRecoveryInfo:decode(sm)
	self.resourceType = sm:readInt32();
	self.notFinishCount = sm:readInt32();
	local itemInfos_size = sm:readInt16()
	for i = 1,itemInfos_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.itemInfos, element)
	end
	self.resourceId = sm:readInt32();
	return self
end

function MsgDef.ResourceRecoveryInfo:opcode()
	return "ResourceRecoveryInfo"
end

--[[ 掉落道具(周围可见)--]]
MsgDef.RoundDropItem = {}

function MsgDef.RoundDropItem:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cx == nil then msg.cx = 0 end --[[(int16) 掉落坐标--]]
	if msg.cy == nil then msg.cy = 0 end --[[(int16) 掉落坐标--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 数量--]]
	return msg
end

function MsgDef.RoundDropItem:encode(sm)
	sm:writeInt16(self.cx);
	sm:writeInt16(self.cy);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.RoundDropItem:decode(sm)
	self.cx = sm:readInt16();
	self.cy = sm:readInt16();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.RoundDropItem:opcode()
	return "RoundDropItem"
end

--[[ 场景物件--]]
MsgDef.SceneThing = {}

function MsgDef.SceneThing:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	if msg.kind == nil then msg.kind = 0 end --[[(int32) --]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	if msg.posX == nil then msg.posX = 0 end --[[(int32) --]]
	if msg.posY == nil then msg.posY = 0 end --[[(int32) --]]
	if msg.props == nil then msg.props = {} end --[[(map<int32,int32>) --]]
	return msg
end

function MsgDef.SceneThing:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.kind);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.posX);
	sm:writeInt32(self.posY);
	sm:writeInt16(get_map_size(self.props))
	for kn,elm in ipairs(self.props) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.SceneThing:decode(sm)
	self.roleId = sm:readInt64();
	self.kind = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.posX = sm:readInt32();
	self.posY = sm:readInt32();
	local props_size = sm:readInt16()
	for i = 1,props_size do
		local kv = sm:readInt32();
		self.props[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.SceneThing:opcode()
	return "SceneThing"
end

--[[ 积分排名信息--]]
MsgDef.ScoreRaningInfo = {}

function MsgDef.ScoreRaningInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	return msg
end

function MsgDef.ScoreRaningInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.roleName);
	sm:writeInt32(self.score);
	return self
end

function MsgDef.ScoreRaningInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.roleName = sm:readString();
	self.score = sm:readInt32();
	return self
end

function MsgDef.ScoreRaningInfo:opcode()
	return "ScoreRaningInfo"
end

--[[ 掉落道具(自己可见)--]]
MsgDef.SelfDropItem = {}

function MsgDef.SelfDropItem:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sx == nil then msg.sx = 0 end --[[(int16) 源坐标,怪物坐标--]]
	if msg.sy == nil then msg.sy = 0 end --[[(int16) 源坐标,怪物坐标--]]
	if msg.cx == nil then msg.cx = 0 end --[[(int16) 掉落坐标--]]
	if msg.cy == nil then msg.cy = 0 end --[[(int16) 掉落坐标--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 数量--]]
	return msg
end

function MsgDef.SelfDropItem:encode(sm)
	sm:writeInt16(self.sx);
	sm:writeInt16(self.sy);
	sm:writeInt16(self.cx);
	sm:writeInt16(self.cy);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.SelfDropItem:decode(sm)
	self.sx = sm:readInt16();
	self.sy = sm:readInt16();
	self.cx = sm:readInt16();
	self.cy = sm:readInt16();
	self.mid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.SelfDropItem:opcode()
	return "SelfDropItem"
end

--[[ 简单道具信息--]]
MsgDef.SimpleItemInfo = {}

function MsgDef.SimpleItemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 位置--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 数量--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具id--]]
	if msg.bind == nil then msg.bind = 0 end --[[(int8) 1绑定0不绑定--]]
	if msg.colorStarNum == nil then msg.colorStarNum = 0 end --[[(int32) 最高极品属性条数--]]
	return msg
end

function MsgDef.SimpleItemInfo:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt32(self.amount);
	sm:writeInt32(self.mid);
	sm:writeInt8(self.bind);
	sm:writeInt32(self.colorStarNum);
	return self
end

function MsgDef.SimpleItemInfo:decode(sm)
	self.index = sm:readInt32();
	self.amount = sm:readInt32();
	self.mid = sm:readInt32();
	self.bind = sm:readInt8();
	self.colorStarNum = sm:readInt32();
	return self
end

function MsgDef.SimpleItemInfo:opcode()
	return "SimpleItemInfo"
end

--[[ 简单的玩家信息--]]
MsgDef.SimpleRoleInfo = {}

function MsgDef.SimpleRoleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.power == nil then msg.power = 0 end --[[(int64) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	return msg
end

function MsgDef.SimpleRoleInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt64(self.power);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.SimpleRoleInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt64();
	self.roleIcon = sm:readInt32();
	return self
end

function MsgDef.SimpleRoleInfo:opcode()
	return "SimpleRoleInfo"
end

--[[ 三界争霸宝箱信息--]]
MsgDef.SjzbBoxGridInfo = {}

function MsgDef.SjzbBoxGridInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gridId == nil then msg.gridId = 0 end --[[(int32) 格子id--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) pox--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) pox--]]
	if msg.triggerAppear == nil then msg.triggerAppear = 0 end --[[(int8) 1:触发过  0:未触发--]]
	if msg.mId == nil then msg.mId = 0 end --[[(int32) 宝箱配置id--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.open == nil then msg.open = 0 end --[[(int8) 1:已开启--]]
	return msg
end

function MsgDef.SjzbBoxGridInfo:encode(sm)
	sm:writeInt32(self.gridId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt8(self.triggerAppear);
	sm:writeInt32(self.mId);
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.open);
	return self
end

function MsgDef.SjzbBoxGridInfo:decode(sm)
	self.gridId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.triggerAppear = sm:readInt8();
	self.mId = sm:readInt32();
	self.roleId = sm:readInt64();
	self.open = sm:readInt8();
	return self
end

function MsgDef.SjzbBoxGridInfo:opcode()
	return "SjzbBoxGridInfo"
end

--[[ 三界争霸寻宝任务--]]
MsgDef.SjzbBoxTaskInfo = {}

function MsgDef.SjzbBoxTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	if msg.curCount == nil then msg.curCount = 0 end --[[(int32) 当前完成次数--]]
	if msg.taskState == nil then msg.taskState = 0 end --[[(int8) 1:已接受--]]
	return msg
end

function MsgDef.SjzbBoxTaskInfo:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt32(self.curCount);
	sm:writeInt8(self.taskState);
	return self
end

function MsgDef.SjzbBoxTaskInfo:decode(sm)
	self.taskId = sm:readInt32();
	self.curCount = sm:readInt32();
	self.taskState = sm:readInt8();
	return self
end

function MsgDef.SjzbBoxTaskInfo:opcode()
	return "SjzbBoxTaskInfo"
end

--[[ 三界争霸镖车任务--]]
MsgDef.SjzbCardTaskInfo = {}

function MsgDef.SjzbCardTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.curHp == nil then msg.curHp = 0 end --[[(int32) 当前血--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) 镖车当前x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) 镖车当前y坐标--]]
	if msg.taskId == nil then msg.taskId = 0 end --[[(int64) 任务id--]]
	if msg.cardId == nil then msg.cardId = 0 end --[[(int32) 镖车id--]]
	if msg.curCount == nil then msg.curCount = 0 end --[[(int32) curCount--]]
	if msg.taskState == nil then msg.taskState = 0 end --[[(int8) 1:已接受--]]
	if msg.maxHp == nil then msg.maxHp = 0 end --[[(int32) 最大血--]]
	return msg
end

function MsgDef.SjzbCardTaskInfo:encode(sm)
	sm:writeInt32(self.curHp);
	sm:writeInt32(self.monsterId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt64(self.taskId);
	sm:writeInt32(self.cardId);
	sm:writeInt32(self.curCount);
	sm:writeInt8(self.taskState);
	sm:writeInt32(self.maxHp);
	return self
end

function MsgDef.SjzbCardTaskInfo:decode(sm)
	self.curHp = sm:readInt32();
	self.monsterId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.taskId = sm:readInt64();
	self.cardId = sm:readInt32();
	self.curCount = sm:readInt32();
	self.taskState = sm:readInt8();
	self.maxHp = sm:readInt32();
	return self
end

function MsgDef.SjzbCardTaskInfo:opcode()
	return "SjzbCardTaskInfo"
end

--[[ 三界争霸日常任务--]]
MsgDef.SjzbDailyTaskInfo = {}

function MsgDef.SjzbDailyTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.progress == nil then msg.progress = {} end --[[(map<int32,int32>) 进度map key-> 怪物id value->当前次数--]]
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 对应的配置id--]]
	if msg.curCount == nil then msg.curCount = 0 end --[[(int32) 该类型任务已完成次数--]]
	if msg.taskState == nil then msg.taskState = 0 end --[[(int8) 1:已接受 --]]
	if msg.monsterStates == nil then msg.monsterStates = {} end --[[(map<int32,int32>) 怪物状态0:未刷新,1:已刷新,2已死亡--]]
	if msg.curRefreshBossStep == nil then msg.curRefreshBossStep = 0 end --[[(int32) boss刷新阶段0:一个都没刷,1:刷了第一只,2:刷了第二只--]]
	if msg.nextRefreshBossLeftTime == nil then msg.nextRefreshBossLeftTime = 0 end --[[(int32) 下次boss刷新倒计时--]]
	return msg
end

function MsgDef.SjzbDailyTaskInfo:encode(sm)
	sm:writeInt16(get_map_size(self.progress))
	for kn,elm in ipairs(self.progress) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.taskId);
	sm:writeInt32(self.mid);
	sm:writeInt32(self.curCount);
	sm:writeInt8(self.taskState);
	sm:writeInt16(get_map_size(self.monsterStates))
	for kn,elm in ipairs(self.monsterStates) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curRefreshBossStep);
	sm:writeInt32(self.nextRefreshBossLeftTime);
	return self
end

function MsgDef.SjzbDailyTaskInfo:decode(sm)
	local progress_size = sm:readInt16()
	for i = 1,progress_size do
		local kv = sm:readInt32();
		self.progress[kv] = sm:readInt32();
	end
	self.taskId = sm:readInt32();
	self.mid = sm:readInt32();
	self.curCount = sm:readInt32();
	self.taskState = sm:readInt8();
	local monsterStates_size = sm:readInt16()
	for i = 1,monsterStates_size do
		local kv = sm:readInt32();
		self.monsterStates[kv] = sm:readInt32();
	end
	self.curRefreshBossStep = sm:readInt32();
	self.nextRefreshBossLeftTime = sm:readInt32();
	return self
end

function MsgDef.SjzbDailyTaskInfo:opcode()
	return "SjzbDailyTaskInfo"
end

--[[ 技能信息--]]
MsgDef.SkillInfo = {}

function MsgDef.SkillInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	if msg.skillLevel == nil then msg.skillLevel = 0 end --[[(int32) 技能等级--]]
	return msg
end

function MsgDef.SkillInfo:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.skillLevel);
	return self
end

function MsgDef.SkillInfo:decode(sm)
	self.skillId = sm:readInt32();
	self.skillLevel = sm:readInt32();
	return self
end

function MsgDef.SkillInfo:opcode()
	return "SkillInfo"
end

--[[ 皮肤信息--]]
MsgDef.SkinInfo = {}

function MsgDef.SkinInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤配置id--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	if msg.changeNameCount == nil then msg.changeNameCount = 0 end --[[(int32) 改名次数--]]
	if msg.sign == nil then msg.sign = 0 end --[[(int8) 1可领取2已领取--]]
	return msg
end

function MsgDef.SkinInfo:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeString(self.name);
	sm:writeInt32(self.changeNameCount);
	sm:writeInt8(self.sign);
	return self
end

function MsgDef.SkinInfo:decode(sm)
	self.skinId = sm:readInt32();
	self.name = sm:readString();
	self.changeNameCount = sm:readInt32();
	self.sign = sm:readInt8();
	return self
end

function MsgDef.SkinInfo:opcode()
	return "SkinInfo"
end

--[[ 雪人排行榜信息--]]
MsgDef.SnowBattleRankInfo = {}

function MsgDef.SnowBattleRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 个人积分--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	return msg
end

function MsgDef.SnowBattleRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.score);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.SnowBattleRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.rank = sm:readInt32();
	self.score = sm:readInt32();
	self.roleName = sm:readString();
	return self
end

function MsgDef.SnowBattleRankInfo:opcode()
	return "SnowBattleRankInfo"
end

--[[ 雪战BOSS--]]
MsgDef.SnowBossInfo = {}

function MsgDef.SnowBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.SnowBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.SnowBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.SnowBossInfo:opcode()
	return "SnowBossInfo"
end

--[[ 任务信息--]]
MsgDef.TaskInfo = {}

function MsgDef.TaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.taskId == nil then msg.taskId = 0 end --[[(int32) 任务id--]]
	if msg.taskStatu == nil then msg.taskStatu = 0 end --[[(int32) 任务状态0:默认,1已接受,2已完成--]]
	if msg.extMap == nil then msg.extMap = {} end --[[(map<int32,int32>) 进度map,例如收集任务 key->王显草,value->王显草收集数量--]]
	return msg
end

function MsgDef.TaskInfo:encode(sm)
	sm:writeInt32(self.taskId);
	sm:writeInt32(self.taskStatu);
	sm:writeInt16(get_map_size(self.extMap))
	for kn,elm in ipairs(self.extMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.TaskInfo:decode(sm)
	self.taskId = sm:readInt32();
	self.taskStatu = sm:readInt32();
	local extMap_size = sm:readInt16()
	for i = 1,extMap_size do
		local kv = sm:readInt32();
		self.extMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.TaskInfo:opcode()
	return "TaskInfo"
end

--[[ 队伍信息--]]
MsgDef.TeamInfo = {}

function MsgDef.TeamInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.captainRoleId == nil then msg.captainRoleId = 0 end --[[(int64) 队长角色id--]]
	if msg.captainName == nil then msg.captainName = "" end --[[(string) 队长名字--]]
	if msg.captainLev == nil then msg.captainLev = 0 end --[[(int32) 队长等级--]]
	if msg.targetId == nil then msg.targetId = 0 end --[[(int32) 目标id--]]
	if msg.teamMemNum == nil then msg.teamMemNum = 0 end --[[(int32) 队伍人数--]]
	if msg.minLvl == nil then msg.minLvl = 0 end --[[(int32) 最低等级--]]
	if msg.maxLvl == nil then msg.maxLvl = 0 end --[[(int32) 最高等级--]]
	if msg.captainPower == nil then msg.captainPower = 0 end --[[(int32) captainPower--]]
	return msg
end

function MsgDef.TeamInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt64(self.captainRoleId);
	sm:writeString(self.captainName);
	sm:writeInt32(self.captainLev);
	sm:writeInt32(self.targetId);
	sm:writeInt32(self.teamMemNum);
	sm:writeInt32(self.minLvl);
	sm:writeInt32(self.maxLvl);
	sm:writeInt32(self.captainPower);
	return self
end

function MsgDef.TeamInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.captainRoleId = sm:readInt64();
	self.captainName = sm:readString();
	self.captainLev = sm:readInt32();
	self.targetId = sm:readInt32();
	self.teamMemNum = sm:readInt32();
	self.minLvl = sm:readInt32();
	self.maxLvl = sm:readInt32();
	self.captainPower = sm:readInt32();
	return self
end

function MsgDef.TeamInfo:opcode()
	return "TeamInfo"
end

--[[ 队伍成员信息--]]
MsgDef.TeamMemberInfo = {}

function MsgDef.TeamMemberInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.captain == nil then msg.captain = 0 end --[[(int8) 1队长,否则普通队员--]]
	if msg.skinMap == nil then msg.skinMap = {} end --[[(map<int32,int32>) 外观--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.hp == nil then msg.hp = 0 end --[[(int32) 当前血量--]]
	if msg.maxHp == nil then msg.maxHp = 0 end --[[(int32) 最大血量--]]
	if msg.online == nil then msg.online = 0 end --[[(int8) 1在线 0离线--]]
	return msg
end

function MsgDef.TeamMemberInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.level);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.power);
	sm:writeString(self.roleName);
	sm:writeInt8(self.captain);
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.gangName);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.hp);
	sm:writeInt32(self.maxHp);
	sm:writeInt8(self.online);
	return self
end

function MsgDef.TeamMemberInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.level = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.power = sm:readInt32();
	self.roleName = sm:readString();
	self.captain = sm:readInt8();
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.gangName = sm:readString();
	self.teamId = sm:readInt32();
	self.hp = sm:readInt32();
	self.maxHp = sm:readInt32();
	self.online = sm:readInt8();
	return self
end

function MsgDef.TeamMemberInfo:opcode()
	return "TeamMemberInfo"
end

--[[ 测试2--]]
MsgDef.TestInfo2 = {}

function MsgDef.TestInfo2:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ccc == nil then msg.ccc = 0 end --[[(int64) 测试--]]
	if msg.ddd == nil then msg.ddd = 0 end --[[(int8) 测试2--]]
	if msg.eee == nil then msg.eee = 0 end --[[(int8) 测试3--]]
	if msg.fff == nil then msg.fff = "" end --[[(string) 测试4--]]
	return msg
end

function MsgDef.TestInfo2:encode(sm)
	sm:writeInt64(self.ccc);
	sm:writeInt8(self.ddd);
	sm:writeInt8(self.eee);
	sm:writeString(self.fff);
	return self
end

function MsgDef.TestInfo2:decode(sm)
	self.ccc = sm:readInt64();
	self.ddd = sm:readInt8();
	self.eee = sm:readInt8();
	self.fff = sm:readString();
	return self
end

function MsgDef.TestInfo2:opcode()
	return "TestInfo2"
end

--[[ 称号信息--]]
MsgDef.TitleInfo = {}

function MsgDef.TitleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.titleId == nil then msg.titleId = 0 end --[[(int32) 称号id--]]
	if msg.gotTime == nil then msg.gotTime = 0 end --[[(int32) 获得时间--]]
	if msg.isWear == nil then msg.isWear = 0 end --[[(int8) 是否佩戴 0:未佩戴 1:已佩戴--]]
	if msg.titleEndTime == nil then msg.titleEndTime = 0 end --[[(int32) 称号结束时间--]]
	return msg
end

function MsgDef.TitleInfo:encode(sm)
	sm:writeInt32(self.titleId);
	sm:writeInt32(self.gotTime);
	sm:writeInt8(self.isWear);
	sm:writeInt32(self.titleEndTime);
	return self
end

function MsgDef.TitleInfo:decode(sm)
	self.titleId = sm:readInt32();
	self.gotTime = sm:readInt32();
	self.isWear = sm:readInt8();
	self.titleEndTime = sm:readInt32();
	return self
end

function MsgDef.TitleInfo:opcode()
	return "TitleInfo"
end

--[[ 人物操作信息--]]
MsgDef.UseOptInfo = {}

function MsgDef.UseOptInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.teamCaptain == nil then msg.teamCaptain = 0 end --[[(int8) 1是队长--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 帮派Id--]]
	if msg.relation == nil then msg.relation = 0 end --[[(int16) 0:陌生人 1:好友--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 玩家头像--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 角色等级--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 公会名--]]
	if msg.isJy == nil then msg.isJy = 0 end --[[(int8) 是否禁言中 1:是--]]
	if msg.mainSvrId == nil then msg.mainSvrId = 0 end --[[(int32) 主服id--]]
	return msg
end

function MsgDef.UseOptInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.teamCaptain);
	sm:writeInt64(self.gangId);
	sm:writeInt16(self.relation);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.level);
	sm:writeString(self.gangName);
	sm:writeInt8(self.isJy);
	sm:writeInt32(self.mainSvrId);
	return self
end

function MsgDef.UseOptInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.teamCaptain = sm:readInt8();
	self.gangId = sm:readInt64();
	self.relation = sm:readInt16();
	self.roleIcon = sm:readInt32();
	self.level = sm:readInt32();
	self.gangName = sm:readString();
	self.isJy = sm:readInt8();
	self.mainSvrId = sm:readInt32();
	return self
end

function MsgDef.UseOptInfo:opcode()
	return "UseOptInfo"
end

--[[ 场景玩家信息--]]
MsgDef.UserInfo = {}

function MsgDef.UserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) --]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) --]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) --]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) --]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) --]]
	if msg.skins == nil then msg.skins = {} end --[[(map<int32,int32>) 外观皮肤（包括称号）--]]
	if msg.petSkins == nil then msg.petSkins = {} end --[[(map<int32,int32>) 宠物外观皮肤--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 公会名称--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) 32位玩家属性值map--]]
	if msg.jumpPos == nil then msg.jumpPos = {} end --[[(array<Position>) 跳跃点， --]]
	if msg.buffs == nil then msg.buffs = {} end --[[(array<BuffInfo>) 出现带的buff--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) gangId--]]
	if msg.gangJob == nil then msg.gangJob = 0 end --[[(int8) 公会职位--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) teamId--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) roleIcon--]]
	if msg.partnerLevel == nil then msg.partnerLevel = 0 end --[[(int32) 伙伴等级--]]
	if msg.partnerName == nil then msg.partnerName = "" end --[[(string) 伙伴名--]]
	if msg.kind == nil then msg.kind = 0 end --[[(int8) 7雕像--]]
	if msg.mainSvrId == nil then msg.mainSvrId = 0 end --[[(int32) 主服务器服id--]]
	if msg.coupleName == nil then msg.coupleName = "" end --[[(string) 伴侣名--]]
	if msg.grade == nil then msg.grade = 0 end --[[(int32) 婚礼档次(昵称)--]]
	if msg.practice == nil then msg.practice = 0 end --[[(int8) 双修状态 0:非双修 1:双修邀请方 2:双修被邀请方--]]
	if msg.petName == nil then msg.petName = "" end --[[(string) 宠物名--]]
	if msg.xtName == nil then msg.xtName = "" end --[[(string) 仙童名--]]
	if msg.wearTitle == nil then msg.wearTitle = {} end --[[(array<int32>) 佩戴称号列表--]]
	return msg
end

function MsgDef.UserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.petSkins))
	for kn,elm in ipairs(self.petSkins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeString(self.gangName);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.jumpPos)
	for i,elm in ipairs(self.jumpPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.buffs)
	for i,elm in ipairs(self.buffs) do
		elm:encode(sm)
	end
	sm:writeInt64(self.gangId);
	sm:writeInt8(self.gangJob);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.partnerLevel);
	sm:writeString(self.partnerName);
	sm:writeInt8(self.kind);
	sm:writeInt32(self.mainSvrId);
	sm:writeString(self.coupleName);
	sm:writeInt32(self.grade);
	sm:writeInt8(self.practice);
	sm:writeString(self.petName);
	sm:writeString(self.xtName);
	sm:writeInt16(get_map_size(self.wearTitle))
	for i,elm in ipairs(self.wearTitle) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.UserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	local petSkins_size = sm:readInt16()
	for i = 1,petSkins_size do
		local kv = sm:readInt32();
		self.petSkins[kv] = sm:readInt32();
	end
	self.gangName = sm:readString();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	local jumpPos_size = sm:readInt16()
	for i = 1,jumpPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.jumpPos, element)
	end
	local buffs_size = sm:readInt16()
	for i = 1,buffs_size do
		local element = MsgDef.BuffInfo:create():decode(sm)
		table.insert(self.buffs, element)
	end
	self.gangId = sm:readInt64();
	self.gangJob = sm:readInt8();
	self.teamId = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.partnerLevel = sm:readInt32();
	self.partnerName = sm:readString();
	self.kind = sm:readInt8();
	self.mainSvrId = sm:readInt32();
	self.coupleName = sm:readString();
	self.grade = sm:readInt32();
	self.practice = sm:readInt8();
	self.petName = sm:readString();
	self.xtName = sm:readString();
	local wearTitle_size = sm:readInt16()
	for i = 1,wearTitle_size do
		local elm = sm:readInt32();
		table.insert(self.wearTitle, elm)
	end
	return self
end

function MsgDef.UserInfo:opcode()
	return "UserInfo"
end

--[[ 婚宴宾客信息--]]
MsgDef.WeddingGuestsInfo = {}

function MsgDef.WeddingGuestsInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色Id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	return msg
end

function MsgDef.WeddingGuestsInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.WeddingGuestsInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	return self
end

function MsgDef.WeddingGuestsInfo:opcode()
	return "WeddingGuestsInfo"
end

--[[ 结婚玩家信息--]]
MsgDef.WeddingUserInfo = {}

function MsgDef.WeddingUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int32) 性别--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) roleIcon--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) roleName--]]
	return msg
end

function MsgDef.WeddingUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.sex);
	sm:writeInt32(self.roleIcon);
	sm:writeString(self.roleName);
	return self
end

function MsgDef.WeddingUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.sex = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.roleName = sm:readString();
	return self
end

function MsgDef.WeddingUserInfo:opcode()
	return "WeddingUserInfo"
end

--[[ 问鼎之战日志--]]
MsgDef.WenDingLogs = {}

function MsgDef.WenDingLogs:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	if msg.maxFloor == nil then msg.maxFloor = 0 end --[[(int32) 最高层--]]
	if msg.killNum == nil then msg.killNum = 0 end --[[(int32) 击杀数--]]
	if msg.maxEvenKill == nil then msg.maxEvenKill = 0 end --[[(int32) 最大连斩--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.WenDingLogs:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.name);
	sm:writeInt32(self.maxFloor);
	sm:writeInt32(self.killNum);
	sm:writeInt32(self.maxEvenKill);
	sm:writeInt32(self.score);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.WenDingLogs:decode(sm)
	self.ranking = sm:readInt32();
	self.name = sm:readString();
	self.maxFloor = sm:readInt32();
	self.killNum = sm:readInt32();
	self.maxEvenKill = sm:readInt32();
	self.score = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.WenDingLogs:opcode()
	return "WenDingLogs"
end

--[[ 场景其他固件信息--]]
MsgDef.WidgetInfo = {}

function MsgDef.WidgetInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	if msg.ext01 == nil then msg.ext01 = 0 end --[[(int32) 扩展参数01--]]
	if msg.mId == nil then msg.mId = 0 end --[[(int32) 配置id--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) 当前位置--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) 当前位置--]]
	if msg.name == nil then msg.name = "" end --[[(string) 名字--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.kind == nil then msg.kind = 0 end --[[(int8) kind--]]
	if msg.ext02 == nil then msg.ext02 = 0 end --[[(int32) 扩展参数02--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) 属性map--]]
	return msg
end

function MsgDef.WidgetInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.ext01);
	sm:writeInt32(self.mId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeString(self.name);
	sm:writeInt32(self.sceneId);
	sm:writeInt8(self.kind);
	sm:writeInt32(self.ext02);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.WidgetInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.ext01 = sm:readInt32();
	self.mId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.name = sm:readString();
	self.sceneId = sm:readInt32();
	self.kind = sm:readInt8();
	self.ext02 = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.WidgetInfo:opcode()
	return "WidgetInfo"
end

--[[ 世界Boss仇恨排名信息--]]
MsgDef.WorldBossHateRankInfo = {}

function MsgDef.WorldBossHateRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.hurtPercent == nil then msg.hurtPercent = 0 end --[[(int32) 百分比--]]
	return msg
end

function MsgDef.WorldBossHateRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.roleName);
	sm:writeInt32(self.hurtPercent);
	return self
end

function MsgDef.WorldBossHateRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.roleName = sm:readString();
	self.hurtPercent = sm:readInt32();
	return self
end

function MsgDef.WorldBossHateRankInfo:opcode()
	return "WorldBossHateRankInfo"
end

--[[ 世界BOSS信息--]]
MsgDef.WorldBossInfo = {}

function MsgDef.WorldBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.WorldBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.WorldBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.sceneId = sm:readInt32();
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.WorldBossInfo:opcode()
	return "WorldBossInfo"
end

--[[ 参战仙盟信息--]]
MsgDef.XianMengBattleInfo = {}

function MsgDef.XianMengBattleInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 仙盟id--]]
	if msg.zoneId == nil then msg.zoneId = 0 end --[[(int32) 赛区--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名字--]]
	if msg.battleType == nil then msg.battleType = 0 end --[[(int32) 赛区序号--]]
	if msg.result == nil then msg.result = 0 end --[[(int8) 胜负 1:胜利 2:失败--]]
	if msg.campType == nil then msg.campType = 0 end --[[(int8) 阵营 1:攻击方 2:防守--]]
	return msg
end

function MsgDef.XianMengBattleInfo:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeInt32(self.zoneId);
	sm:writeInt32(self.rank);
	sm:writeString(self.gangName);
	sm:writeInt32(self.battleType);
	sm:writeInt8(self.result);
	sm:writeInt8(self.campType);
	return self
end

function MsgDef.XianMengBattleInfo:decode(sm)
	self.gangId = sm:readInt64();
	self.zoneId = sm:readInt32();
	self.rank = sm:readInt32();
	self.gangName = sm:readString();
	self.battleType = sm:readInt32();
	self.result = sm:readInt8();
	self.campType = sm:readInt8();
	return self
end

function MsgDef.XianMengBattleInfo:opcode()
	return "XianMengBattleInfo"
end

--[[ 仙盟战日志--]]
MsgDef.XianMengBattleLog = {}

function MsgDef.XianMengBattleLog:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.playerName == nil then msg.playerName = "" end --[[(string) 玩家名--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.occupyNum == nil then msg.occupyNum = 0 end --[[(int32) 占领水晶数--]]
	if msg.killNum == nil then msg.killNum = 0 end --[[(int32) 杀人数--]]
	if msg.beKillNum == nil then msg.beKillNum = 0 end --[[(int32) 被杀数--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	return msg
end

function MsgDef.XianMengBattleLog:encode(sm)
	sm:writeString(self.playerName);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.occupyNum);
	sm:writeInt32(self.killNum);
	sm:writeInt32(self.beKillNum);
	sm:writeInt32(self.score);
	return self
end

function MsgDef.XianMengBattleLog:decode(sm)
	self.playerName = sm:readString();
	self.rank = sm:readInt32();
	self.occupyNum = sm:readInt32();
	self.killNum = sm:readInt32();
	self.beKillNum = sm:readInt32();
	self.score = sm:readInt32();
	return self
end

function MsgDef.XianMengBattleLog:opcode()
	return "XianMengBattleLog"
end

--[[ 仙盟boss信息--]]
MsgDef.XianMengBossInfo = {}

function MsgDef.XianMengBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) 属性--]]
	if msg.x == nil then msg.x = 0 end --[[(int16) x--]]
	if msg.y == nil then msg.y = 0 end --[[(int16) y--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int64) 怪物id--]]
	return msg
end

function MsgDef.XianMengBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(self.x);
	sm:writeInt16(self.y);
	sm:writeInt64(self.monsterId);
	return self
end

function MsgDef.XianMengBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.x = sm:readInt16();
	self.y = sm:readInt16();
	self.monsterId = sm:readInt64();
	return self
end

function MsgDef.XianMengBossInfo:opcode()
	return "XianMengBossInfo"
end

--[[ 仙盟帮战派信息--]]
MsgDef.XianMengGangInfo = {}

function MsgDef.XianMengGangInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int8) 排名--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.warZone == nil then msg.warZone = 0 end --[[(int8) 战区--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 仙盟id--]]
	return msg
end

function MsgDef.XianMengGangInfo:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt8(self.rank);
	sm:writeString(self.gangName);
	sm:writeInt8(self.warZone);
	sm:writeInt64(self.gangId);
	return self
end

function MsgDef.XianMengGangInfo:decode(sm)
	self.score = sm:readInt32();
	self.rank = sm:readInt8();
	self.gangName = sm:readString();
	self.warZone = sm:readInt8();
	self.gangId = sm:readInt64();
	return self
end

function MsgDef.XianMengGangInfo:opcode()
	return "XianMengGangInfo"
end

--[[ 仙盟战玩家信息--]]
MsgDef.XianMengGangUserInfo = {}

function MsgDef.XianMengGangUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.XianMengGangUserInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.roleName);
	sm:writeInt32(self.score);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.XianMengGangUserInfo:decode(sm)
	self.rank = sm:readInt32();
	self.roleName = sm:readString();
	self.score = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.XianMengGangUserInfo:opcode()
	return "XianMengGangUserInfo"
end

--[[ 仙盟战结束排名--]]
MsgDef.XianMengWarFinishRank = {}

function MsgDef.XianMengWarFinishRank:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.zone == nil then msg.zone = 0 end --[[(int32) 战区--]]
	if msg.integral == nil then msg.integral = 0 end --[[(int32) 积分--]]
	if msg.gang == nil then msg.gang = "" end --[[(string) 仙盟--]]
	return msg
end

function MsgDef.XianMengWarFinishRank:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.zone);
	sm:writeInt32(self.integral);
	sm:writeString(self.gang);
	return self
end

function MsgDef.XianMengWarFinishRank:decode(sm)
	self.rank = sm:readInt32();
	self.zone = sm:readInt32();
	self.integral = sm:readInt32();
	self.gang = sm:readString();
	return self
end

function MsgDef.XianMengWarFinishRank:opcode()
	return "XianMengWarFinishRank"
end

--[[ 仙盟战展示用户信息--]]
MsgDef.XianMengWarShowUserInfo = {}

function MsgDef.XianMengWarShowUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色ID--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.skins == nil then msg.skins = {} end --[[(map<int32,int32>) 外观--]]
	if msg.mark == nil then msg.mark = 0 end --[[(int8) 标识：1帮主，2帮主夫人，3副帮主--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像信息--]]
	return msg
end

function MsgDef.XianMengWarShowUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.mark);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.XianMengWarShowUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	self.mark = sm:readInt8();
	self.roleIcon = sm:readInt32();
	return self
end

function MsgDef.XianMengWarShowUserInfo:opcode()
	return "XianMengWarShowUserInfo"
end

--[[ 仙魔战阵营信息--]]
MsgDef.XianMoCampInfo = {}

function MsgDef.XianMoCampInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.campId == nil then msg.campId = 0 end --[[(int8) 1:仙 2:魔--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 阵营积分--]]
	if msg.topOneName == nil then msg.topOneName = "" end --[[(string) 阵营积分第一玩家名字--]]
	return msg
end

function MsgDef.XianMoCampInfo:encode(sm)
	sm:writeInt8(self.campId);
	sm:writeInt32(self.score);
	sm:writeString(self.topOneName);
	return self
end

function MsgDef.XianMoCampInfo:decode(sm)
	self.campId = sm:readInt8();
	self.score = sm:readInt32();
	self.topOneName = sm:readString();
	return self
end

function MsgDef.XianMoCampInfo:opcode()
	return "XianMoCampInfo"
end

--[[ 仙魔战排名对象--]]
MsgDef.XianMoRankInfo = {}

function MsgDef.XianMoRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) roleId--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.campId == nil then msg.campId = 0 end --[[(int8) 阵营1:仙 2:魔--]]
	if msg.killCount == nil then msg.killCount = 0 end --[[(int32) 击杀数量--]]
	if msg.maxConKillCount == nil then msg.maxConKillCount = 0 end --[[(int32) 最大连杀数量--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 个人积分--]]
	return msg
end

function MsgDef.XianMoRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.rank);
	sm:writeString(self.roleName);
	sm:writeInt8(self.campId);
	sm:writeInt32(self.killCount);
	sm:writeInt32(self.maxConKillCount);
	sm:writeInt32(self.score);
	return self
end

function MsgDef.XianMoRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.rank = sm:readInt32();
	self.roleName = sm:readString();
	self.campId = sm:readInt8();
	self.killCount = sm:readInt32();
	self.maxConKillCount = sm:readInt32();
	self.score = sm:readInt32();
	return self
end

function MsgDef.XianMoRankInfo:opcode()
	return "XianMoRankInfo"
end

--[[ 仙域禁地BOSS信息--]]
MsgDef.XyjdBossInfo = {}

function MsgDef.XyjdBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.XyjdBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.XyjdBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.sceneId = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.XyjdBossInfo:opcode()
	return "XyjdBossInfo"
end

--[[ 仙域灵塔排行榜对象--]]
MsgDef.XyltRankInfo = {}

function MsgDef.XyltRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名字--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.maxBo == nil then msg.maxBo = 0 end --[[(int32) 最高波数--]]
	if msg.passSec == nil then msg.passSec = 0 end --[[(int32) 通关秒数--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 仙盟名字--]]
	return msg
end

function MsgDef.XyltRankInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.roleName);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.maxBo);
	sm:writeInt32(self.passSec);
	sm:writeString(self.gangName);
	return self
end

function MsgDef.XyltRankInfo:decode(sm)
	self.rank = sm:readInt32();
	self.roleName = sm:readString();
	self.roleId = sm:readInt64();
	self.maxBo = sm:readInt32();
	self.passSec = sm:readInt32();
	self.gangName = sm:readString();
	return self
end

function MsgDef.XyltRankInfo:opcode()
	return "XyltRankInfo"
end

--[[ 组队排位赛结算信息--]]
MsgDef.ZdPwsClacInfo = {}

function MsgDef.ZdPwsClacInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 战队名字--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.mvp == nil then msg.mvp = 0 end --[[(int8) 1:表示mvp 0:不是mvp--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.pwLev == nil then msg.pwLev = 0 end --[[(int32) 段位等级--]]
	if msg.oldPwsLev == nil then msg.oldPwsLev = 0 end --[[(int32) 旧的排位赛等级--]]
	return msg
end

function MsgDef.ZdPwsClacInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeString(self.teamName);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.mvp);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.pwLev);
	sm:writeInt32(self.oldPwsLev);
	return self
end

function MsgDef.ZdPwsClacInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.teamName = sm:readString();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.mvp = sm:readInt8();
	self.teamId = sm:readInt32();
	self.pwLev = sm:readInt32();
	self.oldPwsLev = sm:readInt32();
	return self
end

function MsgDef.ZdPwsClacInfo:opcode()
	return "ZdPwsClacInfo"
end

--[[ 请求开服累充活动--]]
MsgDef.Msg1030184 = {}

function MsgDef.Msg1030184:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励Id--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030184:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030184:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030184:opcode()
	return 1030184
end

--[[ 请求开服累充活动(返回)--]]
MsgDef.Msg5030184 = {}
function MsgDef.Msg5030184:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.czYB = 0 --[[(int32) 今日累充元宝--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.itemStatus = {} --[[(map<int32,int32>) 道具列表状态--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.reqType = 0 --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg5030184:encode(sm)
	sm:writeInt32(self.czYB);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg5030184:decode(sm)
	self.czYB = sm:readInt32();
	self.lastTime = sm:readInt32();
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.actId = sm:readInt32();
	return self
end


function MsgDef.Msg5030184:opcode()
	return 5030184
end
--[[ 请求开服单笔充值--]]
MsgDef.Msg1030185 = {}

function MsgDef.Msg1030185:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励Id--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030185:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030185:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030185:opcode()
	return 1030185
end

--[[ 请求开服单笔充值(返回)--]]
MsgDef.Msg5030185 = {}
function MsgDef.Msg5030185:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.itemStatus = {} --[[(map<int32,int32>) 道具列表状态--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.reqType = 0 --[[(int32) 0:请求奖励信息 1:领取奖励--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030185:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.reqType);
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030185:decode(sm)
	self.actId = sm:readInt32();
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt32();
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030185:opcode()
	return 5030185
end
--[[ 请求充值、消费排行榜活动--]]
MsgDef.Msg1030186 = {}

function MsgDef.Msg1030186:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:请求上一个排行--]]
	return msg
end

function MsgDef.Msg1030186:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030186:decode(sm)
	self.actId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030186:opcode()
	return 1030186
end

--[[ 请求充值、消费排行榜活动(返回)--]]
MsgDef.Msg5030186 = {}
function MsgDef.Msg5030186:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.quota = 0 --[[(int32) 充值或消费元宝--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.isShow = 0 --[[(int8) 是否展示--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.ranking = {} --[[(array<QuotaRankingInfo>) 排行--]]
	msg.firstSkinMap = {} --[[(map<int32,int32>) 第一名的皮肤--]]
	msg.nextQuota = 0 --[[(int32) 下一个充值或消费元宝--]]
	msg.reqType = 0 --[[(int8) 1:请求上一个排行--]]
	msg.actDay = 0 --[[(int32) 活动天数--]]
	return msg
end

function MsgDef.Msg5030186:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.quota);
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.isShow);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.ranking)
	for i,elm in ipairs(self.ranking) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.firstSkinMap))
	for kn,elm in ipairs(self.firstSkinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.nextQuota);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actDay);
	return self
end

function MsgDef.Msg5030186:decode(sm)
	self.actId = sm:readInt32();
	self.quota = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.isShow = sm:readInt8();
	self.myRank = sm:readInt32();
	local ranking_size = sm:readInt16()
	for i = 1,ranking_size do
		local element = MsgDef.QuotaRankingInfo:create():decode(sm)
		table.insert(self.ranking, element)
	end
	local firstSkinMap_size = sm:readInt16()
	for i = 1,firstSkinMap_size do
		local kv = sm:readInt32();
		self.firstSkinMap[kv] = sm:readInt32();
	end
	self.nextQuota = sm:readInt32();
	self.reqType = sm:readInt8();
	self.actDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030186:opcode()
	return 5030186
end
--[[ 元宝排行榜信息--]]
MsgDef.QuotaRankingInfo = {}

function MsgDef.QuotaRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.name == nil then msg.name = "" end --[[(string) 角色名--]]
	if msg.quota == nil then msg.quota = 0 end --[[(int32) 元宝--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.QuotaRankingInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeString(self.name);
	sm:writeInt32(self.quota);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.QuotaRankingInfo:decode(sm)
	self.rank = sm:readInt32();
	self.name = sm:readString();
	self.quota = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.QuotaRankingInfo:opcode()
	return "QuotaRankingInfo"
end

--[[ 请求幸运云购(开服版)--]]
MsgDef.Msg1030401 = {}

function MsgDef.Msg1030401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示,1:购买,2:中奖纪录,3:抽10次--]]
	return msg
end

function MsgDef.Msg1030401:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030401:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030401:opcode()
	return 1030401
end

--[[ 请求幸运云购(开服版)(返回)--]]
MsgDef.Msg5030401 = {}
function MsgDef.Msg5030401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示,1:购买,2:中奖纪录,3:抽10次--]]
	msg.logs = {} --[[(array<string>) 购买记录--]]
	msg.leftActTime = 0 --[[(int32) 活动剩余时间--]]
	msg.leftBuyCount = 0 --[[(int32) 剩余购买份额--]]
	msg.preAwardRecords = {} --[[(array<string>) 之前中奖记录,字符串:期数,名字,装备信息--]]
	msg.bestItemInfo = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) 大奖装备信息--]]
	msg.mineBuyCount = 0 --[[(int32) 我已购买次数--]]
	msg.stage = 0 --[[(int32) 期数,从1开始--]]
	msg.todayStage = 0 --[[(int32) 今天期数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买时获得的奖励--]]
	return msg
end

function MsgDef.Msg5030401:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftActTime);
	sm:writeInt32(self.leftBuyCount);
	sm:writeInt16(get_map_size(self.preAwardRecords))
	for i,elm in ipairs(self.preAwardRecords) do
		sm:writeString(elm);
	end
	self.bestItemInfo:encode(sm)
	sm:writeInt32(self.mineBuyCount);
	sm:writeInt32(self.stage);
	sm:writeInt32(self.todayStage);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030401:decode(sm)
	self.reqType = sm:readInt8();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.leftActTime = sm:readInt32();
	self.leftBuyCount = sm:readInt32();
	local preAwardRecords_size = sm:readInt16()
	for i = 1,preAwardRecords_size do
		local ele = sm:readString();
		table.insert(self.preAwardRecords, ele)
	end
	self.bestItemInfo:decode(sm)
	self.mineBuyCount = sm:readInt32();
	self.stage = sm:readInt32();
	self.todayStage = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030401:opcode()
	return 5030401
end
--[[ 请求幸运转盘(开服版)--]]
MsgDef.Msg1030402 = {}

function MsgDef.Msg1030402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示数据 1:抽一次 2:抽10次--]]
	return msg
end

function MsgDef.Msg1030402:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030402:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030402:opcode()
	return 1030402
end

--[[ 请求幸运转盘(开服版)(返回)--]]
MsgDef.Msg5030402 = {}
function MsgDef.Msg5030402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示数据 1:抽一次 2:抽10次--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.awardIndex = 0 --[[(int32) 转盘下标 从1开始--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.logs = {} --[[(array<string>) 记录--]]
	msg.poolMoney = 0 --[[(int32) 奖金池金额--]]
	msg.equipInfo = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) 装备信息--]]
	return msg
end

function MsgDef.Msg5030402:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.awardIndex);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.poolMoney);
	self.equipInfo:encode(sm)
	return self
end

function MsgDef.Msg5030402:decode(sm)
	self.reqType = sm:readInt8();
	self.actLeftTime = sm:readInt32();
	self.awardIndex = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.poolMoney = sm:readInt32();
	self.equipInfo:decode(sm)
	return self
end


function MsgDef.Msg5030402:opcode()
	return 5030402
end
--[[ 请求合服投资计划信息--]]
MsgDef.Msg1030187 = {}

function MsgDef.Msg1030187:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030187:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030187:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030187:opcode()
	return 1030187
end

--[[ 请求合服投资计划信息(返回)--]]
MsgDef.Msg5030187 = {}
function MsgDef.Msg5030187:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isBuy = 0 --[[(int8) 是否已购买 0:没有购买 1:已购买--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.day = 0 --[[(int32) 合服天数--]]
	msg.reqType = 0 --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	return msg
end

function MsgDef.Msg5030187:encode(sm)
	sm:writeInt8(self.isBuy);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.day);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030187:decode(sm)
	self.isBuy = sm:readInt8();
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.day = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030187:opcode()
	return 5030187
end
--[[ 请求红包返利(合服版本)--]]
MsgDef.Msg1030403 = {}

function MsgDef.Msg1030403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取目标奖励--]]
	return msg
end

function MsgDef.Msg1030403:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030403:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030403:opcode()
	return 1030403
end

--[[ 请求红包返利(合服版本)(返回)--]]
MsgDef.Msg5030403 = {}
function MsgDef.Msg5030403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取目标奖励--]]
	msg.redBags = {} --[[(map<int32,int32>) 红包信息,key:第几天,value:存入金额--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.redBagSum = 0 --[[(int32) 红包总额--]]
	msg.dayCostYb = 0 --[[(int32) 今日消费元宝--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.awardGotSign = 0 --[[(int32) 奖励获取标识,>0已领取--]]
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	return msg
end

function MsgDef.Msg5030403:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.redBags))
	for kn,elm in ipairs(self.redBags) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.redBagSum);
	sm:writeInt32(self.dayCostYb);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.awardGotSign);
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030403:decode(sm)
	self.reqType = sm:readInt8();
	local redBags_size = sm:readInt16()
	for i = 1,redBags_size do
		local kv = sm:readInt32();
		self.redBags[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	self.redBagSum = sm:readInt32();
	self.dayCostYb = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.awardGotSign = sm:readInt32();
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030403:opcode()
	return 5030403
end
--[[ 请求红包返利(开服版本)--]]
MsgDef.Msg1030404 = {}

function MsgDef.Msg1030404:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取目标奖励--]]
	return msg
end

function MsgDef.Msg1030404:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030404:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030404:opcode()
	return 1030404
end

--[[ 请求红包返利(开服版本)(返回)--]]
MsgDef.Msg5030404 = {}
function MsgDef.Msg5030404:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取目标奖励--]]
	msg.redBags = {} --[[(map<int32,int32>) 红包信息,key:第几天,value:存入金额--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.redBagSum = 0 --[[(int32) 红包总额--]]
	msg.dayCostYb = 0 --[[(int32) 今日消费元宝--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.awardGotSign = 0 --[[(int32) 奖励获取标识,>0已领取--]]
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	return msg
end

function MsgDef.Msg5030404:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.redBags))
	for kn,elm in ipairs(self.redBags) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.redBagSum);
	sm:writeInt32(self.dayCostYb);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.awardGotSign);
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030404:decode(sm)
	self.reqType = sm:readInt8();
	local redBags_size = sm:readInt16()
	for i = 1,redBags_size do
		local kv = sm:readInt32();
		self.redBags[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	self.redBagSum = sm:readInt32();
	self.dayCostYb = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.awardGotSign = sm:readInt32();
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030404:opcode()
	return 5030404
end
--[[ 请求超值返回--]]
MsgDef.Msg1030405 = {}

function MsgDef.Msg1030405:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取的配置id--]]
	return msg
end

function MsgDef.Msg1030405:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030405:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030405:opcode()
	return 1030405
end

--[[ 请求超值返回(返回)--]]
MsgDef.Msg5030405 = {}
function MsgDef.Msg5030405:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftSec = 0 --[[(int32) 阶段剩余秒数--]]
	msg.costNum = 0 --[[(int32) 消耗材料数量--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取情况,key:配置id,value = 1已领取--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.curType = 0 --[[(int8) 当前消耗类型--]]
	msg.cfgId = 0 --[[(int32) 领取的配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.curId = 0 --[[(int32) 当前配置id--]]
	return msg
end

function MsgDef.Msg5030405:encode(sm)
	sm:writeInt32(self.actLeftSec);
	sm:writeInt32(self.costNum);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.curType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curId);
	return self
end

function MsgDef.Msg5030405:decode(sm)
	self.actLeftSec = sm:readInt32();
	self.costNum = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	self.curType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curId = sm:readInt32();
	return self
end


function MsgDef.Msg5030405:opcode()
	return 5030405
end
--[[ 请求超值兑换--]]
MsgDef.Msg1030406 = {}

function MsgDef.Msg1030406:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 兑换的配置id--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 兑换数量--]]
	return msg
end

function MsgDef.Msg1030406:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1030406:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1030406:opcode()
	return 1030406
end

--[[ 请求超值兑换(返回)--]]
MsgDef.Msg5030406 = {}
function MsgDef.Msg5030406:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftSec = 0 --[[(int32) 当前类型剩余秒数--]]
	msg.exchInfos = {} --[[(map<int32,int32>) 兑换信息,key:配置id,value:已兑换次数--]]
	msg.reqType = 0 --[[(int8) 0:显示 1：领取--]]
	msg.curType = 0 --[[(int8) 当前类型--]]
	msg.cfgId = 0 --[[(int32) 兑换的配置id--]]
	msg.num = 0 --[[(int32) 兑换数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.curId = 0 --[[(int32) 当前配置id--]]
	return msg
end

function MsgDef.Msg5030406:encode(sm)
	sm:writeInt32(self.actLeftSec);
	sm:writeInt16(get_map_size(self.exchInfos))
	for kn,elm in ipairs(self.exchInfos) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.curType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.num);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curId);
	return self
end

function MsgDef.Msg5030406:decode(sm)
	self.actLeftSec = sm:readInt32();
	local exchInfos_size = sm:readInt16()
	for i = 1,exchInfos_size do
		local kv = sm:readInt32();
		self.exchInfos[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	self.curType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.num = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curId = sm:readInt32();
	return self
end


function MsgDef.Msg5030406:opcode()
	return 5030406
end
--[[ 请求充值夺宝活动--]]
MsgDef.Msg1030188 = {}

function MsgDef.Msg1030188:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int8) 投掷次数--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:夺宝--]]
	return msg
end

function MsgDef.Msg1030188:encode(sm)
	sm:writeInt8(self.times);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030188:decode(sm)
	self.times = sm:readInt8();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030188:opcode()
	return 1030188
end

--[[ 请求充值夺宝活动(返回)--]]
MsgDef.Msg5030188 = {}
function MsgDef.Msg5030188:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int8) 投掷次数--]]
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.dbTimes = 0 --[[(int32) 夺宝次数--]]
	msg.point = 0 --[[(int32) 随机总点数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:夺宝--]]
	msg.lastAwardIndex = 0 --[[(int32) 最终大奖索引--]]
	msg.currStep = 0 --[[(int32) 当前位置--]]
	msg.czYb = 0 --[[(int32) 当前充值元宝--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030188:encode(sm)
	sm:writeInt8(self.times);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.dbTimes);
	sm:writeInt32(self.point);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastAwardIndex);
	sm:writeInt32(self.currStep);
	sm:writeInt32(self.czYb);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030188:decode(sm)
	self.times = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.dbTimes = sm:readInt32();
	self.point = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	self.reqType = sm:readInt8();
	self.lastAwardIndex = sm:readInt32();
	self.currStep = sm:readInt32();
	self.czYb = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030188:opcode()
	return 5030188
end
--[[ 请求上古神迹boss信息--]]
MsgDef.Msg1330801 = {}

function MsgDef.Msg1330801:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330801:encode(sm)
	return self
end

function MsgDef.Msg1330801:decode(sm)
	return self
end

function MsgDef.Msg1330801:opcode()
	return 1330801
end

--[[ 请求上古神迹boss信息(返回)--]]
MsgDef.Msg5330801 = {}
function MsgDef.Msg5330801:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 关注map--]]
	return msg
end

function MsgDef.Msg5330801:encode(sm)
	sm:writeInt32(self.leftCount);
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330801:decode(sm)
	self.leftCount = sm:readInt32();
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330801:opcode()
	return 5330801
end
--[[ 请求上古神迹BOSS关注--]]
MsgDef.Msg1330802 = {}

function MsgDef.Msg1330802:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) --]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330802:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330802:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330802:opcode()
	return 1330802
end

--[[ 请求上古神迹BOSS关注(返回)--]]
MsgDef.Msg5330802 = {}
function MsgDef.Msg5330802:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) --]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330802:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330802:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330802:opcode()
	return 5330802
end
--[[ 请求上古神迹场景信息--]]
MsgDef.Msg1330803 = {}

function MsgDef.Msg1330803:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330803:encode(sm)
	return self
end

function MsgDef.Msg1330803:decode(sm)
	return self
end

function MsgDef.Msg1330803:opcode()
	return 1330803
end

--[[ 请求上古神迹场景信息(返回)--]]
MsgDef.Msg5330803 = {}
function MsgDef.Msg5330803:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<SgsjBossInfo>) boss列表--]]
	msg.anger = 0 --[[(int32) 怒气值--]]
	return msg
end

function MsgDef.Msg5330803:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.anger);
	return self
end

function MsgDef.Msg5330803:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SgsjBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.anger = sm:readInt32();
	return self
end


function MsgDef.Msg5330803:opcode()
	return 5330803
end
--[[ 请求神器系统--]]
MsgDef.Msg1520101 = {}

function MsgDef.Msg1520101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1520101:encode(sm)
	return self
end

function MsgDef.Msg1520101:decode(sm)
	return self
end

function MsgDef.Msg1520101:opcode()
	return 1520101
end

--[[ 请求神器系统(返回)--]]
MsgDef.Msg5520101 = {}
function MsgDef.Msg5520101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shenqiInfos = {} --[[(array<ShenQiInfo>) 神器列表信息--]]
	msg.qhsMap = {} --[[(map<int32,int32>) 强化石map,key:1紫色2橙色3红色4粉色,value:数量--]]
	return msg
end

function MsgDef.Msg5520101:encode(sm)
	sm:writeInt16(#self.shenqiInfos)
	for i,elm in ipairs(self.shenqiInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.qhsMap))
	for kn,elm in ipairs(self.qhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5520101:decode(sm)
	local shenqiInfos_size = sm:readInt16()
	for i = 1,shenqiInfos_size do
		local element = MsgDef.ShenQiInfo:create():decode(sm)
		table.insert(self.shenqiInfos, element)
	end
	local qhsMap_size = sm:readInt16()
	for i = 1,qhsMap_size do
		local kv = sm:readInt32();
		self.qhsMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5520101:opcode()
	return 5520101
end
--[[ 神器信息--]]
MsgDef.ShenQiInfo = {}

function MsgDef.ShenQiInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.id == nil then msg.id = 0 end --[[(int32) 神器id--]]
	if msg.qhLev == nil then msg.qhLev = 0 end --[[(int32) 强化等级--]]
	if msg.flLev == nil then msg.flLev = 0 end --[[(int32) 附灵等级--]]
	if msg.sxLev == nil then msg.sxLev = 0 end --[[(int32) 升星等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力(评分)--]]
	return msg
end

function MsgDef.ShenQiInfo:encode(sm)
	sm:writeInt32(self.id);
	sm:writeInt32(self.qhLev);
	sm:writeInt32(self.flLev);
	sm:writeInt32(self.sxLev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.ShenQiInfo:decode(sm)
	self.id = sm:readInt32();
	self.qhLev = sm:readInt32();
	self.flLev = sm:readInt32();
	self.sxLev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end

function MsgDef.ShenQiInfo:opcode()
	return "ShenQiInfo"
end

--[[ 请求神器强化升级(激活)--]]
MsgDef.Msg1520102 = {}

function MsgDef.Msg1520102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.shenqiId == nil then msg.shenqiId = 0 end --[[(int32) 神器id--]]
	return msg
end

function MsgDef.Msg1520102:encode(sm)
	sm:writeInt32(self.shenqiId);
	return self
end

function MsgDef.Msg1520102:decode(sm)
	self.shenqiId = sm:readInt32();
	return self
end

function MsgDef.Msg1520102:opcode()
	return 1520102
end

--[[ 请求神器强化升级(激活)(返回)--]]
MsgDef.Msg5520102 = {}
function MsgDef.Msg5520102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shenqiId = 0 --[[(int32) 神器id--]]
	msg.qhLev = 0 --[[(int32) 强化等级--]]
	return msg
end

function MsgDef.Msg5520102:encode(sm)
	sm:writeInt32(self.shenqiId);
	sm:writeInt32(self.qhLev);
	return self
end

function MsgDef.Msg5520102:decode(sm)
	self.shenqiId = sm:readInt32();
	self.qhLev = sm:readInt32();
	return self
end


function MsgDef.Msg5520102:opcode()
	return 5520102
end
--[[ 请求神器附灵升级--]]
MsgDef.Msg1520103 = {}

function MsgDef.Msg1520103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.shenqiId == nil then msg.shenqiId = 0 end --[[(int32) 神器id--]]
	return msg
end

function MsgDef.Msg1520103:encode(sm)
	sm:writeInt32(self.shenqiId);
	return self
end

function MsgDef.Msg1520103:decode(sm)
	self.shenqiId = sm:readInt32();
	return self
end

function MsgDef.Msg1520103:opcode()
	return 1520103
end

--[[ 请求神器附灵升级(返回)--]]
MsgDef.Msg5520103 = {}
function MsgDef.Msg5520103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shenqiId = 0 --[[(int32) 神器id--]]
	msg.flLev = 0 --[[(int32) 附灵等级--]]
	return msg
end

function MsgDef.Msg5520103:encode(sm)
	sm:writeInt32(self.shenqiId);
	sm:writeInt32(self.flLev);
	return self
end

function MsgDef.Msg5520103:decode(sm)
	self.shenqiId = sm:readInt32();
	self.flLev = sm:readInt32();
	return self
end


function MsgDef.Msg5520103:opcode()
	return 5520103
end
--[[ 请求神器升星--]]
MsgDef.Msg1520104 = {}

function MsgDef.Msg1520104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.shenqiId == nil then msg.shenqiId = 0 end --[[(int32) 神器id--]]
	return msg
end

function MsgDef.Msg1520104:encode(sm)
	sm:writeInt32(self.shenqiId);
	return self
end

function MsgDef.Msg1520104:decode(sm)
	self.shenqiId = sm:readInt32();
	return self
end

function MsgDef.Msg1520104:opcode()
	return 1520104
end

--[[ 请求神器升星(返回)--]]
MsgDef.Msg5520104 = {}
function MsgDef.Msg5520104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shenqiId = 0 --[[(int32) 神器id--]]
	msg.sxLev = 0 --[[(int32) 升星等级--]]
	return msg
end

function MsgDef.Msg5520104:encode(sm)
	sm:writeInt32(self.shenqiId);
	sm:writeInt32(self.sxLev);
	return self
end

function MsgDef.Msg5520104:decode(sm)
	self.shenqiId = sm:readInt32();
	self.sxLev = sm:readInt32();
	return self
end


function MsgDef.Msg5520104:opcode()
	return 5520104
end
--[[ 请求神器材料分解--]]
MsgDef.Msg1520105 = {}

function MsgDef.Msg1520105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包下标--]]
	return msg
end

function MsgDef.Msg1520105:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1520105:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1520105:opcode()
	return 1520105
end

--[[ 请求神器材料分解(返回)--]]
MsgDef.Msg5520105 = {}
function MsgDef.Msg5520105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gotQhsMap = {} --[[(map<int32,int32>) 本次获得的强化石map，弹窗用--]]
	return msg
end

function MsgDef.Msg5520105:encode(sm)
	sm:writeInt16(get_map_size(self.gotQhsMap))
	for kn,elm in ipairs(self.gotQhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5520105:decode(sm)
	local gotQhsMap_size = sm:readInt16()
	for i = 1,gotQhsMap_size do
		local kv = sm:readInt32();
		self.gotQhsMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5520105:opcode()
	return 5520105
end
--[[ 广播自己的神器强化石数值--]]
MsgDef.Msg8020205 = {}

function MsgDef.Msg8020205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qhsMap = {} --[[(map<int32,int32>) 强化石map--]]
	return msg
end

function MsgDef.Msg8020205:encode(sm)
	sm:writeInt16(get_map_size(self.qhsMap))
	for kn,elm in ipairs(self.qhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8020205:decode(sm)
	local qhsMap_size = sm:readInt16()
	for i = 1,qhsMap_size do
		local kv = sm:readInt32();
		self.qhsMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8020205:opcode()
	return 8020205
end

--[[ 请求神器寻宝信息--]]
MsgDef.Msg1030189 = {}

function MsgDef.Msg1030189:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030189:encode(sm)
	return self
end

function MsgDef.Msg1030189:decode(sm)
	return self
end

function MsgDef.Msg1030189:opcode()
	return 1030189
end

--[[ 请求神器寻宝信息(返回)--]]
MsgDef.Msg5030189 = {}
function MsgDef.Msg5030189:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030189:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030189:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030189:opcode()
	return 5030189
end
--[[ 请求神器寻宝积分商城--]]
MsgDef.Msg1030190 = {}

function MsgDef.Msg1030190:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030190:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030190:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030190:opcode()
	return 1030190
end

--[[ 请求神器寻宝积分商城(返回)--]]
MsgDef.Msg5030190 = {}
function MsgDef.Msg5030190:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030190:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030190:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030190:opcode()
	return 5030190
end
--[[ 请求神器寻宝--]]
MsgDef.Msg1030191 = {}

function MsgDef.Msg1030191:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030191:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030191:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030191:opcode()
	return 1030191
end

--[[ 请求神器寻宝(返回)--]]
MsgDef.Msg5030191 = {}
function MsgDef.Msg5030191:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030191:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030191:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030191:opcode()
	return 5030191
end
--[[ 上古神迹BOSS信息--]]
MsgDef.SgsjBossInfo = {}

function MsgDef.SgsjBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.SgsjBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.SgsjBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.sceneId = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.SgsjBossInfo:opcode()
	return "SgsjBossInfo"
end

--[[ 上古神迹BOSS血量广播--]]
MsgDef.Msg8110601 = {}

function MsgDef.Msg8110601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<SgsjBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8110601:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110601:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SgsjBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8110601:opcode()
	return 8110601
end

--[[ 上古神迹结算广播--]]
MsgDef.Msg8110602 = {}

function MsgDef.Msg8110602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.hateRoleName = "" --[[(string) hateRoleName--]]
	msg.items = {} --[[(array<SimpleItemInfo>) items--]]
	return msg
end

function MsgDef.Msg8110602:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.monsterId);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110602:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.monsterId = sm:readInt32();
	self.hateRoleName = sm:readString();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8110602:opcode()
	return 8110602
end

--[[ 上古神迹怒气值广播--]]
MsgDef.Msg8110603 = {}

function MsgDef.Msg8110603:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.anger = 0 --[[(int32) 怒气值--]]
	return msg
end

function MsgDef.Msg8110603:encode(sm)
	sm:writeInt32(self.anger);
	return self
end

function MsgDef.Msg8110603:decode(sm)
	self.anger = sm:readInt32();
	return self
end

function MsgDef.Msg8110603:opcode()
	return 8110603
end

--[[ 请求洪荒寻宝信息--]]
MsgDef.Msg1030192 = {}

function MsgDef.Msg1030192:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030192:encode(sm)
	return self
end

function MsgDef.Msg1030192:decode(sm)
	return self
end

function MsgDef.Msg1030192:opcode()
	return 1030192
end

--[[ 请求洪荒寻宝信息(返回)--]]
MsgDef.Msg5030192 = {}
function MsgDef.Msg5030192:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030192:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030192:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030192:opcode()
	return 5030192
end
--[[ 请求洪荒寻宝积分商城--]]
MsgDef.Msg1030193 = {}

function MsgDef.Msg1030193:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030193:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030193:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030193:opcode()
	return 1030193
end

--[[ 请求洪荒寻宝积分商城(返回)--]]
MsgDef.Msg5030193 = {}
function MsgDef.Msg5030193:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030193:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030193:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030193:opcode()
	return 5030193
end
--[[ 请求洪荒寻宝--]]
MsgDef.Msg1030194 = {}

function MsgDef.Msg1030194:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030194:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030194:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030194:opcode()
	return 1030194
end

--[[ 请求洪荒寻宝(返回)--]]
MsgDef.Msg5030194 = {}
function MsgDef.Msg5030194:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030194:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030194:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030194:opcode()
	return 5030194
end
--[[ 请求鲜花榜信息--]]
MsgDef.Msg1030320 = {}

function MsgDef.Msg1030320:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030320:encode(sm)
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030320:decode(sm)
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030320:opcode()
	return 1030320
end

--[[ 请求鲜花榜信息(返回)--]]
MsgDef.Msg5030320 = {}
function MsgDef.Msg5030320:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.nsRanks = {} --[[(array<FlowerRankInfo>) 女神榜--]]
	msg.hhRanks = {} --[[(array<FlowerRankInfo>) 护花榜--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.isShow = 0 --[[(int8) 是否展示时间 1:展示--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030320:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myScore);
	sm:writeInt16(#self.nsRanks)
	for i,elm in ipairs(self.nsRanks) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.hhRanks)
	for i,elm in ipairs(self.hhRanks) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actId);
	sm:writeInt32(self.myRank);
	sm:writeInt8(self.isShow);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030320:decode(sm)
	self.lastTime = sm:readInt32();
	self.myScore = sm:readInt32();
	local nsRanks_size = sm:readInt16()
	for i = 1,nsRanks_size do
		local element = MsgDef.FlowerRankInfo:create():decode(sm)
		table.insert(self.nsRanks, element)
	end
	local hhRanks_size = sm:readInt16()
	for i = 1,hhRanks_size do
		local element = MsgDef.FlowerRankInfo:create():decode(sm)
		table.insert(self.hhRanks, element)
	end
	self.actId = sm:readInt32();
	self.myRank = sm:readInt32();
	self.isShow = sm:readInt8();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030320:opcode()
	return 5030320
end
--[[ 鲜花榜信息--]]
MsgDef.FlowerRankInfo = {}

function MsgDef.FlowerRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.isFriend == nil then msg.isFriend = 0 end --[[(int8) 是否好友--]]
	return msg
end

function MsgDef.FlowerRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.score);
	sm:writeInt32(self.level);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.rank);
	sm:writeInt8(self.isFriend);
	return self
end

function MsgDef.FlowerRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.score = sm:readInt32();
	self.level = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.rank = sm:readInt32();
	self.isFriend = sm:readInt8();
	return self
end

function MsgDef.FlowerRankInfo:opcode()
	return "FlowerRankInfo"
end

--[[ 请求超值返回2--]]
MsgDef.Msg1030407 = {}

function MsgDef.Msg1030407:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取的配置id--]]
	return msg
end

function MsgDef.Msg1030407:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030407:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030407:opcode()
	return 1030407
end

--[[ 请求超值返回2(返回)--]]
MsgDef.Msg5030407 = {}
function MsgDef.Msg5030407:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftSec = 0 --[[(int32) 阶段剩余秒数--]]
	msg.costNum = 0 --[[(int32) 消耗材料数量--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取情况,key:配置id,value = 1已领取--]]
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.curType = 0 --[[(int8) 当前消耗类型--]]
	msg.cfgId = 0 --[[(int32) 领取的配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.curId = 0 --[[(int32) curId--]]
	return msg
end

function MsgDef.Msg5030407:encode(sm)
	sm:writeInt32(self.actLeftSec);
	sm:writeInt32(self.costNum);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.curType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curId);
	return self
end

function MsgDef.Msg5030407:decode(sm)
	self.actLeftSec = sm:readInt32();
	self.costNum = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	self.curType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curId = sm:readInt32();
	return self
end


function MsgDef.Msg5030407:opcode()
	return 5030407
end
--[[ 请求超值兑换2--]]
MsgDef.Msg1030408 = {}

function MsgDef.Msg1030408:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 兑换的配置id--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 兑换数量--]]
	return msg
end

function MsgDef.Msg1030408:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1030408:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1030408:opcode()
	return 1030408
end

--[[ 请求超值兑换2(返回)--]]
MsgDef.Msg5030408 = {}
function MsgDef.Msg5030408:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftSec = 0 --[[(int32) 当前类型剩余秒数--]]
	msg.exchInfos = {} --[[(map<int32,int32>) 兑换信息,key:配置id,value:已兑换次数--]]
	msg.reqType = 0 --[[(int8) 0:显示 1：领取--]]
	msg.curType = 0 --[[(int8) 当前类型--]]
	msg.cfgId = 0 --[[(int32) 兑换的配置id--]]
	msg.num = 0 --[[(int32) 兑换数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.curId = 0 --[[(int32) curId--]]
	return msg
end

function MsgDef.Msg5030408:encode(sm)
	sm:writeInt32(self.actLeftSec);
	sm:writeInt16(get_map_size(self.exchInfos))
	for kn,elm in ipairs(self.exchInfos) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.curType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.num);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curId);
	return self
end

function MsgDef.Msg5030408:decode(sm)
	self.actLeftSec = sm:readInt32();
	local exchInfos_size = sm:readInt16()
	for i = 1,exchInfos_size do
		local kv = sm:readInt32();
		self.exchInfos[kv] = sm:readInt32();
	end
	self.reqType = sm:readInt8();
	self.curType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.num = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curId = sm:readInt32();
	return self
end


function MsgDef.Msg5030408:opcode()
	return 5030408
end
--[[ 请求开服神器排行榜--]]
MsgDef.Msg1030409 = {}

function MsgDef.Msg1030409:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030409:encode(sm)
	return self
end

function MsgDef.Msg1030409:decode(sm)
	return self
end

function MsgDef.Msg1030409:opcode()
	return 1030409
end

--[[ 请求开服神器排行榜(返回)--]]
MsgDef.Msg5030409 = {}
function MsgDef.Msg5030409:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行信息--]]
	return msg
end

function MsgDef.Msg5030409:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.isShowTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030409:decode(sm)
	self.lastTime = sm:readInt32();
	self.isShowTime = sm:readInt8();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	return self
end


function MsgDef.Msg5030409:opcode()
	return 5030409
end
--[[ 请求限时神器排行榜--]]
MsgDef.Msg1030410 = {}

function MsgDef.Msg1030410:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030410:encode(sm)
	return self
end

function MsgDef.Msg1030410:decode(sm)
	return self
end

function MsgDef.Msg1030410:opcode()
	return 1030410
end

--[[ 请求限时神器排行榜(返回)--]]
MsgDef.Msg5030410 = {}
function MsgDef.Msg5030410:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行信息--]]
	return msg
end

function MsgDef.Msg5030410:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.isShowTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030410:decode(sm)
	self.lastTime = sm:readInt32();
	self.isShowTime = sm:readInt8();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	return self
end


function MsgDef.Msg5030410:opcode()
	return 5030410
end
--[[ 皮肤数据--]]
MsgDef.GrowSkinInfo = {}

function MsgDef.GrowSkinInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	if msg.skinType == nil then msg.skinType = 0 end --[[(int8) 类型 0:永久 1:限时--]]
	if msg.lastTime == nil then msg.lastTime = 0 end --[[(int32) 剩余时间--]]
	if msg.starNum == nil then msg.starNum = 0 end --[[(int32) 星数--]]
	return msg
end

function MsgDef.GrowSkinInfo:encode(sm)
	sm:writeInt32(self.skinId);
	sm:writeInt8(self.skinType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.starNum);
	return self
end

function MsgDef.GrowSkinInfo:decode(sm)
	self.skinId = sm:readInt32();
	self.skinType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.starNum = sm:readInt32();
	return self
end

function MsgDef.GrowSkinInfo:opcode()
	return "GrowSkinInfo"
end

--[[ 请求合服折扣礼包--]]
MsgDef.Msg1030411 = {}

function MsgDef.Msg1030411:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:购买--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030411:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030411:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030411:opcode()
	return 1030411
end

--[[ 请求合服折扣礼包(返回)--]]
MsgDef.Msg5030411 = {}
function MsgDef.Msg5030411:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.buys = {} --[[(map<int32,int32>) 已购买的物品id->购买次数--]]
	msg.todayLeftTime = 0 --[[(int32) j今日剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	msg.curDay = 0 --[[(int32) 当前第几天,从1开始--]]
	return msg
end

function MsgDef.Msg5030411:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.buys))
	for kn,elm in ipairs(self.buys) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.todayLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030411:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local buys_size = sm:readInt16()
	for i = 1,buys_size do
		local kv = sm:readInt32();
		self.buys[kv] = sm:readInt32();
	end
	self.todayLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030411:opcode()
	return 5030411
end
--[[ 请求世界杯信息--]]
MsgDef.Msg1030501 = {}

function MsgDef.Msg1030501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:押注--]]
	if msg.field == nil then msg.field = 0 end --[[(int32) 场次--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍--]]
	if msg.confId == nil then msg.confId = 0 end --[[(int32) 押注档次--]]
	return msg
end

function MsgDef.Msg1030501:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.field);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.confId);
	return self
end

function MsgDef.Msg1030501:decode(sm)
	self.reqType = sm:readInt8();
	self.field = sm:readInt32();
	self.teamId = sm:readInt32();
	self.confId = sm:readInt32();
	return self
end

function MsgDef.Msg1030501:opcode()
	return 1030501
end

--[[ 请求世界杯信息(返回)--]]
MsgDef.Msg5030501 = {}
function MsgDef.Msg5030501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.infos = {} --[[(array<WorldCupInfo>) 对战信息--]]
	msg.reqType = 0 --[[(int8) 0:信息 1:押注--]]
	msg.stakeInfos = {} --[[(array<WorldCupStakeInfo>) 押注信息--]]
	return msg
end

function MsgDef.Msg5030501:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.infos)
	for i,elm in ipairs(self.infos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.stakeInfos)
	for i,elm in ipairs(self.stakeInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030501:decode(sm)
	self.lastTime = sm:readInt32();
	local infos_size = sm:readInt16()
	for i = 1,infos_size do
		local element = MsgDef.WorldCupInfo:create():decode(sm)
		table.insert(self.infos, element)
	end
	self.reqType = sm:readInt8();
	local stakeInfos_size = sm:readInt16()
	for i = 1,stakeInfos_size do
		local element = MsgDef.WorldCupStakeInfo:create():decode(sm)
		table.insert(self.stakeInfos, element)
	end
	return self
end


function MsgDef.Msg5030501:opcode()
	return 5030501
end
--[[ 请求充值翻牌--]]
MsgDef.Msg1030412 = {}

function MsgDef.Msg1030412:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:翻牌2:一键翻牌3:重置--]]
	if msg.openIndex == nil then msg.openIndex = 0 end --[[(int32) 开启下标，最顶为1，从左到右，从上到下，依次递增--]]
	return msg
end

function MsgDef.Msg1030412:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.openIndex);
	return self
end

function MsgDef.Msg1030412:decode(sm)
	self.reqType = sm:readInt8();
	self.openIndex = sm:readInt32();
	return self
end

function MsgDef.Msg1030412:opcode()
	return 1030412
end

--[[ 请求充值翻牌(返回)--]]
MsgDef.Msg5030412 = {}
function MsgDef.Msg5030412:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:翻牌2:一键翻牌3:重置--]]
	msg.openIndex = 0 --[[(int32) 开启下标，最顶为1，从左到右，从上到下，依次递增--]]
	msg.dayFreeCount = 0 --[[(int32) 今日剩余免费次数--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.score = 0 --[[(int32) 当前积分--]]
	msg.opens = {} --[[(map<int32,int32>) 已翻的牌,key:牌index,value:配置奖励id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) --]]
	msg.indexTypes = {} --[[(map<int32,int32>) key:牌的下标1~7，value:1低级牌2:高级牌--]]
	msg.lastOpens = {} --[[(map<int32,int32>) 翻牌操作之前打开过的东西，用于动画展示--]]
	msg.needXyb = 0 --[[(int32) 还需要x元宝可加1次--]]
	msg.curBless = 0 --[[(int32) 当前祝福值--]]
	return msg
end

function MsgDef.Msg5030412:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.openIndex);
	sm:writeInt32(self.dayFreeCount);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.score);
	sm:writeInt16(get_map_size(self.opens))
	for kn,elm in ipairs(self.opens) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.indexTypes))
	for kn,elm in ipairs(self.indexTypes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.lastOpens))
	for kn,elm in ipairs(self.lastOpens) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.needXyb);
	sm:writeInt32(self.curBless);
	return self
end

function MsgDef.Msg5030412:decode(sm)
	self.reqType = sm:readInt8();
	self.openIndex = sm:readInt32();
	self.dayFreeCount = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	self.score = sm:readInt32();
	local opens_size = sm:readInt16()
	for i = 1,opens_size do
		local kv = sm:readInt32();
		self.opens[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local indexTypes_size = sm:readInt16()
	for i = 1,indexTypes_size do
		local kv = sm:readInt32();
		self.indexTypes[kv] = sm:readInt32();
	end
	local lastOpens_size = sm:readInt16()
	for i = 1,lastOpens_size do
		local kv = sm:readInt32();
		self.lastOpens[kv] = sm:readInt32();
	end
	self.needXyb = sm:readInt32();
	self.curBless = sm:readInt32();
	return self
end


function MsgDef.Msg5030412:opcode()
	return 5030412
end
--[[ 世界杯信息--]]
MsgDef.WorldCupInfo = {}

function MsgDef.WorldCupInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.field == nil then msg.field = 0 end --[[(int32) 场次(配置)--]]
	if msg.teanInfo == nil then msg.teanInfo = {} end --[[(map<int32,string>) 对决队伍信息(id->队伍名)--]]
	if msg.endTime == nil then msg.endTime = 0 end --[[(int32) 押注截止时间(开始时间)--]]
	if msg.winTeamId == nil then msg.winTeamId = 0 end --[[(int32) 胜队id--]]
	return msg
end

function MsgDef.WorldCupInfo:encode(sm)
	sm:writeInt32(self.field);
	sm:writeInt16(get_map_size(self.teanInfo))
	for kn,elm in ipairs(self.teanInfo) do
		sm:writeInt32(kn);
		sm:writeString(elm);
	end
	sm:writeInt32(self.endTime);
	sm:writeInt32(self.winTeamId);
	return self
end

function MsgDef.WorldCupInfo:decode(sm)
	self.field = sm:readInt32();
	local teanInfo_size = sm:readInt16()
	for i = 1,teanInfo_size do
		local kv = sm:readInt32();
		self.teanInfo[kv] = sm:readString();
	end
	self.endTime = sm:readInt32();
	self.winTeamId = sm:readInt32();
	return self
end

function MsgDef.WorldCupInfo:opcode()
	return "WorldCupInfo"
end

--[[ 世界杯结果信息--]]
MsgDef.WorldCupResultInfo = {}

function MsgDef.WorldCupResultInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id(配置)--]]
	if msg.result == nil then msg.result = 0 end --[[(int8) 结果 1:胜 2:负--]]
	if msg.field == nil then msg.field = 0 end --[[(int32) 场次(配置)--]]
	return msg
end

function MsgDef.WorldCupResultInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt8(self.result);
	sm:writeInt32(self.field);
	return self
end

function MsgDef.WorldCupResultInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.result = sm:readInt8();
	self.field = sm:readInt32();
	return self
end

function MsgDef.WorldCupResultInfo:opcode()
	return "WorldCupResultInfo"
end

--[[ 后台世界杯结果--]]
MsgDef.Msg168401 = {}

function MsgDef.Msg168401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.calc == nil then msg.calc = 0 end --[[(int8) 是否立即结算 1:立即结算 0:不立即结算，走定时器--]]
	if msg.results == nil then msg.results = {} end --[[(array<WorldCupResultInfo>) 世界杯结果--]]
	return msg
end

function MsgDef.Msg168401:encode(sm)
	sm:writeInt8(self.calc);
	sm:writeInt16(#self.results)
	for i,elm in ipairs(self.results) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg168401:decode(sm)
	self.calc = sm:readInt8();
	local results_size = sm:readInt16()
	for i = 1,results_size do
		local element = MsgDef.WorldCupResultInfo:create():decode(sm)
		table.insert(self.results, element)
	end
	return self
end

function MsgDef.Msg168401:opcode()
	return 168401
end

--[[ 后台世界杯结果(返回)--]]
MsgDef.Msg568401 = {}
function MsgDef.Msg568401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568401:encode(sm)
	return self
end

function MsgDef.Msg568401:decode(sm)
	return self
end


function MsgDef.Msg568401:opcode()
	return 568401
end
--[[ 后台踢下线--]]
MsgDef.Msg168402 = {}

function MsgDef.Msg168402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleIds == nil then msg.roleIds = {} end --[[(array<int64>) 角色列表--]]
	if msg.reason == nil then msg.reason = 0 end --[[(int8) 原因--]]
	return msg
end

function MsgDef.Msg168402:encode(sm)
	sm:writeInt16(get_map_size(self.roleIds))
	for i,elm in ipairs(self.roleIds) do
		sm:writeInt64(elm);
	end
	sm:writeInt8(self.reason);
	return self
end

function MsgDef.Msg168402:decode(sm)
	local roleIds_size = sm:readInt16()
	for i = 1,roleIds_size do
		local elm = sm:readInt64();
		table.insert(self.roleIds, elm)
	end
	self.reason = sm:readInt8();
	return self
end

function MsgDef.Msg168402:opcode()
	return 168402
end

--[[ 后台踢下线(返回)--]]
MsgDef.Msg568402 = {}
function MsgDef.Msg568402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568402:encode(sm)
	return self
end

function MsgDef.Msg568402:decode(sm)
	return self
end


function MsgDef.Msg568402:opcode()
	return 568402
end
--[[ 请求世界杯兑换信息--]]
MsgDef.Msg1030502 = {}

function MsgDef.Msg1030502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030502:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030502:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030502:opcode()
	return 1030502
end

--[[ 请求世界杯兑换信息(返回)--]]
MsgDef.Msg5030502 = {}
function MsgDef.Msg5030502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:兑换--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.changTimesData = {} --[[(map<int32,int32>) 兑换次数--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030502:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.changTimesData))
	for kn,elm in ipairs(self.changTimesData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030502:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local changTimesData_size = sm:readInt16()
	for i = 1,changTimesData_size do
		local kv = sm:readInt32();
		self.changTimesData[kv] = sm:readInt32();
	end
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030502:opcode()
	return 5030502
end
--[[ 世界杯押注信息--]]
MsgDef.WorldCupStakeInfo = {}

function MsgDef.WorldCupStakeInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.field == nil then msg.field = 0 end --[[(int32) 场次--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍--]]
	if msg.stakeInfo == nil then msg.stakeInfo = {} end --[[(array<int32>) 押注档次--]]
	return msg
end

function MsgDef.WorldCupStakeInfo:encode(sm)
	sm:writeInt32(self.field);
	sm:writeInt32(self.teamId);
	sm:writeInt16(get_map_size(self.stakeInfo))
	for i,elm in ipairs(self.stakeInfo) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.WorldCupStakeInfo:decode(sm)
	self.field = sm:readInt32();
	self.teamId = sm:readInt32();
	local stakeInfo_size = sm:readInt16()
	for i = 1,stakeInfo_size do
		local elm = sm:readInt32();
		table.insert(self.stakeInfo, elm)
	end
	return self
end

function MsgDef.WorldCupStakeInfo:opcode()
	return "WorldCupStakeInfo"
end

--[[ 请求神器寻宝返还--]]
MsgDef.Msg1030413 = {}

function MsgDef.Msg1030413:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取配置id--]]
	return msg
end

function MsgDef.Msg1030413:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030413:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030413:opcode()
	return 1030413
end

--[[ 请求神器寻宝返还(返回)--]]
MsgDef.Msg5030413 = {}
function MsgDef.Msg5030413:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:领取--]]
	msg.cfgId = 0 --[[(int32) 领取配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 已领取标识key:配置id:value:1已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.xbCount = 0 --[[(int32) 当前寻宝次数--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030413:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.xbCount);
	sm:writeInt32(self.actLeftTime);
	return self
end

function MsgDef.Msg5030413:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.xbCount = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030413:opcode()
	return 5030413
end
--[[ 后台活动开启--]]
MsgDef.Msg168403 = {}

function MsgDef.Msg168403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.p1 == nil then msg.p1 = 0 end --[[(int32) 参数1,当timeType=1时,p1=指定开服天数;timeType=2时,活动开启时间--]]
	if msg.p2 == nil then msg.p2 = 0 end --[[(int32) 参数2,当timeType=1时,p1=指定合服天数;timeType=2时,活动结束天数--]]
	if msg.timeType == nil then msg.timeType = 0 end --[[(int32) 活动时间类型:1为开服合服活动;2为限时活动  100:强制关闭 101查看活动--]]
	return msg
end

function MsgDef.Msg168403:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.p1);
	sm:writeInt32(self.p2);
	sm:writeInt32(self.timeType);
	return self
end

function MsgDef.Msg168403:decode(sm)
	self.actId = sm:readInt32();
	self.p1 = sm:readInt32();
	self.p2 = sm:readInt32();
	self.timeType = sm:readInt32();
	return self
end

function MsgDef.Msg168403:opcode()
	return 168403
end

--[[ 后台活动开启(返回)--]]
MsgDef.Msg568403 = {}
function MsgDef.Msg568403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.str = "" --[[(string) 活动状态--]]
	return msg
end

function MsgDef.Msg568403:encode(sm)
	sm:writeString(self.str);
	return self
end

function MsgDef.Msg568403:decode(sm)
	self.str = sm:readString();
	return self
end


function MsgDef.Msg568403:opcode()
	return 568403
end
--[[ 广播神器战力--]]
MsgDef.Msg8020206 = {}

function MsgDef.Msg8020206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.powers = {} --[[(map<int32,int32>) key:神器id,value:战力--]]
	return msg
end

function MsgDef.Msg8020206:encode(sm)
	sm:writeInt16(get_map_size(self.powers))
	for kn,elm in ipairs(self.powers) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8020206:decode(sm)
	local powers_size = sm:readInt16()
	for i = 1,powers_size do
		local kv = sm:readInt32();
		self.powers[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8020206:opcode()
	return 8020206
end

--[[ 请求充值返利活动--]]
MsgDef.Msg1030321 = {}

function MsgDef.Msg1030321:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030321:encode(sm)
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030321:decode(sm)
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030321:opcode()
	return 1030321
end

--[[ 请求充值返利活动(返回)--]]
MsgDef.Msg5030321 = {}
function MsgDef.Msg5030321:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.czTimesData = {} --[[(map<int32,int32>) 已充值领取元宝对应次数--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg5030321:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.czTimesData))
	for kn,elm in ipairs(self.czTimesData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg5030321:decode(sm)
	self.lastTime = sm:readInt32();
	local czTimesData_size = sm:readInt16()
	for i = 1,czTimesData_size do
		local kv = sm:readInt32();
		self.czTimesData[kv] = sm:readInt32();
	end
	self.actId = sm:readInt32();
	return self
end


function MsgDef.Msg5030321:opcode()
	return 5030321
end
--[[ 请求结婚热度排行榜信息--]]
MsgDef.Msg1030322 = {}

function MsgDef.Msg1030322:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg1030322:encode(sm)
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg1030322:decode(sm)
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg1030322:opcode()
	return 1030322
end

--[[ 请求结婚热度排行榜信息(返回)--]]
MsgDef.Msg5030322 = {}
function MsgDef.Msg5030322:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.rankInfos = {} --[[(array<MarryRankingInfo>) 排名信息--]]
	msg.myHotValue = 0 --[[(int32) 我的婚礼热度--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	return msg
end

function MsgDef.Msg5030322:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myHotValue);
	sm:writeInt32(self.myRank);
	return self
end

function MsgDef.Msg5030322:decode(sm)
	self.actId = sm:readInt32();
	self.lastTime = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.MarryRankingInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.myHotValue = sm:readInt32();
	self.myRank = sm:readInt32();
	return self
end


function MsgDef.Msg5030322:opcode()
	return 5030322
end
--[[ 请求结婚称号排行榜信息--]]
MsgDef.Msg1030323 = {}

function MsgDef.Msg1030323:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页--]]
	return msg
end

function MsgDef.Msg1030323:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1030323:decode(sm)
	self.actId = sm:readInt32();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1030323:opcode()
	return 1030323
end

--[[ 请求结婚称号排行榜信息(返回)--]]
MsgDef.Msg5030323 = {}
function MsgDef.Msg5030323:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.rankInfo = {} --[[(array<MarryRankingInfo>) 排行--]]
	msg.page = 0 --[[(int32) 当前页--]]
	msg.maxPage = 0 --[[(int32) 最大页--]]
	msg.gradeData = {} --[[(map<int32,int32>) 结婚档次记录--]]
	return msg
end

function MsgDef.Msg5030323:encode(sm)
	sm:writeInt32(self.actId);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.rankInfo)
	for i,elm in ipairs(self.rankInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.maxPage);
	sm:writeInt16(get_map_size(self.gradeData))
	for kn,elm in ipairs(self.gradeData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030323:decode(sm)
	self.actId = sm:readInt32();
	self.lastTime = sm:readInt32();
	local rankInfo_size = sm:readInt16()
	for i = 1,rankInfo_size do
		local element = MsgDef.MarryRankingInfo:create():decode(sm)
		table.insert(self.rankInfo, element)
	end
	self.page = sm:readInt32();
	self.maxPage = sm:readInt32();
	local gradeData_size = sm:readInt16()
	for i = 1,gradeData_size do
		local kv = sm:readInt32();
		self.gradeData[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030323:opcode()
	return 5030323
end
--[[ 请求仙盟合入--]]
MsgDef.Msg1250701 = {}

function MsgDef.Msg1250701:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:合入请求 1:同意 2:拒绝 3:接受他盟请求设置--]]
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 合入仙盟id或被合入仙盟id--]]
	if msg.acceptType == nil then msg.acceptType = 0 end --[[(int8) 0:接受 1:不接受--]]
	return msg
end

function MsgDef.Msg1250701:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.gangId);
	sm:writeInt8(self.acceptType);
	return self
end

function MsgDef.Msg1250701:decode(sm)
	self.reqType = sm:readInt8();
	self.gangId = sm:readInt64();
	self.acceptType = sm:readInt8();
	return self
end

function MsgDef.Msg1250701:opcode()
	return 1250701
end

--[[ 请求仙盟合入(返回)--]]
MsgDef.Msg5250701 = {}
function MsgDef.Msg5250701:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.acceptType = 0 --[[(int8) 0:接受 1:不接受--]]
	msg.reqType = 0 --[[(int8) 0:合入请求 1:同意 2:拒绝 3:接受他盟请求设置--]]
	return msg
end

function MsgDef.Msg5250701:encode(sm)
	sm:writeInt8(self.acceptType);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5250701:decode(sm)
	self.acceptType = sm:readInt8();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5250701:opcode()
	return 5250701
end
--[[ 仙盟合入广播--]]
MsgDef.Msg8060102 = {}

function MsgDef.Msg8060102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gangId = 0 --[[(int64) 合入仙盟id--]]
	msg.gangName = "" --[[(string) 仙盟名--]]
	msg.gangAdminName = "" --[[(string) 盟主名--]]
	msg.acceptType = 0 --[[(int8) 0:合入请求 1:同意 2:拒绝--]]
	return msg
end

function MsgDef.Msg8060102:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeString(self.gangName);
	sm:writeString(self.gangAdminName);
	sm:writeInt8(self.acceptType);
	return self
end

function MsgDef.Msg8060102:decode(sm)
	self.gangId = sm:readInt64();
	self.gangName = sm:readString();
	self.gangAdminName = sm:readString();
	self.acceptType = sm:readInt8();
	return self
end

function MsgDef.Msg8060102:opcode()
	return 8060102
end

--[[ 请求射门好礼活动信息--]]
MsgDef.Msg1030324 = {}

function MsgDef.Msg1030324:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:显示 2:射门 3:领取累计奖励--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 射门次数--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取累计奖励id--]]
	return msg
end

function MsgDef.Msg1030324:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.actId);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030324:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.actId = sm:readInt32();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030324:opcode()
	return 1030324
end

--[[ 请求射门好礼活动信息(返回)--]]
MsgDef.Msg5030324 = {}
function MsgDef.Msg5030324:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:显示 2:射门 3:领取累计奖励--]]
	msg.times = 0 --[[(int32) 射门次数--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.boxData = {} --[[(map<int32,int32>) 宝箱数据<index,id>--]]
	msg.sumGotData = {} --[[(array<int32>) 已领取累计奖励id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.cid = 0 --[[(int32) 领取累计奖励id--]]
	msg.currIndex = 0 --[[(int32) 当前球索引--]]
	msg.shootSumCount = 0 --[[(int32) 总次数--]]
	return msg
end

function MsgDef.Msg5030324:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.boxData))
	for kn,elm in ipairs(self.boxData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.sumGotData))
	for i,elm in ipairs(self.sumGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actId);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.currIndex);
	sm:writeInt32(self.shootSumCount);
	return self
end

function MsgDef.Msg5030324:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.lastTime = sm:readInt32();
	local boxData_size = sm:readInt16()
	for i = 1,boxData_size do
		local kv = sm:readInt32();
		self.boxData[kv] = sm:readInt32();
	end
	local sumGotData_size = sm:readInt16()
	for i = 1,sumGotData_size do
		local ele = sm:readInt32();
		table.insert(self.sumGotData, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actId = sm:readInt32();
	self.cid = sm:readInt32();
	self.currIndex = sm:readInt32();
	self.shootSumCount = sm:readInt32();
	return self
end


function MsgDef.Msg5030324:opcode()
	return 5030324
end
--[[ 请求boss次数购买--]]
MsgDef.Msg1330305 = {}

function MsgDef.Msg1330305:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneKind == nil then msg.sceneKind = 0 end --[[(int32) 9世界boss31宠物岛47飞升之地49神兽岛--]]
	if msg.count == nil then msg.count = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1330305:encode(sm)
	sm:writeInt32(self.sceneKind);
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1330305:decode(sm)
	self.sceneKind = sm:readInt32();
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1330305:opcode()
	return 1330305
end

--[[ 请求boss次数购买(返回)--]]
MsgDef.Msg5330305 = {}
function MsgDef.Msg5330305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneKind = 0 --[[(int32) 9世界boss31宠物岛47飞升之地49神兽岛--]]
	msg.count = 0 --[[(int32) 购买次数--]]
	msg.dayBuyCount = 0 --[[(int32) 今日购买次数--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	return msg
end

function MsgDef.Msg5330305:encode(sm)
	sm:writeInt32(self.sceneKind);
	sm:writeInt32(self.count);
	sm:writeInt32(self.dayBuyCount);
	sm:writeInt32(self.leftTired);
	return self
end

function MsgDef.Msg5330305:decode(sm)
	self.sceneKind = sm:readInt32();
	self.count = sm:readInt32();
	self.dayBuyCount = sm:readInt32();
	self.leftTired = sm:readInt32();
	return self
end


function MsgDef.Msg5330305:opcode()
	return 5330305
end
--[[ 请求追杀令追杀--]]
MsgDef.Msg1070205 = {}

function MsgDef.Msg1070205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 目标roleId--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:位置信息 1:追杀--]]
	return msg
end

function MsgDef.Msg1070205:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1070205:decode(sm)
	self.roleId = sm:readInt64();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1070205:opcode()
	return 1070205
end

--[[ 请求追杀令追杀(返回)--]]
MsgDef.Msg5070205 = {}
function MsgDef.Msg5070205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景--]]
	msg.pox = 0 --[[(int16) x坐标--]]
	msg.poy = 0 --[[(int16) y坐标--]]
	msg.reqType = 0 --[[(int8) 0:位置信息 1:追杀--]]
	return msg
end

function MsgDef.Msg5070205:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5070205:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5070205:opcode()
	return 5070205
end
--[[ 请求合服基金信息--]]
MsgDef.Msg1030325 = {}

function MsgDef.Msg1030325:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:投资 2:领取奖励--]]
	if msg.invType == nil then msg.invType = 0 end --[[(int8) 投资档次(1-3配置)--]]
	if msg.invId == nil then msg.invId = 0 end --[[(int32) 领取奖励的id--]]
	return msg
end

function MsgDef.Msg1030325:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.invType);
	sm:writeInt32(self.invId);
	return self
end

function MsgDef.Msg1030325:decode(sm)
	self.reqType = sm:readInt8();
	self.invType = sm:readInt8();
	self.invId = sm:readInt32();
	return self
end

function MsgDef.Msg1030325:opcode()
	return 1030325
end

--[[ 请求合服基金信息(返回)--]]
MsgDef.Msg5030325 = {}
function MsgDef.Msg5030325:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:投资 2:领取奖励--]]
	msg.invType = {} --[[(array<int32>) 已投资档次(1-3配置)--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.mergeDay = 0 --[[(int32) 合服天数--]]
	return msg
end

function MsgDef.Msg5030325:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.invType))
	for i,elm in ipairs(self.invType) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mergeDay);
	return self
end

function MsgDef.Msg5030325:decode(sm)
	self.reqType = sm:readInt8();
	local invType_size = sm:readInt16()
	for i = 1,invType_size do
		local ele = sm:readInt32();
		table.insert(self.invType, ele)
	end
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mergeDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030325:opcode()
	return 5030325
end
--[[ 请求神炉炼宝--]]
MsgDef.Msg1030503 = {}

function MsgDef.Msg1030503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:抽一次2:抽10次3:神炉开奖--]]
	return msg
end

function MsgDef.Msg1030503:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030503:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030503:opcode()
	return 1030503
end

--[[ 请求神炉炼宝(返回)--]]
MsgDef.Msg5030503 = {}
function MsgDef.Msg5030503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:抽一次2:抽10次3:神炉开奖--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.slz = 0 --[[(int32) 当前神炉值--]]
	msg.lastCfgId = 0 --[[(int32) 最后一次配置id--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030503:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.slz);
	sm:writeInt32(self.lastCfgId);
	sm:writeInt32(self.actLeftTime);
	return self
end

function MsgDef.Msg5030503:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.slz = sm:readInt32();
	self.lastCfgId = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030503:opcode()
	return 5030503
end
--[[ 广播坐骑9系统属性--]]
MsgDef.Msg8020207 = {}

function MsgDef.Msg8020207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 1:坐骑2:仙羽3:神兵4:仙器5:法宝6:伙伴仙羽7:伙伴神兵8:伙伴仙器9:伙伴法宝--]]
	msg.attris = {} --[[(map<int32,int32>) 临时属性--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg8020207:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg8020207:decode(sm)
	self.reqType = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	return self
end

function MsgDef.Msg8020207:opcode()
	return 8020207
end

--[[ 请求摇钱树--]]
MsgDef.Msg1030504 = {}

function MsgDef.Msg1030504:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:抽奖--]]
	return msg
end

function MsgDef.Msg1030504:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030504:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030504:opcode()
	return 1030504
end

--[[ 请求摇钱树(返回)--]]
MsgDef.Msg5030504 = {}
function MsgDef.Msg5030504:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:抽奖--]]
	msg.cfgs = {} --[[(array<int32>) 显示的元宝数列表--]]
	msg.logs = {} --[[(array<string>) 日志--]]
	msg.maxBacks = {} --[[(map<int32,int32>) 最大返回--]]
	msg.czSum = 0 --[[(int32) 活动期间充值--]]
	msg.backSum = 0 --[[(int32) 返利总数量--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余秒数--]]
	msg.leftCount = 0 --[[(int32) 剩余抽奖次数--]]
	msg.lastIndex = 0 --[[(int32) 抽中的位置--]]
	return msg
end

function MsgDef.Msg5030504:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.cfgs))
	for i,elm in ipairs(self.cfgs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.maxBacks))
	for kn,elm in ipairs(self.maxBacks) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.backSum);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.lastIndex);
	return self
end

function MsgDef.Msg5030504:decode(sm)
	self.reqType = sm:readInt8();
	local cfgs_size = sm:readInt16()
	for i = 1,cfgs_size do
		local ele = sm:readInt32();
		table.insert(self.cfgs, ele)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	local maxBacks_size = sm:readInt16()
	for i = 1,maxBacks_size do
		local kv = sm:readInt32();
		self.maxBacks[kv] = sm:readInt32();
	end
	self.czSum = sm:readInt32();
	self.backSum = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	self.leftCount = sm:readInt32();
	self.lastIndex = sm:readInt32();
	return self
end


function MsgDef.Msg5030504:opcode()
	return 5030504
end
--[[ 请求五行装备部位信息--]]
MsgDef.Msg1530101 = {}

function MsgDef.Msg1530101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 0:全部部位,1~5 单独部位--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.svrId == nil then msg.svrId = 0 end --[[(int32) 主服id--]]
	return msg
end

function MsgDef.Msg1530101:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	return self
end

function MsgDef.Msg1530101:decode(sm)
	self.part = sm:readInt8();
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	return self
end

function MsgDef.Msg1530101:opcode()
	return 1530101
end

--[[ 请求五行装备部位信息(返回)--]]
MsgDef.Msg5530101 = {}
function MsgDef.Msg5530101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.part = 0 --[[(int8) 0:全部部位,1~5 单独部位--]]
	msg.roleId = 0 --[[(int64) 玩家Id--]]
	msg.svrId = 0 --[[(int32) 主服id--]]
	msg.partInfos = {} --[[(array<WxPartInfo>) 部位信息--]]
	msg.power = 0 --[[(int32) 五行系统战力--]]
	return msg
end

function MsgDef.Msg5530101:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.svrId);
	sm:writeInt16(#self.partInfos)
	for i,elm in ipairs(self.partInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5530101:decode(sm)
	self.part = sm:readInt8();
	self.roleId = sm:readInt64();
	self.svrId = sm:readInt32();
	local partInfos_size = sm:readInt16()
	for i = 1,partInfos_size do
		local element = MsgDef.WxPartInfo:create():decode(sm)
		table.insert(self.partInfos, element)
	end
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5530101:opcode()
	return 5530101
end
--[[ 请求穿脱五行装备--]]
MsgDef.Msg1530102 = {}

function MsgDef.Msg1530102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) reqType为0时代表背包位置,否则装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1530102:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1530102:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1530102:opcode()
	return 1530102
end

--[[ 请求穿脱五行装备(返回)--]]
MsgDef.Msg5530102 = {}
function MsgDef.Msg5530102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5530102:encode(sm)
	return self
end

function MsgDef.Msg5530102:decode(sm)
	return self
end


function MsgDef.Msg5530102:opcode()
	return 5530102
end
--[[ 五行装备部位信息--]]
MsgDef.WxPartInfo = {}

function MsgDef.WxPartInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位1~5--]]
	if msg.strenLev == nil then msg.strenLev = 0 end --[[(int32) 强化等级--]]
	if msg.effectStrenLev == nil then msg.effectStrenLev = 0 end --[[(int32) 生效的强化等级--]]
	return msg
end

function MsgDef.WxPartInfo:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt32(self.strenLev);
	sm:writeInt32(self.effectStrenLev);
	return self
end

function MsgDef.WxPartInfo:decode(sm)
	self.part = sm:readInt8();
	self.strenLev = sm:readInt32();
	self.effectStrenLev = sm:readInt32();
	return self
end

function MsgDef.WxPartInfo:opcode()
	return "WxPartInfo"
end

--[[ 请求五行装备强化--]]
MsgDef.Msg1530103 = {}

function MsgDef.Msg1530103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1单次强化,2强化10次--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 强化部位--]]
	return msg
end

function MsgDef.Msg1530103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg1530103:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt32();
	return self
end

function MsgDef.Msg1530103:opcode()
	return 1530103
end

--[[ 请求五行装备强化(返回)--]]
MsgDef.Msg5530103 = {}
function MsgDef.Msg5530103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1单次强化,2强化10次--]]
	msg.part = 0 --[[(int32) 强化部位--]]
	msg.partInfo = MsgDef.WxPartInfo:create() --[[(WxPartInfo) 五行部位信息--]]
	return msg
end

function MsgDef.Msg5530103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.part);
	self.partInfo:encode(sm)
	return self
end

function MsgDef.Msg5530103:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt32();
	self.partInfo:decode(sm)
	return self
end


function MsgDef.Msg5530103:opcode()
	return 5530103
end
--[[ 请求五行装备套装--]]
MsgDef.Msg1530104 = {}

function MsgDef.Msg1530104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1530104:encode(sm)
	return self
end

function MsgDef.Msg1530104:decode(sm)
	return self
end

function MsgDef.Msg1530104:opcode()
	return 1530104
end

--[[ 请求五行装备套装(返回)--]]
MsgDef.Msg5530104 = {}
function MsgDef.Msg5530104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.activeSuits = {} --[[(array<int32>) 激活的套装数据--]]
	return msg
end

function MsgDef.Msg5530104:encode(sm)
	sm:writeInt16(get_map_size(self.activeSuits))
	for i,elm in ipairs(self.activeSuits) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5530104:decode(sm)
	local activeSuits_size = sm:readInt16()
	for i = 1,activeSuits_size do
		local ele = sm:readInt32();
		table.insert(self.activeSuits, ele)
	end
	return self
end


function MsgDef.Msg5530104:opcode()
	return 5530104
end
--[[ 请求五行装备合成--]]
MsgDef.Msg1530105 = {}

function MsgDef.Msg1530105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:5合1,2:2合一--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 合成材料所在背包下标--]]
	return msg
end

function MsgDef.Msg1530105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1530105:decode(sm)
	self.reqType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1530105:opcode()
	return 1530105
end

--[[ 请求五行装备合成(返回)--]]
MsgDef.Msg5530105 = {}
function MsgDef.Msg5530105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:5合1,2:2合一--]]
	msg.indexs = {} --[[(array<int32>) 合成材料所在背包下标--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5530105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5530105:decode(sm)
	self.reqType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local ele = sm:readInt32();
		table.insert(self.indexs, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5530105:opcode()
	return 5530105
end
--[[ 请求剑灵寻宝信息--]]
MsgDef.Msg1030195 = {}

function MsgDef.Msg1030195:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030195:encode(sm)
	return self
end

function MsgDef.Msg1030195:decode(sm)
	return self
end

function MsgDef.Msg1030195:opcode()
	return 1030195
end

--[[ 请求剑灵寻宝信息(返回)--]]
MsgDef.Msg5030195 = {}
function MsgDef.Msg5030195:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030195:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030195:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030195:opcode()
	return 5030195
end
--[[ 请求剑灵宝积分商城--]]
MsgDef.Msg1030196 = {}

function MsgDef.Msg1030196:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030196:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030196:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030196:opcode()
	return 1030196
end

--[[ 请求剑灵宝积分商城(返回)--]]
MsgDef.Msg5030196 = {}
function MsgDef.Msg5030196:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030196:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030196:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030196:opcode()
	return 5030196
end
--[[ 请求剑灵寻宝--]]
MsgDef.Msg1030197 = {}

function MsgDef.Msg1030197:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030197:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030197:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030197:opcode()
	return 1030197
end

--[[ 请求剑灵寻宝(返回)--]]
MsgDef.Msg5030197 = {}
function MsgDef.Msg5030197:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030197:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030197:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030197:opcode()
	return 5030197
end
--[[ 请求寻仙探宝信息--]]
MsgDef.Msg1030213 = {}

function MsgDef.Msg1030213:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:探索1次 2:全部探索--]]
	if msg.tsIndex == nil then msg.tsIndex = 0 end --[[(int32) 探索id--]]
	return msg
end

function MsgDef.Msg1030213:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.tsIndex);
	return self
end

function MsgDef.Msg1030213:decode(sm)
	self.reqType = sm:readInt8();
	self.tsIndex = sm:readInt32();
	return self
end

function MsgDef.Msg1030213:opcode()
	return 1030213
end

--[[ 请求寻仙探宝信息(返回)--]]
MsgDef.Msg5030213 = {}
function MsgDef.Msg5030213:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:探索1次 2:全部探索--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.tsIndex = 0 --[[(int32) 探索id--]]
	msg.boxInfos = {} --[[(map<int32,int32>) 箱子状态<索引,类型(1:白银 2:黄金)*100+状态(1:未开,2:已开)>--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030213:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.tsIndex);
	sm:writeInt16(get_map_size(self.boxInfos))
	for kn,elm in ipairs(self.boxInfos) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030213:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.tsIndex = sm:readInt32();
	local boxInfos_size = sm:readInt16()
	for i = 1,boxInfos_size do
		local kv = sm:readInt32();
		self.boxInfos[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030213:opcode()
	return 5030213
end
--[[ 请求五行圣殿BOSS信息--]]
MsgDef.Msg1330901 = {}

function MsgDef.Msg1330901:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330901:encode(sm)
	return self
end

function MsgDef.Msg1330901:decode(sm)
	return self
end

function MsgDef.Msg1330901:opcode()
	return 1330901
end

--[[ 请求五行圣殿BOSS信息(返回)--]]
MsgDef.Msg5330901 = {}
function MsgDef.Msg5330901:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 关注map--]]
	return msg
end

function MsgDef.Msg5330901:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5330901:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5330901:opcode()
	return 5330901
end
--[[ 请求五行圣殿BOSS关注--]]
MsgDef.Msg1330902 = {}

function MsgDef.Msg1330902:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1330902:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1330902:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1330902:opcode()
	return 1330902
end

--[[ 请求五行圣殿BOSS关注(返回)--]]
MsgDef.Msg5330902 = {}
function MsgDef.Msg5330902:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5330902:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5330902:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5330902:opcode()
	return 5330902
end
--[[ 请求五行圣殿场景信息--]]
MsgDef.Msg1330903 = {}

function MsgDef.Msg1330903:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1330903:encode(sm)
	return self
end

function MsgDef.Msg1330903:decode(sm)
	return self
end

function MsgDef.Msg1330903:opcode()
	return 1330903
end

--[[ 请求五行圣殿场景信息(返回)--]]
MsgDef.Msg5330903 = {}
function MsgDef.Msg5330903:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<SceneBossInfo>) boss列表--]]
	return msg
end

function MsgDef.Msg5330903:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5330903:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SceneBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end


function MsgDef.Msg5330903:opcode()
	return 5330903
end
--[[ 通用的场景boss信息--]]
MsgDef.SceneBossInfo = {}

function MsgDef.SceneBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.hateRoleName == nil then msg.hateRoleName = "" end --[[(string) 仇恨归属名字--]]
	if msg.pox == nil then msg.pox = 0 end --[[(int16) x坐标--]]
	if msg.poy == nil then msg.poy = 0 end --[[(int16) y坐标--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) sceneId--]]
	if msg.attris == nil then msg.attris = {} end --[[(map<int32,int32>) attris--]]
	if msg.curHpPercent == nil then msg.curHpPercent = 0 end --[[(int32) 血量百分比--]]
	return msg
end

function MsgDef.SceneBossInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeString(self.hateRoleName);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	sm:writeInt32(self.sceneId);
	sm:writeInt16(get_map_size(self.attris))
	for kn,elm in ipairs(self.attris) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curHpPercent);
	return self
end

function MsgDef.SceneBossInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.nextRefreshTime = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	self.sceneId = sm:readInt32();
	local attris_size = sm:readInt16()
	for i = 1,attris_size do
		local kv = sm:readInt32();
		self.attris[kv] = sm:readInt32();
	end
	self.curHpPercent = sm:readInt32();
	return self
end

function MsgDef.SceneBossInfo:opcode()
	return "SceneBossInfo"
end

--[[ 请求开服物品投资--]]
MsgDef.Msg1030214 = {}

function MsgDef.Msg1030214:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励id--]]
	return msg
end

function MsgDef.Msg1030214:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030214:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030214:opcode()
	return 1030214
end

--[[ 请求开服物品投资(返回)--]]
MsgDef.Msg5030214 = {}
function MsgDef.Msg5030214:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.isBuy = 0 --[[(int8) 是否已购买 0:没有购买 1:已购买--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.reqType = 0 --[[(int8) 0:投资信息 1:投资 2:领取奖励--]]
	return msg
end

function MsgDef.Msg5030214:encode(sm)
	sm:writeInt8(self.isBuy);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5030214:decode(sm)
	self.isBuy = sm:readInt8();
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5030214:opcode()
	return 5030214
end
--[[ 请求剑灵出世排行活动--]]
MsgDef.Msg1030215 = {}

function MsgDef.Msg1030215:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030215:encode(sm)
	return self
end

function MsgDef.Msg1030215:decode(sm)
	return self
end

function MsgDef.Msg1030215:opcode()
	return 1030215
end

--[[ 请求剑灵出世排行活动(返回)--]]
MsgDef.Msg5030215 = {}
function MsgDef.Msg5030215:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myTimes = 0 --[[(int32) 我的次数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<JlcsRankInfo>) 排行信息--]]
	return msg
end

function MsgDef.Msg5030215:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myTimes);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030215:decode(sm)
	self.lastTime = sm:readInt32();
	self.myTimes = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.JlcsRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030215:opcode()
	return 5030215
end
--[[ 剑灵出世排行信息--]]
MsgDef.JlcsRankInfo = {}

function MsgDef.JlcsRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	return msg
end

function MsgDef.JlcsRankInfo:encode(sm)
	sm:writeString(self.roleName);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.times);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.JlcsRankInfo:decode(sm)
	self.roleName = sm:readString();
	self.rank = sm:readInt32();
	self.times = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.JlcsRankInfo:opcode()
	return "JlcsRankInfo"
end

--[[ 请求剑灵寻宝返还--]]
MsgDef.Msg1030216 = {}

function MsgDef.Msg1030216:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030216:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030216:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030216:opcode()
	return 1030216
end

--[[ 请求剑灵寻宝返还(返回)--]]
MsgDef.Msg5030216 = {}
function MsgDef.Msg5030216:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.findTimes = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030216:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.findTimes);
	sm:writeInt16(get_map_size(self.itemGotData))
	for i,elm in ipairs(self.itemGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030216:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.findTimes = sm:readInt32();
	local itemGotData_size = sm:readInt16()
	for i = 1,itemGotData_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotData, ele)
	end
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030216:opcode()
	return 5030216
end
--[[ 请求场景内玩家位置--]]
MsgDef.Msg1810106 = {}

function MsgDef.Msg1810106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg1810106:encode(sm)
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg1810106:decode(sm)
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg1810106:opcode()
	return 1810106
end

--[[ 请求场景内玩家位置(返回)--]]
MsgDef.Msg5810106 = {}
function MsgDef.Msg5810106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.pox = 0 --[[(int16) x坐标--]]
	msg.poy = 0 --[[(int16) y坐标--]]
	return msg
end

function MsgDef.Msg5810106:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt16(self.pox);
	sm:writeInt16(self.poy);
	return self
end

function MsgDef.Msg5810106:decode(sm)
	self.sceneId = sm:readInt32();
	self.pox = sm:readInt16();
	self.poy = sm:readInt16();
	return self
end


function MsgDef.Msg5810106:opcode()
	return 5810106
end
--[[ 请求单笔充值活动（神器寻主）--]]
MsgDef.Msg1030217 = {}

function MsgDef.Msg1030217:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取奖励Id--]]
	return msg
end

function MsgDef.Msg1030217:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030217:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030217:opcode()
	return 1030217
end

--[[ 请求单笔充值活动（神器寻主）(返回)--]]
MsgDef.Msg5030217 = {}
function MsgDef.Msg5030217:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.itemStatus = {} --[[(map<int32,int32>) 道具列表状态 状态：0=不可领取 1:可领取 2:已领取>--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励道具--]]
	msg.reqType = 0 --[[(int8) 0:请求奖励信息 1:领取奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030217:encode(sm)
	sm:writeInt16(get_map_size(self.itemStatus))
	for kn,elm in ipairs(self.itemStatus) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030217:decode(sm)
	local itemStatus_size = sm:readInt16()
	for i = 1,itemStatus_size do
		local kv = sm:readInt32();
		self.itemStatus[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030217:opcode()
	return 5030217
end
--[[ 请求充值回馈--]]
MsgDef.Msg1030505 = {}

function MsgDef.Msg1030505:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030505:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030505:opcode()
	return 1030505
end

--[[ 请求充值回馈(返回)--]]
MsgDef.Msg5030505 = {}
function MsgDef.Msg5030505:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取奖励--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 已领取的奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.czSum = 0 --[[(int32) 当前充值额度--]]
	return msg
end

function MsgDef.Msg5030505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.czSum);
	return self
end

function MsgDef.Msg5030505:decode(sm)
	self.reqType = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actLeftTime = sm:readInt32();
	self.czSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030505:opcode()
	return 5030505
end
--[[ 请求金字塔活动--]]
MsgDef.Msg1030218 = {}

function MsgDef.Msg1030218:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:购买--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg1030218:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030218:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030218:opcode()
	return 1030218
end

--[[ 请求金字塔活动(返回)--]]
MsgDef.Msg5030218 = {}
function MsgDef.Msg5030218:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:购买--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.floor = 0 --[[(int32) 当前层--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.times = 0 --[[(int32) 购买次数--]]
	msg.curIndex = 0 --[[(int32) 当前位置--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030218:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.floor);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.times);
	sm:writeInt32(self.curIndex);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030218:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.floor = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	self.times = sm:readInt32();
	self.curIndex = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030218:opcode()
	return 5030218
end
--[[ 后台仙盟公告锁定--]]
MsgDef.Msg168012 = {}

function MsgDef.Msg168012:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gangId == nil then msg.gangId = 0 end --[[(int64) 仙盟id--]]
	if msg.lockType == nil then msg.lockType = 0 end --[[(int8) 1:锁定 2:解除锁定--]]
	return msg
end

function MsgDef.Msg168012:encode(sm)
	sm:writeInt64(self.gangId);
	sm:writeInt8(self.lockType);
	return self
end

function MsgDef.Msg168012:decode(sm)
	self.gangId = sm:readInt64();
	self.lockType = sm:readInt8();
	return self
end

function MsgDef.Msg168012:opcode()
	return 168012
end

--[[ 后台仙盟公告锁定(返回)--]]
MsgDef.Msg568012 = {}
function MsgDef.Msg568012:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg568012:encode(sm)
	return self
end

function MsgDef.Msg568012:decode(sm)
	return self
end


function MsgDef.Msg568012:opcode()
	return 568012
end
--[[ 请求刮刮乐活动--]]
MsgDef.Msg1030219 = {}

function MsgDef.Msg1030219:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:刮--]]
	if msg.arg == nil then msg.arg = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1030219:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.arg);
	return self
end

function MsgDef.Msg1030219:decode(sm)
	self.reqType = sm:readInt8();
	self.arg = sm:readInt32();
	return self
end

function MsgDef.Msg1030219:opcode()
	return 1030219
end

--[[ 请求刮刮乐活动(返回)--]]
MsgDef.Msg5030219 = {}
function MsgDef.Msg5030219:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:刮--]]
	msg.arg = 0 --[[(int32) 次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.record = "" --[[(string) 已刮记录(1,1,1|2,2,2)--]]
	msg.personalRecord = {} --[[(array<string>) 个人记录--]]
	msg.curRecord = "" --[[(string) 当前刮的记录(2,2,2)--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030219:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.arg);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeString(self.record);
	sm:writeInt16(get_map_size(self.personalRecord))
	for i,elm in ipairs(self.personalRecord) do
		sm:writeString(elm);
	end
	sm:writeString(self.curRecord);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030219:decode(sm)
	self.reqType = sm:readInt8();
	self.arg = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.record = sm:readString();
	local personalRecord_size = sm:readInt16()
	for i = 1,personalRecord_size do
		local ele = sm:readString();
		table.insert(self.personalRecord, ele)
	end
	self.curRecord = sm:readString();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030219:opcode()
	return 5030219
end
--[[ 请求boss刷新关注--]]
MsgDef.Msg1331001 = {}

function MsgDef.Msg1331001:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:设置关注 2:取消关注--]]
	if msg.kind == nil then msg.kind = 0 end --[[(int32) 1:世界boss 2:boss之家 3:仙域禁地 4:宠物岛 5:丛林遗境 6:五行圣殿--]]
	return msg
end

function MsgDef.Msg1331001:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.kind);
	return self
end

function MsgDef.Msg1331001:decode(sm)
	self.reqType = sm:readInt8();
	self.kind = sm:readInt32();
	return self
end

function MsgDef.Msg1331001:opcode()
	return 1331001
end

--[[ 请求boss刷新关注(返回)--]]
MsgDef.Msg5331001 = {}
function MsgDef.Msg5331001:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:设置关注 2:取消关注--]]
	msg.kind = 0 --[[(int8) 1:世界boss 2:boss之家 3:仙域禁地 4:宠物岛 5:丛林遗境 6:五行圣殿--]]
	msg.tips = {} --[[(map<int32,int32>) 已经设置关注的kind类型 key就是kind value = 1--]]
	return msg
end

function MsgDef.Msg5331001:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.kind);
	sm:writeInt16(get_map_size(self.tips))
	for kn,elm in ipairs(self.tips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5331001:decode(sm)
	self.reqType = sm:readInt8();
	self.kind = sm:readInt8();
	local tips_size = sm:readInt16()
	for i = 1,tips_size do
		local kv = sm:readInt32();
		self.tips[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5331001:opcode()
	return 5331001
end
--[[ 请求宠物上阵信息--]]
MsgDef.Msg1490201 = {}

function MsgDef.Msg1490201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.petId == nil then msg.petId = 0 end --[[(int32) 宠物id--]]
	if msg.pos == nil then msg.pos = 0 end --[[(int32) 阵位--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：信息 1:上阵 2:召回--]]
	return msg
end

function MsgDef.Msg1490201:encode(sm)
	sm:writeInt32(self.petId);
	sm:writeInt32(self.pos);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1490201:decode(sm)
	self.petId = sm:readInt32();
	self.pos = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1490201:opcode()
	return 1490201
end

--[[ 请求宠物上阵信息(返回)--]]
MsgDef.Msg5490201 = {}
function MsgDef.Msg5490201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：信息 1:上阵 2:召回--]]
	msg.warPetData = {} --[[(map<int32,int32>) 当前上阵宠物--]]
	msg.pos = 0 --[[(int32) 阵位--]]
	return msg
end

function MsgDef.Msg5490201:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.warPetData))
	for kn,elm in ipairs(self.warPetData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.pos);
	return self
end

function MsgDef.Msg5490201:decode(sm)
	self.reqType = sm:readInt8();
	local warPetData_size = sm:readInt16()
	for i = 1,warPetData_size do
		local kv = sm:readInt32();
		self.warPetData[kv] = sm:readInt32();
	end
	self.pos = sm:readInt32();
	return self
end


function MsgDef.Msg5490201:opcode()
	return 5490201
end
--[[ 请求开启宠物阵位--]]
MsgDef.Msg1490202 = {}

function MsgDef.Msg1490202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pos == nil then msg.pos = 0 end --[[(int32) 开启的阵位--]]
	return msg
end

function MsgDef.Msg1490202:encode(sm)
	sm:writeInt32(self.pos);
	return self
end

function MsgDef.Msg1490202:decode(sm)
	self.pos = sm:readInt32();
	return self
end

function MsgDef.Msg1490202:opcode()
	return 1490202
end

--[[ 请求开启宠物阵位(返回)--]]
MsgDef.Msg5490202 = {}
function MsgDef.Msg5490202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pos = 0 --[[(int32) 开启的阵位--]]
	return msg
end

function MsgDef.Msg5490202:encode(sm)
	sm:writeInt32(self.pos);
	return self
end

function MsgDef.Msg5490202:decode(sm)
	self.pos = sm:readInt32();
	return self
end


function MsgDef.Msg5490202:opcode()
	return 5490202
end
--[[ 请求宠物寻宝排行活动（跨服）--]]
MsgDef.Msg1030220 = {}

function MsgDef.Msg1030220:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030220:encode(sm)
	return self
end

function MsgDef.Msg1030220:decode(sm)
	return self
end

function MsgDef.Msg1030220:opcode()
	return 1030220
end

--[[ 请求宠物寻宝排行活动（跨服）(返回)--]]
MsgDef.Msg5030220 = {}
function MsgDef.Msg5030220:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myTimes = 0 --[[(int32) 我的次数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<JlcsRankInfo>) 排行信息--]]
	return msg
end

function MsgDef.Msg5030220:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myTimes);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030220:decode(sm)
	self.lastTime = sm:readInt32();
	self.myTimes = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.JlcsRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030220:opcode()
	return 5030220
end
--[[ 请求宠物寻宝返还活动--]]
MsgDef.Msg1030221 = {}

function MsgDef.Msg1030221:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030221:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030221:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030221:opcode()
	return 1030221
end

--[[ 请求宠物寻宝返还活动(返回)--]]
MsgDef.Msg5030221 = {}
function MsgDef.Msg5030221:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.findTimes = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.cid	 = 0 --[[(int32) 领取id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030221:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.findTimes);
	sm:writeInt16(get_map_size(self.itemGotData))
	for i,elm in ipairs(self.itemGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cid	);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030221:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.findTimes = sm:readInt32();
	local itemGotData_size = sm:readInt16()
	for i = 1,itemGotData_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotData, ele)
	end
	self.cid	 = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030221:opcode()
	return 5030221
end
--[[ 请求仙侣pk活动信息--]]
MsgDef.Msg1540101 = {}

function MsgDef.Msg1540101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:默认 1:预告--]]
	return msg
end

function MsgDef.Msg1540101:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1540101:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1540101:opcode()
	return 1540101
end

--[[ 请求仙侣pk活动信息(返回)--]]
MsgDef.Msg5540101 = {}
function MsgDef.Msg5540101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.join = 0 --[[(int8) 1:已报名 0:未报名--]]
	msg.curDay = 0 --[[(int32) 当前活动第几天--]]
	msg.actLeftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.teamInfo = MsgDef.XlpkTeamInfo:create() --[[(XlpkTeamInfo) 队伍信息--]]
	msg.memberInfo = {} --[[(array<XlpkTeamMemInfo>) 成员--]]
	msg.stage = 0 --[[(int32) 1:报名阶段 2:海选赛 3:争霸赛第一场预告 4:争霸赛第一场进行中 5:争霸赛第二场预告 6:争霸赛第二场进行中 7:全部比赛结束--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 目标奖励已领取的--]]
	msg.vsInfo = {} --[[(array<XlpkVsInfo>) 对决列表信息--]]
	msg.stakeInfo = {} --[[(array<XlpkStakeInfo>) 我的押注信息--]]
	msg.inspireCount = 0 --[[(int32) 鼓舞次数--]]
	msg.matchStatu = 0 --[[(int8) 0:未开始匹配 1:已开始匹配--]]
	msg.hxRank = 0 --[[(int32) 海选排名--]]
	msg.zbsRank = 0 --[[(int32) 争霸排名--]]
	msg.hxsWinCount = 0 --[[(int32) 海选赛赢的次数--]]
	msg.serverTime = 0 --[[(int32) 跨服当前时间--]]
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.hxsJoinCount = 0 --[[(int32) 参与场次--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	msg.reqType = 0 --[[(int8) 0:默认 1:预告--]]
	return msg
end

function MsgDef.Msg5540101:encode(sm)
	sm:writeInt8(self.join);
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actLeftSec);
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.memberInfo)
	for i,elm in ipairs(self.memberInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stage);
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.vsInfo)
	for i,elm in ipairs(self.vsInfo) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.stakeInfo)
	for i,elm in ipairs(self.stakeInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.inspireCount);
	sm:writeInt8(self.matchStatu);
	sm:writeInt32(self.hxRank);
	sm:writeInt32(self.zbsRank);
	sm:writeInt32(self.hxsWinCount);
	sm:writeInt32(self.serverTime);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.hxsJoinCount);
	sm:writeInt32(self.mulActiveId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5540101:decode(sm)
	self.join = sm:readInt8();
	self.curDay = sm:readInt32();
	self.actLeftSec = sm:readInt32();
	self.teamInfo:decode(sm)
	local memberInfo_size = sm:readInt16()
	for i = 1,memberInfo_size do
		local element = MsgDef.XlpkTeamMemInfo:create():decode(sm)
		table.insert(self.memberInfo, element)
	end
	self.stage = sm:readInt32();
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	local vsInfo_size = sm:readInt16()
	for i = 1,vsInfo_size do
		local element = MsgDef.XlpkVsInfo:create():decode(sm)
		table.insert(self.vsInfo, element)
	end
	local stakeInfo_size = sm:readInt16()
	for i = 1,stakeInfo_size do
		local element = MsgDef.XlpkStakeInfo:create():decode(sm)
		table.insert(self.stakeInfo, element)
	end
	self.inspireCount = sm:readInt32();
	self.matchStatu = sm:readInt8();
	self.hxRank = sm:readInt32();
	self.zbsRank = sm:readInt32();
	self.hxsWinCount = sm:readInt32();
	self.serverTime = sm:readInt32();
	self.startTime = sm:readInt32();
	self.hxsJoinCount = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5540101:opcode()
	return 5540101
end
--[[ 仙侣pk队伍信息--]]
MsgDef.XlpkTeamInfo = {}

function MsgDef.XlpkTeamInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 队伍总战力--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.winCount == nil then msg.winCount = 0 end --[[(int32) 胜场--]]
	if msg.loseCount == nil then msg.loseCount = 0 end --[[(int32) 负场--]]
	if msg.joinCount == nil then msg.joinCount = 0 end --[[(int32) 总场数--]]
	return msg
end

function MsgDef.XlpkTeamInfo:encode(sm)
	sm:writeString(self.teamName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.winCount);
	sm:writeInt32(self.loseCount);
	sm:writeInt32(self.joinCount);
	return self
end

function MsgDef.XlpkTeamInfo:decode(sm)
	self.teamName = sm:readString();
	self.power = sm:readInt32();
	self.teamId = sm:readInt32();
	self.winCount = sm:readInt32();
	self.loseCount = sm:readInt32();
	self.joinCount = sm:readInt32();
	return self
end

function MsgDef.XlpkTeamInfo:opcode()
	return "XlpkTeamInfo"
end

--[[ 仙侣pk队伍成员--]]
MsgDef.XlpkTeamMemInfo = {}

function MsgDef.XlpkTeamMemInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.skinMap == nil then msg.skinMap = {} end --[[(map<int32,int32>) 外观--]]
	if msg.sex == nil then msg.sex = 0 end --[[(int8) 性别--]]
	return msg
end

function MsgDef.XlpkTeamMemInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.level);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt16(get_map_size(self.skinMap))
	for kn,elm in ipairs(self.skinMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.sex);
	return self
end

function MsgDef.XlpkTeamMemInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.level = sm:readInt32();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	local skinMap_size = sm:readInt16()
	for i = 1,skinMap_size do
		local kv = sm:readInt32();
		self.skinMap[kv] = sm:readInt32();
	end
	self.sex = sm:readInt8();
	return self
end

function MsgDef.XlpkTeamMemInfo:opcode()
	return "XlpkTeamMemInfo"
end

--[[ 请求充值豪礼活动--]]
MsgDef.Msg1030222 = {}

function MsgDef.Msg1030222:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	return msg
end

function MsgDef.Msg1030222:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030222:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030222:opcode()
	return 1030222
end

--[[ 请求充值豪礼活动(返回)--]]
MsgDef.Msg5030222 = {}
function MsgDef.Msg5030222:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.sumCzYb = 0 --[[(int32) 当前总充值--]]
	msg.gotSumTimes = 0 --[[(int32) 已领取总次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030222:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.sumCzYb);
	sm:writeInt32(self.gotSumTimes);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030222:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.sumCzYb = sm:readInt32();
	self.gotSumTimes = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030222:opcode()
	return 5030222
end
--[[ 请求仙侣pk队伍操作--]]
MsgDef.Msg1540102 = {}

function MsgDef.Msg1540102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:报名--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	return msg
end

function MsgDef.Msg1540102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.teamName);
	return self
end

function MsgDef.Msg1540102:decode(sm)
	self.reqType = sm:readInt8();
	self.teamName = sm:readString();
	return self
end

function MsgDef.Msg1540102:opcode()
	return 1540102
end

--[[ 请求仙侣pk队伍操作(返回)--]]
MsgDef.Msg5540102 = {}
function MsgDef.Msg5540102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:报名--]]
	msg.teamName = "" --[[(string) 队伍名字--]]
	msg.teamInfo = MsgDef.XlpkTeamInfo:create() --[[(XlpkTeamInfo) 队伍信息--]]
	msg.memberInfo = {} --[[(array<XlpkTeamMemInfo>) 队伍成员信息--]]
	return msg
end

function MsgDef.Msg5540102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.teamName);
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.memberInfo)
	for i,elm in ipairs(self.memberInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5540102:decode(sm)
	self.reqType = sm:readInt8();
	self.teamName = sm:readString();
	self.teamInfo:decode(sm)
	local memberInfo_size = sm:readInt16()
	for i = 1,memberInfo_size do
		local element = MsgDef.XlpkTeamMemInfo:create():decode(sm)
		table.insert(self.memberInfo, element)
	end
	return self
end


function MsgDef.Msg5540102:opcode()
	return 5540102
end
--[[ 请求仙侣pk排行榜--]]
MsgDef.Msg1540103 = {}

function MsgDef.Msg1540103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:海选排行榜1:天榜排行榜2:地榜排行榜--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数 从1开始--]]
	return msg
end

function MsgDef.Msg1540103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1540103:decode(sm)
	self.reqType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1540103:opcode()
	return 1540103
end

--[[ 请求仙侣pk排行榜(返回)--]]
MsgDef.Msg5540103 = {}
function MsgDef.Msg5540103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:海选排行榜1:天榜排行榜2:地榜排行榜--]]
	msg.rankList = {} --[[(array<XlpkRankInfo>) 排行榜列表--]]
	msg.page = 0 --[[(int32) 当前页数 从1开始--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	return msg
end

function MsgDef.Msg5540103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.myRank);
	return self
end

function MsgDef.Msg5540103:decode(sm)
	self.reqType = sm:readInt8();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.XlpkRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	self.myRank = sm:readInt32();
	return self
end


function MsgDef.Msg5540103:opcode()
	return 5540103
end
--[[ 请求仙侣pk奖励--]]
MsgDef.Msg1540104 = {}

function MsgDef.Msg1540104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:海选目标奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1540104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1540104:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1540104:opcode()
	return 1540104
end

--[[ 请求仙侣pk奖励(返回)--]]
MsgDef.Msg5540104 = {}
function MsgDef.Msg5540104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:海选目标奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 目标奖励已领取的--]]
	return msg
end

function MsgDef.Msg5540104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5540104:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5540104:opcode()
	return 5540104
end
--[[ 请求恶魔时装活动--]]
MsgDef.Msg1030223 = {}

function MsgDef.Msg1030223:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:献祭--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 献祭次数--]]
	return msg
end

function MsgDef.Msg1030223:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030223:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030223:opcode()
	return 1030223
end

--[[ 请求恶魔时装活动(返回)--]]
MsgDef.Msg5030223 = {}
function MsgDef.Msg5030223:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:献祭--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.records = {} --[[(array<string>) 记录--]]
	return msg
end

function MsgDef.Msg5030223:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5030223:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	return self
end


function MsgDef.Msg5030223:opcode()
	return 5030223
end
--[[ 仙侣对决信息--]]
MsgDef.XlpkVsInfo = {}

function MsgDef.XlpkVsInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.winTeamId == nil then msg.winTeamId = 0 end --[[(int32) 赢得队伍id--]]
	if msg.vsTeams == nil then msg.vsTeams = {} end --[[(array<XlpkTeamInfo>) 对决的队伍列表--]]
	if msg.group == nil then msg.group = 0 end --[[(int32) 第一场1,2组,第二场3,4组--]]
	if msg.rankType == nil then msg.rankType = 0 end --[[(int32) 1:天榜 2:地榜--]]
	return msg
end

function MsgDef.XlpkVsInfo:encode(sm)
	sm:writeInt32(self.winTeamId);
	sm:writeInt16(#self.vsTeams)
	for i,elm in ipairs(self.vsTeams) do
		elm:encode(sm)
	end
	sm:writeInt32(self.group);
	sm:writeInt32(self.rankType);
	return self
end

function MsgDef.XlpkVsInfo:decode(sm)
	self.winTeamId = sm:readInt32();
	local vsTeams_size = sm:readInt16()
	for i = 1,vsTeams_size do
		local element = MsgDef.XlpkTeamInfo:create():decode(sm)
		table.insert(self.vsTeams, element)
	end
	self.group = sm:readInt32();
	self.rankType = sm:readInt32();
	return self
end

function MsgDef.XlpkVsInfo:opcode()
	return "XlpkVsInfo"
end

--[[ 请求仙侣pk押注--]]
MsgDef.Msg1540105 = {}

function MsgDef.Msg1540105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.group == nil then msg.group = 0 end --[[(int32) 组id--]]
	if msg.stakeMoney == nil then msg.stakeMoney = 0 end --[[(int32) 押注金钱--]]
	return msg
end

function MsgDef.Msg1540105:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.group);
	sm:writeInt32(self.stakeMoney);
	return self
end

function MsgDef.Msg1540105:decode(sm)
	self.teamId = sm:readInt32();
	self.group = sm:readInt32();
	self.stakeMoney = sm:readInt32();
	return self
end

function MsgDef.Msg1540105:opcode()
	return 1540105
end

--[[ 请求仙侣pk押注(返回)--]]
MsgDef.Msg5540105 = {}
function MsgDef.Msg5540105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.group = 0 --[[(int32) 组id--]]
	msg.stakeInfo = {} --[[(array<XlpkStakeInfo>) 我的押注信息--]]
	msg.stakeMoney = 0 --[[(int32) 押注金钱--]]
	return msg
end

function MsgDef.Msg5540105:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.group);
	sm:writeInt16(#self.stakeInfo)
	for i,elm in ipairs(self.stakeInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stakeMoney);
	return self
end

function MsgDef.Msg5540105:decode(sm)
	self.teamId = sm:readInt32();
	self.group = sm:readInt32();
	local stakeInfo_size = sm:readInt16()
	for i = 1,stakeInfo_size do
		local element = MsgDef.XlpkStakeInfo:create():decode(sm)
		table.insert(self.stakeInfo, element)
	end
	self.stakeMoney = sm:readInt32();
	return self
end


function MsgDef.Msg5540105:opcode()
	return 5540105
end
--[[ 仙侣pk押注信息--]]
MsgDef.XlpkStakeInfo = {}

function MsgDef.XlpkStakeInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.stakeMoney == nil then msg.stakeMoney = 0 end --[[(int32) 已押注的金钱数额--]]
	if msg.group == nil then msg.group = 0 end --[[(int32) 组id--]]
	if msg.stakeTeamId == nil then msg.stakeTeamId = 0 end --[[(int32) 已押注的队伍id--]]
	return msg
end

function MsgDef.XlpkStakeInfo:encode(sm)
	sm:writeInt32(self.stakeMoney);
	sm:writeInt32(self.group);
	sm:writeInt32(self.stakeTeamId);
	return self
end

function MsgDef.XlpkStakeInfo:decode(sm)
	self.stakeMoney = sm:readInt32();
	self.group = sm:readInt32();
	self.stakeTeamId = sm:readInt32();
	return self
end

function MsgDef.XlpkStakeInfo:opcode()
	return "XlpkStakeInfo"
end

--[[ 请求仙侣pk鼓舞--]]
MsgDef.Msg1540106 = {}

function MsgDef.Msg1540106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540106:encode(sm)
	return self
end

function MsgDef.Msg1540106:decode(sm)
	return self
end

function MsgDef.Msg1540106:opcode()
	return 1540106
end

--[[ 请求仙侣pk鼓舞(返回)--]]
MsgDef.Msg5540106 = {}
function MsgDef.Msg5540106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.inspireCount = 0 --[[(int32) 已鼓舞次数--]]
	return msg
end

function MsgDef.Msg5540106:encode(sm)
	sm:writeInt32(self.inspireCount);
	return self
end

function MsgDef.Msg5540106:decode(sm)
	self.inspireCount = sm:readInt32();
	return self
end


function MsgDef.Msg5540106:opcode()
	return 5540106
end
--[[ 请求合服基金信息2--]]
MsgDef.Msg1030326 = {}

function MsgDef.Msg1030326:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:投资 2:领取奖励--]]
	if msg.invType == nil then msg.invType = 0 end --[[(int8) 投资档次(1-3配置)--]]
	if msg.invId == nil then msg.invId = 0 end --[[(int32) 领取奖励的id--]]
	return msg
end

function MsgDef.Msg1030326:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.invType);
	sm:writeInt32(self.invId);
	return self
end

function MsgDef.Msg1030326:decode(sm)
	self.reqType = sm:readInt8();
	self.invType = sm:readInt8();
	self.invId = sm:readInt32();
	return self
end

function MsgDef.Msg1030326:opcode()
	return 1030326
end

--[[ 请求合服基金信息2(返回)--]]
MsgDef.Msg5030326 = {}
function MsgDef.Msg5030326:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:投资 2:领取奖励--]]
	msg.invType = {} --[[(array<int32>) 已投资档次(1-3配置)--]]
	msg.lastTime = 0 --[[(int32) 活动时间--]]
	msg.gotList = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	msg.mergeDay = 0 --[[(int32) 合服天数--]]
	return msg
end

function MsgDef.Msg5030326:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.invType))
	for i,elm in ipairs(self.invType) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.gotList))
	for i,elm in ipairs(self.gotList) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mergeDay);
	return self
end

function MsgDef.Msg5030326:decode(sm)
	self.reqType = sm:readInt8();
	local invType_size = sm:readInt16()
	for i = 1,invType_size do
		local ele = sm:readInt32();
		table.insert(self.invType, ele)
	end
	self.lastTime = sm:readInt32();
	local gotList_size = sm:readInt16()
	for i = 1,gotList_size do
		local ele = sm:readInt32();
		table.insert(self.gotList, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mergeDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030326:opcode()
	return 5030326
end
--[[ 请求机甲剑神活动--]]
MsgDef.Msg1030224 = {}

function MsgDef.Msg1030224:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:击破单个 2:全部击破--]]
	if msg.actId == nil then msg.actId = 0 end --[[(int32) 活动id--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 击破指定机甲id--]]
	return msg
end

function MsgDef.Msg1030224:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actId);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1030224:decode(sm)
	self.reqType = sm:readInt8();
	self.actId = sm:readInt32();
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1030224:opcode()
	return 1030224
end

--[[ 请求机甲剑神活动(返回)--]]
MsgDef.Msg5030224 = {}
function MsgDef.Msg5030224:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:击破单个 2:全部击破--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.boxData = {} --[[(map<int32,int32>) 机甲数据<索引id,type(1小机甲 2:大机甲)*100+statue(1:未击破 2:已击破)--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	msg.index = 0 --[[(int32) 击破指定机甲id--]]
	return msg
end

function MsgDef.Msg5030224:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.boxData))
	for kn,elm in ipairs(self.boxData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actId);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg5030224:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local boxData_size = sm:readInt16()
	for i = 1,boxData_size do
		local kv = sm:readInt32();
		self.boxData[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actId = sm:readInt32();
	self.index = sm:readInt32();
	return self
end


function MsgDef.Msg5030224:opcode()
	return 5030224
end
--[[ 请求仙侣pk匹配--]]
MsgDef.Msg1540107 = {}

function MsgDef.Msg1540107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:匹配 2:取消匹配 3:二次确认匹配--]]
	return msg
end

function MsgDef.Msg1540107:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1540107:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1540107:opcode()
	return 1540107
end

--[[ 请求仙侣pk匹配(返回)--]]
MsgDef.Msg5540107 = {}
function MsgDef.Msg5540107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:匹配 2:取消匹配 3:二次确认匹配--]]
	return msg
end

function MsgDef.Msg5540107:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5540107:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5540107:opcode()
	return 5540107
end
--[[ 请求帝王将相信息--]]
MsgDef.Msg1550101 = {}

function MsgDef.Msg1550101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1550101:encode(sm)
	return self
end

function MsgDef.Msg1550101:decode(sm)
	return self
end

function MsgDef.Msg1550101:opcode()
	return 1550101
end

--[[ 请求帝王将相信息(返回)--]]
MsgDef.Msg5550101 = {}
function MsgDef.Msg5550101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 我的排名--]]
	msg.leftColdTime = 0 --[[(int32) 剩余冷却时间--]]
	msg.roles = {} --[[(array<DwjxUserInfo>) 帝王将相列表--]]
	return msg
end

function MsgDef.Msg5550101:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.leftColdTime);
	sm:writeInt16(#self.roles)
	for i,elm in ipairs(self.roles) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5550101:decode(sm)
	self.rank = sm:readInt32();
	self.leftColdTime = sm:readInt32();
	local roles_size = sm:readInt16()
	for i = 1,roles_size do
		local element = MsgDef.DwjxUserInfo:create():decode(sm)
		table.insert(self.roles, element)
	end
	return self
end


function MsgDef.Msg5550101:opcode()
	return 5550101
end
--[[ 帝王将相玩家信息--]]
MsgDef.DwjxUserInfo = {}

function MsgDef.DwjxUserInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.skins == nil then msg.skins = {} end --[[(map<int32,int32>) 外观--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 玩家排名--]]
	if msg.robot == nil then msg.robot = 0 end --[[(int8) 1表示机器人--]]
	if msg.defCount == nil then msg.defCount = 0 end --[[(int32) 防御成功次数--]]
	return msg
end

function MsgDef.DwjxUserInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.roleIcon);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.rank);
	sm:writeInt8(self.robot);
	sm:writeInt32(self.defCount);
	return self
end

function MsgDef.DwjxUserInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt32();
	self.roleIcon = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	self.rank = sm:readInt32();
	self.robot = sm:readInt8();
	self.defCount = sm:readInt32();
	return self
end

function MsgDef.DwjxUserInfo:opcode()
	return "DwjxUserInfo"
end

--[[ 请求帝王将相挑战--]]
MsgDef.Msg1550102 = {}

function MsgDef.Msg1550102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.Msg1550102:encode(sm)
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.Msg1550102:decode(sm)
	self.rank = sm:readInt32();
	return self
end

function MsgDef.Msg1550102:opcode()
	return 1550102
end

--[[ 请求帝王将相挑战(返回)--]]
MsgDef.Msg5550102 = {}
function MsgDef.Msg5550102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 排名--]]
	return msg
end

function MsgDef.Msg5550102:encode(sm)
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.Msg5550102:decode(sm)
	self.rank = sm:readInt32();
	return self
end


function MsgDef.Msg5550102:opcode()
	return 5550102
end
--[[ 请求帝王将相跳过战斗--]]
MsgDef.Msg1550103 = {}

function MsgDef.Msg1550103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1550103:encode(sm)
	return self
end

function MsgDef.Msg1550103:decode(sm)
	return self
end

function MsgDef.Msg1550103:opcode()
	return 1550103
end

--[[ 请求帝王将相跳过战斗(返回)--]]
MsgDef.Msg5550103 = {}
function MsgDef.Msg5550103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5550103:encode(sm)
	return self
end

function MsgDef.Msg5550103:decode(sm)
	return self
end


function MsgDef.Msg5550103:opcode()
	return 5550103
end
--[[ 请求帝王将相时间恢复--]]
MsgDef.Msg1550104 = {}

function MsgDef.Msg1550104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1550104:encode(sm)
	return self
end

function MsgDef.Msg1550104:decode(sm)
	return self
end

function MsgDef.Msg1550104:opcode()
	return 1550104
end

--[[ 请求帝王将相时间恢复(返回)--]]
MsgDef.Msg5550104 = {}
function MsgDef.Msg5550104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftColdTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5550104:encode(sm)
	sm:writeInt32(self.leftColdTime);
	return self
end

function MsgDef.Msg5550104:decode(sm)
	self.leftColdTime = sm:readInt32();
	return self
end


function MsgDef.Msg5550104:opcode()
	return 5550104
end
--[[ 请求单笔豪礼活动--]]
MsgDef.Msg1030225 = {}

function MsgDef.Msg1030225:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	return msg
end

function MsgDef.Msg1030225:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030225:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030225:opcode()
	return 1030225
end

--[[ 请求单笔豪礼活动(返回)--]]
MsgDef.Msg5030225 = {}
function MsgDef.Msg5030225:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.czYb = 0 --[[(int32) 当前活动期间充值最大元宝--]]
	msg.gotFlag = 0 --[[(int8) 是否领取 1:已领取--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030225:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.czYb);
	sm:writeInt8(self.gotFlag);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030225:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.czYb = sm:readInt32();
	self.gotFlag = sm:readInt8();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030225:opcode()
	return 5030225
end
--[[ 帝王将相广播进入场景--]]
MsgDef.Msg8100201 = {}

function MsgDef.Msg8100201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg8100201:encode(sm)
	return self
end

function MsgDef.Msg8100201:decode(sm)
	return self
end

function MsgDef.Msg8100201:opcode()
	return 8100201
end

--[[ 帝王将相结束广播--]]
MsgDef.Msg8100202 = {}

function MsgDef.Msg8100202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rank = 0 --[[(int32) 位置--]]
	msg.win = 0 --[[(int8) 1:胜利 2:失败--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得道具--]]
	msg.oldRank = 0 --[[(int32) 旧的排名--]]
	return msg
end

function MsgDef.Msg8100202:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt8(self.win);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.oldRank);
	return self
end

function MsgDef.Msg8100202:decode(sm)
	self.rank = sm:readInt32();
	self.win = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.oldRank = sm:readInt32();
	return self
end

function MsgDef.Msg8100202:opcode()
	return 8100202
end

--[[ 请求麒麟臂信息--]]
MsgDef.Msg1560101 = {}

function MsgDef.Msg1560101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1560101:encode(sm)
	return self
end

function MsgDef.Msg1560101:decode(sm)
	return self
end

function MsgDef.Msg1560101:opcode()
	return 1560101
end

--[[ 请求麒麟臂信息(返回)--]]
MsgDef.Msg5560101 = {}
function MsgDef.Msg5560101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.skins = {} --[[(array<GrowSkinInfo>) 已获得的皮肤--]]
	msg.skills = {} --[[(map<int32,int32>) 技能对应的等级--]]
	msg.equips = {} --[[(map<int32,int32>) 装备对应的等级--]]
	msg.levExp = 0 --[[(int32) 当前等级经验--]]
	msg.zzdNum = 0 --[[(int32) 资质丹数量--]]
	msg.qldNum = 0 --[[(int32) 潜力丹数量--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	return msg
end

function MsgDef.Msg5560101:encode(sm)
	sm:writeInt32(self.lev);
	sm:writeInt16(#self.skins)
	for i,elm in ipairs(self.skins) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.skills))
	for kn,elm in ipairs(self.skills) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.equips))
	for kn,elm in ipairs(self.equips) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.zzdNum);
	sm:writeInt32(self.qldNum);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5560101:decode(sm)
	self.lev = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local element = MsgDef.GrowSkinInfo:create():decode(sm)
		table.insert(self.skins, element)
	end
	local skills_size = sm:readInt16()
	for i = 1,skills_size do
		local kv = sm:readInt32();
		self.skills[kv] = sm:readInt32();
	end
	local equips_size = sm:readInt16()
	for i = 1,equips_size do
		local kv = sm:readInt32();
		self.equips[kv] = sm:readInt32();
	end
	self.levExp = sm:readInt32();
	self.zzdNum = sm:readInt32();
	self.qldNum = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5560101:opcode()
	return 5560101
end
--[[ 请求麒麟臂进阶--]]
MsgDef.Msg1560102 = {}

function MsgDef.Msg1560102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =1自动购买--]]
	return msg
end

function MsgDef.Msg1560102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1560102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1560102:opcode()
	return 1560102
end

--[[ 请求麒麟臂进阶(返回)--]]
MsgDef.Msg5560102 = {}
function MsgDef.Msg5560102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =1自动购买--]]
	msg.suc = 0 --[[(int8) 0失败1成功--]]
	msg.lev = 0 --[[(int32) 进阶等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.levExp = 0 --[[(int32) 当前等级经验值--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5560102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.suc);
	sm:writeInt32(self.lev);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.levExp);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5560102:decode(sm)
	self.reqType = sm:readInt8();
	self.suc = sm:readInt8();
	self.lev = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.levExp = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5560102:opcode()
	return 5560102
end
--[[ 请求麒麟臂装备升级--]]
MsgDef.Msg1560103 = {}

function MsgDef.Msg1560103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) 装备id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:一次 1:10次--]]
	return msg
end

function MsgDef.Msg1560103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1560103:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1560103:opcode()
	return 1560103
end

--[[ 请求麒麟臂装备升级(返回)--]]
MsgDef.Msg5560103 = {}
function MsgDef.Msg5560103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) 装备id--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.reqType = 0 --[[(int8) 0:一次 1:10次--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5560103:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt32(self.lev);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5560103:decode(sm)
	self.equipId = sm:readInt32();
	self.lev = sm:readInt32();
	self.reqType = sm:readInt8();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5560103:opcode()
	return 5560103
end
--[[ 请求麒麟臂技能升级--]]
MsgDef.Msg1560104 = {}

function MsgDef.Msg1560104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.Msg1560104:encode(sm)
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.Msg1560104:decode(sm)
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.Msg1560104:opcode()
	return 1560104
end

--[[ 请求麒麟臂技能升级(返回)--]]
MsgDef.Msg5560104 = {}
function MsgDef.Msg5560104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 技能等级--]]
	msg.power = 0 --[[(int32) power--]]
	return msg
end

function MsgDef.Msg5560104:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5560104:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5560104:opcode()
	return 5560104
end
--[[ 仙侣pk排行榜对象--]]
MsgDef.XlpkRankInfo = {}

function MsgDef.XlpkRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.rankStage == nil then msg.rankStage = 0 end --[[(int32) 排行榜阶段--]]
	if msg.winCount == nil then msg.winCount = 0 end --[[(int32) 获胜场数--]]
	return msg
end

function MsgDef.XlpkRankInfo:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeString(self.teamName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.rankStage);
	sm:writeInt32(self.winCount);
	return self
end

function MsgDef.XlpkRankInfo:decode(sm)
	self.teamId = sm:readInt32();
	self.teamName = sm:readString();
	self.power = sm:readInt32();
	self.rank = sm:readInt32();
	self.rankStage = sm:readInt32();
	self.winCount = sm:readInt32();
	return self
end

function MsgDef.XlpkRankInfo:opcode()
	return "XlpkRankInfo"
end

--[[ 请求麒麟臂幻形--]]
MsgDef.Msg1560105 = {}

function MsgDef.Msg1560105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg1560105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1560105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1560105:opcode()
	return 1560105
end

--[[ 请求麒麟臂幻形(返回)--]]
MsgDef.Msg5560105 = {}
function MsgDef.Msg5560105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skinId = 0 --[[(int32) 幻形皮肤id--]]
	return msg
end

function MsgDef.Msg5560105:encode(sm)
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg5560105:decode(sm)
	self.skinId = sm:readInt32();
	return self
end


function MsgDef.Msg5560105:opcode()
	return 5560105
end
--[[ 请求仙侣pk详细信息--]]
MsgDef.Msg1540108 = {}

function MsgDef.Msg1540108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	return msg
end

function MsgDef.Msg1540108:encode(sm)
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg1540108:decode(sm)
	self.teamId = sm:readInt32();
	return self
end

function MsgDef.Msg1540108:opcode()
	return 1540108
end

--[[ 请求仙侣pk详细信息(返回)--]]
MsgDef.Msg5540108 = {}
function MsgDef.Msg5540108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.teamDetailInfo = MsgDef.XlpkTeamDetailInfo:create() --[[(XlpkTeamDetailInfo) 队伍详细信息--]]
	return msg
end

function MsgDef.Msg5540108:encode(sm)
	sm:writeInt32(self.teamId);
	self.teamDetailInfo:encode(sm)
	return self
end

function MsgDef.Msg5540108:decode(sm)
	self.teamId = sm:readInt32();
	self.teamDetailInfo:decode(sm)
	return self
end


function MsgDef.Msg5540108:opcode()
	return 5540108
end
--[[ 仙侣pk队伍详细信息--]]
MsgDef.XlpkTeamDetailInfo = {}

function MsgDef.XlpkTeamDetailInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 队伍总战力--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.winCount == nil then msg.winCount = 0 end --[[(int32) 胜场--]]
	if msg.joinCount == nil then msg.joinCount = 0 end --[[(int32) 总参与次数--]]
	if msg.memberInfo == nil then msg.memberInfo = {} end --[[(array<XlpkTeamMemInfo>) 成员信息--]]
	return msg
end

function MsgDef.XlpkTeamDetailInfo:encode(sm)
	sm:writeString(self.teamName);
	sm:writeInt32(self.power);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.winCount);
	sm:writeInt32(self.joinCount);
	sm:writeInt16(#self.memberInfo)
	for i,elm in ipairs(self.memberInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.XlpkTeamDetailInfo:decode(sm)
	self.teamName = sm:readString();
	self.power = sm:readInt32();
	self.teamId = sm:readInt32();
	self.winCount = sm:readInt32();
	self.joinCount = sm:readInt32();
	local memberInfo_size = sm:readInt16()
	for i = 1,memberInfo_size do
		local element = MsgDef.XlpkTeamMemInfo:create():decode(sm)
		table.insert(self.memberInfo, element)
	end
	return self
end

function MsgDef.XlpkTeamDetailInfo:opcode()
	return "XlpkTeamDetailInfo"
end

--[[ 仙侣pk匹配操作广播--]]
MsgDef.Msg8230501 = {}

function MsgDef.Msg8230501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:发起匹配 2:取消匹配 3:匹配成功 4:队友在特殊场景--]]
	msg.roleId = 0 --[[(int64) 角色id--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg8230501:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg8230501:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	self.sceneId = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg8230501:opcode()
	return 8230501
end

--[[ 请求神臂擎天排行榜--]]
MsgDef.Msg1030226 = {}

function MsgDef.Msg1030226:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030226:encode(sm)
	return self
end

function MsgDef.Msg1030226:decode(sm)
	return self
end

function MsgDef.Msg1030226:opcode()
	return 1030226
end

--[[ 请求神臂擎天排行榜(返回)--]]
MsgDef.Msg5030226 = {}
function MsgDef.Msg5030226:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排行信息--]]
	msg.jie = 0 --[[(int32) 我的阶--]]
	return msg
end

function MsgDef.Msg5030226:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myPower);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.jie);
	return self
end

function MsgDef.Msg5030226:decode(sm)
	self.lastTime = sm:readInt32();
	self.myPower = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.jie = sm:readInt32();
	return self
end


function MsgDef.Msg5030226:opcode()
	return 5030226
end
--[[ 请求神臂擎天返回活动--]]
MsgDef.Msg1030227 = {}

function MsgDef.Msg1030227:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030227:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030227:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030227:opcode()
	return 1030227
end

--[[ 请求神臂擎天返回活动(返回)--]]
MsgDef.Msg5030227 = {}
function MsgDef.Msg5030227:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.curStep = 0 --[[(int32) 当前阶--]]
	msg.itemGotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030227:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.curStep);
	sm:writeInt16(get_map_size(self.itemGotData))
	for i,elm in ipairs(self.itemGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030227:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.curStep = sm:readInt32();
	local itemGotData_size = sm:readInt16()
	for i = 1,itemGotData_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotData, ele)
	end
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030227:opcode()
	return 5030227
end
--[[ 简单战力排行榜信息--]]
MsgDef.SimplePowerRankInfo = {}

function MsgDef.SimplePowerRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.name == nil then msg.name = "" end --[[(string) 玩家名--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.SimplePowerRankInfo:encode(sm)
	sm:writeInt32(self.power);
	sm:writeString(self.name);
	sm:writeInt32(self.rank);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.SimplePowerRankInfo:decode(sm)
	self.power = sm:readInt32();
	self.name = sm:readString();
	self.rank = sm:readInt32();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.SimplePowerRankInfo:opcode()
	return "SimplePowerRankInfo"
end

--[[ 请求趣味挖矿--]]
MsgDef.Msg1030506 = {}

function MsgDef.Msg1030506:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:挖2:换矿3:兑换4：领取vip奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030506:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030506:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030506:opcode()
	return 1030506
end

--[[ 请求趣味挖矿(返回)--]]
MsgDef.Msg5030506 = {}
function MsgDef.Msg5030506:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:挖2:换矿3:兑换4：领取vip奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.wkSum = 0 --[[(int32) 全服累计挖矿数量--]]
	msg.targetAwardSigns = {} --[[(array<int32>) 挖矿目标奖励已领取标识--]]
	msg.wkStatus = {} --[[(array<QwwkInfo>) 挖矿状态key->配置id valuie:1已挖掉--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.leftFreeWkCount = 0 --[[(int32) 剩余免费挖矿次数--]]
	msg.nextRefreshTime = 0 --[[(int32) 下次刷新的时间点--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030506:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.wkSum);
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for i,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.wkStatus)
	for i,elm in ipairs(self.wkStatus) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.leftFreeWkCount);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeInt32(self.mulActiveId);
	return self
end

function MsgDef.Msg5030506:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.wkSum = sm:readInt32();
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local ele = sm:readInt32();
		table.insert(self.targetAwardSigns, ele)
	end
	local wkStatus_size = sm:readInt16()
	for i = 1,wkStatus_size do
		local element = MsgDef.QwwkInfo:create():decode(sm)
		table.insert(self.wkStatus, element)
	end
	self.actLeftTime = sm:readInt32();
	self.leftFreeWkCount = sm:readInt32();
	self.nextRefreshTime = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	return self
end


function MsgDef.Msg5030506:opcode()
	return 5030506
end
--[[ 请求聚划算活动--]]
MsgDef.Msg1030228 = {}

function MsgDef.Msg1030228:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:购买 2:领取 3:一键购买--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 购买id--]]
	return msg
end

function MsgDef.Msg1030228:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030228:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030228:opcode()
	return 1030228
end

--[[ 请求聚划算活动(返回)--]]
MsgDef.Msg5030228 = {}
function MsgDef.Msg5030228:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:购买 2:领取 3:一键购买--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.bugItemData = {} --[[(array<int32>) 已购买项id--]]
	msg.cid = 0 --[[(int32) 购买id--]]
	msg.gotTimes = 0 --[[(int32) 可领取大礼包数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取或购买获得--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030228:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.bugItemData))
	for i,elm in ipairs(self.bugItemData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.cid);
	sm:writeInt32(self.gotTimes);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030228:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	local bugItemData_size = sm:readInt16()
	for i = 1,bugItemData_size do
		local ele = sm:readInt32();
		table.insert(self.bugItemData, ele)
	end
	self.cid = sm:readInt32();
	self.gotTimes = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030228:opcode()
	return 5030228
end
--[[ 仙侣pk血量广播--]]
MsgDef.Msg8230502 = {}

function MsgDef.Msg8230502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.hpInfos = {} --[[(array<XlpkHpInfo>) 血量信息--]]
	return msg
end

function MsgDef.Msg8230502:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8230502:decode(sm)
	self.teamId = sm:readInt32();
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.XlpkHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	return self
end

function MsgDef.Msg8230502:opcode()
	return 8230502
end

--[[ 仙侣pk血量信息--]]
MsgDef.XlpkHpInfo = {}

function MsgDef.XlpkHpInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hp == nil then msg.hp = 0 end --[[(int32) 当前血量--]]
	if msg.hpMax == nil then msg.hpMax = 0 end --[[(int32) 最大血--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 名字--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	return msg
end

function MsgDef.XlpkHpInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.hp);
	sm:writeInt32(self.hpMax);
	sm:writeInt32(self.roleIcon);
	sm:writeString(self.roleName);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.lev);
	return self
end

function MsgDef.XlpkHpInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hp = sm:readInt32();
	self.hpMax = sm:readInt32();
	self.roleIcon = sm:readInt32();
	self.roleName = sm:readString();
	self.teamId = sm:readInt32();
	self.lev = sm:readInt32();
	return self
end

function MsgDef.XlpkHpInfo:opcode()
	return "XlpkHpInfo"
end

--[[ 请求消费兑换活动--]]
MsgDef.Msg1030229 = {}

function MsgDef.Msg1030229:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030229:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030229:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030229:opcode()
	return 1030229
end

--[[ 请求消费兑换活动(返回)--]]
MsgDef.Msg5030229 = {}
function MsgDef.Msg5030229:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.costYb = 0 --[[(int32) 消耗元宝--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.exchangeTimes = {} --[[(map<int32,int32>) 兑换次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换物品--]]
	return msg
end

function MsgDef.Msg5030229:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.score);
	sm:writeInt32(self.costYb);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.exchangeTimes))
	for kn,elm in ipairs(self.exchangeTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030229:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.score = sm:readInt32();
	self.costYb = sm:readInt32();
	self.lastTime = sm:readInt32();
	local exchangeTimes_size = sm:readInt16()
	for i = 1,exchangeTimes_size do
		local kv = sm:readInt32();
		self.exchangeTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030229:opcode()
	return 5030229
end
--[[ 趣味挖矿信息--]]
MsgDef.QwwkInfo = {}

function MsgDef.QwwkInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int8) 下标--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置--]]
	if msg.open == nil then msg.open = 0 end --[[(int8) 1:已开 0:未开--]]
	return msg
end

function MsgDef.QwwkInfo:encode(sm)
	sm:writeInt8(self.index);
	sm:writeInt32(self.cfgId);
	sm:writeInt8(self.open);
	return self
end

function MsgDef.QwwkInfo:decode(sm)
	self.index = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.open = sm:readInt8();
	return self
end

function MsgDef.QwwkInfo:opcode()
	return "QwwkInfo"
end

--[[ 仙侣pk结算广播--]]
MsgDef.Msg8230503 = {}

function MsgDef.Msg8230503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.win = 0 --[[(int8) 1:胜利 2:失败--]]
	msg.myTeamId = 0 --[[(int32) 我的队伍id--]]
	msg.clacInfos = {} --[[(array<XlpkCalcInfo>) 结算信息--]]
	msg.reqType = 0 --[[(int8) 1:海选赛结算广播 2:争霸赛结算广播--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg8230503:encode(sm)
	sm:writeInt8(self.win);
	sm:writeInt32(self.myTeamId);
	sm:writeInt16(#self.clacInfos)
	for i,elm in ipairs(self.clacInfos) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg8230503:decode(sm)
	self.win = sm:readInt8();
	self.myTeamId = sm:readInt32();
	local clacInfos_size = sm:readInt16()
	for i = 1,clacInfos_size do
		local element = MsgDef.XlpkCalcInfo:create():decode(sm)
		table.insert(self.clacInfos, element)
	end
	self.reqType = sm:readInt8();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg8230503:opcode()
	return 8230503
end

--[[ 仙侣Pk结算信息--]]
MsgDef.XlpkCalcInfo = {}

function MsgDef.XlpkCalcInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 角色名字--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 战队名字--]]
	if msg.lev == nil then msg.lev = 0 end --[[(int32) 等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.mvp == nil then msg.mvp = 0 end --[[(int8) 1:表示mvp 0:不是mvp--]]
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.winCount == nil then msg.winCount = 0 end --[[(int32) 胜场--]]
	return msg
end

function MsgDef.XlpkCalcInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeString(self.teamName);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.power);
	sm:writeInt8(self.mvp);
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.winCount);
	return self
end

function MsgDef.XlpkCalcInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.teamName = sm:readString();
	self.lev = sm:readInt32();
	self.power = sm:readInt32();
	self.mvp = sm:readInt8();
	self.teamId = sm:readInt32();
	self.winCount = sm:readInt32();
	return self
end

function MsgDef.XlpkCalcInfo:opcode()
	return "XlpkCalcInfo"
end

--[[ 请求仙侣pk海选赛场景信息--]]
MsgDef.Msg1540109 = {}

function MsgDef.Msg1540109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540109:encode(sm)
	return self
end

function MsgDef.Msg1540109:decode(sm)
	return self
end

function MsgDef.Msg1540109:opcode()
	return 1540109
end

--[[ 请求仙侣pk海选赛场景信息(返回)--]]
MsgDef.Msg5540109 = {}
function MsgDef.Msg5540109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.hpInfos = {} --[[(array<XlpkHpInfo>) 血量信息--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5540109:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5540109:decode(sm)
	self.startTime = sm:readInt32();
	self.teamId = sm:readInt32();
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.XlpkHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5540109:opcode()
	return 5540109
end
--[[ 请求多开累冲特惠--]]
MsgDef.Msg1030507 = {}

function MsgDef.Msg1030507:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取的配置id--]]
	return msg
end

function MsgDef.Msg1030507:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030507:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030507:opcode()
	return 1030507
end

--[[ 请求多开累冲特惠(返回)--]]
MsgDef.Msg5030507 = {}
function MsgDef.Msg5030507:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 领取的配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 已领取的奖励--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.czSum = 0 --[[(int32) 当前累计充值的元宝数--]]
	return msg
end

function MsgDef.Msg5030507:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActiveId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.czSum);
	return self
end

function MsgDef.Msg5030507:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActiveId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.actLeftTime = sm:readInt32();
	self.czSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030507:opcode()
	return 5030507
end
--[[ 请求连充特惠--]]
MsgDef.Msg1030508 = {}

function MsgDef.Msg1030508:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取每日奖励 2:领取连续目标奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030508:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030508:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030508:opcode()
	return 1030508
end

--[[ 请求连充特惠(返回)--]]
MsgDef.Msg5030508 = {}
function MsgDef.Msg5030508:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取每日奖励 2:领取连续目标奖励--]]
	msg.targetGotSign = 0 --[[(int8) 连续目标奖励标识1:已领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 每日奖励领取标识--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.okDay = 0 --[[(int32) 达标天数--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.dayCzSums = {} --[[(map<int32,int32>) 每天的充值额度--]]
	msg.curDay = 0 --[[(int32) 当前第几天从 1开始--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030508:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.targetGotSign);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.okDay);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.dayCzSums))
	for kn,elm in ipairs(self.dayCzSums) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030508:decode(sm)
	self.reqType = sm:readInt8();
	self.targetGotSign = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.actLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.okDay = sm:readInt32();
	self.cfgId = sm:readInt32();
	local dayCzSums_size = sm:readInt16()
	for i = 1,dayCzSums_size do
		local kv = sm:readInt32();
		self.dayCzSums[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030508:opcode()
	return 5030508
end
--[[ 请求光环列表信息--]]
MsgDef.Msg1570101 = {}

function MsgDef.Msg1570101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1570101:encode(sm)
	return self
end

function MsgDef.Msg1570101:decode(sm)
	return self
end

function MsgDef.Msg1570101:opcode()
	return 1570101
end

--[[ 请求光环列表信息(返回)--]]
MsgDef.Msg5570101 = {}
function MsgDef.Msg5570101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.haloInfos = {} --[[(array<HaloInfo>) 光环列表--]]
	return msg
end

function MsgDef.Msg5570101:encode(sm)
	sm:writeInt16(#self.haloInfos)
	for i,elm in ipairs(self.haloInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5570101:decode(sm)
	local haloInfos_size = sm:readInt16()
	for i = 1,haloInfos_size do
		local element = MsgDef.HaloInfo:create():decode(sm)
		table.insert(self.haloInfos, element)
	end
	return self
end


function MsgDef.Msg5570101:opcode()
	return 5570101
end
--[[ 光环信息--]]
MsgDef.HaloInfo = {}

function MsgDef.HaloInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.haloId == nil then msg.haloId = 0 end --[[(int32) 光环id--]]
	if msg.starNum == nil then msg.starNum = 0 end --[[(int32) 星数--]]
	if msg.effectType == nil then msg.effectType = 0 end --[[(int8) 有效类型 0:永久 1:限时--]]
	if msg.wear == nil then msg.wear = 0 end --[[(int8) 是否佩戴 1:已佩戴--]]
	if msg.beginTime == nil then msg.beginTime = 0 end --[[(int32) 获取时间--]]
	if msg.endTime == nil then msg.endTime = 0 end --[[(int32) 失效时间(限时)--]]
	return msg
end

function MsgDef.HaloInfo:encode(sm)
	sm:writeInt32(self.haloId);
	sm:writeInt32(self.starNum);
	sm:writeInt8(self.effectType);
	sm:writeInt8(self.wear);
	sm:writeInt32(self.beginTime);
	sm:writeInt32(self.endTime);
	return self
end

function MsgDef.HaloInfo:decode(sm)
	self.haloId = sm:readInt32();
	self.starNum = sm:readInt32();
	self.effectType = sm:readInt8();
	self.wear = sm:readInt8();
	self.beginTime = sm:readInt32();
	self.endTime = sm:readInt32();
	return self
end

function MsgDef.HaloInfo:opcode()
	return "HaloInfo"
end

--[[ 请求戴脱光环--]]
MsgDef.Msg1570102 = {}

function MsgDef.Msg1570102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:戴 2:脱--]]
	if msg.haloId == nil then msg.haloId = 0 end --[[(int32) 光环id--]]
	return msg
end

function MsgDef.Msg1570102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.haloId);
	return self
end

function MsgDef.Msg1570102:decode(sm)
	self.reqType = sm:readInt8();
	self.haloId = sm:readInt32();
	return self
end

function MsgDef.Msg1570102:opcode()
	return 1570102
end

--[[ 请求戴脱光环(返回)--]]
MsgDef.Msg5570102 = {}
function MsgDef.Msg5570102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:戴 2:脱--]]
	msg.haloId = 0 --[[(int32) 光环id--]]
	return msg
end

function MsgDef.Msg5570102:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.haloId);
	return self
end

function MsgDef.Msg5570102:decode(sm)
	self.reqType = sm:readInt8();
	self.haloId = sm:readInt32();
	return self
end


function MsgDef.Msg5570102:opcode()
	return 5570102
end
--[[ 请求新摇钱树--]]
MsgDef.Msg1030509 = {}

function MsgDef.Msg1030509:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:抽一次2:抽10次3:全服次数奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取的配置id--]]
	return msg
end

function MsgDef.Msg1030509:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030509:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030509:opcode()
	return 1030509
end

--[[ 请求新摇钱树(返回)--]]
MsgDef.Msg5030509 = {}
function MsgDef.Msg5030509:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:抽一次2:抽10次3:全服次数奖励--]]
	msg.poolMoney = 0 --[[(int32) 奖池金钱数额--]]
	msg.actLeftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.qfSum = 0 --[[(int32) 全服祈福次数--]]
	msg.qfGotSigns = {} --[[(map<int32,int32>) 已领取的祈福奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.cfgId = 0 --[[(int32) 领取的配置id--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030509:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.poolMoney);
	sm:writeInt32(self.actLeftSec);
	sm:writeInt32(self.qfSum);
	sm:writeInt16(get_map_size(self.qfGotSigns))
	for kn,elm in ipairs(self.qfGotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.mulActiveId);
	return self
end

function MsgDef.Msg5030509:decode(sm)
	self.reqType = sm:readInt8();
	self.poolMoney = sm:readInt32();
	self.actLeftSec = sm:readInt32();
	self.qfSum = sm:readInt32();
	local qfGotSigns_size = sm:readInt16()
	for i = 1,qfGotSigns_size do
		local kv = sm:readInt32();
		self.qfGotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cfgId = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	return self
end


function MsgDef.Msg5030509:opcode()
	return 5030509
end
--[[ 请求猴王除妖活动--]]
MsgDef.Msg1030230 = {}

function MsgDef.Msg1030230:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:敲一次 2:全敲--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 牌索引--]]
	return msg
end

function MsgDef.Msg1030230:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1030230:decode(sm)
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1030230:opcode()
	return 1030230
end

--[[ 请求猴王除妖活动(返回)--]]
MsgDef.Msg5030230 = {}
function MsgDef.Msg5030230:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:敲一次 2:全敲--]]
	msg.index = 0 --[[(int32) 牌索引--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.realBgjNum = 0 --[[(int32) 真白骨精数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.cardData = {} --[[(map<int32,int32>) 牌数据<索引,0:未翻  1:假白骨精 2:真白骨精--]]
	msg.record = {} --[[(array<string>) 记录--]]
	return msg
end

function MsgDef.Msg5030230:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.realBgjNum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.cardData))
	for kn,elm in ipairs(self.cardData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5030230:decode(sm)
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.realBgjNum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local cardData_size = sm:readInt16()
	for i = 1,cardData_size do
		local kv = sm:readInt32();
		self.cardData[kv] = sm:readInt32();
	end
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	return self
end


function MsgDef.Msg5030230:opcode()
	return 5030230
end
--[[ 请求欢乐购--]]
MsgDef.Msg1030510 = {}

function MsgDef.Msg1030510:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:购买--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) cfgId--]]
	return msg
end

function MsgDef.Msg1030510:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030510:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030510:opcode()
	return 1030510
end

--[[ 请求欢乐购(返回)--]]
MsgDef.Msg5030510 = {}
function MsgDef.Msg5030510:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cfgId = 0 --[[(int32) cfgId--]]
	msg.czSum = 0 --[[(int32) 充值--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.actLeftTime = 0 --[[(int32) 活动倒计时--]]
	msg.buys = {} --[[(map<int32,int32>) 已经购买的次数--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030510:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.czSum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt16(get_map_size(self.buys))
	for kn,elm in ipairs(self.buys) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030510:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.czSum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actLeftTime = sm:readInt32();
	local buys_size = sm:readInt16()
	for i = 1,buys_size do
		local kv = sm:readInt32();
		self.buys[kv] = sm:readInt32();
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030510:opcode()
	return 5030510
end
--[[ 请求冲战达人活动--]]
MsgDef.Msg1030231 = {}

function MsgDef.Msg1030231:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030231:encode(sm)
	return self
end

function MsgDef.Msg1030231:decode(sm)
	return self
end

function MsgDef.Msg1030231:opcode()
	return 1030231
end

--[[ 请求冲战达人活动(返回)--]]
MsgDef.Msg5030231 = {}
function MsgDef.Msg5030231:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030231:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030231:decode(sm)
	self.lastTime = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030231:opcode()
	return 5030231
end
--[[ 请求疯狂充值返利--]]
MsgDef.Msg1030511 = {}

function MsgDef.Msg1030511:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030511:encode(sm)
	return self
end

function MsgDef.Msg1030511:decode(sm)
	return self
end

function MsgDef.Msg1030511:opcode()
	return 1030511
end

--[[ 请求疯狂充值返利(返回)--]]
MsgDef.Msg5030511 = {}
function MsgDef.Msg5030511:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftTime = 0 --[[(int32) 活动剩余倒计时--]]
	return msg
end

function MsgDef.Msg5030511:encode(sm)
	sm:writeInt32(self.actLeftTime);
	return self
end

function MsgDef.Msg5030511:decode(sm)
	self.actLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030511:opcode()
	return 5030511
end
--[[ 请求超值单笔活动--]]
MsgDef.Msg1030232 = {}

function MsgDef.Msg1030232:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取奖励Id--]]
	return msg
end

function MsgDef.Msg1030232:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030232:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030232:opcode()
	return 1030232
end

--[[ 请求超值单笔活动(返回)--]]
MsgDef.Msg5030232 = {}
function MsgDef.Msg5030232:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.cid = 0 --[[(int32) 领取奖励Id--]]
	msg.actDay = 0 --[[(int32) 活动天数--]]
	msg.quota = 0 --[[(int32) 累充元宝--]]
	msg.gotData = {} --[[(array<int32>) 已领取--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030232:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.actDay);
	sm:writeInt32(self.quota);
	sm:writeInt16(get_map_size(self.gotData))
	for i,elm in ipairs(self.gotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030232:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.cid = sm:readInt32();
	self.actDay = sm:readInt32();
	self.quota = sm:readInt32();
	local gotData_size = sm:readInt16()
	for i = 1,gotData_size do
		local ele = sm:readInt32();
		table.insert(self.gotData, ele)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030232:opcode()
	return 5030232
end
--[[ 请求仙侣pk场景位置信息--]]
MsgDef.Msg1540110 = {}

function MsgDef.Msg1540110:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540110:encode(sm)
	return self
end

function MsgDef.Msg1540110:decode(sm)
	return self
end

function MsgDef.Msg1540110:opcode()
	return 1540110
end

--[[ 请求仙侣pk场景位置信息(返回)--]]
MsgDef.Msg5540110 = {}
function MsgDef.Msg5540110:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	msg.enemys = {} --[[(array<int64>) 敌方角色id--]]
	return msg
end

function MsgDef.Msg5540110:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.enemys))
	for i,elm in ipairs(self.enemys) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5540110:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	local enemys_size = sm:readInt16()
	for i = 1,enemys_size do
		local ele = sm:readInt64();
		table.insert(self.enemys, ele)
	end
	return self
end


function MsgDef.Msg5540110:opcode()
	return 5540110
end
--[[ 请求充值抽抽乐活动--]]
MsgDef.Msg1030233 = {}

function MsgDef.Msg1030233:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:抽奖 2:领取奖励--]]
	if msg.args == nil then msg.args = 0 end --[[(int32) 抽奖次数或领取奖励id--]]
	return msg
end

function MsgDef.Msg1030233:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.args);
	return self
end

function MsgDef.Msg1030233:decode(sm)
	self.reqType = sm:readInt8();
	self.args = sm:readInt32();
	return self
end

function MsgDef.Msg1030233:opcode()
	return 1030233
end

--[[ 请求充值抽抽乐活动(返回)--]]
MsgDef.Msg5030233 = {}
function MsgDef.Msg5030233:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:抽奖 2:领取奖励--]]
	msg.args = 0 --[[(int32) 抽奖次数或领取奖励id--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTimes = 0 --[[(int32) 剩余可抽奖次数--]]
	msg.czYb = 0 --[[(int32) 当前充值元宝--]]
	msg.gotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.record = {} --[[(array<string>) 记录--]]
	msg.sumTimes = 0 --[[(int32) 全服抽奖次数--]]
	msg.mulActId = 0 --[[(int32) 多开活动kid--]]
	return msg
end

function MsgDef.Msg5030233:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.args);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTimes);
	sm:writeInt32(self.czYb);
	sm:writeInt16(get_map_size(self.gotData))
	for i,elm in ipairs(self.gotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.sumTimes);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030233:decode(sm)
	self.reqType = sm:readInt8();
	self.args = sm:readInt32();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTimes = sm:readInt32();
	self.czYb = sm:readInt32();
	local gotData_size = sm:readInt16()
	for i = 1,gotData_size do
		local ele = sm:readInt32();
		table.insert(self.gotData, ele)
	end
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	self.sumTimes = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030233:opcode()
	return 5030233
end
--[[ 仙侣pk争霸赛每场开始广播--]]
MsgDef.Msg8230504 = {}

function MsgDef.Msg8230504:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bo = 0 --[[(int32) 第几场--]]
	msg.boStartTime = 0 --[[(int32) 第几场开始时间--]]
	return msg
end

function MsgDef.Msg8230504:encode(sm)
	sm:writeInt32(self.bo);
	sm:writeInt32(self.boStartTime);
	return self
end

function MsgDef.Msg8230504:decode(sm)
	self.bo = sm:readInt32();
	self.boStartTime = sm:readInt32();
	return self
end

function MsgDef.Msg8230504:opcode()
	return 8230504
end

--[[ 仙侣pk争霸赛切换场景广播--]]
MsgDef.Msg8230505 = {}

function MsgDef.Msg8230505:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.tarRoleId = 0 --[[(int64) 目标玩家--]]
	msg.actId = 0 --[[(int32) 活动Id--]]
	return msg
end

function MsgDef.Msg8230505:encode(sm)
	sm:writeInt64(self.tarRoleId);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg8230505:decode(sm)
	self.tarRoleId = sm:readInt64();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg8230505:opcode()
	return 8230505
end

--[[ 请求百发百中活动--]]
MsgDef.Msg1030234 = {}

function MsgDef.Msg1030234:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:射一次 2:全射--]]
	return msg
end

function MsgDef.Msg1030234:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030234:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030234:opcode()
	return 1030234
end

--[[ 请求百发百中活动(返回)--]]
MsgDef.Msg5030234 = {}
function MsgDef.Msg5030234:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:射一次 2:全射--]]
	msg.index = 0 --[[(int32) 一次索引--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.boxData = {} --[[(map<int32,int32>) 数据<索引id,type(1低级箱子 2:高级箱子) 射击过的没有数据--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.itemType = 0 --[[(int32) 类型--]]
	return msg
end

function MsgDef.Msg5030234:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.boxData))
	for kn,elm in ipairs(self.boxData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.itemType);
	return self
end

function MsgDef.Msg5030234:decode(sm)
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	self.lastTime = sm:readInt32();
	local boxData_size = sm:readInt16()
	for i = 1,boxData_size do
		local kv = sm:readInt32();
		self.boxData[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.itemType = sm:readInt32();
	return self
end


function MsgDef.Msg5030234:opcode()
	return 5030234
end
--[[ 请求仙侣pk争霸赛场景信息--]]
MsgDef.Msg1540111 = {}

function MsgDef.Msg1540111:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540111:encode(sm)
	return self
end

function MsgDef.Msg1540111:decode(sm)
	return self
end

function MsgDef.Msg1540111:opcode()
	return 1540111
end

--[[ 请求仙侣pk争霸赛场景信息(返回)--]]
MsgDef.Msg5540111 = {}
function MsgDef.Msg5540111:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hpInfos = {} --[[(array<XlpkHpInfo>) 血量信息--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.bo = 0 --[[(int32) 第几波--]]
	msg.boStartTime = 0 --[[(int32) 波开始时间--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5540111:encode(sm)
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.bo);
	sm:writeInt32(self.boStartTime);
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5540111:decode(sm)
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.XlpkHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.teamId = sm:readInt32();
	self.startTime = sm:readInt32();
	self.bo = sm:readInt32();
	self.boStartTime = sm:readInt32();
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5540111:opcode()
	return 5540111
end
--[[ 请求洞房--]]
MsgDef.Msg1390501 = {}

function MsgDef.Msg1390501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:洞房 1:同意 2:拒绝--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 洞房次数--]]
	return msg
end

function MsgDef.Msg1390501:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1390501:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1390501:opcode()
	return 1390501
end

--[[ 请求洞房(返回)--]]
MsgDef.Msg5390501 = {}
function MsgDef.Msg5390501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.reqType = 0 --[[(int8) 0:洞房 1:同意 2:拒绝--]]
	msg.times = 0 --[[(int32) 洞房次数--]]
	return msg
end

function MsgDef.Msg5390501:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg5390501:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end


function MsgDef.Msg5390501:opcode()
	return 5390501
end
--[[ 请求仙童选择--]]
MsgDef.Msg1390502 = {}

function MsgDef.Msg1390502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 仙童id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:选择 1:坚持选择 2:同意更换 3:首选坚持选择--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 奖励--]]
	return msg
end

function MsgDef.Msg1390502:encode(sm)
	sm:writeInt32(self.mid);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1390502:decode(sm)
	self.mid = sm:readInt32();
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1390502:opcode()
	return 1390502
end

--[[ 请求仙童选择(返回)--]]
MsgDef.Msg5390502 = {}
function MsgDef.Msg5390502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:选择 1:坚持选择 2:同意更换 3:首选坚持选择--]]
	return msg
end

function MsgDef.Msg5390502:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5390502:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5390502:opcode()
	return 5390502
end
--[[ 洞房广播--]]
MsgDef.Msg8170201 = {}

function MsgDef.Msg8170201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.dfType = 0 --[[(int8) 0:请求洞房 1:同意 2:拒绝--]]
	msg.roleIcon = 0 --[[(int32) 头像--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	msg.awardId = 0 --[[(int32) 奖励id--]]
	msg.times = 0 --[[(int32) 洞房次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg8170201:encode(sm)
	sm:writeInt8(self.dfType);
	sm:writeInt32(self.roleIcon);
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.awardId);
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8170201:decode(sm)
	self.dfType = sm:readInt8();
	self.roleIcon = sm:readInt32();
	self.roleId = sm:readInt64();
	self.awardId = sm:readInt32();
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8170201:opcode()
	return 8170201
end

--[[ 仙童选择广播--]]
MsgDef.Msg8170202 = {}

function MsgDef.Msg8170202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mid = 0 --[[(int32) 仙童道具id--]]
	msg.choice = 0 --[[(int8) 0:对方选择 1:坚持选择 2:同意更换--]]
	return msg
end

function MsgDef.Msg8170202:encode(sm)
	sm:writeInt32(self.mid);
	sm:writeInt8(self.choice);
	return self
end

function MsgDef.Msg8170202:decode(sm)
	self.mid = sm:readInt32();
	self.choice = sm:readInt8();
	return self
end

function MsgDef.Msg8170202:opcode()
	return 8170202
end

--[[ 请求仙童信息--]]
MsgDef.Msg1390601 = {}

function MsgDef.Msg1390601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1390601:encode(sm)
	return self
end

function MsgDef.Msg1390601:decode(sm)
	return self
end

function MsgDef.Msg1390601:opcode()
	return 1390601
end

--[[ 请求仙童信息(返回)--]]
MsgDef.Msg5390601 = {}
function MsgDef.Msg5390601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curWarRoleId = 0 --[[(int32) 当前出战仙童--]]
	msg.xtDatas = {} --[[(array<XianTongInfo>) 仙童信息--]]
	return msg
end

function MsgDef.Msg5390601:encode(sm)
	sm:writeInt32(self.curWarRoleId);
	sm:writeInt16(#self.xtDatas)
	for i,elm in ipairs(self.xtDatas) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390601:decode(sm)
	self.curWarRoleId = sm:readInt32();
	local xtDatas_size = sm:readInt16()
	for i = 1,xtDatas_size do
		local element = MsgDef.XianTongInfo:create():decode(sm)
		table.insert(self.xtDatas, element)
	end
	return self
end


function MsgDef.Msg5390601:opcode()
	return 5390601
end
--[[ 请求仙童升阶--]]
MsgDef.Msg1390602 = {}

function MsgDef.Msg1390602:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童id--]]
	return msg
end

function MsgDef.Msg1390602:encode(sm)
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg1390602:decode(sm)
	self.xtRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1390602:opcode()
	return 1390602
end

--[[ 请求仙童升阶(返回)--]]
MsgDef.Msg5390602 = {}
function MsgDef.Msg5390602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.level = 0 --[[(int32) 仙童等级--]]
	msg.xtRoleId = 0 --[[(int32) 仙童id--]]
	msg.talentInfo = {} --[[(map<int32,int32>) 天赋信息--]]
	return msg
end

function MsgDef.Msg5390602:encode(sm)
	sm:writeInt32(self.level);
	sm:writeInt32(self.xtRoleId);
	sm:writeInt16(get_map_size(self.talentInfo))
	for kn,elm in ipairs(self.talentInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5390602:decode(sm)
	self.level = sm:readInt32();
	self.xtRoleId = sm:readInt32();
	local talentInfo_size = sm:readInt16()
	for i = 1,talentInfo_size do
		local kv = sm:readInt32();
		self.talentInfo[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5390602:opcode()
	return 5390602
end
--[[ 仙童信息--]]
MsgDef.XianTongInfo = {}

function MsgDef.XianTongInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 唯一id--]]
	if msg.xtId == nil then msg.xtId = 0 end --[[(int32) 仙童配置id--]]
	if msg.equipInfo == nil then msg.equipInfo = {} end --[[(map<int32,int32>) 仙童装备等级--]]
	if msg.talentInfo == nil then msg.talentInfo = {} end --[[(map<int32,int32>) 仙童天赋等级--]]
	if msg.skillInfo == nil then msg.skillInfo = {} end --[[(map<int32,int32>) 仙童技能等级--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 仙童等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 仙童战力--]]
	if msg.name == nil then msg.name = "" end --[[(string) 仙童名--]]
	if msg.growValue == nil then msg.growValue = 0 end --[[(int32) 仙童成长--]]
	return msg
end

function MsgDef.XianTongInfo:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt32(self.xtId);
	sm:writeInt16(get_map_size(self.equipInfo))
	for kn,elm in ipairs(self.equipInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.talentInfo))
	for kn,elm in ipairs(self.talentInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.skillInfo))
	for kn,elm in ipairs(self.skillInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.level);
	sm:writeInt32(self.power);
	sm:writeString(self.name);
	sm:writeInt32(self.growValue);
	return self
end

function MsgDef.XianTongInfo:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.xtId = sm:readInt32();
	local equipInfo_size = sm:readInt16()
	for i = 1,equipInfo_size do
		local kv = sm:readInt32();
		self.equipInfo[kv] = sm:readInt32();
	end
	local talentInfo_size = sm:readInt16()
	for i = 1,talentInfo_size do
		local kv = sm:readInt32();
		self.talentInfo[kv] = sm:readInt32();
	end
	local skillInfo_size = sm:readInt16()
	for i = 1,skillInfo_size do
		local kv = sm:readInt32();
		self.skillInfo[kv] = sm:readInt32();
	end
	self.level = sm:readInt32();
	self.power = sm:readInt32();
	self.name = sm:readString();
	self.growValue = sm:readInt32();
	return self
end

function MsgDef.XianTongInfo:opcode()
	return "XianTongInfo"
end

--[[ 请求仙童装备升级--]]
MsgDef.Msg1390603 = {}

function MsgDef.Msg1390603:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.equipId == nil then msg.equipId = 0 end --[[(int32) --]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:一次 1:10次--]]
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg1390603:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg1390603:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.xtRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1390603:opcode()
	return 1390603
end

--[[ 请求仙童装备升级(返回)--]]
MsgDef.Msg5390603 = {}
function MsgDef.Msg5390603:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.equipId = 0 --[[(int32) --]]
	msg.reqType = 0 --[[(int8) 0:一次 1:10次--]]
	msg.lev = 0 --[[(int32) 当前装备等级--]]
	msg.xtRoleId = 0 --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg5390603:encode(sm)
	sm:writeInt32(self.equipId);
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg5390603:decode(sm)
	self.equipId = sm:readInt32();
	self.reqType = sm:readInt8();
	self.lev = sm:readInt32();
	self.xtRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5390603:opcode()
	return 5390603
end
--[[ 请求仙童天赋升级--]]
MsgDef.Msg1390604 = {}

function MsgDef.Msg1390604:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg1390604:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg1390604:decode(sm)
	self.skillId = sm:readInt32();
	self.xtRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1390604:opcode()
	return 1390604
end

--[[ 请求仙童天赋升级(返回)--]]
MsgDef.Msg5390604 = {}
function MsgDef.Msg5390604:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillId = 0 --[[(int32) 技能id--]]
	msg.lev = 0 --[[(int32) 等级--]]
	msg.xtRoleId = 0 --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg5390604:encode(sm)
	sm:writeInt32(self.skillId);
	sm:writeInt32(self.lev);
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg5390604:decode(sm)
	self.skillId = sm:readInt32();
	self.lev = sm:readInt32();
	self.xtRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5390604:opcode()
	return 5390604
end
--[[ 请求仙童技能学习--]]
MsgDef.Msg1390605 = {}

function MsgDef.Msg1390605:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童标识--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 技能书id--]]
	return msg
end

function MsgDef.Msg1390605:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1390605:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1390605:opcode()
	return 1390605
end

--[[ 请求仙童技能学习(返回)--]]
MsgDef.Msg5390605 = {}
function MsgDef.Msg5390605:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xtRoleId = 0 --[[(int32) 仙童标识--]]
	msg.skillInfo = {} --[[(map<int32,int32>) 技能信息--]]
	return msg
end

function MsgDef.Msg5390605:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt16(get_map_size(self.skillInfo))
	for kn,elm in ipairs(self.skillInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5390605:decode(sm)
	self.xtRoleId = sm:readInt32();
	local skillInfo_size = sm:readInt16()
	for i = 1,skillInfo_size do
		local kv = sm:readInt32();
		self.skillInfo[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5390605:opcode()
	return 5390605
end
--[[ 请求仙童出战--]]
MsgDef.Msg1390606 = {}

function MsgDef.Msg1390606:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg1390606:encode(sm)
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg1390606:decode(sm)
	self.xtRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1390606:opcode()
	return 1390606
end

--[[ 请求仙童出战(返回)--]]
MsgDef.Msg5390606 = {}
function MsgDef.Msg5390606:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xtRoleId = 0 --[[(int32) 仙童标识--]]
	return msg
end

function MsgDef.Msg5390606:encode(sm)
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg5390606:decode(sm)
	self.xtRoleId = sm:readInt32();
	return self
end


function MsgDef.Msg5390606:opcode()
	return 5390606
end
--[[ 请求仙童寄送--]]
MsgDef.Msg1390607 = {}

function MsgDef.Msg1390607:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童id--]]
	return msg
end

function MsgDef.Msg1390607:encode(sm)
	sm:writeInt32(self.xtRoleId);
	return self
end

function MsgDef.Msg1390607:decode(sm)
	self.xtRoleId = sm:readInt32();
	return self
end

function MsgDef.Msg1390607:opcode()
	return 1390607
end

--[[ 请求仙童寄送(返回)--]]
MsgDef.Msg5390607 = {}
function MsgDef.Msg5390607:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xtRoleId = 0 --[[(int32) 仙童id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5390607:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5390607:decode(sm)
	self.xtRoleId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5390607:opcode()
	return 5390607
end
--[[ 请求仙童改名--]]
MsgDef.Msg1390608 = {}

function MsgDef.Msg1390608:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) --]]
	if msg.name == nil then msg.name = "" end --[[(string) --]]
	return msg
end

function MsgDef.Msg1390608:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg1390608:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.name = sm:readString();
	return self
end

function MsgDef.Msg1390608:opcode()
	return 1390608
end

--[[ 请求仙童改名(返回)--]]
MsgDef.Msg5390608 = {}
function MsgDef.Msg5390608:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xtRoleId = 0 --[[(int32) --]]
	msg.name = "" --[[(string) --]]
	return msg
end

function MsgDef.Msg5390608:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeString(self.name);
	return self
end

function MsgDef.Msg5390608:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.name = sm:readString();
	return self
end


function MsgDef.Msg5390608:opcode()
	return 5390608
end
--[[ 请求仙童成长值重置--]]
MsgDef.Msg1390609 = {}

function MsgDef.Msg1390609:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.xtRoleId == nil then msg.xtRoleId = 0 end --[[(int32) 仙童标识--]]
	if msg.mid == nil then msg.mid = 0 end --[[(int32) 道具--]]
	return msg
end

function MsgDef.Msg1390609:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt32(self.mid);
	return self
end

function MsgDef.Msg1390609:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.mid = sm:readInt32();
	return self
end

function MsgDef.Msg1390609:opcode()
	return 1390609
end

--[[ 请求仙童成长值重置(返回)--]]
MsgDef.Msg5390609 = {}
function MsgDef.Msg5390609:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.xtRoleId = 0 --[[(int32) 仙童标识--]]
	msg.growValue = 0 --[[(int32) 成长值--]]
	return msg
end

function MsgDef.Msg5390609:encode(sm)
	sm:writeInt32(self.xtRoleId);
	sm:writeInt32(self.growValue);
	return self
end

function MsgDef.Msg5390609:decode(sm)
	self.xtRoleId = sm:readInt32();
	self.growValue = sm:readInt32();
	return self
end


function MsgDef.Msg5390609:opcode()
	return 5390609
end
--[[ 仙侣pk活动预告广播--]]
MsgDef.Msg8230506 = {}

function MsgDef.Msg8230506:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:海选赛开始 2:争霸赛第一轮提前通知 3:争霸赛第二轮提前通知--]]
	msg.nextStartTime = 0 --[[(int32) 下次开启时间--]]
	msg.actId = 0 --[[(int32) 活动id--]]
	return msg
end

function MsgDef.Msg8230506:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.nextStartTime);
	sm:writeInt32(self.actId);
	return self
end

function MsgDef.Msg8230506:decode(sm)
	self.reqType = sm:readInt8();
	self.nextStartTime = sm:readInt32();
	self.actId = sm:readInt32();
	return self
end

function MsgDef.Msg8230506:opcode()
	return 8230506
end

--[[ 请求跨服充值排行--]]
MsgDef.Msg1030235 = {}

function MsgDef.Msg1030235:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030235:encode(sm)
	return self
end

function MsgDef.Msg1030235:decode(sm)
	return self
end

function MsgDef.Msg1030235:opcode()
	return 1030235
end

--[[ 请求跨服充值排行(返回)--]]
MsgDef.Msg5030235 = {}
function MsgDef.Msg5030235:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.myCzYb = 0 --[[(int32) 个人充值元宝--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfo = {} --[[(array<QuotaRankingInfo>) 排名--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030235:encode(sm)
	sm:writeInt32(self.myCzYb);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfo)
	for i,elm in ipairs(self.rankInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030235:decode(sm)
	self.myCzYb = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfo_size = sm:readInt16()
	for i = 1,rankInfo_size do
		local element = MsgDef.QuotaRankingInfo:create():decode(sm)
		table.insert(self.rankInfo, element)
	end
	self.lastTime = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030235:opcode()
	return 5030235
end
--[[ 请求仙童大比拼活动(跨服)--]]
MsgDef.Msg1030236 = {}

function MsgDef.Msg1030236:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030236:encode(sm)
	return self
end

function MsgDef.Msg1030236:decode(sm)
	return self
end

function MsgDef.Msg1030236:opcode()
	return 1030236
end

--[[ 请求仙童大比拼活动(跨服)(返回)--]]
MsgDef.Msg5030236 = {}
function MsgDef.Msg5030236:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030236:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myPower);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030236:decode(sm)
	self.lastTime = sm:readInt32();
	self.myPower = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030236:opcode()
	return 5030236
end
--[[ 请求洞房返还活动--]]
MsgDef.Msg1030237 = {}

function MsgDef.Msg1030237:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030237:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030237:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030237:opcode()
	return 1030237
end

--[[ 请求洞房返还活动(返回)--]]
MsgDef.Msg5030237 = {}
function MsgDef.Msg5030237:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.currTimes = 0 --[[(int32) 当前次数--]]
	msg.itemGotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	return msg
end

function MsgDef.Msg5030237:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.currTimes);
	sm:writeInt16(get_map_size(self.itemGotData))
	for i,elm in ipairs(self.itemGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030237:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.currTimes = sm:readInt32();
	local itemGotData_size = sm:readInt16()
	for i = 1,itemGotData_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotData, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030237:opcode()
	return 5030237
end
--[[ 仙童战力广播--]]
MsgDef.Msg8170203 = {}

function MsgDef.Msg8170203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = {} --[[(map<int32,int32>) --]]
	return msg
end

function MsgDef.Msg8170203:encode(sm)
	sm:writeInt16(get_map_size(self.power))
	for kn,elm in ipairs(self.power) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8170203:decode(sm)
	local power_size = sm:readInt16()
	for i = 1,power_size do
		local kv = sm:readInt32();
		self.power[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8170203:opcode()
	return 8170203
end

--[[ 请求聚宝盆活动--]]
MsgDef.Msg1030238 = {}

function MsgDef.Msg1030238:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:下注--]]
	return msg
end

function MsgDef.Msg1030238:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030238:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030238:opcode()
	return 1030238
end

--[[ 请求聚宝盆活动(返回)--]]
MsgDef.Msg5030238 = {}
function MsgDef.Msg5030238:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:下注--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.currBuyYb = 0 --[[(int32) 当前下注元宝--]]
	msg.quota = 0 --[[(int32) 累充元宝--]]
	msg.record = {} --[[(array<string>) 全服记录--]]
	msg.baseRate = 0 --[[(int32) 倍率--]]
	msg.leftTimes = 0 --[[(int32) 剩余可下注数量--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030238:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.currBuyYb);
	sm:writeInt32(self.quota);
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.baseRate);
	sm:writeInt32(self.leftTimes);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030238:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.currBuyYb = sm:readInt32();
	self.quota = sm:readInt32();
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	self.baseRate = sm:readInt32();
	self.leftTimes = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030238:opcode()
	return 5030238
end
--[[ 请求秘境寻宝--]]
MsgDef.Msg1030239 = {}

function MsgDef.Msg1030239:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:寻宝--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030239:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030239:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030239:opcode()
	return 1030239
end

--[[ 请求秘境寻宝(返回)--]]
MsgDef.Msg5030239 = {}
function MsgDef.Msg5030239:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:寻宝--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.records = {} --[[(array<string>) 全服记录--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030239:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030239:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.leftFreeTimes = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030239:opcode()
	return 5030239
end
--[[ 请求月卡--]]
MsgDef.Msg1030512 = {}

function MsgDef.Msg1030512:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取 2:投资 3:领取首次赠送 4:领取补投奖励--]]
	if msg.pos == nil then msg.pos = 0 end --[[(int32) 投资档位--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 领取补投奖励--]]
	return msg
end

function MsgDef.Msg1030512:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.pos);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030512:decode(sm)
	self.reqType = sm:readInt8();
	self.pos = sm:readInt32();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030512:opcode()
	return 1030512
end

--[[ 请求月卡(返回)--]]
MsgDef.Msg5030512 = {}
function MsgDef.Msg5030512:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取 2:投资 3:领取首次赠送 4:领取补投奖励--]]
	msg.curDay = 0 --[[(int32) 当前月卡第几天--]]
	msg.dayGotSign = 0 --[[(int32) 今天是否已领取--]]
	msg.buySign = 0 --[[(int32) 是否已投资 --]]
	msg.firstGotSign = 0 --[[(int32) 首次赠送领取标识--]]
	msg.pos = 0 --[[(int32) 投资档位--]]
	msg.reGotSign = {} --[[(array<int32>) 补领已领取档位--]]
	msg.oldPos = 0 --[[(int32) 补投前旧档位，为0表示没有--]]
	msg.awardId = 0 --[[(int32) 领取补投奖励--]]
	return msg
end

function MsgDef.Msg5030512:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.dayGotSign);
	sm:writeInt32(self.buySign);
	sm:writeInt32(self.firstGotSign);
	sm:writeInt32(self.pos);
	sm:writeInt16(get_map_size(self.reGotSign))
	for i,elm in ipairs(self.reGotSign) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.oldPos);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg5030512:decode(sm)
	self.reqType = sm:readInt8();
	self.curDay = sm:readInt32();
	self.dayGotSign = sm:readInt32();
	self.buySign = sm:readInt32();
	self.firstGotSign = sm:readInt32();
	self.pos = sm:readInt32();
	local reGotSign_size = sm:readInt16()
	for i = 1,reGotSign_size do
		local ele = sm:readInt32();
		table.insert(self.reGotSign, ele)
	end
	self.oldPos = sm:readInt32();
	self.awardId = sm:readInt32();
	return self
end


function MsgDef.Msg5030512:opcode()
	return 5030512
end
--[[ 请求头像边框--]]
MsgDef.Msg1020505 = {}

function MsgDef.Msg1020505:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示信息 1:激活 2:戴 3:脱--]]
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	return msg
end

function MsgDef.Msg1020505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1020505:decode(sm)
	self.reqType = sm:readInt8();
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1020505:opcode()
	return 1020505
end

--[[ 请求头像边框(返回)--]]
MsgDef.Msg5020505 = {}
function MsgDef.Msg5020505:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示信息 1:激活 2:戴 3:脱--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	msg.stars = {} --[[(map<int32,int32>) 皮肤星数key:头像边框id,value:星数--]]
	msg.curSkinId = 0 --[[(int32) 当前的皮肤id--]]
	msg.roleIcon = 0 --[[(int32) 头像--]]
	return msg
end

function MsgDef.Msg5020505:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.power);
	sm:writeInt32(self.skinId);
	sm:writeInt16(get_map_size(self.stars))
	for kn,elm in ipairs(self.stars) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curSkinId);
	sm:writeInt32(self.roleIcon);
	return self
end

function MsgDef.Msg5020505:decode(sm)
	self.reqType = sm:readInt8();
	self.power = sm:readInt32();
	self.skinId = sm:readInt32();
	local stars_size = sm:readInt16()
	for i = 1,stars_size do
		local kv = sm:readInt32();
		self.stars[kv] = sm:readInt32();
	end
	self.curSkinId = sm:readInt32();
	self.roleIcon = sm:readInt32();
	return self
end


function MsgDef.Msg5020505:opcode()
	return 5020505
end
--[[ 请求聊天泡泡--]]
MsgDef.Msg1020506 = {}

function MsgDef.Msg1020506:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示信息 1:激活 2:戴 3:脱--]]
	if msg.skinId == nil then msg.skinId = 0 end --[[(int32) 皮肤id--]]
	return msg
end

function MsgDef.Msg1020506:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.skinId);
	return self
end

function MsgDef.Msg1020506:decode(sm)
	self.reqType = sm:readInt8();
	self.skinId = sm:readInt32();
	return self
end

function MsgDef.Msg1020506:opcode()
	return 1020506
end

--[[ 请求聊天泡泡(返回)--]]
MsgDef.Msg5020506 = {}
function MsgDef.Msg5020506:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示信息 1:激活 2:戴 3:脱--]]
	msg.skinId = 0 --[[(int32) 皮肤id--]]
	msg.power = 0 --[[(int32) 系统战力--]]
	msg.stars = {} --[[(map<int32,int32>) 皮肤星数key:头像边框id,value:星数--]]
	msg.curSkinId = 0 --[[(int32) 当前的皮肤id--]]
	return msg
end

function MsgDef.Msg5020506:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.skinId);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.stars))
	for kn,elm in ipairs(self.stars) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curSkinId);
	return self
end

function MsgDef.Msg5020506:decode(sm)
	self.reqType = sm:readInt8();
	self.skinId = sm:readInt32();
	self.power = sm:readInt32();
	local stars_size = sm:readInt16()
	for i = 1,stars_size do
		local kv = sm:readInt32();
		self.stars[kv] = sm:readInt32();
	end
	self.curSkinId = sm:readInt32();
	return self
end


function MsgDef.Msg5020506:opcode()
	return 5020506
end
--[[ 婚礼预约数据--]]
MsgDef.WeddingPredetermineData = {}

function MsgDef.WeddingPredetermineData:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.timeField == nil then msg.timeField = 0 end --[[(int32) 预约时间段--]]
	if msg.coupleName == nil then msg.coupleName = "" end --[[(string) 另一半玩家名--]]
	return msg
end

function MsgDef.WeddingPredetermineData:encode(sm)
	sm:writeString(self.roleName);
	sm:writeInt32(self.timeField);
	sm:writeString(self.coupleName);
	return self
end

function MsgDef.WeddingPredetermineData:decode(sm)
	self.roleName = sm:readString();
	self.timeField = sm:readInt32();
	self.coupleName = sm:readString();
	return self
end

function MsgDef.WeddingPredetermineData:opcode()
	return "WeddingPredetermineData"
end

--[[ 请求今日累充奖励--]]
MsgDef.Msg1030240 = {}

function MsgDef.Msg1030240:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.awardId == nil then msg.awardId = 0 end --[[(int32) 奖励id--]]
	return msg
end

function MsgDef.Msg1030240:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg1030240:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	return self
end

function MsgDef.Msg1030240:opcode()
	return 1030240
end

--[[ 请求今日累充奖励(返回)--]]
MsgDef.Msg5030240 = {}
function MsgDef.Msg5030240:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.awardId = 0 --[[(int32) 奖励id--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.gotData = {} --[[(array<int32>) 已领取奖励(元宝)--]]
	msg.lcYb = 0 --[[(int32) 累充元宝--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	msg.actDay = 0 --[[(int32) 活动天--]]
	return msg
end

function MsgDef.Msg5030240:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.awardId);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotData))
	for i,elm in ipairs(self.gotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lcYb);
	sm:writeInt32(self.mulActId);
	sm:writeInt32(self.actDay);
	return self
end

function MsgDef.Msg5030240:decode(sm)
	self.reqType = sm:readInt8();
	self.awardId = sm:readInt32();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gotData_size = sm:readInt16()
	for i = 1,gotData_size do
		local ele = sm:readInt32();
		table.insert(self.gotData, ele)
	end
	self.lcYb = sm:readInt32();
	self.mulActId = sm:readInt32();
	self.actDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030240:opcode()
	return 5030240
end
--[[ 请求天命卜卦活动信息--]]
MsgDef.Msg1030241 = {}

function MsgDef.Msg1030241:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:卜卦 2:猜测 3:重置--]]
	if msg.args == nil then msg.args = 0 end --[[(int32) 卜卦次数或猜测id--]]
	return msg
end

function MsgDef.Msg1030241:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.args);
	return self
end

function MsgDef.Msg1030241:decode(sm)
	self.reqType = sm:readInt8();
	self.args = sm:readInt32();
	return self
end

function MsgDef.Msg1030241:opcode()
	return 1030241
end

--[[ 请求天命卜卦活动信息(返回)--]]
MsgDef.Msg5030241 = {}
function MsgDef.Msg5030241:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:卜卦 2:猜测 3:重置--]]
	msg.args = 0 --[[(int32) 卜卦次数或猜测id--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.records = {} --[[(array<string>) 全服记录(name|id)--]]
	msg.gestTimesData = {} --[[(map<int32,int32>) 猜测次数<配置id,猜测次数>--]]
	msg.awardId = 0 --[[(int32) 卜卦一次的配置id--]]
	return msg
end

function MsgDef.Msg5030241:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.args);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.gestTimesData))
	for kn,elm in ipairs(self.gestTimesData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.awardId);
	return self
end

function MsgDef.Msg5030241:decode(sm)
	self.reqType = sm:readInt8();
	self.args = sm:readInt32();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	local gestTimesData_size = sm:readInt16()
	for i = 1,gestTimesData_size do
		local kv = sm:readInt32();
		self.gestTimesData[kv] = sm:readInt32();
	end
	self.awardId = sm:readInt32();
	return self
end


function MsgDef.Msg5030241:opcode()
	return 5030241
end
--[[ 请求连续消费--]]
MsgDef.Msg1030513 = {}

function MsgDef.Msg1030513:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取每日奖励 2:领取连续目标奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030513:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030513:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030513:opcode()
	return 1030513
end

--[[ 请求连续消费(返回)--]]
MsgDef.Msg5030513 = {}
function MsgDef.Msg5030513:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取每日奖励 2:领取连续目标奖励--]]
	msg.targetGotSign = 0 --[[(int8) 连续目标奖励标识1:已领取--]]
	msg.dayCostSum = 0 --[[(int32) 今日总消费--]]
	msg.curCost = 0 --[[(int32) 当前进度消耗--]]
	msg.okDay = 0 --[[(int32) 达标天数--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030513:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.targetGotSign);
	sm:writeInt32(self.dayCostSum);
	sm:writeInt32(self.curCost);
	sm:writeInt32(self.okDay);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030513:decode(sm)
	self.reqType = sm:readInt8();
	self.targetGotSign = sm:readInt8();
	self.dayCostSum = sm:readInt32();
	self.curCost = sm:readInt32();
	self.okDay = sm:readInt32();
	self.cfgId = sm:readInt32();
	self.curDay = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030513:opcode()
	return 5030513
end
--[[ 请求步步高升--]]
MsgDef.Msg1030514 = {}

function MsgDef.Msg1030514:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:抽1次 2:抽10次--]]
	return msg
end

function MsgDef.Msg1030514:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030514:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030514:opcode()
	return 1030514
end

--[[ 请求步步高升(返回)--]]
MsgDef.Msg5030514 = {}
function MsgDef.Msg5030514:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:抽1次 2:抽10次--]]
	msg.curGridId = 0 --[[(int32) 当前的格子id(配置id)--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	msg.czSum = 0 --[[(int32) 充值元宝总数--]]
	return msg
end

function MsgDef.Msg5030514:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curGridId);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.czSum);
	return self
end

function MsgDef.Msg5030514:decode(sm)
	self.reqType = sm:readInt8();
	self.curGridId = sm:readInt32();
	self.leftCount = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.czSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030514:opcode()
	return 5030514
end
--[[ 请求天晶洞窟场景信息--]]
MsgDef.Msg1028101 = {}

function MsgDef.Msg1028101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1028101:encode(sm)
	return self
end

function MsgDef.Msg1028101:decode(sm)
	return self
end

function MsgDef.Msg1028101:opcode()
	return 1028101
end

--[[ 请求天晶洞窟场景信息(返回)--]]
MsgDef.Msg5028101 = {}
function MsgDef.Msg5028101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间(结束时间)--]]
	msg.progress = 0 --[[(int32) 进度--]]
	msg.profit = {} --[[(map<int32,int32>) 累计收益(id,数量)--]]
	msg.nextRefreshTime = 0 --[[(int32) 下次水晶刷新时间--]]
	return msg
end

function MsgDef.Msg5028101:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.progress);
	sm:writeInt16(get_map_size(self.profit))
	for kn,elm in ipairs(self.profit) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.nextRefreshTime);
	return self
end

function MsgDef.Msg5028101:decode(sm)
	self.leftTime = sm:readInt32();
	self.progress = sm:readInt32();
	local profit_size = sm:readInt16()
	for i = 1,profit_size do
		local kv = sm:readInt32();
		self.profit[kv] = sm:readInt32();
	end
	self.nextRefreshTime = sm:readInt32();
	return self
end


function MsgDef.Msg5028101:opcode()
	return 5028101
end
--[[ 天晶洞窟采集广播--]]
MsgDef.Msg8190301 = {}

function MsgDef.Msg8190301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.progress = 0 --[[(int32) 进度--]]
	msg.profit = {} --[[(map<int32,int32>) 收益--]]
	return msg
end

function MsgDef.Msg8190301:encode(sm)
	sm:writeInt32(self.progress);
	sm:writeInt16(get_map_size(self.profit))
	for kn,elm in ipairs(self.profit) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8190301:decode(sm)
	self.progress = sm:readInt32();
	local profit_size = sm:readInt16()
	for i = 1,profit_size do
		local kv = sm:readInt32();
		self.profit[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8190301:opcode()
	return 8190301
end

--[[ 请求飞升装备穿戴--]]
MsgDef.Msg1580101 = {}

function MsgDef.Msg1580101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =0时背包位置,=1时装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1580101:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1580101:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1580101:opcode()
	return 1580101
end

--[[ 请求飞升装备穿戴(返回)--]]
MsgDef.Msg5580101 = {}
function MsgDef.Msg5580101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5580101:encode(sm)
	return self
end

function MsgDef.Msg5580101:decode(sm)
	return self
end


function MsgDef.Msg5580101:opcode()
	return 5580101
end
--[[ 请求飞升装备分解--]]
MsgDef.Msg1580102 = {}

function MsgDef.Msg1580102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包索引--]]
	return msg
end

function MsgDef.Msg1580102:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1580102:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1580102:opcode()
	return 1580102
end

--[[ 请求飞升装备分解(返回)--]]
MsgDef.Msg5580102 = {}
function MsgDef.Msg5580102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5580102:encode(sm)
	return self
end

function MsgDef.Msg5580102:decode(sm)
	return self
end


function MsgDef.Msg5580102:opcode()
	return 5580102
end
--[[ 请求提升仙缘--]]
MsgDef.Msg1580201 = {}

function MsgDef.Msg1580201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:转化--]]
	return msg
end

function MsgDef.Msg1580201:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1580201:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1580201:opcode()
	return 1580201
end

--[[ 请求提升仙缘(返回)--]]
MsgDef.Msg5580201 = {}
function MsgDef.Msg5580201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:转化--]]
	msg.exchangeTimes = 0 --[[(int32) 当前转化次数--]]
	msg.useTimes = 0 --[[(int32) 使用仙果次数--]]
	msg.xl = 0 --[[(int32) 仙力--]]
	msg.xlLev = 0 --[[(int32) 仙力等级--]]
	msg.xy = 0 --[[(int32) 仙缘--]]
	return msg
end

function MsgDef.Msg5580201:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.exchangeTimes);
	sm:writeInt32(self.useTimes);
	sm:writeInt32(self.xl);
	sm:writeInt32(self.xlLev);
	sm:writeInt32(self.xy);
	return self
end

function MsgDef.Msg5580201:decode(sm)
	self.reqType = sm:readInt8();
	self.exchangeTimes = sm:readInt32();
	self.useTimes = sm:readInt32();
	self.xl = sm:readInt32();
	self.xlLev = sm:readInt32();
	self.xy = sm:readInt32();
	return self
end


function MsgDef.Msg5580201:opcode()
	return 5580201
end
--[[ 请求羽化飞升--]]
MsgDef.Msg1580202 = {}

function MsgDef.Msg1580202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1580202:encode(sm)
	return self
end

function MsgDef.Msg1580202:decode(sm)
	return self
end

function MsgDef.Msg1580202:opcode()
	return 1580202
end

--[[ 请求羽化飞升(返回)--]]
MsgDef.Msg5580202 = {}
function MsgDef.Msg5580202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.fsLev = 0 --[[(int32) 飞升等级--]]
	msg.xy = 0 --[[(int32) 仙缘--]]
	return msg
end

function MsgDef.Msg5580202:encode(sm)
	sm:writeInt32(self.fsLev);
	sm:writeInt32(self.xy);
	return self
end

function MsgDef.Msg5580202:decode(sm)
	self.fsLev = sm:readInt32();
	self.xy = sm:readInt32();
	return self
end


function MsgDef.Msg5580202:opcode()
	return 5580202
end
--[[ 天晶洞窟水晶刷新广播--]]
MsgDef.Msg8190302 = {}

function MsgDef.Msg8190302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.nextRefreshTime = 0 --[[(int32) 下次刷新时间--]]
	return msg
end

function MsgDef.Msg8190302:encode(sm)
	sm:writeInt32(self.nextRefreshTime);
	return self
end

function MsgDef.Msg8190302:decode(sm)
	self.nextRefreshTime = sm:readInt32();
	return self
end

function MsgDef.Msg8190302:opcode()
	return 8190302
end

--[[ 请求飞升BOSS信息--]]
MsgDef.Msg1331101 = {}

function MsgDef.Msg1331101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331101:encode(sm)
	return self
end

function MsgDef.Msg1331101:decode(sm)
	return self
end

function MsgDef.Msg1331101:opcode()
	return 1331101
end

--[[ 请求飞升BOSS信息(返回)--]]
MsgDef.Msg5331101 = {}
function MsgDef.Msg5331101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 关注map--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	msg.dayBuyCount = 0 --[[(int32) dayBuyCount--]]
	return msg
end

function MsgDef.Msg5331101:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt32(self.dayBuyCount);
	return self
end

function MsgDef.Msg5331101:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	self.leftTired = sm:readInt32();
	self.dayBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5331101:opcode()
	return 5331101
end
--[[ 请求飞升BOSS关注--]]
MsgDef.Msg1331102 = {}

function MsgDef.Msg1331102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1331102:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1331102:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1331102:opcode()
	return 1331102
end

--[[ 请求飞升BOSS关注(返回)--]]
MsgDef.Msg5331102 = {}
function MsgDef.Msg5331102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	return msg
end

function MsgDef.Msg5331102:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	sm:writeInt32(self.leftTired);
	return self
end

function MsgDef.Msg5331102:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	self.leftTired = sm:readInt32();
	return self
end


function MsgDef.Msg5331102:opcode()
	return 5331102
end
--[[ 请求飞升BOSS场景信息--]]
MsgDef.Msg1331103 = {}

function MsgDef.Msg1331103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331103:encode(sm)
	return self
end

function MsgDef.Msg1331103:decode(sm)
	return self
end

function MsgDef.Msg1331103:opcode()
	return 1331103
end

--[[ 请求飞升BOSS场景信息(返回)--]]
MsgDef.Msg5331103 = {}
function MsgDef.Msg5331103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<SceneBossInfo>) boss列表--]]
	return msg
end

function MsgDef.Msg5331103:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5331103:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SceneBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end


function MsgDef.Msg5331103:opcode()
	return 5331103
end
--[[ 请求自动分解类型--]]
MsgDef.Msg1580103 = {}

function MsgDef.Msg1580103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:当前类型 2:设置分解类型--]]
	if msg.type == nil then msg.type = 0 end --[[(int8) 吞噬类型 0:不设置默认 1:自动分解--]]
	return msg
end

function MsgDef.Msg1580103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg1580103:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt8();
	return self
end

function MsgDef.Msg1580103:opcode()
	return 1580103
end

--[[ 请求自动分解类型(返回)--]]
MsgDef.Msg5580103 = {}
function MsgDef.Msg5580103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:当前类型 2:设置分解类型--]]
	msg.type = 0 --[[(int8) 吞噬类型 0:不设置默认 1:自动分解--]]
	return msg
end

function MsgDef.Msg5580103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.type);
	return self
end

function MsgDef.Msg5580103:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt8();
	return self
end


function MsgDef.Msg5580103:opcode()
	return 5580103
end
--[[ 请求老师请点名活动--]]
MsgDef.Msg1030242 = {}

function MsgDef.Msg1030242:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:点名 2:重置--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 次数--]]
	if msg.index == nil then msg.index = 0 end --[[(int32) 单次翻牌索引--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 1:低级 2:中级 3:高级--]]
	return msg
end

function MsgDef.Msg1030242:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.index);
	sm:writeInt32(self.level);
	return self
end

function MsgDef.Msg1030242:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.index = sm:readInt32();
	self.level = sm:readInt32();
	return self
end

function MsgDef.Msg1030242:opcode()
	return 1030242
end

--[[ 请求老师请点名活动(返回)--]]
MsgDef.Msg5030242 = {}
function MsgDef.Msg5030242:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:点名--]]
	msg.times = 0 --[[(int32) 次数--]]
	msg.index = 0 --[[(int32) 单次翻牌索引--]]
	msg.cardData = {} --[[(map<int32,int32>) 已翻牌数据<索引,id>--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.level = 0 --[[(int32) 1:低级 2:中级 3:高级--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030242:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.index);
	sm:writeInt16(get_map_size(self.cardData))
	for kn,elm in ipairs(self.cardData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.level);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030242:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.index = sm:readInt32();
	local cardData_size = sm:readInt16()
	for i = 1,cardData_size do
		local kv = sm:readInt32();
		self.cardData[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.level = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030242:opcode()
	return 5030242
end
--[[ 请求无敌幸运星活动--]]
MsgDef.Msg1030243 = {}

function MsgDef.Msg1030243:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:抽奖 2:换一个 3:领取奖励--]]
	if msg.args == nil then msg.args = 0 end --[[(int32) reqType=2表示格子(依次1,2,3)，reqType=1表示自动设置类型(1:自动 0:非自动)--]]
	return msg
end

function MsgDef.Msg1030243:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.args);
	return self
end

function MsgDef.Msg1030243:decode(sm)
	self.reqType = sm:readInt8();
	self.args = sm:readInt32();
	return self
end

function MsgDef.Msg1030243:opcode()
	return 1030243
end

--[[ 请求无敌幸运星活动(返回)--]]
MsgDef.Msg5030243 = {}
function MsgDef.Msg5030243:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:抽奖 2:换一个 3:领取奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.args = 0 --[[(int32) reqType=2表示格子(依次1,2,3)，reqType=1表示自动设置类型(1:自动 0:非自动)--]]
	msg.rate = 0 --[[(int32) 倍数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.gridData = {} --[[(map<int32,int32>) 格子数据(格子id->奖励id)--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	msg.isHadAward = 0 --[[(int8) 是否有奖励可领取 =1：可领取 --]]
	return msg
end

function MsgDef.Msg5030243:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.args);
	sm:writeInt32(self.rate);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gridData))
	for kn,elm in ipairs(self.gridData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.mulActId);
	sm:writeInt8(self.isHadAward);
	return self
end

function MsgDef.Msg5030243:decode(sm)
	self.reqType = sm:readInt8();
	self.lastTime = sm:readInt32();
	self.args = sm:readInt32();
	self.rate = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local gridData_size = sm:readInt16()
	for i = 1,gridData_size do
		local kv = sm:readInt32();
		self.gridData[kv] = sm:readInt32();
	end
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	self.mulActId = sm:readInt32();
	self.isHadAward = sm:readInt8();
	return self
end


function MsgDef.Msg5030243:opcode()
	return 5030243
end
--[[ 请求限时礼包--]]
MsgDef.Msg1030515 = {}

function MsgDef.Msg1030515:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：信息 1：领取--]]
	return msg
end

function MsgDef.Msg1030515:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030515:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030515:opcode()
	return 1030515
end

--[[ 请求限时礼包(返回)--]]
MsgDef.Msg5030515 = {}
function MsgDef.Msg5030515:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：信息 1：领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.flag = 0 --[[(int8) 是否领取  1：已领取--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	msg.id = 0 --[[(int32) 奖励id--]]
	msg.rechargeMoney = 0 --[[(int32) 已经充值的金额--]]
	return msg
end

function MsgDef.Msg5030515:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.flag);
	sm:writeInt32(self.mulActId);
	sm:writeInt32(self.id);
	sm:writeInt32(self.rechargeMoney);
	return self
end

function MsgDef.Msg5030515:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastTime = sm:readInt32();
	self.flag = sm:readInt8();
	self.mulActId = sm:readInt32();
	self.id = sm:readInt32();
	self.rechargeMoney = sm:readInt32();
	return self
end


function MsgDef.Msg5030515:opcode()
	return 5030515
end
--[[ 请求灵虚宝藏--]]
MsgDef.Msg1030516 = {}

function MsgDef.Msg1030516:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:抽1次 2:抽10次 3:抽50次--]]
	return msg
end

function MsgDef.Msg1030516:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030516:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030516:opcode()
	return 1030516
end

--[[ 请求灵虚宝藏(返回)--]]
MsgDef.Msg5030516 = {}
function MsgDef.Msg5030516:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:抽1次 2:抽10次 3:抽50次--]]
	msg.freeCount = 0 --[[(int32) 剩余免费次数--]]
	msg.freeLeftTime = 0 --[[(int32) 免费剩余倒计时--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.curIndex = 0 --[[(int32) 当前字下标--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5030516:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.freeCount);
	sm:writeInt32(self.freeLeftTime);
	sm:writeInt32(self.actLeftTime);
	sm:writeInt32(self.curIndex);
	sm:writeInt32(self.mulActiveId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030516:decode(sm)
	self.reqType = sm:readInt8();
	self.freeCount = sm:readInt32();
	self.freeLeftTime = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	self.curIndex = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030516:opcode()
	return 5030516
end
--[[ 请求限时连充--]]
MsgDef.Msg1030517 = {}

function MsgDef.Msg1030517:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：限时  1：领取每日奖励  2：领取连续奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030517:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030517:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030517:opcode()
	return 1030517
end

--[[ 请求限时连充(返回)--]]
MsgDef.Msg5030517 = {}
function MsgDef.Msg5030517:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：限时  1：领取每日奖励  2：领取连续奖励--]]
	msg.targetGotSign = 0 --[[(int8) 连续目标奖励标识1:已领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 每日奖励领取标识--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.okDay = 0 --[[(int32) 达标天数--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.dayCzSums = {} --[[(map<int32,int32>) 每天的充值额度--]]
	msg.curDay = 0 --[[(int32) 当前第几天从 1开始--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030517:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.targetGotSign);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actLeftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.okDay);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.dayCzSums))
	for kn,elm in ipairs(self.dayCzSums) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030517:decode(sm)
	self.reqType = sm:readInt8();
	self.targetGotSign = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.actLeftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.okDay = sm:readInt32();
	self.cfgId = sm:readInt32();
	local dayCzSums_size = sm:readInt16()
	for i = 1,dayCzSums_size do
		local kv = sm:readInt32();
		self.dayCzSums[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030517:opcode()
	return 5030517
end
--[[ 请求跨服城战连胜--]]
MsgDef.Msg1510106 = {}

function MsgDef.Msg1510106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:连胜分配--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 被分配玩家id--]]
	return msg
end

function MsgDef.Msg1510106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1510106:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1510106:opcode()
	return 1510106
end

--[[ 请求跨服城战连胜(返回)--]]
MsgDef.Msg5510106 = {}
function MsgDef.Msg5510106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:连胜分配--]]
	msg.winTimes = 0 --[[(int32) 连胜次数--]]
	msg.fpStatus = 0 --[[(int8) 分配状态 1:可分配 2:已分配--]]
	msg.winGangId = 0 --[[(int64) 当前占领中都仙盟--]]
	return msg
end

function MsgDef.Msg5510106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.winTimes);
	sm:writeInt8(self.fpStatus);
	sm:writeInt64(self.winGangId);
	return self
end

function MsgDef.Msg5510106:decode(sm)
	self.reqType = sm:readInt8();
	self.winTimes = sm:readInt32();
	self.fpStatus = sm:readInt8();
	self.winGangId = sm:readInt64();
	return self
end


function MsgDef.Msg5510106:opcode()
	return 5510106
end
--[[ 请求跨服城战终结分配--]]
MsgDef.Msg1510107 = {}

function MsgDef.Msg1510107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:分配--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 被分配玩家id--]]
	return msg
end

function MsgDef.Msg1510107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1510107:decode(sm)
	self.reqType = sm:readInt8();
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1510107:opcode()
	return 1510107
end

--[[ 请求跨服城战终结分配(返回)--]]
MsgDef.Msg5510107 = {}
function MsgDef.Msg5510107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:分配--]]
	msg.fpStatus = 0 --[[(int8) 分配状态 1:可分配 2:已分配--]]
	msg.winGangId = 0 --[[(int64) 当前中都胜利仙盟id--]]
	msg.endTimes = 0 --[[(int32) 终结连胜次数--]]
	msg.winTimes = 0 --[[(int32) 当前中都连胜次数--]]
	return msg
end

function MsgDef.Msg5510107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.fpStatus);
	sm:writeInt64(self.winGangId);
	sm:writeInt32(self.endTimes);
	sm:writeInt32(self.winTimes);
	return self
end

function MsgDef.Msg5510107:decode(sm)
	self.reqType = sm:readInt8();
	self.fpStatus = sm:readInt8();
	self.winGangId = sm:readInt64();
	self.endTimes = sm:readInt32();
	self.winTimes = sm:readInt32();
	return self
end


function MsgDef.Msg5510107:opcode()
	return 5510107
end
--[[ 请求双倍返利--]]
MsgDef.Msg1030518 = {}

function MsgDef.Msg1030518:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030518:encode(sm)
	return self
end

function MsgDef.Msg1030518:decode(sm)
	return self
end

function MsgDef.Msg1030518:opcode()
	return 1030518
end

--[[ 请求双倍返利(返回)--]]
MsgDef.Msg5030518 = {}
function MsgDef.Msg5030518:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030518:encode(sm)
	sm:writeInt32(self.actLeftTime);
	return self
end

function MsgDef.Msg5030518:decode(sm)
	self.actLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030518:opcode()
	return 5030518
end
--[[ 请求圣纹穿卸--]]
MsgDef.Msg1100201 = {}

function MsgDef.Msg1100201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =0时背包位置,=1时装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1100201:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1100201:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1100201:opcode()
	return 1100201
end

--[[ 请求圣纹穿卸(返回)--]]
MsgDef.Msg5100201 = {}
function MsgDef.Msg5100201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5100201:encode(sm)
	return self
end

function MsgDef.Msg5100201:decode(sm)
	return self
end


function MsgDef.Msg5100201:opcode()
	return 5100201
end
--[[ 请求我要转转--]]
MsgDef.Msg1030519 = {}

function MsgDef.Msg1030519:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：抽一次 2：抽十次 3：领取惊喜蛋--]]
	return msg
end

function MsgDef.Msg1030519:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030519:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030519:opcode()
	return 1030519
end

--[[ 请求我要转转(返回)--]]
MsgDef.Msg5030519 = {}
function MsgDef.Msg5030519:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示 1：抽一次 2：抽十次 3：领取惊喜蛋--]]
	msg.moneyPool = 0 --[[(int32) 奖池数--]]
	msg.lottryCount = 0 --[[(int32) 已抽奖次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.cfgId = 0 --[[(int32) 当前的格子id（配置id）--]]
	msg.canGetTimes = 0 --[[(int32) 可以领取的次数--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030519:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.moneyPool);
	sm:writeInt32(self.lottryCount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.canGetTimes);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030519:decode(sm)
	self.reqType = sm:readInt8();
	self.moneyPool = sm:readInt32();
	self.lottryCount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.leftTime = sm:readInt32();
	self.cfgId = sm:readInt32();
	self.canGetTimes = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030519:opcode()
	return 5030519
end
--[[ 请求神兽列表信息--]]
MsgDef.Msg1590101 = {}

function MsgDef.Msg1590101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1590101:encode(sm)
	return self
end

function MsgDef.Msg1590101:decode(sm)
	return self
end

function MsgDef.Msg1590101:opcode()
	return 1590101
end

--[[ 请求神兽列表信息(返回)--]]
MsgDef.Msg5590101 = {}
function MsgDef.Msg5590101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shenShouInfos = {} --[[(array<ShenShouInfo>) 神兽信息--]]
	msg.holeCount = 0 --[[(int32) 上阵位数量--]]
	return msg
end

function MsgDef.Msg5590101:encode(sm)
	sm:writeInt16(#self.shenShouInfos)
	for i,elm in ipairs(self.shenShouInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.holeCount);
	return self
end

function MsgDef.Msg5590101:decode(sm)
	local shenShouInfos_size = sm:readInt16()
	for i = 1,shenShouInfos_size do
		local element = MsgDef.ShenShouInfo:create():decode(sm)
		table.insert(self.shenShouInfos, element)
	end
	self.holeCount = sm:readInt32();
	return self
end


function MsgDef.Msg5590101:opcode()
	return 5590101
end
--[[ 神兽信息--]]
MsgDef.ShenShouInfo = {}

function MsgDef.ShenShouInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ssId == nil then msg.ssId = 0 end --[[(int32) 神兽id--]]
	if msg.equipInfos == nil then msg.equipInfos = {} end --[[(array<ItemInfo>) 装备信息--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.inWar == nil then msg.inWar = 0 end --[[(int8) =1助战--]]
	return msg
end

function MsgDef.ShenShouInfo:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt16(#self.equipInfos)
	for i,elm in ipairs(self.equipInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.inWar);
	return self
end

function MsgDef.ShenShouInfo:decode(sm)
	self.ssId = sm:readInt32();
	local equipInfos_size = sm:readInt16()
	for i = 1,equipInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equipInfos, element)
	end
	self.power = sm:readInt32();
	self.inWar = sm:readInt8();
	return self
end

function MsgDef.ShenShouInfo:opcode()
	return "ShenShouInfo"
end

--[[ 请求神兽装备穿脱--]]
MsgDef.Msg1590102 = {}

function MsgDef.Msg1590102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ssId == nil then msg.ssId = 0 end --[[(int32) 神兽id--]]
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =1时装备位置--]]
	if msg.parts == nil then msg.parts = {} end --[[(array<int32>) 部位--]]
	return msg
end

function MsgDef.Msg1590102:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.parts))
	for i,elm in ipairs(self.parts) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1590102:decode(sm)
	self.ssId = sm:readInt32();
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local parts_size = sm:readInt16()
	for i = 1,parts_size do
		local elm = sm:readInt32();
		table.insert(self.parts, elm)
	end
	return self
end

function MsgDef.Msg1590102:opcode()
	return 1590102
end

--[[ 请求神兽装备穿脱(返回)--]]
MsgDef.Msg5590102 = {}
function MsgDef.Msg5590102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ssId = 0 --[[(int32) 神兽id--]]
	msg.equipInfos = {} --[[(array<ItemInfo>) 装备信息--]]
	return msg
end

function MsgDef.Msg5590102:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt16(#self.equipInfos)
	for i,elm in ipairs(self.equipInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5590102:decode(sm)
	self.ssId = sm:readInt32();
	local equipInfos_size = sm:readInt16()
	for i = 1,equipInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.equipInfos, element)
	end
	return self
end


function MsgDef.Msg5590102:opcode()
	return 5590102
end
--[[ 请求神兽助战召回--]]
MsgDef.Msg1590103 = {}

function MsgDef.Msg1590103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ssId == nil then msg.ssId = 0 end --[[(int32) 神兽id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) =0召回 =1助战--]]
	return msg
end

function MsgDef.Msg1590103:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1590103:decode(sm)
	self.ssId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1590103:opcode()
	return 1590103
end

--[[ 请求神兽助战召回(返回)--]]
MsgDef.Msg5590103 = {}
function MsgDef.Msg5590103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) =0召回 =1助战--]]
	msg.ssId = 0 --[[(int32) 神兽id--]]
	return msg
end

function MsgDef.Msg5590103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.ssId);
	return self
end

function MsgDef.Msg5590103:decode(sm)
	self.reqType = sm:readInt8();
	self.ssId = sm:readInt32();
	return self
end


function MsgDef.Msg5590103:opcode()
	return 5590103
end
--[[ 请求扩展神兽助战上限--]]
MsgDef.Msg1590104 = {}

function MsgDef.Msg1590104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1590104:encode(sm)
	return self
end

function MsgDef.Msg1590104:decode(sm)
	return self
end

function MsgDef.Msg1590104:opcode()
	return 1590104
end

--[[ 请求扩展神兽助战上限(返回)--]]
MsgDef.Msg5590104 = {}
function MsgDef.Msg5590104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.holeCount = 0 --[[(int32) 上阵位数量--]]
	return msg
end

function MsgDef.Msg5590104:encode(sm)
	sm:writeInt32(self.holeCount);
	return self
end

function MsgDef.Msg5590104:decode(sm)
	self.holeCount = sm:readInt32();
	return self
end


function MsgDef.Msg5590104:opcode()
	return 5590104
end
--[[ 请求神兽装备强化--]]
MsgDef.Msg1590105 = {}

function MsgDef.Msg1590105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ssId == nil then msg.ssId = 0 end --[[(int32) 神兽id--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	if msg.doubleExp == nil then msg.doubleExp = 0 end --[[(int8) =1 双倍经验--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 消耗材料列表--]]
	return msg
end

function MsgDef.Msg1590105:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt32(self.part);
	sm:writeInt8(self.doubleExp);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1590105:decode(sm)
	self.ssId = sm:readInt32();
	self.part = sm:readInt32();
	self.doubleExp = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1590105:opcode()
	return 1590105
end

--[[ 请求神兽装备强化(返回)--]]
MsgDef.Msg5590105 = {}
function MsgDef.Msg5590105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ssId = 0 --[[(int32) 神兽id--]]
	msg.part = 0 --[[(int32) 部位--]]
	msg.level = 0 --[[(int32) 装备等级--]]
	msg.exp  = 0 --[[(int32) 装备经验--]]
	return msg
end

function MsgDef.Msg5590105:encode(sm)
	sm:writeInt32(self.ssId);
	sm:writeInt32(self.part);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	return self
end

function MsgDef.Msg5590105:decode(sm)
	self.ssId = sm:readInt32();
	self.part = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	return self
end


function MsgDef.Msg5590105:opcode()
	return 5590105
end
--[[ 请求神兽岛BOSS信息--]]
MsgDef.Msg1331201 = {}

function MsgDef.Msg1331201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331201:encode(sm)
	return self
end

function MsgDef.Msg1331201:decode(sm)
	return self
end

function MsgDef.Msg1331201:opcode()
	return 1331201
end

--[[ 请求神兽岛BOSS信息(返回)--]]
MsgDef.Msg5331201 = {}
function MsgDef.Msg5331201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<BossInfo>) boss信息--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) 关注map--]]
	msg.leftTired = 0 --[[(int32) 剩余疲劳值--]]
	msg.dayBuyCount = 0 --[[(int32) 今日剩余购买疲劳值次数--]]
	msg.otherInfos = {} --[[(array<SsdOtherInfo>) 其他信息--]]
	msg.dayLeftLhjpCount = 0 --[[(int32) 今日剩余采集龙魂晶魄数量--]]
	return msg
end

function MsgDef.Msg5331201:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt32(self.dayBuyCount);
	sm:writeInt16(#self.otherInfos)
	for i,elm in ipairs(self.otherInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.dayLeftLhjpCount);
	return self
end

function MsgDef.Msg5331201:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.BossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	self.leftTired = sm:readInt32();
	self.dayBuyCount = sm:readInt32();
	local otherInfos_size = sm:readInt16()
	for i = 1,otherInfos_size do
		local element = MsgDef.SsdOtherInfo:create():decode(sm)
		table.insert(self.otherInfos, element)
	end
	self.dayLeftLhjpCount = sm:readInt32();
	return self
end


function MsgDef.Msg5331201:opcode()
	return 5331201
end
--[[ 请求神兽岛BOSS关注--]]
MsgDef.Msg1331202 = {}

function MsgDef.Msg1331202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) monsterId--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1331202:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1331202:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1331202:opcode()
	return 1331202
end

--[[ 请求神兽岛BOSS关注(返回)--]]
MsgDef.Msg5331202 = {}
function MsgDef.Msg5331202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) monsterId--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5331202:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5331202:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5331202:opcode()
	return 5331202
end
--[[ 请求神兽岛BOSS场景信息--]]
MsgDef.Msg1331203 = {}

function MsgDef.Msg1331203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331203:encode(sm)
	return self
end

function MsgDef.Msg1331203:decode(sm)
	return self
end

function MsgDef.Msg1331203:opcode()
	return 1331203
end

--[[ 请求神兽岛BOSS场景信息(返回)--]]
MsgDef.Msg5331203 = {}
function MsgDef.Msg5331203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) leftPlayTime--]]
	msg.bossList = {} --[[(array<CrossWorldBossInfo>) boss列表--]]
	msg.otherInfos = {} --[[(array<SsdOtherInfo>) 其他信息--]]
	return msg
end

function MsgDef.Msg5331203:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherInfos)
	for i,elm in ipairs(self.otherInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5331203:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.CrossWorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	local otherInfos_size = sm:readInt16()
	for i = 1,otherInfos_size do
		local element = MsgDef.SsdOtherInfo:create():decode(sm)
		table.insert(self.otherInfos, element)
	end
	return self
end


function MsgDef.Msg5331203:opcode()
	return 5331203
end
--[[ 请求灵泉祈福--]]
MsgDef.Msg1030520 = {}

function MsgDef.Msg1030520:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:抽一次2:抽10次3:全服次数奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取的配置id--]]
	return msg
end

function MsgDef.Msg1030520:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030520:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030520:opcode()
	return 1030520
end

--[[ 请求灵泉祈福(返回)--]]
MsgDef.Msg5030520 = {}
function MsgDef.Msg5030520:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:抽一次2:抽10次3:全服次数奖励--]]
	msg.poolMoney = 0 --[[(int32) 奖池金钱数额--]]
	msg.actLeftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.qfSum = 0 --[[(int32) 全服祈福次数--]]
	msg.qfGotSigns = {} --[[(map<int32,int32>) 已经领取的祈福奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.cfgId = 0 --[[(int32) 领取的配置id--]]
	msg.mulActiveId = 0 --[[(int32) 多开的活动id--]]
	return msg
end

function MsgDef.Msg5030520:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.poolMoney);
	sm:writeInt32(self.actLeftSec);
	sm:writeInt32(self.qfSum);
	sm:writeInt16(get_map_size(self.qfGotSigns))
	for kn,elm in ipairs(self.qfGotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.mulActiveId);
	return self
end

function MsgDef.Msg5030520:decode(sm)
	self.reqType = sm:readInt8();
	self.poolMoney = sm:readInt32();
	self.actLeftSec = sm:readInt32();
	self.qfSum = sm:readInt32();
	local qfGotSigns_size = sm:readInt16()
	for i = 1,qfGotSigns_size do
		local kv = sm:readInt32();
		self.qfGotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cfgId = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	return self
end


function MsgDef.Msg5030520:opcode()
	return 5030520
end
--[[ 请求神兽排行活动信息（跨服）--]]
MsgDef.Msg1030244 = {}

function MsgDef.Msg1030244:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030244:encode(sm)
	return self
end

function MsgDef.Msg1030244:decode(sm)
	return self
end

function MsgDef.Msg1030244:opcode()
	return 1030244
end

--[[ 请求神兽排行活动信息（跨服）(返回)--]]
MsgDef.Msg5030244 = {}
function MsgDef.Msg5030244:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030244:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myPower);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030244:decode(sm)
	self.lastTime = sm:readInt32();
	self.myPower = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030244:opcode()
	return 5030244
end
--[[ 洞房排行信息--]]
MsgDef.DongFangRankInfo = {}

function MsgDef.DongFangRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.coupleName == nil then msg.coupleName = "" end --[[(string) 伴侣名--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.dfTimes == nil then msg.dfTimes = 0 end --[[(int32) 洞房次数--]]
	return msg
end

function MsgDef.DongFangRankInfo:encode(sm)
	sm:writeString(self.roleName);
	sm:writeString(self.coupleName);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.dfTimes);
	return self
end

function MsgDef.DongFangRankInfo:decode(sm)
	self.roleName = sm:readString();
	self.coupleName = sm:readString();
	self.rank = sm:readInt32();
	self.dfTimes = sm:readInt32();
	return self
end

function MsgDef.DongFangRankInfo:opcode()
	return "DongFangRankInfo"
end

--[[ 请求洞房排行信息--]]
MsgDef.Msg1030245 = {}

function MsgDef.Msg1030245:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:排行信息 1:领奖励--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取奖励Id--]]
	return msg
end

function MsgDef.Msg1030245:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030245:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030245:opcode()
	return 1030245
end

--[[ 请求洞房排行信息(返回)--]]
MsgDef.Msg5030245 = {}
function MsgDef.Msg5030245:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:排行信息 1:领奖励--]]
	msg.cid = 0 --[[(int32) 领取奖励Id--]]
	msg.dfRankInfo = {} --[[(array<DongFangRankInfo>) 洞房排行信息--]]
	msg.gotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.holeDfTimes = 0 --[[(int32) 当前总洞房次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030245:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.dfRankInfo)
	for i,elm in ipairs(self.dfRankInfo) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.gotData))
	for i,elm in ipairs(self.gotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.holeDfTimes);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030245:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local dfRankInfo_size = sm:readInt16()
	for i = 1,dfRankInfo_size do
		local element = MsgDef.DongFangRankInfo:create():decode(sm)
		table.insert(self.dfRankInfo, element)
	end
	local gotData_size = sm:readInt16()
	for i = 1,gotData_size do
		local ele = sm:readInt32();
		table.insert(self.gotData, ele)
	end
	self.lastTime = sm:readInt32();
	self.holeDfTimes = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030245:opcode()
	return 5030245
end
--[[ 神兽岛其他信息--]]
MsgDef.SsdOtherInfo = {}

function MsgDef.SsdOtherInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.lhjpMapNum == nil then msg.lhjpMapNum = 0 end --[[(int32) 龙魂晶魄地图数量--]]
	if msg.lhjpNextRefTime == nil then msg.lhjpNextRefTime = 0 end --[[(int32) 龙魂晶魄下次刷新时间--]]
	if msg.ljswNextRefTime == nil then msg.ljswNextRefTime = 0 end --[[(int32) 龙晶守卫下次刷新时间--]]
	if msg.ljswMapNum == nil then msg.ljswMapNum = 0 end --[[(int32) 龙晶守卫地图数量--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	return msg
end

function MsgDef.SsdOtherInfo:encode(sm)
	sm:writeInt32(self.lhjpMapNum);
	sm:writeInt32(self.lhjpNextRefTime);
	sm:writeInt32(self.ljswNextRefTime);
	sm:writeInt32(self.ljswMapNum);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.SsdOtherInfo:decode(sm)
	self.lhjpMapNum = sm:readInt32();
	self.lhjpNextRefTime = sm:readInt32();
	self.ljswNextRefTime = sm:readInt32();
	self.ljswMapNum = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.SsdOtherInfo:opcode()
	return "SsdOtherInfo"
end

--[[ 请求合服连续充值--]]
MsgDef.Msg1030521 = {}

function MsgDef.Msg1030521:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030521:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030521:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030521:opcode()
	return 1030521
end

--[[ 请求合服连续充值(返回)--]]
MsgDef.Msg5030521 = {}
function MsgDef.Msg5030521:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.dayRechargeNum = {} --[[(map<int32,int32>) 每天充值的数目--]]
	msg.curDay = 0 --[[(int32) 当前第几天  从1开始--]]
	return msg
end

function MsgDef.Msg5030521:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.dayRechargeNum))
	for kn,elm in ipairs(self.dayRechargeNum) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030521:decode(sm)
	self.reqType = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local dayRechargeNum_size = sm:readInt16()
	for i = 1,dayRechargeNum_size do
		local kv = sm:readInt32();
		self.dayRechargeNum[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030521:opcode()
	return 5030521
end
--[[ 请求仙装寻宝信息--]]
MsgDef.Msg1030246 = {}

function MsgDef.Msg1030246:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030246:encode(sm)
	return self
end

function MsgDef.Msg1030246:decode(sm)
	return self
end

function MsgDef.Msg1030246:opcode()
	return 1030246
end

--[[ 请求仙装寻宝信息(返回)--]]
MsgDef.Msg5030246 = {}
function MsgDef.Msg5030246:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030246:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030246:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030246:opcode()
	return 5030246
end
--[[ 请求仙装积分商城--]]
MsgDef.Msg1030247 = {}

function MsgDef.Msg1030247:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030247:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030247:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030247:opcode()
	return 1030247
end

--[[ 请求仙装积分商城(返回)--]]
MsgDef.Msg5030247 = {}
function MsgDef.Msg5030247:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030247:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030247:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030247:opcode()
	return 5030247
end
--[[ 请求仙装寻宝--]]
MsgDef.Msg1030248 = {}

function MsgDef.Msg1030248:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030248:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030248:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030248:opcode()
	return 1030248
end

--[[ 请求仙装寻宝(返回)--]]
MsgDef.Msg5030248 = {}
function MsgDef.Msg5030248:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.cid = 0 --[[(int32) 寻宝获得对应配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030248:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030248:decode(sm)
	self.times = sm:readInt32();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030248:opcode()
	return 5030248
end
--[[ 请求寻宝排行活动--]]
MsgDef.Msg1030249 = {}

function MsgDef.Msg1030249:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:排行信息 1:领奖励--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取奖励Id--]]
	return msg
end

function MsgDef.Msg1030249:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030249:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030249:opcode()
	return 1030249
end

--[[ 请求寻宝排行活动(返回)--]]
MsgDef.Msg5030249 = {}
function MsgDef.Msg5030249:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:排行信息 1:领奖励--]]
	msg.cid = 0 --[[(int32) 领取奖励Id--]]
	msg.gotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.wholeCost = 0 --[[(int32) 全服消耗总元宝--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.rankInfo = {} --[[(array<XunBaoRankInfo>) 排行信息--]]
	return msg
end

function MsgDef.Msg5030249:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotData))
	for i,elm in ipairs(self.gotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.wholeCost);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.rankInfo)
	for i,elm in ipairs(self.rankInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030249:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotData_size = sm:readInt16()
	for i = 1,gotData_size do
		local ele = sm:readInt32();
		table.insert(self.gotData, ele)
	end
	self.myRank = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.wholeCost = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local rankInfo_size = sm:readInt16()
	for i = 1,rankInfo_size do
		local element = MsgDef.XunBaoRankInfo:create():decode(sm)
		table.insert(self.rankInfo, element)
	end
	return self
end


function MsgDef.Msg5030249:opcode()
	return 5030249
end
--[[ 寻宝排行信息--]]
MsgDef.XunBaoRankInfo = {}

function MsgDef.XunBaoRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.cost == nil then msg.cost = 0 end --[[(int32) 消耗元宝--]]
	return msg
end

function MsgDef.XunBaoRankInfo:encode(sm)
	sm:writeString(self.roleName);
	sm:writeInt32(self.rank);
	sm:writeInt32(self.cost);
	return self
end

function MsgDef.XunBaoRankInfo:decode(sm)
	self.roleName = sm:readString();
	self.rank = sm:readInt32();
	self.cost = sm:readInt32();
	return self
end

function MsgDef.XunBaoRankInfo:opcode()
	return "XunBaoRankInfo"
end

--[[ 请求元宝兑换--]]
MsgDef.Msg1030522 = {}

function MsgDef.Msg1030522:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030522:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030522:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030522:opcode()
	return 1030522
end

--[[ 请求元宝兑换(返回)--]]
MsgDef.Msg5030522 = {}
function MsgDef.Msg5030522:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.czYb = 0 --[[(int32) 充值的元宝数--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030522:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.czYb);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030522:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.czYb = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030522:opcode()
	return 5030522
end
--[[ 广播采集物每日剩余次数--]]
MsgDef.Msg8230601 = {}

function MsgDef.Msg8230601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mId = 0 --[[(int32) 配置id--]]
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	return msg
end

function MsgDef.Msg8230601:encode(sm)
	sm:writeInt32(self.mId);
	sm:writeInt32(self.leftCount);
	sm:writeInt32(self.sceneId);
	return self
end

function MsgDef.Msg8230601:decode(sm)
	self.mId = sm:readInt32();
	self.leftCount = sm:readInt32();
	self.sceneId = sm:readInt32();
	return self
end

function MsgDef.Msg8230601:opcode()
	return 8230601
end

--[[ 请求仙装排行活动(跨服)--]]
MsgDef.Msg1030250 = {}

function MsgDef.Msg1030250:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030250:encode(sm)
	return self
end

function MsgDef.Msg1030250:decode(sm)
	return self
end

function MsgDef.Msg1030250:opcode()
	return 1030250
end

--[[ 请求仙装排行活动(跨服)(返回)--]]
MsgDef.Msg5030250 = {}
function MsgDef.Msg5030250:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	return msg
end

function MsgDef.Msg5030250:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myPower);
	return self
end

function MsgDef.Msg5030250:decode(sm)
	self.lastTime = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.myPower = sm:readInt32();
	return self
end


function MsgDef.Msg5030250:opcode()
	return 5030250
end
--[[ 请求悠钻礼包--]]
MsgDef.Msg1030601 = {}

function MsgDef.Msg1030601:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030601:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030601:opcode()
	return 1030601
end

--[[ 请求悠钻礼包(返回)--]]
MsgDef.Msg5030601 = {}
function MsgDef.Msg5030601:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) reqType--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识,key->配置id,value上一次领取时间--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	return msg
end

function MsgDef.Msg5030601:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.yz);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030601:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.yz = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030601:opcode()
	return 5030601
end
--[[ 请求悠钻会员每日礼包--]]
MsgDef.Msg1030602 = {}

function MsgDef.Msg1030602:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取vip奖励 2:领取额外奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030602:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030602:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030602:opcode()
	return 1030602
end

--[[ 请求悠钻会员每日礼包(返回)--]]
MsgDef.Msg5030602 = {}
function MsgDef.Msg5030602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取vip奖励 2:领取额外奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.yxVipLev = 0 --[[(int32) 悠迅vip等级--]]
	msg.vipGotSigns = {} --[[(map<int32,int32>) vip领取标识--]]
	msg.extGotSign = 0 --[[(int8) 额外奖励领取标识 1:已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030602:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.yz);
	sm:writeInt32(self.yxVipLev);
	sm:writeInt16(get_map_size(self.vipGotSigns))
	for kn,elm in ipairs(self.vipGotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.extGotSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030602:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.yz = sm:readInt32();
	self.yxVipLev = sm:readInt32();
	local vipGotSigns_size = sm:readInt16()
	for i = 1,vipGotSigns_size do
		local kv = sm:readInt32();
		self.vipGotSigns[kv] = sm:readInt32();
	end
	self.extGotSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030602:opcode()
	return 5030602
end
--[[ 请求悠钻等级礼包--]]
MsgDef.Msg1030603 = {}

function MsgDef.Msg1030603:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030603:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030603:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030603:opcode()
	return 1030603
end

--[[ 请求悠钻等级礼包(返回)--]]
MsgDef.Msg5030603 = {}
function MsgDef.Msg5030603:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) reqType--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取道具--]]
	return msg
end

function MsgDef.Msg5030603:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.yz);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030603:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.yz = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030603:opcode()
	return 5030603
end
--[[ 请求悠钻充值礼包--]]
MsgDef.Msg1030604 = {}

function MsgDef.Msg1030604:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030604:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030604:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030604:opcode()
	return 1030604
end

--[[ 请求悠钻充值礼包(返回)--]]
MsgDef.Msg5030604 = {}
function MsgDef.Msg5030604:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取道具--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.czYb = 0 --[[(int32) 今日充值--]]
	return msg
end

function MsgDef.Msg5030604:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.yz);
	sm:writeInt32(self.czYb);
	return self
end

function MsgDef.Msg5030604:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.yz = sm:readInt32();
	self.czYb = sm:readInt32();
	return self
end


function MsgDef.Msg5030604:opcode()
	return 5030604
end
--[[ 请求悠钻消费礼包--]]
MsgDef.Msg1030605 = {}

function MsgDef.Msg1030605:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030605:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030605:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030605:opcode()
	return 1030605
end

--[[ 请求悠钻消费礼包(返回)--]]
MsgDef.Msg5030605 = {}
function MsgDef.Msg5030605:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的道具--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.costYb = 0 --[[(int32) 今日消耗元宝--]]
	return msg
end

function MsgDef.Msg5030605:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.yz);
	sm:writeInt32(self.costYb);
	return self
end

function MsgDef.Msg5030605:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.yz = sm:readInt32();
	self.costYb = sm:readInt32();
	return self
end


function MsgDef.Msg5030605:opcode()
	return 5030605
end
--[[ 请求悠迅绑定手机--]]
MsgDef.Msg1030606 = {}

function MsgDef.Msg1030606:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取--]]
	return msg
end

function MsgDef.Msg1030606:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030606:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030606:opcode()
	return 1030606
end

--[[ 请求悠迅绑定手机(返回)--]]
MsgDef.Msg5030606 = {}
function MsgDef.Msg5030606:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.gotSign = 0 --[[(int8) 1:已领取--]]
	msg.mobile = 0 --[[(int8) 是否绑定手机 1:绑定--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030606:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.gotSign);
	sm:writeInt8(self.mobile);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030606:decode(sm)
	self.reqType = sm:readInt8();
	self.gotSign = sm:readInt8();
	self.mobile = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030606:opcode()
	return 5030606
end
--[[ 请求装备合成(仙装)--]]
MsgDef.Msg1100301 = {}

function MsgDef.Msg1100301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包index--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 合成部位--]]
	if msg.color == nil then msg.color = 0 end --[[(int32) 合成品质--]]
	if msg.step == nil then msg.step = 0 end --[[(int32) 合成阶、转--]]
	return msg
end

function MsgDef.Msg1100301:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.part);
	sm:writeInt32(self.color);
	sm:writeInt32(self.step);
	return self
end

function MsgDef.Msg1100301:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	self.part = sm:readInt32();
	self.color = sm:readInt32();
	self.step = sm:readInt32();
	return self
end

function MsgDef.Msg1100301:opcode()
	return 1100301
end

--[[ 请求装备合成(仙装)(返回)--]]
MsgDef.Msg5100301 = {}
function MsgDef.Msg5100301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成后获得--]]
	return msg
end

function MsgDef.Msg5100301:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100301:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5100301:opcode()
	return 5100301
end
--[[ 请求悠迅平台数据--]]
MsgDef.Msg1020507 = {}

function MsgDef.Msg1020507:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.game == nil then msg.game = "" end --[[(string) game参数--]]
	return msg
end

function MsgDef.Msg1020507:encode(sm)
	sm:writeString(self.game);
	return self
end

function MsgDef.Msg1020507:decode(sm)
	self.game = sm:readString();
	return self
end

function MsgDef.Msg1020507:opcode()
	return 1020507
end

--[[ 请求悠迅平台数据(返回)--]]
MsgDef.Msg5020507 = {}
function MsgDef.Msg5020507:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5020507:encode(sm)
	return self
end

function MsgDef.Msg5020507:decode(sm)
	return self
end


function MsgDef.Msg5020507:opcode()
	return 5020507
end
--[[ 广播悠钻数据--]]
MsgDef.Msg8230602 = {}

function MsgDef.Msg8230602:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.yztime = 0 --[[(int32) 悠钻到期零点时间,到期那天依旧有效--]]
	msg.mobile = 0 --[[(int8) 是否绑定手机 1:绑定--]]
	msg.yxVipLev = 0 --[[(int32) 悠迅vip等级--]]
	return msg
end

function MsgDef.Msg8230602:encode(sm)
	sm:writeInt32(self.yz);
	sm:writeInt32(self.yztime);
	sm:writeInt8(self.mobile);
	sm:writeInt32(self.yxVipLev);
	return self
end

function MsgDef.Msg8230602:decode(sm)
	self.yz = sm:readInt32();
	self.yztime = sm:readInt32();
	self.mobile = sm:readInt8();
	self.yxVipLev = sm:readInt32();
	return self
end

function MsgDef.Msg8230602:opcode()
	return 8230602
end

--[[ 广播神兽岛采集物递减信息--]]
MsgDef.Msg8230603 = {}

function MsgDef.Msg8230603:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.mId = 0 --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg8230603:encode(sm)
	sm:writeInt32(self.mId);
	return self
end

function MsgDef.Msg8230603:decode(sm)
	self.mId = sm:readInt32();
	return self
end

function MsgDef.Msg8230603:opcode()
	return 8230603
end

--[[ 广播神兽岛次数用尽--]]
MsgDef.Msg8230604 = {}

function MsgDef.Msg8230604:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg8230604:encode(sm)
	return self
end

function MsgDef.Msg8230604:decode(sm)
	return self
end

function MsgDef.Msg8230604:opcode()
	return 8230604
end

--[[ 请求中秋豪礼--]]
MsgDef.Msg1030607 = {}

function MsgDef.Msg1030607:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030607:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030607:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030607:opcode()
	return 1030607
end

--[[ 请求中秋豪礼(返回)--]]
MsgDef.Msg5030607 = {}
function MsgDef.Msg5030607:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.czSum = 0 --[[(int32) 累积充值的元宝数--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg5030607:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg5030607:decode(sm)
	self.reqType = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.czSum = sm:readInt32();
	self.cfgId = sm:readInt32();
	return self
end


function MsgDef.Msg5030607:opcode()
	return 5030607
end
--[[ 请求中秋充值豪礼--]]
MsgDef.Msg1030608 = {}

function MsgDef.Msg1030608:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取首充 2：领取累充--]]
	return msg
end

function MsgDef.Msg1030608:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030608:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030608:opcode()
	return 1030608
end

--[[ 请求中秋充值豪礼(返回)--]]
MsgDef.Msg5030608 = {}
function MsgDef.Msg5030608:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取首充 2：领取累充--]]
	msg.firstRechargeSign = 0 --[[(int8) 每日首充领取标识--]]
	msg.accumulateRecharge = 0 --[[(int8) 每日累充领取标识--]]
	msg.czSums = 0 --[[(int32) 每日充值的元宝数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天  从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030608:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.firstRechargeSign);
	sm:writeInt8(self.accumulateRecharge);
	sm:writeInt32(self.czSums);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030608:decode(sm)
	self.reqType = sm:readInt8();
	self.firstRechargeSign = sm:readInt8();
	self.accumulateRecharge = sm:readInt8();
	self.czSums = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030608:opcode()
	return 5030608
end
--[[ 请求中秋登录领奖--]]
MsgDef.Msg1030609 = {}

function MsgDef.Msg1030609:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	return msg
end

function MsgDef.Msg1030609:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030609:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030609:opcode()
	return 1030609
end

--[[ 请求中秋登录领奖(返回)--]]
MsgDef.Msg5030609 = {}
function MsgDef.Msg5030609:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	msg.normalAwardSign = 0 --[[(int8) 普通奖励领取标识--]]
	msg.vipAwardSign = 0 --[[(int8) vip奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030609:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.normalAwardSign);
	sm:writeInt8(self.vipAwardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030609:decode(sm)
	self.reqType = sm:readInt8();
	self.normalAwardSign = sm:readInt8();
	self.vipAwardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030609:opcode()
	return 5030609
end
--[[ 请求仙侣pk活动信息--]]
MsgDef.Msg1540201 = {}

function MsgDef.Msg1540201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:默认 1:预告--]]
	return msg
end

function MsgDef.Msg1540201:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1540201:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1540201:opcode()
	return 1540201
end

--[[ 请求仙侣pk活动信息(返回)--]]
MsgDef.Msg5540201 = {}
function MsgDef.Msg5540201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.join = 0 --[[(int8) 1:已报名 0:未报名--]]
	msg.curDay = 0 --[[(int32) 当前活动第几天--]]
	msg.actLeftSec = 0 --[[(int32) 活动剩余时间--]]
	msg.teamInfo = MsgDef.XlpkTeamInfo:create() --[[(XlpkTeamInfo) 队伍信息--]]
	msg.memberInfo = {} --[[(array<XlpkTeamMemInfo>) 成员--]]
	msg.stage = 0 --[[(int32) 1:报名阶段 2:海选赛 3:争霸赛第一场预告 4:争霸赛第一场进行中 5:争霸赛第二场预告 6:争霸赛第二场进行中 7:全部比赛结束--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 目标奖励已领取的--]]
	msg.vsInfo = {} --[[(array<XlpkVsInfo>) 对决列表信息--]]
	msg.stakeInfo = {} --[[(array<XlpkStakeInfo>) 我的押注信息--]]
	msg.inspireCount = 0 --[[(int32) 鼓舞次数--]]
	msg.matchStatu = 0 --[[(int8) 0:未开始匹配 1:已开始匹配--]]
	msg.hxRank = 0 --[[(int32) 海选排名--]]
	msg.zbsRank = 0 --[[(int32) 争霸排名--]]
	msg.hxsWinCount = 0 --[[(int32) 海选赛赢的次数--]]
	msg.serverTime = 0 --[[(int32) 跨服当前时间--]]
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.hxsJoinCount = 0 --[[(int32) 参与场次--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	msg.reqType = 0 --[[(int8) 0:默认 1:预告--]]
	return msg
end

function MsgDef.Msg5540201:encode(sm)
	sm:writeInt8(self.join);
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actLeftSec);
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.memberInfo)
	for i,elm in ipairs(self.memberInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stage);
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.vsInfo)
	for i,elm in ipairs(self.vsInfo) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.stakeInfo)
	for i,elm in ipairs(self.stakeInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.inspireCount);
	sm:writeInt8(self.matchStatu);
	sm:writeInt32(self.hxRank);
	sm:writeInt32(self.zbsRank);
	sm:writeInt32(self.hxsWinCount);
	sm:writeInt32(self.serverTime);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.hxsJoinCount);
	sm:writeInt32(self.mulActiveId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5540201:decode(sm)
	self.join = sm:readInt8();
	self.curDay = sm:readInt32();
	self.actLeftSec = sm:readInt32();
	self.teamInfo:decode(sm)
	local memberInfo_size = sm:readInt16()
	for i = 1,memberInfo_size do
		local element = MsgDef.XlpkTeamMemInfo:create():decode(sm)
		table.insert(self.memberInfo, element)
	end
	self.stage = sm:readInt32();
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	local vsInfo_size = sm:readInt16()
	for i = 1,vsInfo_size do
		local element = MsgDef.XlpkVsInfo:create():decode(sm)
		table.insert(self.vsInfo, element)
	end
	local stakeInfo_size = sm:readInt16()
	for i = 1,stakeInfo_size do
		local element = MsgDef.XlpkStakeInfo:create():decode(sm)
		table.insert(self.stakeInfo, element)
	end
	self.inspireCount = sm:readInt32();
	self.matchStatu = sm:readInt8();
	self.hxRank = sm:readInt32();
	self.zbsRank = sm:readInt32();
	self.hxsWinCount = sm:readInt32();
	self.serverTime = sm:readInt32();
	self.startTime = sm:readInt32();
	self.hxsJoinCount = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5540201:opcode()
	return 5540201
end
--[[ 请求仙侣pk队伍操作--]]
MsgDef.Msg1540202 = {}

function MsgDef.Msg1540202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:报名--]]
	if msg.teamName == nil then msg.teamName = "" end --[[(string) 队伍名字--]]
	return msg
end

function MsgDef.Msg1540202:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.teamName);
	return self
end

function MsgDef.Msg1540202:decode(sm)
	self.reqType = sm:readInt8();
	self.teamName = sm:readString();
	return self
end

function MsgDef.Msg1540202:opcode()
	return 1540202
end

--[[ 请求仙侣pk队伍操作(返回)--]]
MsgDef.Msg5540202 = {}
function MsgDef.Msg5540202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:报名--]]
	msg.teamName = "" --[[(string) 队伍名字--]]
	msg.teamInfo = MsgDef.XlpkTeamInfo:create() --[[(XlpkTeamInfo) 队伍信息--]]
	msg.memberInfo = {} --[[(array<XlpkTeamMemInfo>) 队伍成员信息--]]
	return msg
end

function MsgDef.Msg5540202:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeString(self.teamName);
	self.teamInfo:encode(sm)
	sm:writeInt16(#self.memberInfo)
	for i,elm in ipairs(self.memberInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5540202:decode(sm)
	self.reqType = sm:readInt8();
	self.teamName = sm:readString();
	self.teamInfo:decode(sm)
	local memberInfo_size = sm:readInt16()
	for i = 1,memberInfo_size do
		local element = MsgDef.XlpkTeamMemInfo:create():decode(sm)
		table.insert(self.memberInfo, element)
	end
	return self
end


function MsgDef.Msg5540202:opcode()
	return 5540202
end
--[[ 请求仙侣pk排行榜--]]
MsgDef.Msg1540203 = {}

function MsgDef.Msg1540203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:海选排行榜1:天榜排行榜2:地榜排行榜--]]
	if msg.page == nil then msg.page = 0 end --[[(int32) 当前页数 从1开始--]]
	return msg
end

function MsgDef.Msg1540203:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.page);
	return self
end

function MsgDef.Msg1540203:decode(sm)
	self.reqType = sm:readInt8();
	self.page = sm:readInt32();
	return self
end

function MsgDef.Msg1540203:opcode()
	return 1540203
end

--[[ 请求仙侣pk排行榜(返回)--]]
MsgDef.Msg5540203 = {}
function MsgDef.Msg5540203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:海选排行榜1:天榜排行榜2:地榜排行榜--]]
	msg.rankList = {} --[[(array<XlpkRankInfo>) 排行榜列表--]]
	msg.page = 0 --[[(int32) 当前页数 从1开始--]]
	msg.pageSum = 0 --[[(int32) 总页数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	return msg
end

function MsgDef.Msg5540203:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.page);
	sm:writeInt32(self.pageSum);
	sm:writeInt32(self.myRank);
	return self
end

function MsgDef.Msg5540203:decode(sm)
	self.reqType = sm:readInt8();
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.XlpkRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	self.page = sm:readInt32();
	self.pageSum = sm:readInt32();
	self.myRank = sm:readInt32();
	return self
end


function MsgDef.Msg5540203:opcode()
	return 5540203
end
--[[ 请求仙侣pk奖励--]]
MsgDef.Msg1540204 = {}

function MsgDef.Msg1540204:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:海选目标奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) cfgId--]]
	return msg
end

function MsgDef.Msg1540204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1540204:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1540204:opcode()
	return 1540204
end

--[[ 请求仙侣pk奖励(返回)--]]
MsgDef.Msg5540204 = {}
function MsgDef.Msg5540204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:海选目标奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.targetAwardSigns = {} --[[(map<int32,int32>) 目标奖励已领取的--]]
	return msg
end

function MsgDef.Msg5540204:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.targetAwardSigns))
	for kn,elm in ipairs(self.targetAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5540204:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local targetAwardSigns_size = sm:readInt16()
	for i = 1,targetAwardSigns_size do
		local kv = sm:readInt32();
		self.targetAwardSigns[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5540204:opcode()
	return 5540204
end
--[[ 请求仙侣pk押注--]]
MsgDef.Msg1540205 = {}

function MsgDef.Msg1540205:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	if msg.group == nil then msg.group = 0 end --[[(int32) 组id--]]
	if msg.stakeMoney == nil then msg.stakeMoney = 0 end --[[(int32) 押注金钱--]]
	return msg
end

function MsgDef.Msg1540205:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.group);
	sm:writeInt32(self.stakeMoney);
	return self
end

function MsgDef.Msg1540205:decode(sm)
	self.teamId = sm:readInt32();
	self.group = sm:readInt32();
	self.stakeMoney = sm:readInt32();
	return self
end

function MsgDef.Msg1540205:opcode()
	return 1540205
end

--[[ 请求仙侣pk押注(返回)--]]
MsgDef.Msg5540205 = {}
function MsgDef.Msg5540205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.group = 0 --[[(int32) 组id--]]
	msg.stakeInfo = {} --[[(array<XlpkStakeInfo>) 我的押注信息--]]
	msg.stakeMoney = 0 --[[(int32) 押注金钱--]]
	return msg
end

function MsgDef.Msg5540205:encode(sm)
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.group);
	sm:writeInt16(#self.stakeInfo)
	for i,elm in ipairs(self.stakeInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.stakeMoney);
	return self
end

function MsgDef.Msg5540205:decode(sm)
	self.teamId = sm:readInt32();
	self.group = sm:readInt32();
	local stakeInfo_size = sm:readInt16()
	for i = 1,stakeInfo_size do
		local element = MsgDef.XlpkStakeInfo:create():decode(sm)
		table.insert(self.stakeInfo, element)
	end
	self.stakeMoney = sm:readInt32();
	return self
end


function MsgDef.Msg5540205:opcode()
	return 5540205
end
--[[ 请求中秋豪礼（抽奖）--]]
MsgDef.Msg1030610 = {}

function MsgDef.Msg1030610:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030610:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030610:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030610:opcode()
	return 1030610
end

--[[ 请求中秋豪礼（抽奖）(返回)--]]
MsgDef.Msg5030610 = {}
function MsgDef.Msg5030610:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.lotteryCount = 0 --[[(int32) 已抽奖次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.needCzSum = 0 --[[(int32) 还需充值的元宝数--]]
	msg.leftLotteryCount = 0 --[[(int32) 剩余可抽奖次数--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030610:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lotteryCount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.needCzSum);
	sm:writeInt32(self.leftLotteryCount);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030610:decode(sm)
	self.reqType = sm:readInt8();
	self.lotteryCount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.needCzSum = sm:readInt32();
	self.leftLotteryCount = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030610:opcode()
	return 5030610
end
--[[ 请求仙侣pk鼓舞--]]
MsgDef.Msg1540206 = {}

function MsgDef.Msg1540206:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540206:encode(sm)
	return self
end

function MsgDef.Msg1540206:decode(sm)
	return self
end

function MsgDef.Msg1540206:opcode()
	return 1540206
end

--[[ 请求仙侣pk鼓舞(返回)--]]
MsgDef.Msg5540206 = {}
function MsgDef.Msg5540206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.inspireCount = 0 --[[(int32) 已鼓舞次数--]]
	return msg
end

function MsgDef.Msg5540206:encode(sm)
	sm:writeInt32(self.inspireCount);
	return self
end

function MsgDef.Msg5540206:decode(sm)
	self.inspireCount = sm:readInt32();
	return self
end


function MsgDef.Msg5540206:opcode()
	return 5540206
end
--[[ 请求仙侣pk匹配--]]
MsgDef.Msg1540207 = {}

function MsgDef.Msg1540207:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:匹配 2:取消匹配 3:二次确认匹配--]]
	return msg
end

function MsgDef.Msg1540207:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1540207:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1540207:opcode()
	return 1540207
end

--[[ 请求仙侣pk匹配(返回)--]]
MsgDef.Msg5540207 = {}
function MsgDef.Msg5540207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:匹配 2:取消匹配 3:二次确认匹配--]]
	return msg
end

function MsgDef.Msg5540207:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5540207:decode(sm)
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5540207:opcode()
	return 5540207
end
--[[ 请求仙侣pk详细信息--]]
MsgDef.Msg1540208 = {}

function MsgDef.Msg1540208:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.teamId == nil then msg.teamId = 0 end --[[(int32) 队伍id--]]
	return msg
end

function MsgDef.Msg1540208:encode(sm)
	sm:writeInt32(self.teamId);
	return self
end

function MsgDef.Msg1540208:decode(sm)
	self.teamId = sm:readInt32();
	return self
end

function MsgDef.Msg1540208:opcode()
	return 1540208
end

--[[ 请求仙侣pk详细信息(返回)--]]
MsgDef.Msg5540208 = {}
function MsgDef.Msg5540208:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.teamDetailInfo = MsgDef.XlpkTeamDetailInfo:create() --[[(XlpkTeamDetailInfo) 队伍详细信息--]]
	return msg
end

function MsgDef.Msg5540208:encode(sm)
	sm:writeInt32(self.teamId);
	self.teamDetailInfo:encode(sm)
	return self
end

function MsgDef.Msg5540208:decode(sm)
	self.teamId = sm:readInt32();
	self.teamDetailInfo:decode(sm)
	return self
end


function MsgDef.Msg5540208:opcode()
	return 5540208
end
--[[ 请求仙侣pk海选赛场景信息--]]
MsgDef.Msg1540209 = {}

function MsgDef.Msg1540209:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540209:encode(sm)
	return self
end

function MsgDef.Msg1540209:decode(sm)
	return self
end

function MsgDef.Msg1540209:opcode()
	return 1540209
end

--[[ 请求仙侣pk海选赛场景信息(返回)--]]
MsgDef.Msg5540209 = {}
function MsgDef.Msg5540209:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.hpInfos = {} --[[(array<XlpkHpInfo>) 血量信息--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5540209:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.teamId);
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5540209:decode(sm)
	self.startTime = sm:readInt32();
	self.teamId = sm:readInt32();
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.XlpkHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5540209:opcode()
	return 5540209
end
--[[ 请求仙侣pk场景位置信息--]]
MsgDef.Msg1540210 = {}

function MsgDef.Msg1540210:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540210:encode(sm)
	return self
end

function MsgDef.Msg1540210:decode(sm)
	return self
end

function MsgDef.Msg1540210:opcode()
	return 1540210
end

--[[ 请求仙侣pk场景位置信息(返回)--]]
MsgDef.Msg5540210 = {}
function MsgDef.Msg5540210:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.ourPos = {} --[[(array<Position>) 我方玩家位置信息--]]
	msg.otherPos = {} --[[(array<Position>) 敌方玩家位置信息--]]
	msg.enemys = {} --[[(array<int64>) 敌方角色id--]]
	return msg
end

function MsgDef.Msg5540210:encode(sm)
	sm:writeInt16(#self.ourPos)
	for i,elm in ipairs(self.ourPos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.otherPos)
	for i,elm in ipairs(self.otherPos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.enemys))
	for i,elm in ipairs(self.enemys) do
		sm:writeInt64(elm);
	end
	return self
end

function MsgDef.Msg5540210:decode(sm)
	local ourPos_size = sm:readInt16()
	for i = 1,ourPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.ourPos, element)
	end
	local otherPos_size = sm:readInt16()
	for i = 1,otherPos_size do
		local element = MsgDef.Position:create():decode(sm)
		table.insert(self.otherPos, element)
	end
	local enemys_size = sm:readInt16()
	for i = 1,enemys_size do
		local ele = sm:readInt64();
		table.insert(self.enemys, ele)
	end
	return self
end


function MsgDef.Msg5540210:opcode()
	return 5540210
end
--[[ 请求仙侣pk争霸赛场景信息--]]
MsgDef.Msg1540211 = {}

function MsgDef.Msg1540211:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1540211:encode(sm)
	return self
end

function MsgDef.Msg1540211:decode(sm)
	return self
end

function MsgDef.Msg1540211:opcode()
	return 1540211
end

--[[ 请求仙侣pk争霸赛场景信息(返回)--]]
MsgDef.Msg5540211 = {}
function MsgDef.Msg5540211:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hpInfos = {} --[[(array<XlpkHpInfo>) 血量信息--]]
	msg.teamId = 0 --[[(int32) 队伍id--]]
	msg.startTime = 0 --[[(int32) 开始时间--]]
	msg.bo = 0 --[[(int32) 第几波--]]
	msg.boStartTime = 0 --[[(int32) 波开始时间--]]
	msg.curTime = 0 --[[(int32) 当前时间--]]
	return msg
end

function MsgDef.Msg5540211:encode(sm)
	sm:writeInt16(#self.hpInfos)
	for i,elm in ipairs(self.hpInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.teamId);
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.bo);
	sm:writeInt32(self.boStartTime);
	sm:writeInt32(self.curTime);
	return self
end

function MsgDef.Msg5540211:decode(sm)
	local hpInfos_size = sm:readInt16()
	for i = 1,hpInfos_size do
		local element = MsgDef.XlpkHpInfo:create():decode(sm)
		table.insert(self.hpInfos, element)
	end
	self.teamId = sm:readInt32();
	self.startTime = sm:readInt32();
	self.bo = sm:readInt32();
	self.boStartTime = sm:readInt32();
	self.curTime = sm:readInt32();
	return self
end


function MsgDef.Msg5540211:opcode()
	return 5540211
end
--[[ 请求中秋拜月--]]
MsgDef.Msg1030611 = {}

function MsgDef.Msg1030611:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030611:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030611:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030611:opcode()
	return 1030611
end

--[[ 请求中秋拜月(返回)--]]
MsgDef.Msg5030611 = {}
function MsgDef.Msg5030611:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030611:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030611:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030611:opcode()
	return 5030611
end
--[[ 请求圣印穿脱--]]
MsgDef.Msg1600101 = {}

function MsgDef.Msg1600101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.opType == nil then msg.opType = 0 end --[[(int8) =0穿,=1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) =0时背包位置,=1时装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1600101:encode(sm)
	sm:writeInt8(self.opType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1600101:decode(sm)
	self.opType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1600101:opcode()
	return 1600101
end

--[[ 请求圣印穿脱(返回)--]]
MsgDef.Msg5600101 = {}
function MsgDef.Msg5600101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5600101:encode(sm)
	return self
end

function MsgDef.Msg5600101:decode(sm)
	return self
end


function MsgDef.Msg5600101:opcode()
	return 5600101
end
--[[ 请求圣印信息--]]
MsgDef.Msg1600102 = {}

function MsgDef.Msg1600102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1600102:encode(sm)
	return self
end

function MsgDef.Msg1600102:decode(sm)
	return self
end

function MsgDef.Msg1600102:opcode()
	return 1600102
end

--[[ 请求圣印信息(返回)--]]
MsgDef.Msg5600102 = {}
function MsgDef.Msg5600102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.shInfos = {} --[[(map<int32,int32>) 圣魂信息 id->使用数量--]]
	msg.syScore = 0 --[[(int32) 圣印积分--]]
	msg.partInfo = {} --[[(array<ShengYinPartInfo>) 圣印部位信息--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5600102:encode(sm)
	sm:writeInt16(get_map_size(self.shInfos))
	for kn,elm in ipairs(self.shInfos) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.syScore);
	sm:writeInt16(#self.partInfo)
	for i,elm in ipairs(self.partInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5600102:decode(sm)
	local shInfos_size = sm:readInt16()
	for i = 1,shInfos_size do
		local kv = sm:readInt32();
		self.shInfos[kv] = sm:readInt32();
	end
	self.syScore = sm:readInt32();
	local partInfo_size = sm:readInt16()
	for i = 1,partInfo_size do
		local element = MsgDef.ShengYinPartInfo:create():decode(sm)
		table.insert(self.partInfo, element)
	end
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5600102:opcode()
	return 5600102
end
--[[ 请求圣印套装信息--]]
MsgDef.Msg1600103 = {}

function MsgDef.Msg1600103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1600103:encode(sm)
	return self
end

function MsgDef.Msg1600103:decode(sm)
	return self
end

function MsgDef.Msg1600103:opcode()
	return 1600103
end

--[[ 请求圣印套装信息(返回)--]]
MsgDef.Msg5600103 = {}
function MsgDef.Msg5600103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.suitInfo = {} --[[(array<int32>) 已激活套装信息--]]
	return msg
end

function MsgDef.Msg5600103:encode(sm)
	sm:writeInt16(get_map_size(self.suitInfo))
	for i,elm in ipairs(self.suitInfo) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5600103:decode(sm)
	local suitInfo_size = sm:readInt16()
	for i = 1,suitInfo_size do
		local ele = sm:readInt32();
		table.insert(self.suitInfo, ele)
	end
	return self
end


function MsgDef.Msg5600103:opcode()
	return 5600103
end
--[[ 请求圣印分解--]]
MsgDef.Msg1600104 = {}

function MsgDef.Msg1600104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 分解列表--]]
	return msg
end

function MsgDef.Msg1600104:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1600104:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1600104:opcode()
	return 1600104
end

--[[ 请求圣印分解(返回)--]]
MsgDef.Msg5600104 = {}
function MsgDef.Msg5600104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.syScore = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 分解后获得--]]
	return msg
end

function MsgDef.Msg5600104:encode(sm)
	sm:writeInt32(self.syScore);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5600104:decode(sm)
	self.syScore = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5600104:opcode()
	return 5600104
end
--[[ 请求圣印强化--]]
MsgDef.Msg1600105 = {}

function MsgDef.Msg1600105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:提升 1:一键提升--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	return msg
end

function MsgDef.Msg1600105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg1600105:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt32();
	return self
end

function MsgDef.Msg1600105:opcode()
	return 1600105
end

--[[ 请求圣印强化(返回)--]]
MsgDef.Msg5600105 = {}
function MsgDef.Msg5600105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:提升 1:一键提升--]]
	msg.part = 0 --[[(int32) 部位--]]
	msg.level = 0 --[[(int32) 部位等级--]]
	msg.exp  = 0 --[[(int32) 部位经验--]]
	msg.syScore = 0 --[[(int32) 材料--]]
	return msg
end

function MsgDef.Msg5600105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.part);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	sm:writeInt32(self.syScore);
	return self
end

function MsgDef.Msg5600105:decode(sm)
	self.reqType = sm:readInt8();
	self.part = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	self.syScore = sm:readInt32();
	return self
end


function MsgDef.Msg5600105:opcode()
	return 5600105
end
--[[ 中秋除魔排行--]]
MsgDef.ZqEliminateDevilRankInfo = {}

function MsgDef.ZqEliminateDevilRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.point == nil then msg.point = 0 end --[[(int32) 积分--]]
	return msg
end

function MsgDef.ZqEliminateDevilRankInfo:encode(sm)
	sm:writeInt32(self.ranking);
	sm:writeString(self.roleName);
	sm:writeInt32(self.point);
	return self
end

function MsgDef.ZqEliminateDevilRankInfo:decode(sm)
	self.ranking = sm:readInt32();
	self.roleName = sm:readString();
	self.point = sm:readInt32();
	return self
end

function MsgDef.ZqEliminateDevilRankInfo:opcode()
	return "ZqEliminateDevilRankInfo"
end

--[[ 请求中秋除魔排行信息--]]
MsgDef.Msg1030612 = {}

function MsgDef.Msg1030612:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030612:encode(sm)
	return self
end

function MsgDef.Msg1030612:decode(sm)
	return self
end

function MsgDef.Msg1030612:opcode()
	return 1030612
end

--[[ 请求中秋除魔排行信息(返回)--]]
MsgDef.Msg5030612 = {}
function MsgDef.Msg5030612:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankingInfos = {} --[[(array<ZqEliminateDevilRankInfo>) 排名--]]
	msg.mine = MsgDef.ZqEliminateDevilRankInfo:create() --[[(ZqEliminateDevilRankInfo) 自身信息--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030612:encode(sm)
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	self.mine:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030612:decode(sm)
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.ZqEliminateDevilRankInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.mine:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030612:opcode()
	return 5030612
end
--[[ 圣印部位信息--]]
MsgDef.ShengYinPartInfo = {}

function MsgDef.ShengYinPartInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	if msg.strenLev == nil then msg.strenLev = 0 end --[[(int32) 强化等级--]]
	if msg.strenExp == nil then msg.strenExp = 0 end --[[(int32) 强化经验--]]
	return msg
end

function MsgDef.ShengYinPartInfo:encode(sm)
	sm:writeInt32(self.part);
	sm:writeInt32(self.strenLev);
	sm:writeInt32(self.strenExp);
	return self
end

function MsgDef.ShengYinPartInfo:decode(sm)
	self.part = sm:readInt32();
	self.strenLev = sm:readInt32();
	self.strenExp = sm:readInt32();
	return self
end

function MsgDef.ShengYinPartInfo:opcode()
	return "ShengYinPartInfo"
end

--[[ 请求中秋节日BOSS--]]
MsgDef.Msg1030613 = {}

function MsgDef.Msg1030613:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030613:encode(sm)
	return self
end

function MsgDef.Msg1030613:decode(sm)
	return self
end

function MsgDef.Msg1030613:opcode()
	return 1030613
end

--[[ 请求中秋节日BOSS(返回)--]]
MsgDef.Msg5030613 = {}
function MsgDef.Msg5030613:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.idAndNum = {} --[[(map<int32,int32>) 野外地图id和剩余boss数量--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030613:encode(sm)
	sm:writeInt16(get_map_size(self.idAndNum))
	for kn,elm in ipairs(self.idAndNum) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030613:decode(sm)
	local idAndNum_size = sm:readInt16()
	for i = 1,idAndNum_size do
		local kv = sm:readInt32();
		self.idAndNum[kv] = sm:readInt32();
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030613:opcode()
	return 5030613
end
--[[ 请求万神殿副本信息--]]
MsgDef.Msg1331301 = {}

function MsgDef.Msg1331301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331301:encode(sm)
	return self
end

function MsgDef.Msg1331301:decode(sm)
	return self
end

function MsgDef.Msg1331301:opcode()
	return 1331301
end

--[[ 请求万神殿副本信息(返回)--]]
MsgDef.Msg5331301 = {}
function MsgDef.Msg5331301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftCount = 0 --[[(int32) 剩余次数--]]
	msg.ttEndTime = {} --[[(map<int32,int32>) 图腾消失时间<场景，消失时间>--]]
	return msg
end

function MsgDef.Msg5331301:encode(sm)
	sm:writeInt32(self.leftCount);
	sm:writeInt16(get_map_size(self.ttEndTime))
	for kn,elm in ipairs(self.ttEndTime) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5331301:decode(sm)
	self.leftCount = sm:readInt32();
	local ttEndTime_size = sm:readInt16()
	for i = 1,ttEndTime_size do
		local kv = sm:readInt32();
		self.ttEndTime[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5331301:opcode()
	return 5331301
end
--[[ 请求万神殿副本场景信息--]]
MsgDef.Msg1331302 = {}

function MsgDef.Msg1331302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331302:encode(sm)
	return self
end

function MsgDef.Msg1331302:decode(sm)
	return self
end

function MsgDef.Msg1331302:opcode()
	return 1331302
end

--[[ 请求万神殿副本场景信息(返回)--]]
MsgDef.Msg5331302 = {}
function MsgDef.Msg5331302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.jlValue = 0 --[[(int32) 精力值--]]
	msg.ttEndTime = 0 --[[(int32) 图腾消失时间--]]
	return msg
end

function MsgDef.Msg5331302:encode(sm)
	sm:writeInt32(self.jlValue);
	sm:writeInt32(self.ttEndTime);
	return self
end

function MsgDef.Msg5331302:decode(sm)
	self.jlValue = sm:readInt32();
	self.ttEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5331302:opcode()
	return 5331302
end
--[[ 请求万神殿续时--]]
MsgDef.Msg1331303 = {}

function MsgDef.Msg1331303:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331303:encode(sm)
	return self
end

function MsgDef.Msg1331303:decode(sm)
	return self
end

function MsgDef.Msg1331303:opcode()
	return 1331303
end

--[[ 请求万神殿续时(返回)--]]
MsgDef.Msg5331303 = {}
function MsgDef.Msg5331303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.jlValue = 0 --[[(int32) 精力值--]]
	return msg
end

function MsgDef.Msg5331303:encode(sm)
	sm:writeInt32(self.jlValue);
	return self
end

function MsgDef.Msg5331303:decode(sm)
	self.jlValue = sm:readInt32();
	return self
end


function MsgDef.Msg5331303:opcode()
	return 5331303
end
--[[ 广播万神殿精力值--]]
MsgDef.Msg8230701 = {}

function MsgDef.Msg8230701:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.jlValue = 0 --[[(int32) 精力值--]]
	return msg
end

function MsgDef.Msg8230701:encode(sm)
	sm:writeInt32(self.jlValue);
	return self
end

function MsgDef.Msg8230701:decode(sm)
	self.jlValue = sm:readInt32();
	return self
end

function MsgDef.Msg8230701:opcode()
	return 8230701
end

--[[ 请求中秋boss血量--]]
MsgDef.Msg8230605 = {}

function MsgDef.Msg8230605:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.boosInfo = {} --[[(array<CommonBossInfo>) boss血量--]]
	return msg
end

function MsgDef.Msg8230605:encode(sm)
	sm:writeInt16(#self.boosInfo)
	for i,elm in ipairs(self.boosInfo) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8230605:decode(sm)
	local boosInfo_size = sm:readInt16()
	for i = 1,boosInfo_size do
		local element = MsgDef.CommonBossInfo:create():decode(sm)
		table.insert(self.boosInfo, element)
	end
	return self
end

function MsgDef.Msg8230605:opcode()
	return 8230605
end

--[[ 请求全民折扣礼包--]]
MsgDef.Msg1030614 = {}

function MsgDef.Msg1030614:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 购买id--]]
	return msg
end

function MsgDef.Msg1030614:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030614:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030614:opcode()
	return 1030614
end

--[[ 请求全民折扣礼包(返回)--]]
MsgDef.Msg5030614 = {}
function MsgDef.Msg5030614:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cid = 0 --[[(int32) 购买id--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.numSigns = {} --[[(map<int32,int32>) 数量标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买的物品--]]
	msg.curDay = 0 --[[(int32) 当前第几天  从1开始--]]
	return msg
end

function MsgDef.Msg5030614:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.numSigns))
	for kn,elm in ipairs(self.numSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030614:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	local numSigns_size = sm:readInt16()
	for i = 1,numSigns_size do
		local kv = sm:readInt32();
		self.numSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030614:opcode()
	return 5030614
end
--[[ 请求全民消费返还--]]
MsgDef.Msg1030615 = {}

function MsgDef.Msg1030615:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030615:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030615:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030615:opcode()
	return 1030615
end

--[[ 请求全民消费返还(返回)--]]
MsgDef.Msg5030615 = {}
function MsgDef.Msg5030615:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	msg.costSum = 0 --[[(int32) 消费总数--]]
	return msg
end

function MsgDef.Msg5030615:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.costSum);
	return self
end

function MsgDef.Msg5030615:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.costSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030615:opcode()
	return 5030615
end
--[[ 请求全民全服秒杀--]]
MsgDef.Msg1030616 = {}

function MsgDef.Msg1030616:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 购买id--]]
	return msg
end

function MsgDef.Msg1030616:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030616:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030616:opcode()
	return 1030616
end

--[[ 请求全民全服秒杀(返回)--]]
MsgDef.Msg5030616 = {}
function MsgDef.Msg5030616:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cid = 0 --[[(int32) 购买id--]]
	msg.leftTime = 0 --[[(int32) 剩余时间--]]
	msg.personalNum = {} --[[(map<int32,int32>) 个人限购数量--]]
	msg.serverNum = {} --[[(map<int32,int32>) 全服限购数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买的物品--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.time = 0 --[[(int32) 当前活动奖励时间段--]]
	return msg
end

function MsgDef.Msg5030616:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.personalNum))
	for kn,elm in ipairs(self.personalNum) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.serverNum))
	for kn,elm in ipairs(self.serverNum) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.time);
	return self
end

function MsgDef.Msg5030616:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	local personalNum_size = sm:readInt16()
	for i = 1,personalNum_size do
		local kv = sm:readInt32();
		self.personalNum[kv] = sm:readInt32();
	end
	local serverNum_size = sm:readInt16()
	for i = 1,serverNum_size do
		local kv = sm:readInt32();
		self.serverNum[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.time = sm:readInt32();
	return self
end


function MsgDef.Msg5030616:opcode()
	return 5030616
end
--[[ 请求好运灵签(多开)--]]
MsgDef.Msg1030251 = {}

function MsgDef.Msg1030251:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=显示 1=抽奖--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 抽奖次数--]]
	return msg
end

function MsgDef.Msg1030251:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030251:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030251:opcode()
	return 1030251
end

--[[ 请求好运灵签(多开)(返回)--]]
MsgDef.Msg5030251 = {}
function MsgDef.Msg5030251:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=显示 1=抽奖--]]
	msg.times = 0 --[[(int32) 抽奖次数--]]
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	msg.useSign = 0 --[[(int32) 已使用签数--]]
	msg.curr = MsgDef.SimpleItemInfo:create() --[[(SimpleItemInfo) 本轮奖励--]]
	msg.select = 0 --[[(int32) 抽中奖励--]]
	msg.records = {} --[[(array<string>) 记录--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030251:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.times);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.mulActId);
	sm:writeInt32(self.useSign);
	self.curr:encode(sm)
	sm:writeInt32(self.select);
	sm:writeInt16(get_map_size(self.records))
	for i,elm in ipairs(self.records) do
		sm:writeString(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030251:decode(sm)
	self.reqType = sm:readInt8();
	self.times = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.mulActId = sm:readInt32();
	self.useSign = sm:readInt32();
	self.curr:decode(sm)
	self.select = sm:readInt32();
	local records_size = sm:readInt16()
	for i = 1,records_size do
		local ele = sm:readString();
		table.insert(self.records, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030251:opcode()
	return 5030251
end
--[[ 请求全服鲜花榜信息（全服）--]]
MsgDef.Msg1030327 = {}

function MsgDef.Msg1030327:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030327:encode(sm)
	return self
end

function MsgDef.Msg1030327:decode(sm)
	return self
end

function MsgDef.Msg1030327:opcode()
	return 1030327
end

--[[ 请求全服鲜花榜信息（全服）(返回)--]]
MsgDef.Msg5030327 = {}
function MsgDef.Msg5030327:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.nsRanks = {} --[[(array<FlowerRankInfo>) 女神榜--]]
	msg.hhRanks = {} --[[(array<FlowerRankInfo>) 护花榜--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	return msg
end

function MsgDef.Msg5030327:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myScore);
	sm:writeInt16(#self.nsRanks)
	for i,elm in ipairs(self.nsRanks) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.hhRanks)
	for i,elm in ipairs(self.hhRanks) do
		elm:encode(sm)
	end
	sm:writeInt32(self.myRank);
	return self
end

function MsgDef.Msg5030327:decode(sm)
	self.lastTime = sm:readInt32();
	self.myScore = sm:readInt32();
	local nsRanks_size = sm:readInt16()
	for i = 1,nsRanks_size do
		local element = MsgDef.FlowerRankInfo:create():decode(sm)
		table.insert(self.nsRanks, element)
	end
	local hhRanks_size = sm:readInt16()
	for i = 1,hhRanks_size do
		local element = MsgDef.FlowerRankInfo:create():decode(sm)
		table.insert(self.hhRanks, element)
	end
	self.myRank = sm:readInt32();
	return self
end


function MsgDef.Msg5030327:opcode()
	return 5030327
end
--[[ 请求国庆登录领奖--]]
MsgDef.Msg1030617 = {}

function MsgDef.Msg1030617:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	return msg
end

function MsgDef.Msg1030617:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030617:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030617:opcode()
	return 1030617
end

--[[ 请求国庆登录领奖(返回)--]]
MsgDef.Msg5030617 = {}
function MsgDef.Msg5030617:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	msg.normalAwardSign = 0 --[[(int8) 普通奖励领取标识--]]
	msg.vipAwardSign = 0 --[[(int8) vip奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030617:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.normalAwardSign);
	sm:writeInt8(self.vipAwardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030617:decode(sm)
	self.reqType = sm:readInt8();
	self.normalAwardSign = sm:readInt8();
	self.vipAwardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030617:opcode()
	return 5030617
end
--[[ 请求国庆充值大礼--]]
MsgDef.Msg1030618 = {}

function MsgDef.Msg1030618:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取首充 2：领取累充--]]
	return msg
end

function MsgDef.Msg1030618:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030618:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030618:opcode()
	return 1030618
end

--[[ 请求国庆充值大礼(返回)--]]
MsgDef.Msg5030618 = {}
function MsgDef.Msg5030618:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取首充 2：领取累充--]]
	msg.firstRechargeSign = 0 --[[(int8) 每日首充领取标识--]]
	msg.accumulateRecharge = 0 --[[(int8) 每日累充领取标识--]]
	msg.czSums = 0 --[[(int32) 每日充值的元宝数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天  从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030618:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.firstRechargeSign);
	sm:writeInt8(self.accumulateRecharge);
	sm:writeInt32(self.czSums);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030618:decode(sm)
	self.reqType = sm:readInt8();
	self.firstRechargeSign = sm:readInt8();
	self.accumulateRecharge = sm:readInt8();
	self.czSums = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030618:opcode()
	return 5030618
end
--[[ 请求国庆消费豪礼--]]
MsgDef.Msg1030619 = {}

function MsgDef.Msg1030619:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取 2：购买--]]
	return msg
end

function MsgDef.Msg1030619:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030619:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030619:opcode()
	return 1030619
end

--[[ 请求国庆消费豪礼(返回)--]]
MsgDef.Msg5030619 = {}
function MsgDef.Msg5030619:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取 2：购买--]]
	msg.numSigns = {} --[[(map<int32,int32>) 还可以领取购买的次数（上限）--]]
	msg.needConsumeNum = 0 --[[(int32) 还需消耗的元宝数--]]
	msg.leftReceiveTimes = 0 --[[(int32) 剩余可领取次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天  从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030619:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.numSigns))
	for kn,elm in ipairs(self.numSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.needConsumeNum);
	sm:writeInt32(self.leftReceiveTimes);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030619:decode(sm)
	self.reqType = sm:readInt8();
	local numSigns_size = sm:readInt16()
	for i = 1,numSigns_size do
		local kv = sm:readInt32();
		self.numSigns[kv] = sm:readInt32();
	end
	self.needConsumeNum = sm:readInt32();
	self.leftReceiveTimes = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030619:opcode()
	return 5030619
end
--[[ 请求国庆欢乐兑换--]]
MsgDef.Msg1030620 = {}

function MsgDef.Msg1030620:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030620:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030620:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030620:opcode()
	return 1030620
end

--[[ 请求国庆欢乐兑换(返回)--]]
MsgDef.Msg5030620 = {}
function MsgDef.Msg5030620:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.canExchangeTimes = {} --[[(map<int32,int32>) 可以兑换的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.actEndTime = 0 --[[(int32) 结束时间--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg5030620:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.canExchangeTimes))
	for kn,elm in ipairs(self.canExchangeTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5030620:decode(sm)
	self.reqType = sm:readInt8();
	local canExchangeTimes_size = sm:readInt16()
	for i = 1,canExchangeTimes_size do
		local kv = sm:readInt32();
		self.canExchangeTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5030620:opcode()
	return 5030620
end
--[[ 请求圣印合成--]]
MsgDef.Msg1600106 = {}

function MsgDef.Msg1600106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.syIndexs == nil then msg.syIndexs = {} end --[[(array<int32>) 需要圣印背包索引--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 合成数量--]]
	return msg
end

function MsgDef.Msg1600106:encode(sm)
	sm:writeInt16(get_map_size(self.syIndexs))
	for i,elm in ipairs(self.syIndexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1600106:decode(sm)
	local syIndexs_size = sm:readInt16()
	for i = 1,syIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.syIndexs, elm)
	end
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1600106:opcode()
	return 1600106
end

--[[ 请求圣印合成(返回)--]]
MsgDef.Msg5600106 = {}
function MsgDef.Msg5600106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成道具--]]
	return msg
end

function MsgDef.Msg5600106:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5600106:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5600106:opcode()
	return 5600106
end
--[[ 请求兽神祭坛信息--]]
MsgDef.Msg1331401 = {}

function MsgDef.Msg1331401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331401:encode(sm)
	return self
end

function MsgDef.Msg1331401:decode(sm)
	return self
end

function MsgDef.Msg1331401:opcode()
	return 1331401
end

--[[ 请求兽神祭坛信息(返回)--]]
MsgDef.Msg5331401 = {}
function MsgDef.Msg5331401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneRoleNums = {} --[[(map<int32,int32>) 场景玩家数据量--]]
	return msg
end

function MsgDef.Msg5331401:encode(sm)
	sm:writeInt16(get_map_size(self.sceneRoleNums))
	for kn,elm in ipairs(self.sceneRoleNums) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5331401:decode(sm)
	local sceneRoleNums_size = sm:readInt16()
	for i = 1,sceneRoleNums_size do
		local kv = sm:readInt32();
		self.sceneRoleNums[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5331401:opcode()
	return 5331401
end
--[[ 请求兽神祭坛场景信息--]]
MsgDef.Msg1331402 = {}

function MsgDef.Msg1331402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331402:encode(sm)
	return self
end

function MsgDef.Msg1331402:decode(sm)
	return self
end

function MsgDef.Msg1331402:opcode()
	return 1331402
end

--[[ 请求兽神祭坛场景信息(返回)--]]
MsgDef.Msg5331402 = {}
function MsgDef.Msg5331402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<CrossWorldBossInfo>) boss数据--]]
	msg.leftPlayTime = 0 --[[(int32) 剩余挑战时间--]]
	return msg
end

function MsgDef.Msg5331402:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftPlayTime);
	return self
end

function MsgDef.Msg5331402:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.CrossWorldBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.leftPlayTime = sm:readInt32();
	return self
end


function MsgDef.Msg5331402:opcode()
	return 5331402
end
--[[ 请求兽神祭坛boss伤害排行--]]
MsgDef.Msg1331403 = {}

function MsgDef.Msg1331403:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 怪物id--]]
	return msg
end

function MsgDef.Msg1331403:encode(sm)
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg1331403:decode(sm)
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg1331403:opcode()
	return 1331403
end

--[[ 请求兽神祭坛boss伤害排行(返回)--]]
MsgDef.Msg5331403 = {}
function MsgDef.Msg5331403:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.rankList = {} --[[(array<SsjtBossRankInfo>) 排行榜--]]
	msg.Msg1331403 = 0 --[[(int64) 怪物id--]]
	return msg
end

function MsgDef.Msg5331403:encode(sm)
	sm:writeInt16(#self.rankList)
	for i,elm in ipairs(self.rankList) do
		elm:encode(sm)
	end
	sm:writeInt64(self.Msg1331403);
	return self
end

function MsgDef.Msg5331403:decode(sm)
	local rankList_size = sm:readInt16()
	for i = 1,rankList_size do
		local element = MsgDef.SsjtBossRankInfo:create():decode(sm)
		table.insert(self.rankList, element)
	end
	self.Msg1331403 = sm:readInt64();
	return self
end


function MsgDef.Msg5331403:opcode()
	return 5331403
end
--[[ 兽神祭坛BOSS排行榜信息--]]
MsgDef.SsjtBossRankInfo = {}

function MsgDef.SsjtBossRankInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 角色id--]]
	if msg.hurtPercent == nil then msg.hurtPercent = 0 end --[[(int32) 伤害百分比--]]
	if msg.gangName == nil then msg.gangName = "" end --[[(string) 帮派名字--]]
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	return msg
end

function MsgDef.SsjtBossRankInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.hurtPercent);
	sm:writeString(self.gangName);
	sm:writeInt32(self.rank);
	return self
end

function MsgDef.SsjtBossRankInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.hurtPercent = sm:readInt32();
	self.gangName = sm:readString();
	self.rank = sm:readInt32();
	return self
end

function MsgDef.SsjtBossRankInfo:opcode()
	return "SsjtBossRankInfo"
end

--[[ 请求圣印降临（跨服）--]]
MsgDef.Msg1030252 = {}

function MsgDef.Msg1030252:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030252:encode(sm)
	return self
end

function MsgDef.Msg1030252:decode(sm)
	return self
end

function MsgDef.Msg1030252:opcode()
	return 1030252
end

--[[ 请求圣印降临（跨服）(返回)--]]
MsgDef.Msg5030252 = {}
function MsgDef.Msg5030252:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030252:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myPower);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030252:decode(sm)
	self.lastTime = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myPower = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030252:opcode()
	return 5030252
end
--[[ 兽神祭坛奖励获得弹窗--]]
MsgDef.Msg8230606 = {}

function MsgDef.Msg8230606:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:仇恨归属奖励 2:参与奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg8230606:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8230606:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8230606:opcode()
	return 8230606
end

--[[ 圣印系统战力广播--]]
MsgDef.Msg8230702 = {}

function MsgDef.Msg8230702:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = 0 --[[(int32) 圣印战力--]]
	return msg
end

function MsgDef.Msg8230702:encode(sm)
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg8230702:decode(sm)
	self.power = sm:readInt32();
	return self
end

function MsgDef.Msg8230702:opcode()
	return 8230702
end

--[[ 请求国庆激战boss剩余时间--]]
MsgDef.Msg1030621 = {}

function MsgDef.Msg1030621:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030621:encode(sm)
	return self
end

function MsgDef.Msg1030621:decode(sm)
	return self
end

function MsgDef.Msg1030621:opcode()
	return 1030621
end

--[[ 请求国庆激战boss剩余时间(返回)--]]
MsgDef.Msg5030621 = {}
function MsgDef.Msg5030621:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030621:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030621:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030621:opcode()
	return 5030621
end
--[[ 猜灯谜答题排行刷新广播--]]
MsgDef.Msg8110502 = {}

function MsgDef.Msg8110502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 排名刷新广播--]]
	return msg
end

function MsgDef.Msg8110502:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8110502:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	return self
end

function MsgDef.Msg8110502:opcode()
	return 8110502
end

--[[ 请求圣印寻宝信息--]]
MsgDef.Msg1030622 = {}

function MsgDef.Msg1030622:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030622:encode(sm)
	return self
end

function MsgDef.Msg1030622:decode(sm)
	return self
end

function MsgDef.Msg1030622:opcode()
	return 1030622
end

--[[ 请求圣印寻宝信息(返回)--]]
MsgDef.Msg5030622 = {}
function MsgDef.Msg5030622:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 1:临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030622:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030622:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030622:opcode()
	return 5030622
end
--[[ 请求圣印寻宝积分商城--]]
MsgDef.Msg1030623 = {}

function MsgDef.Msg1030623:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030623:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030623:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030623:opcode()
	return 1030623
end

--[[ 请求圣印寻宝积分商城(返回)--]]
MsgDef.Msg5030623 = {}
function MsgDef.Msg5030623:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030623:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030623:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030623:opcode()
	return 5030623
end
--[[ 请求圣印抽奖--]]
MsgDef.Msg1030624 = {}

function MsgDef.Msg1030624:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030624:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030624:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030624:opcode()
	return 1030624
end

--[[ 请求圣印抽奖(返回)--]]
MsgDef.Msg5030624 = {}
function MsgDef.Msg5030624:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030624:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030624:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030624:opcode()
	return 5030624
end
--[[ 请求圣印寻宝返还--]]
MsgDef.Msg1030625 = {}

function MsgDef.Msg1030625:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030625:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030625:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030625:opcode()
	return 1030625
end

--[[ 请求圣印寻宝返还(返回)--]]
MsgDef.Msg5030625 = {}
function MsgDef.Msg5030625:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotSigns = {} --[[(array<int32>) 已经领取的奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg5030625:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.times);
	sm:writeInt16(get_map_size(self.itemGotSigns))
	for i,elm in ipairs(self.itemGotSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5030625:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTime = sm:readInt32();
	self.times = sm:readInt32();
	local itemGotSigns_size = sm:readInt16()
	for i = 1,itemGotSigns_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotSigns, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5030625:opcode()
	return 5030625
end
--[[ 请求珍稀乾坤--]]
MsgDef.Msg1030626 = {}

function MsgDef.Msg1030626:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽完 3：刷新--]]
	return msg
end

function MsgDef.Msg1030626:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030626:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030626:opcode()
	return 1030626
end

--[[ 请求珍稀乾坤(返回)--]]
MsgDef.Msg5030626 = {}
function MsgDef.Msg5030626:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽完 3：刷新--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.curItems = {} --[[(array<int32>) 当前轮的道具id--]]
	msg.leftItems = {} --[[(array<int32>) 剩余的道具id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.cfgId = 0 --[[(int32) 当前的格子id（配置id）--]]
	return msg
end

function MsgDef.Msg5030626:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.curItems))
	for i,elm in ipairs(self.curItems) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.leftItems))
	for i,elm in ipairs(self.leftItems) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg5030626:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTime = sm:readInt32();
	local curItems_size = sm:readInt16()
	for i = 1,curItems_size do
		local ele = sm:readInt32();
		table.insert(self.curItems, ele)
	end
	local leftItems_size = sm:readInt16()
	for i = 1,leftItems_size do
		local ele = sm:readInt32();
		table.insert(self.leftItems, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cfgId = sm:readInt32();
	return self
end


function MsgDef.Msg5030626:opcode()
	return 5030626
end
--[[ 请求剑神装备合成--]]
MsgDef.Msg1190202 = {}

function MsgDef.Msg1190202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 目标道具id--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 合成数量--]]
	return msg
end

function MsgDef.Msg1190202:encode(sm)
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1190202:decode(sm)
	self.itemId = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1190202:opcode()
	return 1190202
end

--[[ 请求剑神装备合成(返回)--]]
MsgDef.Msg5190202 = {}
function MsgDef.Msg5190202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成道具--]]
	return msg
end

function MsgDef.Msg5190202:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5190202:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5190202:opcode()
	return 5190202
end
--[[ 请求剑神寻宝信息--]]
MsgDef.Msg1030630 = {}

function MsgDef.Msg1030630:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030630:encode(sm)
	return self
end

function MsgDef.Msg1030630:decode(sm)
	return self
end

function MsgDef.Msg1030630:opcode()
	return 1030630
end

--[[ 请求剑神寻宝信息(返回)--]]
MsgDef.Msg5030630 = {}
function MsgDef.Msg5030630:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030630:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030630:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030630:opcode()
	return 5030630
end
--[[ 请求剑神寻宝积分商城--]]
MsgDef.Msg1030631 = {}

function MsgDef.Msg1030631:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030631:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030631:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030631:opcode()
	return 1030631
end

--[[ 请求剑神寻宝积分商城(返回)--]]
MsgDef.Msg5030631 = {}
function MsgDef.Msg5030631:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030631:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030631:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030631:opcode()
	return 5030631
end
--[[ 请求剑神寻宝--]]
MsgDef.Msg1030632 = {}

function MsgDef.Msg1030632:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030632:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030632:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030632:opcode()
	return 1030632
end

--[[ 请求剑神寻宝(返回)--]]
MsgDef.Msg5030632 = {}
function MsgDef.Msg5030632:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030632:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030632:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030632:opcode()
	return 5030632
end
--[[ 请求剑神寻宝返还--]]
MsgDef.Msg1030633 = {}

function MsgDef.Msg1030633:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030633:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030633:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030633:opcode()
	return 1030633
end

--[[ 请求剑神寻宝返还(返回)--]]
MsgDef.Msg5030633 = {}
function MsgDef.Msg5030633:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotSigns = {} --[[(array<int32>) 已经领取的奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg5030633:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.times);
	sm:writeInt16(get_map_size(self.itemGotSigns))
	for i,elm in ipairs(self.itemGotSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5030633:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTime = sm:readInt32();
	self.times = sm:readInt32();
	local itemGotSigns_size = sm:readInt16()
	for i = 1,itemGotSigns_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotSigns, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5030633:opcode()
	return 5030633
end
--[[ 请求剑神装备寻宝排行活动（跨服）--]]
MsgDef.Msg1030253 = {}

function MsgDef.Msg1030253:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030253:encode(sm)
	return self
end

function MsgDef.Msg1030253:decode(sm)
	return self
end

function MsgDef.Msg1030253:opcode()
	return 1030253
end

--[[ 请求剑神装备寻宝排行活动（跨服）(返回)--]]
MsgDef.Msg5030253 = {}
function MsgDef.Msg5030253:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myTimes = 0 --[[(int32) 我的次数--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<JlcsRankInfo>) 排行信息--]]
	return msg
end

function MsgDef.Msg5030253:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myTimes);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030253:decode(sm)
	self.lastTime = sm:readInt32();
	self.myTimes = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.JlcsRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030253:opcode()
	return 5030253
end
--[[ 剑神装备战力广播--]]
MsgDef.Msg8230801 = {}

function MsgDef.Msg8230801:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg8230801:encode(sm)
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg8230801:decode(sm)
	self.power = sm:readInt32();
	return self
end

function MsgDef.Msg8230801:opcode()
	return 8230801
end

--[[ 请求剑神装备信息--]]
MsgDef.Msg1190203 = {}

function MsgDef.Msg1190203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1190203:encode(sm)
	return self
end

function MsgDef.Msg1190203:decode(sm)
	return self
end

function MsgDef.Msg1190203:opcode()
	return 1190203
end

--[[ 请求剑神装备信息(返回)--]]
MsgDef.Msg5190203 = {}
function MsgDef.Msg5190203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5190203:encode(sm)
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5190203:decode(sm)
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5190203:opcode()
	return 5190203
end
--[[ 请求烟花庆典--]]
MsgDef.Msg1030635 = {}

function MsgDef.Msg1030635:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030635:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030635:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030635:opcode()
	return 1030635
end

--[[ 请求烟花庆典(返回)--]]
MsgDef.Msg5030635 = {}
function MsgDef.Msg5030635:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030635:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030635:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030635:opcode()
	return 5030635
end
--[[ 请求累计消费活动--]]
MsgDef.Msg1030636 = {}

function MsgDef.Msg1030636:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030636:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030636:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030636:opcode()
	return 1030636
end

--[[ 请求累计消费活动(返回)--]]
MsgDef.Msg5030636 = {}
function MsgDef.Msg5030636:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.costSum = 0 --[[(int32) 累计消费的元宝数--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.mulActiveId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030636:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.costSum);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.mulActiveId);
	return self
end

function MsgDef.Msg5030636:decode(sm)
	self.reqType = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.costSum = sm:readInt32();
	self.cfgId = sm:readInt32();
	self.mulActiveId = sm:readInt32();
	return self
end


function MsgDef.Msg5030636:opcode()
	return 5030636
end
--[[ 请求神装合成--]]
MsgDef.Msg1100401 = {}

function MsgDef.Msg1100401:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 需要消耗的道具索引--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 合成部位--]]
	if msg.color == nil then msg.color = 0 end --[[(int32) 目标品质--]]
	return msg
end

function MsgDef.Msg1100401:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.part);
	sm:writeInt32(self.color);
	return self
end

function MsgDef.Msg1100401:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	self.part = sm:readInt32();
	self.color = sm:readInt32();
	return self
end

function MsgDef.Msg1100401:opcode()
	return 1100401
end

--[[ 请求神装合成(返回)--]]
MsgDef.Msg5100401 = {}
function MsgDef.Msg5100401:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成道具--]]
	return msg
end

function MsgDef.Msg5100401:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5100401:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5100401:opcode()
	return 5100401
end
--[[ 请求神装分解--]]
MsgDef.Msg1100402 = {}

function MsgDef.Msg1100402:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 分解神装的索引--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:分解预览 2:分解--]]
	return msg
end

function MsgDef.Msg1100402:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1100402:decode(sm)
	self.index = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1100402:opcode()
	return 1100402
end

--[[ 请求神装分解(返回)--]]
MsgDef.Msg5100402 = {}
function MsgDef.Msg5100402:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 分解获得--]]
	msg.reqType = 0 --[[(int8) 1:分解预览 2:分解--]]
	msg.isComp = 0 --[[(int8) 是否合成装备 1:否（显示问号）--]]
	msg.index = 0 --[[(int32) 分解神装的索引--]]
	return msg
end

function MsgDef.Msg5100402:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.isComp);
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg5100402:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.isComp = sm:readInt8();
	self.index = sm:readInt32();
	return self
end


function MsgDef.Msg5100402:opcode()
	return 5100402
end
--[[ 请求幸运鉴宝--]]
MsgDef.Msg1030637 = {}

function MsgDef.Msg1030637:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030637:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030637:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030637:opcode()
	return 1030637
end

--[[ 请求幸运鉴宝(返回)--]]
MsgDef.Msg5030637 = {}
function MsgDef.Msg5030637:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.luckyValue = 0 --[[(int32) 幸运值--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	msg.bigAward = 0 --[[(int32) 大奖id--]]
	return msg
end

function MsgDef.Msg5030637:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.luckyValue);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.bigAward);
	return self
end

function MsgDef.Msg5030637:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	self.luckyValue = sm:readInt32();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.bigAward = sm:readInt32();
	return self
end


function MsgDef.Msg5030637:opcode()
	return 5030637
end
--[[ 请求悠钻年费每日礼包--]]
MsgDef.Msg1030638 = {}

function MsgDef.Msg1030638:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示 1:领取vip奖励 2:领取额外奖励--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030638:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030638:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030638:opcode()
	return 1030638
end

--[[ 请求悠钻年费每日礼包(返回)--]]
MsgDef.Msg5030638 = {}
function MsgDef.Msg5030638:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取vip奖励 2:领取额外奖励--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.yz = 0 --[[(int32) 悠钻等级--]]
	msg.yxVipLev = 0 --[[(int32) 悠迅vip等级--]]
	msg.vipGotSigns = {} --[[(map<int32,int32>) vip领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.extGotSign = 0 --[[(int8) 额外奖励领取标识 1:已领取--]]
	return msg
end

function MsgDef.Msg5030638:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt32(self.yz);
	sm:writeInt32(self.yxVipLev);
	sm:writeInt16(get_map_size(self.vipGotSigns))
	for kn,elm in ipairs(self.vipGotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.extGotSign);
	return self
end

function MsgDef.Msg5030638:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	self.yz = sm:readInt32();
	self.yxVipLev = sm:readInt32();
	local vipGotSigns_size = sm:readInt16()
	for i = 1,vipGotSigns_size do
		local kv = sm:readInt32();
		self.vipGotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.extGotSign = sm:readInt8();
	return self
end


function MsgDef.Msg5030638:opcode()
	return 5030638
end
--[[ 请求万圣节累充豪礼--]]
MsgDef.Msg1030639 = {}

function MsgDef.Msg1030639:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030639:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030639:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030639:opcode()
	return 1030639
end

--[[ 请求万圣节累充豪礼(返回)--]]
MsgDef.Msg5030639 = {}
function MsgDef.Msg5030639:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.rechargeSum = 0 --[[(int32) 累计充值的元宝数--]]
	return msg
end

function MsgDef.Msg5030639:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030639:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030639:opcode()
	return 5030639
end
--[[ 请求降妖除魔场景信息--]]
MsgDef.Msg1028201 = {}

function MsgDef.Msg1028201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1028201:encode(sm)
	return self
end

function MsgDef.Msg1028201:decode(sm)
	return self
end

function MsgDef.Msg1028201:opcode()
	return 1028201
end

--[[ 请求降妖除魔场景信息(返回)--]]
MsgDef.Msg5028201 = {}
function MsgDef.Msg5028201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.commitNum = 0 --[[(int32) 已提交数量--]]
	return msg
end

function MsgDef.Msg5028201:encode(sm)
	sm:writeInt32(self.commitNum);
	return self
end

function MsgDef.Msg5028201:decode(sm)
	self.commitNum = sm:readInt32();
	return self
end


function MsgDef.Msg5028201:opcode()
	return 5028201
end
--[[ 请求万圣节抽奖活动--]]
MsgDef.Msg1030640 = {}

function MsgDef.Msg1030640:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽完--]]
	if msg.site == nil then msg.site = 0 end --[[(int32) 位置（1-9）--]]
	return msg
end

function MsgDef.Msg1030640:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	return self
end

function MsgDef.Msg1030640:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	return self
end

function MsgDef.Msg1030640:opcode()
	return 1030640
end

--[[ 请求万圣节抽奖活动(返回)--]]
MsgDef.Msg5030640 = {}
function MsgDef.Msg5030640:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽完--]]
	msg.site = 0 --[[(int32) 位置（1-9）--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.gotSite = {} --[[(array<int32>) 已经抽取的位置--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	msg.dataIds = {} --[[(array<int32>) 获得的奖励id--]]
	return msg
end

function MsgDef.Msg5030640:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.gotSite))
	for i,elm in ipairs(self.gotSite) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.dataIds))
	for i,elm in ipairs(self.dataIds) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030640:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	local gotSite_size = sm:readInt16()
	for i = 1,gotSite_size do
		local ele = sm:readInt32();
		table.insert(self.gotSite, ele)
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	local dataIds_size = sm:readInt16()
	for i = 1,dataIds_size do
		local ele = sm:readInt32();
		table.insert(self.dataIds, ele)
	end
	return self
end


function MsgDef.Msg5030640:opcode()
	return 5030640
end
--[[ 请求降妖除魔提交南瓜--]]
MsgDef.Msg1028202 = {}

function MsgDef.Msg1028202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 提交数量--]]
	return msg
end

function MsgDef.Msg1028202:encode(sm)
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1028202:decode(sm)
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1028202:opcode()
	return 1028202
end

--[[ 请求降妖除魔提交南瓜(返回)--]]
MsgDef.Msg5028202 = {}
function MsgDef.Msg5028202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.commitNum = 0 --[[(int32) 当前已提交总数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5028202:encode(sm)
	sm:writeInt32(self.commitNum);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5028202:decode(sm)
	self.commitNum = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5028202:opcode()
	return 5028202
end
--[[ 请求万圣节降妖除魔信息--]]
MsgDef.Msg1030641 = {}

function MsgDef.Msg1030641:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030641:encode(sm)
	return self
end

function MsgDef.Msg1030641:decode(sm)
	return self
end

function MsgDef.Msg1030641:opcode()
	return 1030641
end

--[[ 请求万圣节降妖除魔信息(返回)--]]
MsgDef.Msg5030641 = {}
function MsgDef.Msg5030641:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.nextStartTime = 0 --[[(int32) 下次开始时间（0表示正在进行 非0下次开启时间）--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030641:encode(sm)
	sm:writeInt32(self.nextStartTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030641:decode(sm)
	self.nextStartTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030641:opcode()
	return 5030641
end
--[[ 请求万圣节登录奖励--]]
MsgDef.Msg1030642 = {}

function MsgDef.Msg1030642:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取登录奖励 2：领取累充奖励--]]
	return msg
end

function MsgDef.Msg1030642:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030642:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030642:opcode()
	return 1030642
end

--[[ 请求万圣节登录奖励(返回)--]]
MsgDef.Msg5030642 = {}
function MsgDef.Msg5030642:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取登录奖励 2：领取累充奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030642:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030642:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030642:opcode()
	return 5030642
end
--[[ 请求神兽装备合成--]]
MsgDef.Msg1590106 = {}

function MsgDef.Msg1590106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包索引--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 合成部位--]]
	if msg.color == nil then msg.color = 0 end --[[(int32) 目标品质--]]
	return msg
end

function MsgDef.Msg1590106:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.part);
	sm:writeInt32(self.color);
	return self
end

function MsgDef.Msg1590106:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	self.part = sm:readInt32();
	self.color = sm:readInt32();
	return self
end

function MsgDef.Msg1590106:opcode()
	return 1590106
end

--[[ 请求神兽装备合成(返回)--]]
MsgDef.Msg5590106 = {}
function MsgDef.Msg5590106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5590106:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5590106:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5590106:opcode()
	return 5590106
end
--[[ 请求万圣节boss剩余时间--]]
MsgDef.Msg1030643 = {}

function MsgDef.Msg1030643:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030643:encode(sm)
	return self
end

function MsgDef.Msg1030643:decode(sm)
	return self
end

function MsgDef.Msg1030643:opcode()
	return 1030643
end

--[[ 请求万圣节boss剩余时间(返回)--]]
MsgDef.Msg5030643 = {}
function MsgDef.Msg5030643:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030643:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030643:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030643:opcode()
	return 5030643
end
--[[ 请求万圣节兑换活动--]]
MsgDef.Msg1030644 = {}

function MsgDef.Msg1030644:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030644:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030644:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030644:opcode()
	return 1030644
end

--[[ 请求万圣节兑换活动(返回)--]]
MsgDef.Msg5030644 = {}
function MsgDef.Msg5030644:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.canExchangeTimes = {} --[[(map<int32,int32>) 可以兑换的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030644:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.canExchangeTimes))
	for kn,elm in ipairs(self.canExchangeTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030644:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local canExchangeTimes_size = sm:readInt16()
	for i = 1,canExchangeTimes_size do
		local kv = sm:readInt32();
		self.canExchangeTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030644:opcode()
	return 5030644
end
--[[ 头饰信息--]]
MsgDef.HeadWearInfo = {}

function MsgDef.HeadWearInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.hwId == nil then msg.hwId = 0 end --[[(int32) 头饰id--]]
	if msg.starNum == nil then msg.starNum = 0 end --[[(int32) 星数--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	if msg.exp  == nil then msg.exp  = 0 end --[[(int32) 经验--]]
	if msg.wear == nil then msg.wear = 0 end --[[(int8) 是否佩戴 1:佩戴--]]
	return msg
end

function MsgDef.HeadWearInfo:encode(sm)
	sm:writeInt32(self.hwId);
	sm:writeInt32(self.starNum);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	sm:writeInt8(self.wear);
	return self
end

function MsgDef.HeadWearInfo:decode(sm)
	self.hwId = sm:readInt32();
	self.starNum = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	self.wear = sm:readInt8();
	return self
end

function MsgDef.HeadWearInfo:opcode()
	return "HeadWearInfo"
end

--[[ 请求头饰信息--]]
MsgDef.Msg1570201 = {}

function MsgDef.Msg1570201:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1570201:encode(sm)
	return self
end

function MsgDef.Msg1570201:decode(sm)
	return self
end

function MsgDef.Msg1570201:opcode()
	return 1570201
end

--[[ 请求头饰信息(返回)--]]
MsgDef.Msg5570201 = {}
function MsgDef.Msg5570201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hwInfos = {} --[[(array<HeadWearInfo>) 头饰信息--]]
	return msg
end

function MsgDef.Msg5570201:encode(sm)
	sm:writeInt16(#self.hwInfos)
	for i,elm in ipairs(self.hwInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5570201:decode(sm)
	local hwInfos_size = sm:readInt16()
	for i = 1,hwInfos_size do
		local element = MsgDef.HeadWearInfo:create():decode(sm)
		table.insert(self.hwInfos, element)
	end
	return self
end


function MsgDef.Msg5570201:opcode()
	return 5570201
end
--[[ 请求头饰升级--]]
MsgDef.Msg1570202 = {}

function MsgDef.Msg1570202:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.hwId == nil then msg.hwId = 0 end --[[(int32) 头饰id--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 消耗道具id--]]
	return msg
end

function MsgDef.Msg1570202:encode(sm)
	sm:writeInt32(self.hwId);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1570202:decode(sm)
	self.hwId = sm:readInt32();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1570202:opcode()
	return 1570202
end

--[[ 请求头饰升级(返回)--]]
MsgDef.Msg5570202 = {}
function MsgDef.Msg5570202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.hwId = 0 --[[(int32) 头饰id--]]
	msg.level = 0 --[[(int32) 头饰等级--]]
	msg.exp  = 0 --[[(int32) 头饰经验--]]
	return msg
end

function MsgDef.Msg5570202:encode(sm)
	sm:writeInt32(self.hwId);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	return self
end

function MsgDef.Msg5570202:decode(sm)
	self.hwId = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	return self
end


function MsgDef.Msg5570202:opcode()
	return 5570202
end
--[[ 请求头饰穿脱--]]
MsgDef.Msg1570203 = {}

function MsgDef.Msg1570203:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.hwId == nil then msg.hwId = 0 end --[[(int32) 头饰id--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:戴 2:脱--]]
	return msg
end

function MsgDef.Msg1570203:encode(sm)
	sm:writeInt32(self.hwId);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1570203:decode(sm)
	self.hwId = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1570203:opcode()
	return 1570203
end

--[[ 请求头饰穿脱(返回)--]]
MsgDef.Msg5570203 = {}
function MsgDef.Msg5570203:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 1:戴 2:脱--]]
	msg.hwId = 0 --[[(int32) 头饰id--]]
	return msg
end

function MsgDef.Msg5570203:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.hwId);
	return self
end

function MsgDef.Msg5570203:decode(sm)
	self.reqType = sm:readInt8();
	self.hwId = sm:readInt32();
	return self
end


function MsgDef.Msg5570203:opcode()
	return 5570203
end
--[[ 双色球信息--]]
MsgDef.BallInfo = {}

function MsgDef.BallInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.redBall == nil then msg.redBall = {} end --[[(array<int32>) 红球--]]
	if msg.buleBall == nil then msg.buleBall = 0 end --[[(int32) 篮球--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 注数--]]
	return msg
end

function MsgDef.BallInfo:encode(sm)
	sm:writeInt16(get_map_size(self.redBall))
	for i,elm in ipairs(self.redBall) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.buleBall);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.BallInfo:decode(sm)
	local redBall_size = sm:readInt16()
	for i = 1,redBall_size do
		local elm = sm:readInt32();
		table.insert(self.redBall, elm)
	end
	self.buleBall = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.BallInfo:opcode()
	return "BallInfo"
end

--[[ 请求双色球活动--]]
MsgDef.Msg1030645 = {}

function MsgDef.Msg1030645:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：随机一注 2：随机十注 3：自选--]]
	if msg.redBall == nil then msg.redBall = {} end --[[(array<int32>) 红球--]]
	if msg.blueBall == nil then msg.blueBall = 0 end --[[(int32) 篮球--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 注数--]]
	return msg
end

function MsgDef.Msg1030645:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.redBall))
	for i,elm in ipairs(self.redBall) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.blueBall);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1030645:decode(sm)
	self.reqType = sm:readInt8();
	local redBall_size = sm:readInt16()
	for i = 1,redBall_size do
		local elm = sm:readInt32();
		table.insert(self.redBall, elm)
	end
	self.blueBall = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1030645:opcode()
	return 1030645
end

--[[ 请求双色球活动(返回)--]]
MsgDef.Msg5030645 = {}
function MsgDef.Msg5030645:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：随机一注 2：随机十注 3：自选--]]
	msg.moneyPool = 0 --[[(int32) 奖池--]]
	msg.awardInfo = {} --[[(array<int32>) 获奖情况--]]
	msg.myBallInfo = {} --[[(map<int32,BallInfos>) 自身投注情况--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.lastBallInfo = MsgDef.BallInfo:create() --[[(BallInfo) 上轮开奖号码--]]
	msg.chooseBallInfo = MsgDef.BallInfo:create() --[[(BallInfo) 选着投注的号码--]]
	msg.stage = 0 --[[(int32) 阶段--]]
	return msg
end

function MsgDef.Msg5030645:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.moneyPool);
	sm:writeInt16(get_map_size(self.awardInfo))
	for i,elm in ipairs(self.awardInfo) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.myBallInfo))
	for kn,elm in ipairs(self.myBallInfo) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	self.lastBallInfo:encode(sm)
	self.chooseBallInfo:encode(sm)
	sm:writeInt32(self.stage);
	return self
end

function MsgDef.Msg5030645:decode(sm)
	self.reqType = sm:readInt8();
	self.moneyPool = sm:readInt32();
	local awardInfo_size = sm:readInt16()
	for i = 1,awardInfo_size do
		local ele = sm:readInt32();
		table.insert(self.awardInfo, ele)
	end
	local myBallInfo_size = sm:readInt16()
	for i = 1,myBallInfo_size do
		local kev = sm:readInt32(kn);
		self.myBallInfo[kev] = MsgDef.BallInfos:create():decode(sm)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.lastBallInfo:decode(sm)
	self.chooseBallInfo:decode(sm)
	self.stage = sm:readInt32();
	return self
end


function MsgDef.Msg5030645:opcode()
	return 5030645
end
--[[ 请求双色球每期信息--]]
MsgDef.BallInfos = {}

function MsgDef.BallInfos:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.ballInfos == nil then msg.ballInfos = {} end --[[(array<BallInfo>) 每期的投注信息--]]
	return msg
end

function MsgDef.BallInfos:encode(sm)
	sm:writeInt16(#self.ballInfos)
	for i,elm in ipairs(self.ballInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.BallInfos:decode(sm)
	local ballInfos_size = sm:readInt16()
	for i = 1,ballInfos_size do
		local element = MsgDef.BallInfo:create():decode(sm)
		table.insert(self.ballInfos, element)
	end
	return self
end

function MsgDef.BallInfos:opcode()
	return "BallInfos"
end

--[[ 请求脱单领称号活动--]]
MsgDef.Msg1030254 = {}

function MsgDef.Msg1030254:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息  1=领取--]]
	return msg
end

function MsgDef.Msg1030254:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030254:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030254:opcode()
	return 1030254
end

--[[ 请求脱单领称号活动(返回)--]]
MsgDef.Msg5030254 = {}
function MsgDef.Msg5030254:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=信息  1=领取--]]
	msg.quota = 0 --[[(int32) 充值元宝--]]
	msg.mTimes = 0 --[[(int32) 提亲次数--]]
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.awardGot = 0 --[[(int8) 1=奖励已领取--]]
	return msg
end

function MsgDef.Msg5030254:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.quota);
	sm:writeInt32(self.mTimes);
	sm:writeInt32(self.lastTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.awardGot);
	return self
end

function MsgDef.Msg5030254:decode(sm)
	self.reqType = sm:readInt8();
	self.quota = sm:readInt32();
	self.mTimes = sm:readInt32();
	self.lastTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.awardGot = sm:readInt8();
	return self
end


function MsgDef.Msg5030254:opcode()
	return 5030254
end
--[[ 请求情侣充值排行榜（跨服）--]]
MsgDef.Msg1030255 = {}

function MsgDef.Msg1030255:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030255:encode(sm)
	return self
end

function MsgDef.Msg1030255:decode(sm)
	return self
end

function MsgDef.Msg1030255:opcode()
	return 1030255
end

--[[ 请求情侣充值排行榜（跨服）(返回)--]]
MsgDef.Msg5030255 = {}
function MsgDef.Msg5030255:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myCz = 0 --[[(int32) 我的充值--]]
	msg.rankInfos = {} --[[(array<CoupleRankingInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030255:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myCz);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030255:decode(sm)
	self.lastTime = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myCz = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.CoupleRankingInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030255:opcode()
	return 5030255
end
--[[ 请求真假雪人--]]
MsgDef.Msg1030646 = {}

function MsgDef.Msg1030646:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽完--]]
	if msg.site == nil then msg.site = 0 end --[[(int32) 位置（1-8）--]]
	return msg
end

function MsgDef.Msg1030646:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	return self
end

function MsgDef.Msg1030646:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	return self
end

function MsgDef.Msg1030646:opcode()
	return 1030646
end

--[[ 请求真假雪人(返回)--]]
MsgDef.Msg5030646 = {}
function MsgDef.Msg5030646:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽完--]]
	msg.site = 0 --[[(int32) 位置（1-8）--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.siteDataId = {} --[[(map<int32,int32>) 已经抽取的位置对应获得的奖励id--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	return msg
end

function MsgDef.Msg5030646:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.siteDataId))
	for kn,elm in ipairs(self.siteDataId) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5030646:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	local siteDataId_size = sm:readInt16()
	for i = 1,siteDataId_size do
		local kv = sm:readInt32();
		self.siteDataId[kv] = sm:readInt32();
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	return self
end


function MsgDef.Msg5030646:opcode()
	return 5030646
end
--[[ 情侣充值排行榜信息--]]
MsgDef.CoupleRankingInfo = {}

function MsgDef.CoupleRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.rank == nil then msg.rank = 0 end --[[(int32) 排名--]]
	if msg.quota == nil then msg.quota = 0 end --[[(int32) 充值元宝--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家1--]]
	if msg.coupleName == nil then msg.coupleName = "" end --[[(string) 玩家2--]]
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家1--]]
	if msg.coupleId == nil then msg.coupleId = 0 end --[[(int64) 玩家2--]]
	return msg
end

function MsgDef.CoupleRankingInfo:encode(sm)
	sm:writeInt32(self.rank);
	sm:writeInt32(self.quota);
	sm:writeString(self.roleName);
	sm:writeString(self.coupleName);
	sm:writeInt64(self.roleId);
	sm:writeInt64(self.coupleId);
	return self
end

function MsgDef.CoupleRankingInfo:decode(sm)
	self.rank = sm:readInt32();
	self.quota = sm:readInt32();
	self.roleName = sm:readString();
	self.coupleName = sm:readString();
	self.roleId = sm:readInt64();
	self.coupleId = sm:readInt64();
	return self
end

function MsgDef.CoupleRankingInfo:opcode()
	return "CoupleRankingInfo"
end

--[[ 请求满减专场--]]
MsgDef.Msg1030647 = {}

function MsgDef.Msg1030647:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买满减 2：购买免单--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030647:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030647:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030647:opcode()
	return 1030647
end

--[[ 请求满减专场(返回)--]]
MsgDef.Msg5030647 = {}
function MsgDef.Msg5030647:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：购买满减 2：购买免单--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.gotNum = {} --[[(map<int32,int32>) 道具已经购买的数量--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 购买的物品--]]
	msg.costSum = 0 --[[(int32) 消费总数--]]
	msg.frees = {} --[[(array<int32>) 当前可用的免单额度--]]
	msg.curDay = 0 --[[(int32) 当前第几天--]]
	msg.costNums = {} --[[(array<int32>) 已经消费的档位的金额--]]
	return msg
end

function MsgDef.Msg5030647:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.gotNum))
	for kn,elm in ipairs(self.gotNum) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.costSum);
	sm:writeInt16(get_map_size(self.frees))
	for i,elm in ipairs(self.frees) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt16(get_map_size(self.costNums))
	for i,elm in ipairs(self.costNums) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030647:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	local gotNum_size = sm:readInt16()
	for i = 1,gotNum_size do
		local kv = sm:readInt32();
		self.gotNum[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.costSum = sm:readInt32();
	local frees_size = sm:readInt16()
	for i = 1,frees_size do
		local ele = sm:readInt32();
		table.insert(self.frees, ele)
	end
	self.curDay = sm:readInt32();
	local costNums_size = sm:readInt16()
	for i = 1,costNums_size do
		local ele = sm:readInt32();
		table.insert(self.costNums, ele)
	end
	return self
end


function MsgDef.Msg5030647:opcode()
	return 5030647
end
--[[ 太古玄镜boss信息--]]
MsgDef.TgxjBossInfo = {}

function MsgDef.TgxjBossInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.bossStatu == nil then msg.bossStatu = 0 end --[[(int8) 精英boss1:已死亡;世界boss1:已死亡,2未刷新,3已刷新--]]
	if msg.nextRefreshTime == nil then msg.nextRefreshTime = 0 end --[[(int32) 下次刷新时间--]]
	if msg.sceneId == nil then msg.sceneId = 0 end --[[(int32) 场景id--]]
	if msg.lastKillName == nil then msg.lastKillName = "" end --[[(string) 上一次击杀者的名字--]]
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.serverName == nil then msg.serverName = "" end --[[(string) 服务器名--]]
	if msg.agentServerId == nil then msg.agentServerId = 0 end --[[(int32) 服务器id--]]
	return msg
end

function MsgDef.TgxjBossInfo:encode(sm)
	sm:writeInt8(self.bossStatu);
	sm:writeInt32(self.nextRefreshTime);
	sm:writeInt32(self.sceneId);
	sm:writeString(self.lastKillName);
	sm:writeInt32(self.monsterId);
	sm:writeString(self.serverName);
	sm:writeInt32(self.agentServerId);
	return self
end

function MsgDef.TgxjBossInfo:decode(sm)
	self.bossStatu = sm:readInt8();
	self.nextRefreshTime = sm:readInt32();
	self.sceneId = sm:readInt32();
	self.lastKillName = sm:readString();
	self.monsterId = sm:readInt32();
	self.serverName = sm:readString();
	self.agentServerId = sm:readInt32();
	return self
end

function MsgDef.TgxjBossInfo:opcode()
	return "TgxjBossInfo"
end

--[[ 请求太古玄镜boss信息--]]
MsgDef.Msg1331501 = {}

function MsgDef.Msg1331501:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1331501:encode(sm)
	return self
end

function MsgDef.Msg1331501:decode(sm)
	return self
end

function MsgDef.Msg1331501:opcode()
	return 1331501
end

--[[ 请求太古玄镜boss信息(返回)--]]
MsgDef.Msg5331501 = {}
function MsgDef.Msg5331501:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossInfos = {} --[[(array<TgxjBossInfo>) boss信息--]]
	msg.leftTired = 0 --[[(int32) leftTired--]]
	msg.tipConfMap = {} --[[(map<int32,int32>) tipConfMap--]]
	return msg
end

function MsgDef.Msg5331501:encode(sm)
	sm:writeInt16(#self.bossInfos)
	for i,elm in ipairs(self.bossInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTired);
	sm:writeInt16(get_map_size(self.tipConfMap))
	for kn,elm in ipairs(self.tipConfMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5331501:decode(sm)
	local bossInfos_size = sm:readInt16()
	for i = 1,bossInfos_size do
		local element = MsgDef.TgxjBossInfo:create():decode(sm)
		table.insert(self.bossInfos, element)
	end
	self.leftTired = sm:readInt32();
	local tipConfMap_size = sm:readInt16()
	for i = 1,tipConfMap_size do
		local kv = sm:readInt32();
		self.tipConfMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5331501:opcode()
	return 5331501
end
--[[ 请求太古玄镜boss场景信息--]]
MsgDef.Msg1331502 = {}

function MsgDef.Msg1331502:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.agentServerId == nil then msg.agentServerId = 0 end --[[(int32) 服务器id--]]
	return msg
end

function MsgDef.Msg1331502:encode(sm)
	sm:writeInt32(self.agentServerId);
	return self
end

function MsgDef.Msg1331502:decode(sm)
	self.agentServerId = sm:readInt32();
	return self
end

function MsgDef.Msg1331502:opcode()
	return 1331502
end

--[[ 请求太古玄镜boss场景信息(返回)--]]
MsgDef.Msg5331502 = {}
function MsgDef.Msg5331502:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTime = 0 --[[(int32) 当前血量百分比,万分制,1467表示百分之14点67--]]
	msg.bossList = {} --[[(array<SceneBossInfo>) boss列表--]]
	msg.first = 0 --[[(int8) 1:第一次弹窗 0:不是第一次--]]
	return msg
end

function MsgDef.Msg5331502:encode(sm)
	sm:writeInt32(self.leftPlayTime);
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	sm:writeInt8(self.first);
	return self
end

function MsgDef.Msg5331502:decode(sm)
	self.leftPlayTime = sm:readInt32();
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SceneBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	self.first = sm:readInt8();
	return self
end


function MsgDef.Msg5331502:opcode()
	return 5331502
end
--[[ 请求太古玄镜boss关注--]]
MsgDef.Msg1331503 = {}

function MsgDef.Msg1331503:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.monsterId == nil then msg.monsterId = 0 end --[[(int32) 怪物id--]]
	if msg.optionVal == nil then msg.optionVal = 0 end --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg1331503:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg1331503:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end

function MsgDef.Msg1331503:opcode()
	return 1331503
end

--[[ 请求太古玄镜boss关注(返回)--]]
MsgDef.Msg5331503 = {}
function MsgDef.Msg5331503:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.optionVal = 0 --[[(int8) 1:勾选 0取消勾选--]]
	return msg
end

function MsgDef.Msg5331503:encode(sm)
	sm:writeInt32(self.monsterId);
	sm:writeInt8(self.optionVal);
	return self
end

function MsgDef.Msg5331503:decode(sm)
	self.monsterId = sm:readInt32();
	self.optionVal = sm:readInt8();
	return self
end


function MsgDef.Msg5331503:opcode()
	return 5331503
end
--[[ 八门位置信息--]]
MsgDef.BMSiteInfo = {}

function MsgDef.BMSiteInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.eleInfo == nil then msg.eleInfo = MsgDef.ItemInfo:create() end --[[(ItemInfo) 元素信息--]]
	if msg.state == nil then msg.state = 0 end --[[(int32) 门的状态（0未解锁 1已解锁未镶嵌 2镶嵌）--]]
	return msg
end

function MsgDef.BMSiteInfo:encode(sm)
	self.eleInfo:encode(sm)
	sm:writeInt32(self.state);
	return self
end

function MsgDef.BMSiteInfo:decode(sm)
	self.eleInfo:decode(sm)
	self.state = sm:readInt32();
	return self
end

function MsgDef.BMSiteInfo:opcode()
	return "BMSiteInfo"
end

--[[ 太古玄镜boss血量变化广播--]]
MsgDef.Msg8240101 = {}

function MsgDef.Msg8240101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossList = {} --[[(array<SceneBossInfo>) 变化的boss--]]
	return msg
end

function MsgDef.Msg8240101:encode(sm)
	sm:writeInt16(#self.bossList)
	for i,elm in ipairs(self.bossList) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8240101:decode(sm)
	local bossList_size = sm:readInt16()
	for i = 1,bossList_size do
		local element = MsgDef.SceneBossInfo:create():decode(sm)
		table.insert(self.bossList, element)
	end
	return self
end

function MsgDef.Msg8240101:opcode()
	return 8240101
end

--[[ 太古玄镜BOSS疲劳值退出广播--]]
MsgDef.Msg8240102 = {}

function MsgDef.Msg8240102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.tired = 0 --[[(int32) 当前疲劳值--]]
	return msg
end

function MsgDef.Msg8240102:encode(sm)
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.tired);
	return self
end

function MsgDef.Msg8240102:decode(sm)
	self.sceneId = sm:readInt32();
	self.tired = sm:readInt32();
	return self
end

function MsgDef.Msg8240102:opcode()
	return 8240102
end

--[[ 太古玄镜结算广播--]]
MsgDef.Msg8240103 = {}

function MsgDef.Msg8240103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.bossName = "" --[[(string) 怪物名字--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.hateRoleName = "" --[[(string) 仇恨归属奖励--]]
	msg.monsterId = 0 --[[(int32) 怪物id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	return msg
end

function MsgDef.Msg8240103:encode(sm)
	sm:writeString(self.bossName);
	sm:writeInt32(self.sceneId);
	sm:writeString(self.hateRoleName);
	sm:writeInt32(self.monsterId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8240103:decode(sm)
	self.bossName = sm:readString();
	self.sceneId = sm:readInt32();
	self.hateRoleName = sm:readString();
	self.monsterId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8240103:opcode()
	return 8240103
end

--[[ 请求八门开启--]]
MsgDef.Msg1610101 = {}

function MsgDef.Msg1610101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.site == nil then msg.site = 0 end --[[(int32) 1-8--]]
	return msg
end

function MsgDef.Msg1610101:encode(sm)
	sm:writeInt32(self.site);
	return self
end

function MsgDef.Msg1610101:decode(sm)
	self.site = sm:readInt32();
	return self
end

function MsgDef.Msg1610101:opcode()
	return 1610101
end

--[[ 请求八门开启(返回)--]]
MsgDef.Msg5610101 = {}
function MsgDef.Msg5610101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.openState = {} --[[(map<int32,int32>) 开启状态（位置对应 0未开启 1开启 2镶嵌）--]]
	return msg
end

function MsgDef.Msg5610101:encode(sm)
	sm:writeInt16(get_map_size(self.openState))
	for kn,elm in ipairs(self.openState) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5610101:decode(sm)
	local openState_size = sm:readInt16()
	for i = 1,openState_size do
		local kv = sm:readInt32();
		self.openState[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5610101:opcode()
	return 5610101
end
--[[ 请求八门元素穿脱--]]
MsgDef.Msg1610102 = {}

function MsgDef.Msg1610102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.openType == nil then msg.openType = 0 end --[[(int8) 0穿，1脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 0背包位置，1装备位置--]]
	if msg.toIndexs == nil then msg.toIndexs = {} end --[[(array<int32>) 目标位置--]]
	return msg
end

function MsgDef.Msg1610102:encode(sm)
	sm:writeInt8(self.openType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.toIndexs))
	for i,elm in ipairs(self.toIndexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1610102:decode(sm)
	self.openType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local toIndexs_size = sm:readInt16()
	for i = 1,toIndexs_size do
		local elm = sm:readInt32();
		table.insert(self.toIndexs, elm)
	end
	return self
end

function MsgDef.Msg1610102:opcode()
	return 1610102
end

--[[ 请求八门元素穿脱(返回)--]]
MsgDef.Msg5610102 = {}
function MsgDef.Msg5610102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5610102:encode(sm)
	return self
end

function MsgDef.Msg5610102:decode(sm)
	return self
end


function MsgDef.Msg5610102:opcode()
	return 5610102
end
--[[ 请求八门信息--]]
MsgDef.Msg1610103 = {}

function MsgDef.Msg1610103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1610103:encode(sm)
	return self
end

function MsgDef.Msg1610103:decode(sm)
	return self
end

function MsgDef.Msg1610103:opcode()
	return 1610103
end

--[[ 请求八门信息(返回)--]]
MsgDef.Msg5610103 = {}
function MsgDef.Msg5610103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.info = {} --[[(map<int32,BMSiteInfo>) 每门对应的装备信息--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.power = 0 --[[(int32) 战斗力--]]
	return msg
end

function MsgDef.Msg5610103:encode(sm)
	sm:writeInt16(get_map_size(self.info))
	for kn,elm in ipairs(self.info) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5610103:decode(sm)
	local info_size = sm:readInt16()
	for i = 1,info_size do
		local kev = sm:readInt32(kn);
		self.info[kev] = MsgDef.BMSiteInfo:create():decode(sm)
	end
	self.score = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5610103:opcode()
	return 5610103
end
--[[ 请求八门元素分解--]]
MsgDef.Msg1610104 = {}

function MsgDef.Msg1610104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 分解列表--]]
	return msg
end

function MsgDef.Msg1610104:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1610104:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1610104:opcode()
	return 1610104
end

--[[ 请求八门元素分解(返回)--]]
MsgDef.Msg5610104 = {}
function MsgDef.Msg5610104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 分解后获得--]]
	return msg
end

function MsgDef.Msg5610104:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5610104:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5610104:opcode()
	return 5610104
end
--[[ 请求八门元素强化--]]
MsgDef.Msg1610105 = {}

function MsgDef.Msg1610105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：强化 1：一键强化--]]
	if msg.site == nil then msg.site = 0 end --[[(int32) 根据位置进行强化1-8--]]
	return msg
end

function MsgDef.Msg1610105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	return self
end

function MsgDef.Msg1610105:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	return self
end

function MsgDef.Msg1610105:opcode()
	return 1610105
end

--[[ 请求八门元素强化(返回)--]]
MsgDef.Msg5610105 = {}
function MsgDef.Msg5610105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：强化 1：一键强化--]]
	msg.site = 0 --[[(int32) 根据位置进行强化1-8--]]
	msg.level = 0 --[[(int32) 等级--]]
	msg.exp  = 0 --[[(int32) 经验--]]
	msg.score = 0 --[[(int32) 元素之灵（积分）--]]
	return msg
end

function MsgDef.Msg5610105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.site);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	sm:writeInt32(self.score);
	return self
end

function MsgDef.Msg5610105:decode(sm)
	self.reqType = sm:readInt8();
	self.site = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	self.score = sm:readInt32();
	return self
end


function MsgDef.Msg5610105:opcode()
	return 5610105
end
--[[ 请求八门元素进阶--]]
MsgDef.Msg1610106 = {}

function MsgDef.Msg1610106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.site == nil then msg.site = 0 end --[[(int32) 相应孔位--]]
	return msg
end

function MsgDef.Msg1610106:encode(sm)
	sm:writeInt32(self.site);
	return self
end

function MsgDef.Msg1610106:decode(sm)
	self.site = sm:readInt32();
	return self
end

function MsgDef.Msg1610106:opcode()
	return 1610106
end

--[[ 请求八门元素进阶(返回)--]]
MsgDef.Msg5610106 = {}
function MsgDef.Msg5610106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5610106:encode(sm)
	return self
end

function MsgDef.Msg5610106:decode(sm)
	return self
end


function MsgDef.Msg5610106:opcode()
	return 5610106
end
--[[ 请求八门元素合成--]]
MsgDef.Msg1610107 = {}

function MsgDef.Msg1610107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = {} end --[[(array<int32>) 背包index--]]
	if msg.element == nil then msg.element = 0 end --[[(int32) 合成的元素--]]
	return msg
end

function MsgDef.Msg1610107:encode(sm)
	sm:writeInt16(get_map_size(self.index))
	for i,elm in ipairs(self.index) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.element);
	return self
end

function MsgDef.Msg1610107:decode(sm)
	local index_size = sm:readInt16()
	for i = 1,index_size do
		local elm = sm:readInt32();
		table.insert(self.index, elm)
	end
	self.element = sm:readInt32();
	return self
end

function MsgDef.Msg1610107:opcode()
	return 1610107
end

--[[ 请求八门元素合成(返回)--]]
MsgDef.Msg5610107 = {}
function MsgDef.Msg5610107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 合成后获得--]]
	return msg
end

function MsgDef.Msg5610107:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5610107:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5610107:opcode()
	return 5610107
end
--[[ 请求圣装寻宝返还（元素）--]]
MsgDef.Msg1030648 = {}

function MsgDef.Msg1030648:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030648:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030648:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030648:opcode()
	return 1030648
end

--[[ 请求圣装寻宝返还（元素）(返回)--]]
MsgDef.Msg5030648 = {}
function MsgDef.Msg5030648:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotSigns = {} --[[(array<int32>) 已经灵虚的奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030648:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.times);
	sm:writeInt16(get_map_size(self.itemGotSigns))
	for i,elm in ipairs(self.itemGotSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030648:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.times = sm:readInt32();
	local itemGotSigns_size = sm:readInt16()
	for i = 1,itemGotSigns_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotSigns, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030648:opcode()
	return 5030648
end
--[[ 请求八门战力排行--]]
MsgDef.Msg1030649 = {}

function MsgDef.Msg1030649:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030649:encode(sm)
	return self
end

function MsgDef.Msg1030649:decode(sm)
	return self
end

function MsgDef.Msg1030649:opcode()
	return 1030649
end

--[[ 请求八门战力排行(返回)--]]
MsgDef.Msg5030649 = {}
function MsgDef.Msg5030649:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030649:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myPower);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030649:decode(sm)
	self.leftTime = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myPower = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030649:opcode()
	return 5030649
end
--[[ 八门系统战力广播--]]
MsgDef.Msg8240104 = {}

function MsgDef.Msg8240104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = 0 --[[(int32) 八门战力--]]
	return msg
end

function MsgDef.Msg8240104:encode(sm)
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg8240104:decode(sm)
	self.power = sm:readInt32();
	return self
end

function MsgDef.Msg8240104:opcode()
	return 8240104
end

--[[ 请求称号佩戴数量购买--]]
MsgDef.Msg1270107 = {}

function MsgDef.Msg1270107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1270107:encode(sm)
	return self
end

function MsgDef.Msg1270107:decode(sm)
	return self
end

function MsgDef.Msg1270107:opcode()
	return 1270107
end

--[[ 请求称号佩戴数量购买(返回)--]]
MsgDef.Msg5270107 = {}
function MsgDef.Msg5270107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 当前可佩戴称号数量--]]
	return msg
end

function MsgDef.Msg5270107:encode(sm)
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg5270107:decode(sm)
	self.count = sm:readInt32();
	return self
end


function MsgDef.Msg5270107:opcode()
	return 5270107
end
--[[ 更新称号广播--]]
MsgDef.Msg8020208 = {}

function MsgDef.Msg8020208:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.wearTitle = {} --[[(array<int32>) 穿戴称号--]]
	msg.roleId = 0 --[[(int64) 玩家id--]]
	return msg
end

function MsgDef.Msg8020208:encode(sm)
	sm:writeInt16(get_map_size(self.wearTitle))
	for i,elm in ipairs(self.wearTitle) do
		sm:writeInt32(elm);
	end
	sm:writeInt64(self.roleId);
	return self
end

function MsgDef.Msg8020208:decode(sm)
	local wearTitle_size = sm:readInt16()
	for i = 1,wearTitle_size do
		local elm = sm:readInt32();
		table.insert(self.wearTitle, elm)
	end
	self.roleId = sm:readInt64();
	return self
end

function MsgDef.Msg8020208:opcode()
	return 8020208
end

--[[ 请求天天返利活动--]]
MsgDef.Msg1030650 = {}

function MsgDef.Msg1030650:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030650:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030650:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030650:opcode()
	return 1030650
end

--[[ 请求天天返利活动(返回)--]]
MsgDef.Msg5030650 = {}
function MsgDef.Msg5030650:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 领取id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.days = 0 --[[(int32) 累计充值的天数--]]
	msg.lunshu = 0 --[[(int32) 轮数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030650:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.days);
	sm:writeInt32(self.lunshu);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030650:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.days = sm:readInt32();
	self.lunshu = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030650:opcode()
	return 5030650
end
--[[ 请求时装藏品信息--]]
MsgDef.Msg1270301 = {}

function MsgDef.Msg1270301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0=信息 1=激活--]]
	if msg.suitId == nil then msg.suitId = 0 end --[[(int32) 套装id--]]
	return msg
end

function MsgDef.Msg1270301:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.suitId);
	return self
end

function MsgDef.Msg1270301:decode(sm)
	self.reqType = sm:readInt8();
	self.suitId = sm:readInt32();
	return self
end

function MsgDef.Msg1270301:opcode()
	return 1270301
end

--[[ 请求时装藏品信息(返回)--]]
MsgDef.Msg5270301 = {}
function MsgDef.Msg5270301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0=信息 1=激活--]]
	msg.activeSuitData = {} --[[(array<int32>) 已激活套装信息--]]
	msg.skinInfos = {} --[[(array<SkinCollectionInfo>) 已收集皮肤信息--]]
	return msg
end

function MsgDef.Msg5270301:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.activeSuitData))
	for i,elm in ipairs(self.activeSuitData) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.skinInfos)
	for i,elm in ipairs(self.skinInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5270301:decode(sm)
	self.reqType = sm:readInt8();
	local activeSuitData_size = sm:readInt16()
	for i = 1,activeSuitData_size do
		local ele = sm:readInt32();
		table.insert(self.activeSuitData, ele)
	end
	local skinInfos_size = sm:readInt16()
	for i = 1,skinInfos_size do
		local element = MsgDef.SkinCollectionInfo:create():decode(sm)
		table.insert(self.skinInfos, element)
	end
	return self
end


function MsgDef.Msg5270301:opcode()
	return 5270301
end
--[[ 皮肤藏品信息--]]
MsgDef.SkinCollectionInfo = {}

function MsgDef.SkinCollectionInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.suitId == nil then msg.suitId = 0 end --[[(int32) 套装id--]]
	if msg.collectData == nil then msg.collectData = {} end --[[(array<IntGroup>) 已收集皮肤--]]
	return msg
end

function MsgDef.SkinCollectionInfo:encode(sm)
	sm:writeInt32(self.suitId);
	sm:writeInt16(#self.collectData)
	for i,elm in ipairs(self.collectData) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.SkinCollectionInfo:decode(sm)
	self.suitId = sm:readInt32();
	local collectData_size = sm:readInt16()
	for i = 1,collectData_size do
		local element = MsgDef.IntGroup:create():decode(sm)
		table.insert(self.collectData, element)
	end
	return self
end

function MsgDef.SkinCollectionInfo:opcode()
	return "SkinCollectionInfo"
end

--[[ 请求水果消除活动--]]
MsgDef.Msg1030651 = {}

function MsgDef.Msg1030651:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：消除 2：领取宝箱--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 消除的类型或领取的id--]]
	if msg.ids == nil then msg.ids = {} end --[[(array<int32>) 消除的位置--]]
	if msg.count == nil then msg.count = 0 end --[[(int32) 领取的数量--]]
	return msg
end

function MsgDef.Msg1030651:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.ids))
	for i,elm in ipairs(self.ids) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.count);
	return self
end

function MsgDef.Msg1030651:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local ids_size = sm:readInt16()
	for i = 1,ids_size do
		local elm = sm:readInt32();
		table.insert(self.ids, elm)
	end
	self.count = sm:readInt32();
	return self
end

function MsgDef.Msg1030651:opcode()
	return 1030651
end

--[[ 请求水果消除活动(返回)--]]
MsgDef.Msg5030651 = {}
function MsgDef.Msg5030651:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：消除 2：领取宝箱--]]
	msg.cid = 0 --[[(int32) 消除的类型或领取的id--]]
	msg.ids = {} --[[(array<int32>) 消除的位置--]]
	msg.score = {} --[[(array<int32>) 积分--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.type = {} --[[(map<int32,int32>) 位置对应的类型--]]
	return msg
end

function MsgDef.Msg5030651:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.ids))
	for i,elm in ipairs(self.ids) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.score))
	for i,elm in ipairs(self.score) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.type))
	for kn,elm in ipairs(self.type) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030651:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local ids_size = sm:readInt16()
	for i = 1,ids_size do
		local ele = sm:readInt32();
		table.insert(self.ids, ele)
	end
	local score_size = sm:readInt16()
	for i = 1,score_size do
		local ele = sm:readInt32();
		table.insert(self.score, ele)
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local type_size = sm:readInt16()
	for i = 1,type_size do
		local kv = sm:readInt32();
		self.type[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030651:opcode()
	return 5030651
end
--[[ 请求仙童阵位信息--]]
MsgDef.Msg1390610 = {}

function MsgDef.Msg1390610:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：信息 1:上阵 2:召回--]]
	if msg.pos == nil then msg.pos = 0 end --[[(int32) 阵位--]]
	if msg.petId == nil then msg.petId = 0 end --[[(int32) 宠物id--]]
	return msg
end

function MsgDef.Msg1390610:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.pos);
	sm:writeInt32(self.petId);
	return self
end

function MsgDef.Msg1390610:decode(sm)
	self.reqType = sm:readInt8();
	self.pos = sm:readInt32();
	self.petId = sm:readInt32();
	return self
end

function MsgDef.Msg1390610:opcode()
	return 1390610
end

--[[ 请求仙童阵位信息(返回)--]]
MsgDef.Msg5390610 = {}
function MsgDef.Msg5390610:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：信息 1:上阵 2:召回--]]
	msg.pos = 0 --[[(int32) 阵位--]]
	msg.warXtData = {} --[[(map<int32,int32>) 当前上阵仙童--]]
	return msg
end

function MsgDef.Msg5390610:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.pos);
	sm:writeInt16(get_map_size(self.warXtData))
	for kn,elm in ipairs(self.warXtData) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5390610:decode(sm)
	self.reqType = sm:readInt8();
	self.pos = sm:readInt32();
	local warXtData_size = sm:readInt16()
	for i = 1,warXtData_size do
		local kv = sm:readInt32();
		self.warXtData[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5390610:opcode()
	return 5390610
end
--[[ 请求开启仙童阵位--]]
MsgDef.Msg1390611 = {}

function MsgDef.Msg1390611:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.pos == nil then msg.pos = 0 end --[[(int32) 开启的阵位--]]
	return msg
end

function MsgDef.Msg1390611:encode(sm)
	sm:writeInt32(self.pos);
	return self
end

function MsgDef.Msg1390611:decode(sm)
	self.pos = sm:readInt32();
	return self
end

function MsgDef.Msg1390611:opcode()
	return 1390611
end

--[[ 请求开启仙童阵位(返回)--]]
MsgDef.Msg5390611 = {}
function MsgDef.Msg5390611:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.pos = 0 --[[(int32) 开启的阵位--]]
	return msg
end

function MsgDef.Msg5390611:encode(sm)
	sm:writeInt32(self.pos);
	return self
end

function MsgDef.Msg5390611:decode(sm)
	self.pos = sm:readInt32();
	return self
end


function MsgDef.Msg5390611:opcode()
	return 5390611
end
--[[ 请求感恩节登录奖励--]]
MsgDef.Msg1030652 = {}

function MsgDef.Msg1030652:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取伴侣奖励--]]
	return msg
end

function MsgDef.Msg1030652:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030652:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030652:opcode()
	return 1030652
end

--[[ 请求感恩节登录奖励(返回)--]]
MsgDef.Msg5030652 = {}
function MsgDef.Msg5030652:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取伴侣奖励--]]
	msg.normalAwardSign = 0 --[[(int8) 普通奖励领取标识--]]
	msg.mateAwardSign = 0 --[[(int8) 伴侣奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030652:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.normalAwardSign);
	sm:writeInt8(self.mateAwardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030652:decode(sm)
	self.reqType = sm:readInt8();
	self.normalAwardSign = sm:readInt8();
	self.mateAwardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030652:opcode()
	return 5030652
end
--[[ 请求感恩节结婚活动--]]
MsgDef.Msg1030653 = {}

function MsgDef.Msg1030653:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：求婚 2：婚宴--]]
	return msg
end

function MsgDef.Msg1030653:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030653:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030653:opcode()
	return 1030653
end

--[[ 请求感恩节结婚活动(返回)--]]
MsgDef.Msg5030653 = {}
function MsgDef.Msg5030653:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：求婚 2：婚宴--]]
	msg.gotSign = {} --[[(map<int32,int32>) 奖励标识（1未领取 2已领取）--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	return msg
end

function MsgDef.Msg5030653:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.gotSign))
	for kn,elm in ipairs(self.gotSign) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.actStartTime);
	return self
end

function MsgDef.Msg5030653:decode(sm)
	self.reqType = sm:readInt8();
	local gotSign_size = sm:readInt16()
	for i = 1,gotSign_size do
		local kv = sm:readInt32();
		self.gotSign[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actEndTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030653:opcode()
	return 5030653
end
--[[ 请求感恩节互动大礼--]]
MsgDef.Msg1030654 = {}

function MsgDef.Msg1030654:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030654:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030654:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030654:opcode()
	return 1030654
end

--[[ 请求感恩节互动大礼(返回)--]]
MsgDef.Msg5030654 = {}
function MsgDef.Msg5030654:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.taskInfo = {} --[[(map<int32,int32>) 任务完成情况--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030654:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.taskInfo))
	for kn,elm in ipairs(self.taskInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030654:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local taskInfo_size = sm:readInt16()
	for i = 1,taskInfo_size do
		local kv = sm:readInt32();
		self.taskInfo[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030654:opcode()
	return 5030654
end
--[[ 请求幸运锦鲤--]]
MsgDef.Msg1030655 = {}

function MsgDef.Msg1030655:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次 3：领取--]]
	return msg
end

function MsgDef.Msg1030655:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030655:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030655:opcode()
	return 1030655
end

--[[ 请求幸运锦鲤(返回)--]]
MsgDef.Msg5030655 = {}
function MsgDef.Msg5030655:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次 3：领取--]]
	msg.luckyValue = 0 --[[(int32) 幸运值--]]
	msg.isLuckyBoy = 0 --[[(int8) 是否幸运儿（0：不是 1：是）--]]
	msg.luckyBoyNum = 0 --[[(int32) 幸运儿数量--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	return msg
end

function MsgDef.Msg5030655:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.luckyValue);
	sm:writeInt8(self.isLuckyBoy);
	sm:writeInt32(self.luckyBoyNum);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030655:decode(sm)
	self.reqType = sm:readInt8();
	self.luckyValue = sm:readInt32();
	self.isLuckyBoy = sm:readInt8();
	self.luckyBoyNum = sm:readInt32();
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030655:opcode()
	return 5030655
end
--[[ 请求天降礼包--]]
MsgDef.Msg1030656 = {}

function MsgDef.Msg1030656:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030656:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030656:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030656:opcode()
	return 1030656
end

--[[ 请求天降礼包(返回)--]]
MsgDef.Msg5030656 = {}
function MsgDef.Msg5030656:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.czSum = 0 --[[(int32) 累计充值的元宝数--]]
	msg.type = 0 --[[(int32) 玩家的奖励种类--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030656:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.type);
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030656:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.czSum = sm:readInt32();
	self.type = sm:readInt32();
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030656:opcode()
	return 5030656
end
--[[ 请求飞升神装分解--]]
MsgDef.Msg1580104 = {}

function MsgDef.Msg1580104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 分解神装的索引--]]
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 1:分解预览 2:分解--]]
	return msg
end

function MsgDef.Msg1580104:encode(sm)
	sm:writeInt32(self.index);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1580104:decode(sm)
	self.index = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1580104:opcode()
	return 1580104
end

--[[ 请求飞升神装分解(返回)--]]
MsgDef.Msg5580104 = {}
function MsgDef.Msg5580104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 分解获得--]]
	msg.reqType = 0 --[[(int8) 1:分解预览 2:分解--]]
	msg.index = 0 --[[(int32) 分解神装的索引--]]
	msg.isComp = 0 --[[(int8) 是否合成装备 1:否（显示问号）--]]
	return msg
end

function MsgDef.Msg5580104:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.index);
	sm:writeInt8(self.isComp);
	return self
end

function MsgDef.Msg5580104:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.index = sm:readInt32();
	self.isComp = sm:readInt8();
	return self
end


function MsgDef.Msg5580104:opcode()
	return 5580104
end
--[[ 科举答题刷新广播--]]
MsgDef.Msg8240201 = {}

function MsgDef.Msg8240201:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.subjectId = 0 --[[(int32) 当前题目id--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.myScore = 0 --[[(int32) 积分--]]
	msg.subjectLeftSec = 0 --[[(int32) 剩余秒--]]
	msg.curQuestionNum = 0 --[[(int32) 进度--]]
	msg.exp  = 0 --[[(int64) 经验--]]
	return msg
end

function MsgDef.Msg8240201:encode(sm)
	sm:writeInt32(self.subjectId);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.subjectLeftSec);
	sm:writeInt32(self.curQuestionNum);
	sm:writeInt64(self.exp );
	return self
end

function MsgDef.Msg8240201:decode(sm)
	self.subjectId = sm:readInt32();
	self.ranking = sm:readInt32();
	self.myScore = sm:readInt32();
	self.subjectLeftSec = sm:readInt32();
	self.curQuestionNum = sm:readInt32();
	self.exp  = sm:readInt64();
	return self
end

function MsgDef.Msg8240201:opcode()
	return 8240201
end

--[[ 科举答题排行刷新广播--]]
MsgDef.Msg8240202 = {}

function MsgDef.Msg8240202:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 排名刷新广播--]]
	return msg
end

function MsgDef.Msg8240202:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8240202:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	return self
end

function MsgDef.Msg8240202:opcode()
	return 8240202
end

--[[ 请求科举排行信息--]]
MsgDef.Msg1030657 = {}

function MsgDef.Msg1030657:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030657:encode(sm)
	return self
end

function MsgDef.Msg1030657:decode(sm)
	return self
end

function MsgDef.Msg1030657:opcode()
	return 1030657
end

--[[ 请求科举排行信息(返回)--]]
MsgDef.Msg5030657 = {}
function MsgDef.Msg5030657:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 积分排名--]]
	msg.myRankInfo = MsgDef.ScoreRaningInfo:create() --[[(ScoreRaningInfo) 我的排名信息--]]
	return msg
end

function MsgDef.Msg5030657:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	return self
end

function MsgDef.Msg5030657:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	self.myRankInfo:decode(sm)
	return self
end


function MsgDef.Msg5030657:opcode()
	return 5030657
end
--[[ 请求科举答题信息--]]
MsgDef.Msg1030658 = {}

function MsgDef.Msg1030658:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：题目信息 1：答题--]]
	if msg.answer == nil then msg.answer = 0 end --[[(int32) 答案， 从1开始--]]
	return msg
end

function MsgDef.Msg1030658:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.answer);
	return self
end

function MsgDef.Msg1030658:decode(sm)
	self.reqType = sm:readInt8();
	self.answer = sm:readInt32();
	return self
end

function MsgDef.Msg1030658:opcode()
	return 1030658
end

--[[ 请求科举答题信息(返回)--]]
MsgDef.Msg5030658 = {}
function MsgDef.Msg5030658:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：题目信息 1：答题--]]
	msg.curQuestionNum = 0 --[[(int32) 当前题--]]
	msg.myScore = 0 --[[(int32) 积分--]]
	msg.subjectId = 0 --[[(int32) 题目id--]]
	msg.subjectLeftSec = 0 --[[(int32) 当前题目剩余秒数--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.actOpenTime = 0 --[[(int32) 开始时间--]]
	msg.answer = 0 --[[(int32) 答案，从1开始--]]
	msg.scoreRankings = {} --[[(array<ScoreRaningInfo>) 积分排行--]]
	msg.exp  = 0 --[[(int64) 经验--]]
	return msg
end

function MsgDef.Msg5030658:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.curQuestionNum);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.subjectId);
	sm:writeInt32(self.subjectLeftSec);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.actOpenTime);
	sm:writeInt32(self.answer);
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	sm:writeInt64(self.exp );
	return self
end

function MsgDef.Msg5030658:decode(sm)
	self.reqType = sm:readInt8();
	self.curQuestionNum = sm:readInt32();
	self.myScore = sm:readInt32();
	self.subjectId = sm:readInt32();
	self.subjectLeftSec = sm:readInt32();
	self.ranking = sm:readInt32();
	self.actOpenTime = sm:readInt32();
	self.answer = sm:readInt32();
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	self.exp  = sm:readInt64();
	return self
end


function MsgDef.Msg5030658:opcode()
	return 5030658
end
--[[ 请求充值双倍活动（月末狂欢）--]]
MsgDef.Msg1030328 = {}

function MsgDef.Msg1030328:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030328:encode(sm)
	return self
end

function MsgDef.Msg1030328:decode(sm)
	return self
end

function MsgDef.Msg1030328:opcode()
	return 1030328
end

--[[ 请求充值双倍活动（月末狂欢）(返回)--]]
MsgDef.Msg5030328 = {}
function MsgDef.Msg5030328:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	return msg
end

function MsgDef.Msg5030328:encode(sm)
	sm:writeInt32(self.lastTime);
	return self
end

function MsgDef.Msg5030328:decode(sm)
	self.lastTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030328:opcode()
	return 5030328
end
--[[ 请求神器排行榜（合服）--]]
MsgDef.Msg1030414 = {}

function MsgDef.Msg1030414:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030414:encode(sm)
	return self
end

function MsgDef.Msg1030414:decode(sm)
	return self
end

function MsgDef.Msg1030414:opcode()
	return 1030414
end

--[[ 请求神器排行榜（合服）(返回)--]]
MsgDef.Msg5030414 = {}
function MsgDef.Msg5030414:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余时间--]]
	msg.isShowTime = 0 --[[(int8) 是否展示时间 1:是--]]
	msg.powerRankings = {} --[[(array<OpenRankInfo>) 战力排行信息--]]
	return msg
end

function MsgDef.Msg5030414:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt8(self.isShowTime);
	sm:writeInt16(#self.powerRankings)
	for i,elm in ipairs(self.powerRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030414:decode(sm)
	self.lastTime = sm:readInt32();
	self.isShowTime = sm:readInt8();
	local powerRankings_size = sm:readInt16()
	for i = 1,powerRankings_size do
		local element = MsgDef.OpenRankInfo:create():decode(sm)
		table.insert(self.powerRankings, element)
	end
	return self
end


function MsgDef.Msg5030414:opcode()
	return 5030414
end
--[[ 请求神器寻宝返还(合服)--]]
MsgDef.Msg1030415 = {}

function MsgDef.Msg1030415:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:显示1:领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 领取配置id--]]
	return msg
end

function MsgDef.Msg1030415:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030415:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030415:opcode()
	return 1030415
end

--[[ 请求神器寻宝返还(合服)(返回)--]]
MsgDef.Msg5030415 = {}
function MsgDef.Msg5030415:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示1:领取--]]
	msg.cfgId = 0 --[[(int32) 领取配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 已领取标识key:配置id:value:1已领取--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.xbCount = 0 --[[(int32) 当前寻宝次数--]]
	msg.actLeftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030415:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.xbCount);
	sm:writeInt32(self.actLeftTime);
	return self
end

function MsgDef.Msg5030415:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.xbCount = sm:readInt32();
	self.actLeftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030415:opcode()
	return 5030415
end
--[[ 请求剑灵寻宝返还(合服)--]]
MsgDef.Msg1030416 = {}

function MsgDef.Msg1030416:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:信息 1:领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030416:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030416:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030416:opcode()
	return 1030416
end

--[[ 请求剑灵寻宝返还(合服)(返回)--]]
MsgDef.Msg5030416 = {}
function MsgDef.Msg5030416:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:信息 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.lastTime = 0 --[[(int32) 活动剩余时间--]]
	msg.findTimes = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotData = {} --[[(array<int32>) 已领取奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030416:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.findTimes);
	sm:writeInt16(get_map_size(self.itemGotData))
	for i,elm in ipairs(self.itemGotData) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030416:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.lastTime = sm:readInt32();
	self.findTimes = sm:readInt32();
	local itemGotData_size = sm:readInt16()
	for i = 1,itemGotData_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotData, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030416:opcode()
	return 5030416
end
--[[ 请求圣印寻宝返还(合服)--]]
MsgDef.Msg1030417 = {}

function MsgDef.Msg1030417:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030417:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030417:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030417:opcode()
	return 1030417
end

--[[ 请求圣印寻宝返还(合服)(返回)--]]
MsgDef.Msg5030417 = {}
function MsgDef.Msg5030417:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示 1：领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.itemGotSigns = {} --[[(array<int32>) 已经领取的奖励--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030417:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.times);
	sm:writeInt16(get_map_size(self.itemGotSigns))
	for i,elm in ipairs(self.itemGotSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030417:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.times = sm:readInt32();
	local itemGotSigns_size = sm:readInt16()
	for i = 1,itemGotSigns_size do
		local ele = sm:readInt32();
		table.insert(self.itemGotSigns, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030417:opcode()
	return 5030417
end
--[[ 请求剑灵出世排行活动(合服)--]]
MsgDef.Msg1030418 = {}

function MsgDef.Msg1030418:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030418:encode(sm)
	return self
end

function MsgDef.Msg1030418:decode(sm)
	return self
end

function MsgDef.Msg1030418:opcode()
	return 1030418
end

--[[ 请求剑灵出世排行活动(合服)(返回)--]]
MsgDef.Msg5030418 = {}
function MsgDef.Msg5030418:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排行信息--]]
	return msg
end

function MsgDef.Msg5030418:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myPower);
	sm:writeInt32(self.myRank);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030418:decode(sm)
	self.lastTime = sm:readInt32();
	self.myPower = sm:readInt32();
	self.myRank = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030418:opcode()
	return 5030418
end
--[[ 请求圣印排行(合服)--]]
MsgDef.Msg1030419 = {}

function MsgDef.Msg1030419:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030419:encode(sm)
	return self
end

function MsgDef.Msg1030419:decode(sm)
	return self
end

function MsgDef.Msg1030419:opcode()
	return 1030419
end

--[[ 请求圣印排行(合服)(返回)--]]
MsgDef.Msg5030419 = {}
function MsgDef.Msg5030419:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.lastTime = 0 --[[(int32) 剩余活动时间--]]
	msg.myRank = 0 --[[(int32) 我的排名--]]
	msg.myPower = 0 --[[(int32) 我的战力--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030419:encode(sm)
	sm:writeInt32(self.lastTime);
	sm:writeInt32(self.myRank);
	sm:writeInt32(self.myPower);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030419:decode(sm)
	self.lastTime = sm:readInt32();
	self.myRank = sm:readInt32();
	self.myPower = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030419:opcode()
	return 5030419
end
--[[ 帝魂信息--]]
MsgDef.DHInfo = {}

function MsgDef.DHInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 帝魂类型--]]
	if msg.partInfo == nil then msg.partInfo = {} end --[[(array<DHPartInfo>) 部位信息--]]
	if msg.star == nil then msg.star = 0 end --[[(int32) 星数 （-1 表示没有激活）--]]
	if msg.point == nil then msg.point = 0 end --[[(int32) 圆点数（0-8）--]]
	if msg.possession == nil then msg.possession = 0 end --[[(int8) 是否附体 0：不附体  1：附体--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	return msg
end

function MsgDef.DHInfo:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt16(#self.partInfo)
	for i,elm in ipairs(self.partInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.star);
	sm:writeInt32(self.point);
	sm:writeInt8(self.possession);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.DHInfo:decode(sm)
	self.type = sm:readInt32();
	local partInfo_size = sm:readInt16()
	for i = 1,partInfo_size do
		local element = MsgDef.DHPartInfo:create():decode(sm)
		table.insert(self.partInfo, element)
	end
	self.star = sm:readInt32();
	self.point = sm:readInt32();
	self.possession = sm:readInt8();
	self.power = sm:readInt32();
	return self
end

function MsgDef.DHInfo:opcode()
	return "DHInfo"
end

--[[ 请求帝魂信息--]]
MsgDef.Msg1620101 = {}

function MsgDef.Msg1620101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1620101:encode(sm)
	return self
end

function MsgDef.Msg1620101:decode(sm)
	return self
end

function MsgDef.Msg1620101:opcode()
	return 1620101
end

--[[ 请求帝魂信息(返回)--]]
MsgDef.Msg5620101 = {}
function MsgDef.Msg5620101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.infos = {} --[[(array<DHInfo>) 帝魂信息--]]
	msg.colorScore = {} --[[(map<int32,int32>) 品质对应的积分--]]
	return msg
end

function MsgDef.Msg5620101:encode(sm)
	sm:writeInt16(#self.infos)
	for i,elm in ipairs(self.infos) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.colorScore))
	for kn,elm in ipairs(self.colorScore) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5620101:decode(sm)
	local infos_size = sm:readInt16()
	for i = 1,infos_size do
		local element = MsgDef.DHInfo:create():decode(sm)
		table.insert(self.infos, element)
	end
	local colorScore_size = sm:readInt16()
	for i = 1,colorScore_size do
		local kv = sm:readInt32();
		self.colorScore[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5620101:opcode()
	return 5620101
end
--[[ 请求点亮帝魂圆点--]]
MsgDef.Msg1620102 = {}

function MsgDef.Msg1620102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 帝魂类型--]]
	return msg
end

function MsgDef.Msg1620102:encode(sm)
	sm:writeInt32(self.reqType);
	return self
end

function MsgDef.Msg1620102:decode(sm)
	self.reqType = sm:readInt32();
	return self
end

function MsgDef.Msg1620102:opcode()
	return 1620102
end

--[[ 请求点亮帝魂圆点(返回)--]]
MsgDef.Msg5620102 = {}
function MsgDef.Msg5620102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 帝魂类型--]]
	msg.info = MsgDef.DHInfo:create() --[[(DHInfo) 改类型帝魂信息--]]
	return msg
end

function MsgDef.Msg5620102:encode(sm)
	sm:writeInt32(self.reqType);
	self.info:encode(sm)
	return self
end

function MsgDef.Msg5620102:decode(sm)
	self.reqType = sm:readInt32();
	self.info:decode(sm)
	return self
end


function MsgDef.Msg5620102:opcode()
	return 5620102
end
--[[ 请求附体--]]
MsgDef.Msg1620103 = {}

function MsgDef.Msg1620103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int32) 附体的帝魂类型--]]
	return msg
end

function MsgDef.Msg1620103:encode(sm)
	sm:writeInt32(self.reqType);
	return self
end

function MsgDef.Msg1620103:decode(sm)
	self.reqType = sm:readInt32();
	return self
end

function MsgDef.Msg1620103:opcode()
	return 1620103
end

--[[ 请求附体(返回)--]]
MsgDef.Msg5620103 = {}
function MsgDef.Msg5620103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int32) 附体的帝魂类型--]]
	msg.infos = {} --[[(array<DHInfo>) 帝魂信息--]]
	return msg
end

function MsgDef.Msg5620103:encode(sm)
	sm:writeInt32(self.reqType);
	sm:writeInt16(#self.infos)
	for i,elm in ipairs(self.infos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5620103:decode(sm)
	self.reqType = sm:readInt32();
	local infos_size = sm:readInt16()
	for i = 1,infos_size do
		local element = MsgDef.DHInfo:create():decode(sm)
		table.insert(self.infos, element)
	end
	return self
end


function MsgDef.Msg5620103:opcode()
	return 5620103
end
--[[ 帝魂部位信息--]]
MsgDef.DHPartInfo = {}

function MsgDef.DHPartInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	if msg.strenLevel == nil then msg.strenLevel = 0 end --[[(int32) 强化等级--]]
	if msg.item == nil then msg.item = MsgDef.ItemInfo:create() end --[[(ItemInfo) 魂饰--]]
	return msg
end

function MsgDef.DHPartInfo:encode(sm)
	sm:writeInt32(self.part);
	sm:writeInt32(self.strenLevel);
	self.item:encode(sm)
	return self
end

function MsgDef.DHPartInfo:decode(sm)
	self.part = sm:readInt32();
	self.strenLevel = sm:readInt32();
	self.item:decode(sm)
	return self
end

function MsgDef.DHPartInfo:opcode()
	return "DHPartInfo"
end

--[[ 请求帝魂魂饰穿戴--]]
MsgDef.Msg1620104 = {}

function MsgDef.Msg1620104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包位置--]]
	if msg.partInfos == nil then msg.partInfos = {} end --[[(array<int32>) 目标位置（1-4）--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 帝魂类型（1-5）--]]
	return msg
end

function MsgDef.Msg1620104:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.partInfos))
	for i,elm in ipairs(self.partInfos) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg1620104:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local partInfos_size = sm:readInt16()
	for i = 1,partInfos_size do
		local elm = sm:readInt32();
		table.insert(self.partInfos, elm)
	end
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg1620104:opcode()
	return 1620104
end

--[[ 请求帝魂魂饰穿戴(返回)--]]
MsgDef.Msg5620104 = {}
function MsgDef.Msg5620104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5620104:encode(sm)
	return self
end

function MsgDef.Msg5620104:decode(sm)
	return self
end


function MsgDef.Msg5620104:opcode()
	return 5620104
end
--[[ 请求帝魂强化--]]
MsgDef.Msg1620105 = {}

function MsgDef.Msg1620105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 帝魂类型--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	return msg
end

function MsgDef.Msg1620105:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg1620105:decode(sm)
	self.type = sm:readInt32();
	self.part = sm:readInt32();
	return self
end

function MsgDef.Msg1620105:opcode()
	return 1620105
end

--[[ 请求帝魂强化(返回)--]]
MsgDef.Msg5620105 = {}
function MsgDef.Msg5620105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int32) 帝魂类型--]]
	msg.part = 0 --[[(int32) 部位--]]
	msg.colorScore = {} --[[(map<int32,int32>) 品质对应的积分--]]
	msg.partInfo = MsgDef.DHPartInfo:create() --[[(DHPartInfo) 部位信息--]]
	return msg
end

function MsgDef.Msg5620105:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.part);
	sm:writeInt16(get_map_size(self.colorScore))
	for kn,elm in ipairs(self.colorScore) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	self.partInfo:encode(sm)
	return self
end

function MsgDef.Msg5620105:decode(sm)
	self.type = sm:readInt32();
	self.part = sm:readInt32();
	local colorScore_size = sm:readInt16()
	for i = 1,colorScore_size do
		local kv = sm:readInt32();
		self.colorScore[kv] = sm:readInt32();
	end
	self.partInfo:decode(sm)
	return self
end


function MsgDef.Msg5620105:opcode()
	return 5620105
end
--[[ 请求帝魂魂饰分解--]]
MsgDef.Msg1620106 = {}

function MsgDef.Msg1620106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 分解列表--]]
	return msg
end

function MsgDef.Msg1620106:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1620106:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1620106:opcode()
	return 1620106
end

--[[ 请求帝魂魂饰分解(返回)--]]
MsgDef.Msg5620106 = {}
function MsgDef.Msg5620106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.colorScore = {} --[[(map<int32,int32>) 品质对应的积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 分解后获得--]]
	return msg
end

function MsgDef.Msg5620106:encode(sm)
	sm:writeInt16(get_map_size(self.colorScore))
	for kn,elm in ipairs(self.colorScore) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5620106:decode(sm)
	local colorScore_size = sm:readInt16()
	for i = 1,colorScore_size do
		local kv = sm:readInt32();
		self.colorScore[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5620106:opcode()
	return 5620106
end
--[[ 请求帝魂升星激活--]]
MsgDef.Msg1620107 = {}

function MsgDef.Msg1620107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：激活 1：升星--]]
	if msg.DhType == nil then msg.DhType = 0 end --[[(int32) 帝魂类型--]]
	return msg
end

function MsgDef.Msg1620107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.DhType);
	return self
end

function MsgDef.Msg1620107:decode(sm)
	self.reqType = sm:readInt8();
	self.DhType = sm:readInt32();
	return self
end

function MsgDef.Msg1620107:opcode()
	return 1620107
end

--[[ 请求帝魂升星激活(返回)--]]
MsgDef.Msg5620107 = {}
function MsgDef.Msg5620107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：激活 1：升星--]]
	msg.DhType = 0 --[[(int32) 帝魂类型--]]
	msg.info = MsgDef.DHInfo:create() --[[(DHInfo) 帝魂信息--]]
	return msg
end

function MsgDef.Msg5620107:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.DhType);
	self.info:encode(sm)
	return self
end

function MsgDef.Msg5620107:decode(sm)
	self.reqType = sm:readInt8();
	self.DhType = sm:readInt32();
	self.info:decode(sm)
	return self
end


function MsgDef.Msg5620107:opcode()
	return 5620107
end
--[[ 帝魂任务信息--]]
MsgDef.DHTaskInfo = {}

function MsgDef.DHTaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 任务大类--]]
	if msg.subType == nil then msg.subType = 0 end --[[(int32) 任务子类--]]
	if msg.finishTime == nil then msg.finishTime = 0 end --[[(int32) 任务完成情况--]]
	return msg
end

function MsgDef.DHTaskInfo:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.subType);
	sm:writeInt32(self.finishTime);
	return self
end

function MsgDef.DHTaskInfo:decode(sm)
	self.type = sm:readInt32();
	self.subType = sm:readInt32();
	self.finishTime = sm:readInt32();
	return self
end

function MsgDef.DHTaskInfo:opcode()
	return "DHTaskInfo"
end

--[[ 请求帝魂任务信息--]]
MsgDef.Msg1620108 = {}

function MsgDef.Msg1620108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1620108:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1620108:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1620108:opcode()
	return 1620108
end

--[[ 请求帝魂任务信息(返回)--]]
MsgDef.Msg5620108 = {}
function MsgDef.Msg5620108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.taskInfo = {} --[[(map<int32,int32>) 任务信息--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.reqType = 0 --[[(int8) 0：显示  1：领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.leftTime = 0 --[[(int32) 剩余秒数--]]
	return msg
end

function MsgDef.Msg5620108:encode(sm)
	sm:writeInt16(get_map_size(self.taskInfo))
	for kn,elm in ipairs(self.taskInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5620108:decode(sm)
	local taskInfo_size = sm:readInt16()
	for i = 1,taskInfo_size do
		local kv = sm:readInt32();
		self.taskInfo[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5620108:opcode()
	return 5620108
end
--[[ 请求帝魂召唤--]]
MsgDef.Msg1030659 = {}

function MsgDef.Msg1030659:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 抽奖类型1-3--]]
	return msg
end

function MsgDef.Msg1030659:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030659:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030659:opcode()
	return 1030659
end

--[[ 请求帝魂召唤(返回)--]]
MsgDef.Msg5030659 = {}
function MsgDef.Msg5030659:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.cid = 0 --[[(int32) 抽奖类型1-3--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030659:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030659:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030659:opcode()
	return 5030659
end
--[[ 请求宝石抛光--]]
MsgDef.Msg1100117 = {}

function MsgDef.Msg1100117:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.part == nil then msg.part = 0 end --[[(int8) 部位--]]
	if msg.hole == nil then msg.hole = 0 end --[[(int8) 孔位 1-6--]]
	return msg
end

function MsgDef.Msg1100117:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt8(self.hole);
	return self
end

function MsgDef.Msg1100117:decode(sm)
	self.part = sm:readInt8();
	self.hole = sm:readInt8();
	return self
end

function MsgDef.Msg1100117:opcode()
	return 1100117
end

--[[ 请求宝石抛光(返回)--]]
MsgDef.Msg5100117 = {}
function MsgDef.Msg5100117:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.part = 0 --[[(int8) 部位--]]
	msg.hole = 0 --[[(int8) 孔位 1-6--]]
	msg.partInfo = MsgDef.PartInfo:create() --[[(PartInfo) 部位信息--]]
	return msg
end

function MsgDef.Msg5100117:encode(sm)
	sm:writeInt8(self.part);
	sm:writeInt8(self.hole);
	self.partInfo:encode(sm)
	return self
end

function MsgDef.Msg5100117:decode(sm)
	self.part = sm:readInt8();
	self.hole = sm:readInt8();
	self.partInfo:decode(sm)
	return self
end


function MsgDef.Msg5100117:opcode()
	return 5100117
end
--[[ 宝石属性--]]
MsgDef.GemAttri = {}

function MsgDef.GemAttri:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.gemType == nil then msg.gemType = 0 end --[[(int32) 宝石类型--]]
	if msg.polishLev == nil then msg.polishLev = 0 end --[[(int32) 抛光度等级--]]
	if msg.polish == nil then msg.polish = 0 end --[[(int32) 抛光度--]]
	return msg
end

function MsgDef.GemAttri:encode(sm)
	sm:writeInt32(self.gemType);
	sm:writeInt32(self.polishLev);
	sm:writeInt32(self.polish);
	return self
end

function MsgDef.GemAttri:decode(sm)
	self.gemType = sm:readInt32();
	self.polishLev = sm:readInt32();
	self.polish = sm:readInt32();
	return self
end

function MsgDef.GemAttri:opcode()
	return "GemAttri"
end

--[[ 请求双十二登录奖励--]]
MsgDef.Msg1030660 = {}

function MsgDef.Msg1030660:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取登录奖励 2：领取充值奖励--]]
	return msg
end

function MsgDef.Msg1030660:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030660:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030660:opcode()
	return 1030660
end

--[[ 请求双十二登录奖励(返回)--]]
MsgDef.Msg5030660 = {}
function MsgDef.Msg5030660:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取登录奖励 2：领取充值奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030660:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030660:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030660:opcode()
	return 5030660
end
--[[ 请求双十二特惠满减--]]
MsgDef.Msg1030661 = {}

function MsgDef.Msg1030661:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买--]]
	if msg.buyItem == nil then msg.buyItem = {} end --[[(array<int32>) 购买的道具id--]]
	if msg.offerId == nil then msg.offerId = 0 end --[[(int32) 优惠券id（1-？）--]]
	if msg.buyNum == nil then msg.buyNum = {} end --[[(array<int32>) 购买的道具数量--]]
	return msg
end

function MsgDef.Msg1030661:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.buyItem))
	for i,elm in ipairs(self.buyItem) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.offerId);
	sm:writeInt16(get_map_size(self.buyNum))
	for i,elm in ipairs(self.buyNum) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1030661:decode(sm)
	self.reqType = sm:readInt8();
	local buyItem_size = sm:readInt16()
	for i = 1,buyItem_size do
		local elm = sm:readInt32();
		table.insert(self.buyItem, elm)
	end
	self.offerId = sm:readInt32();
	local buyNum_size = sm:readInt16()
	for i = 1,buyNum_size do
		local elm = sm:readInt32();
		table.insert(self.buyNum, elm)
	end
	return self
end

function MsgDef.Msg1030661:opcode()
	return 1030661
end

--[[ 请求双十二特惠满减(返回)--]]
MsgDef.Msg5030661 = {}
function MsgDef.Msg5030661:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：购买--]]
	msg.buyItem = {} --[[(array<int32>) 购买的道具id和数量--]]
	msg.offerId = 0 --[[(int32) 优惠券道具id（1-？）--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 道具--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.buyNum = {} --[[(array<int32>) 购买的道具数量--]]
	return msg
end

function MsgDef.Msg5030661:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.buyItem))
	for i,elm in ipairs(self.buyItem) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.offerId);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(get_map_size(self.buyNum))
	for i,elm in ipairs(self.buyNum) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030661:decode(sm)
	self.reqType = sm:readInt8();
	local buyItem_size = sm:readInt16()
	for i = 1,buyItem_size do
		local ele = sm:readInt32();
		table.insert(self.buyItem, ele)
	end
	self.offerId = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local buyNum_size = sm:readInt16()
	for i = 1,buyNum_size do
		local ele = sm:readInt32();
		table.insert(self.buyNum, ele)
	end
	return self
end


function MsgDef.Msg5030661:opcode()
	return 5030661
end
--[[ 请求双十二单笔狂欢--]]
MsgDef.Msg1030662 = {}

function MsgDef.Msg1030662:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030662:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030662:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030662:opcode()
	return 1030662
end

--[[ 请求双十二单笔狂欢(返回)--]]
MsgDef.Msg5030662 = {}
function MsgDef.Msg5030662:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的道具--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.quotaMap = {} --[[(map<int32,int32>) 额度数据--]]
	return msg
end

function MsgDef.Msg5030662:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt16(get_map_size(self.quotaMap))
	for kn,elm in ipairs(self.quotaMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030662:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actEndTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	local quotaMap_size = sm:readInt16()
	for i = 1,quotaMap_size do
		local kv = sm:readInt32();
		self.quotaMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030662:opcode()
	return 5030662
end
--[[ 面具小类信息--]]
MsgDef.MaskSubInfo = {}

function MsgDef.MaskSubInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.id == nil then msg.id = 0 end --[[(int32) 面具小类道具id--]]
	if msg.activation == nil then msg.activation = 0 end --[[(int8) 是否激活 0 未激活 1激活--]]
	if msg.starNum == nil then msg.starNum = 0 end --[[(int32) 星数 （从0开始）--]]
	if msg.wear == nil then msg.wear = 0 end --[[(int8) 是否幻化穿戴--]]
	if msg.elements == nil then msg.elements = {} end --[[(map<int32,int32>) 附魔的元素--]]
	if msg.fmLevel == nil then msg.fmLevel = 0 end --[[(int32) 附魔的等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	return msg
end

function MsgDef.MaskSubInfo:encode(sm)
	sm:writeInt32(self.id);
	sm:writeInt8(self.activation);
	sm:writeInt32(self.starNum);
	sm:writeInt8(self.wear);
	sm:writeInt16(get_map_size(self.elements))
	for kn,elm in ipairs(self.elements) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.fmLevel);
	sm:writeInt32(self.power);
	return self
end

function MsgDef.MaskSubInfo:decode(sm)
	self.id = sm:readInt32();
	self.activation = sm:readInt8();
	self.starNum = sm:readInt32();
	self.wear = sm:readInt8();
	local elements_size = sm:readInt16()
	for i = 1,elements_size do
		local kv = sm:readInt32();
		self.elements[kv] = sm:readInt32();
	end
	self.fmLevel = sm:readInt32();
	self.power = sm:readInt32();
	return self
end

function MsgDef.MaskSubInfo:opcode()
	return "MaskSubInfo"
end

--[[ 面具信息--]]
MsgDef.MaskInfo = {}

function MsgDef.MaskInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	if msg.maskSunInfos == nil then msg.maskSunInfos = {} end --[[(array<MaskSubInfo>) 面具小类信息--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 面具等级--]]
	if msg.growInfo == nil then msg.growInfo = {} end --[[(map<int32,int32>) 成长丹使用情况 （id - num）--]]
	if msg.exp  == nil then msg.exp  = 0 end --[[(int32) 经验--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	return msg
end

function MsgDef.MaskInfo:encode(sm)
	sm:writeInt32(self.maskType);
	sm:writeInt16(#self.maskSunInfos)
	for i,elm in ipairs(self.maskSunInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.level);
	sm:writeInt16(get_map_size(self.growInfo))
	for kn,elm in ipairs(self.growInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.exp );
	sm:writeInt32(self.power);
	return self
end

function MsgDef.MaskInfo:decode(sm)
	self.maskType = sm:readInt32();
	local maskSunInfos_size = sm:readInt16()
	for i = 1,maskSunInfos_size do
		local element = MsgDef.MaskSubInfo:create():decode(sm)
		table.insert(self.maskSunInfos, element)
	end
	self.level = sm:readInt32();
	local growInfo_size = sm:readInt16()
	for i = 1,growInfo_size do
		local kv = sm:readInt32();
		self.growInfo[kv] = sm:readInt32();
	end
	self.exp  = sm:readInt32();
	self.power = sm:readInt32();
	return self
end

function MsgDef.MaskInfo:opcode()
	return "MaskInfo"
end

--[[ 请求面具信息--]]
MsgDef.Msg1630101 = {}

function MsgDef.Msg1630101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1630101:encode(sm)
	return self
end

function MsgDef.Msg1630101:decode(sm)
	return self
end

function MsgDef.Msg1630101:opcode()
	return 1630101
end

--[[ 请求面具信息(返回)--]]
MsgDef.Msg5630101 = {}
function MsgDef.Msg5630101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskInfos = {} --[[(array<MaskInfo>) 面具信息--]]
	return msg
end

function MsgDef.Msg5630101:encode(sm)
	sm:writeInt16(#self.maskInfos)
	for i,elm in ipairs(self.maskInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5630101:decode(sm)
	local maskInfos_size = sm:readInt16()
	for i = 1,maskInfos_size do
		local element = MsgDef.MaskInfo:create():decode(sm)
		table.insert(self.maskInfos, element)
	end
	return self
end


function MsgDef.Msg5630101:opcode()
	return 5630101
end
--[[ 请求面具升级--]]
MsgDef.Msg1630102 = {}

function MsgDef.Msg1630102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 消耗的道具id--]]
	return msg
end

function MsgDef.Msg1630102:encode(sm)
	sm:writeInt32(self.maskType);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1630102:decode(sm)
	self.maskType = sm:readInt32();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1630102:opcode()
	return 1630102
end

--[[ 请求面具升级(返回)--]]
MsgDef.Msg5630102 = {}
function MsgDef.Msg5630102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskType = 0 --[[(int32) 面具类型--]]
	msg.itemId = 0 --[[(int32) 消耗的道具id--]]
	msg.level = 0 --[[(int32) 等级--]]
	msg.exp  = 0 --[[(int32) 经验--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5630102:encode(sm)
	sm:writeInt32(self.maskType);
	sm:writeInt32(self.itemId);
	sm:writeInt32(self.level);
	sm:writeInt32(self.exp );
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5630102:decode(sm)
	self.maskType = sm:readInt32();
	self.itemId = sm:readInt32();
	self.level = sm:readInt32();
	self.exp  = sm:readInt32();
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5630102:opcode()
	return 5630102
end
--[[ 请求使用成长丹--]]
MsgDef.Msg1630103 = {}

function MsgDef.Msg1630103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	if msg.itemId == nil then msg.itemId = 0 end --[[(int32) 道具id--]]
	return msg
end

function MsgDef.Msg1630103:encode(sm)
	sm:writeInt32(self.maskType);
	sm:writeInt32(self.itemId);
	return self
end

function MsgDef.Msg1630103:decode(sm)
	self.maskType = sm:readInt32();
	self.itemId = sm:readInt32();
	return self
end

function MsgDef.Msg1630103:opcode()
	return 1630103
end

--[[ 请求使用成长丹(返回)--]]
MsgDef.Msg5630103 = {}
function MsgDef.Msg5630103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskType = 0 --[[(int32) 面具类型--]]
	msg.itemId = 0 --[[(int32) 道具id--]]
	msg.growInfo = {} --[[(map<int32,int32>) 成长丹使用情况--]]
	msg.power = 0 --[[(int32) 战力--]]
	return msg
end

function MsgDef.Msg5630103:encode(sm)
	sm:writeInt32(self.maskType);
	sm:writeInt32(self.itemId);
	sm:writeInt16(get_map_size(self.growInfo))
	for kn,elm in ipairs(self.growInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.power);
	return self
end

function MsgDef.Msg5630103:decode(sm)
	self.maskType = sm:readInt32();
	self.itemId = sm:readInt32();
	local growInfo_size = sm:readInt16()
	for i = 1,growInfo_size do
		local kv = sm:readInt32();
		self.growInfo[kv] = sm:readInt32();
	end
	self.power = sm:readInt32();
	return self
end


function MsgDef.Msg5630103:opcode()
	return 5630103
end
--[[ 请求面具升星--]]
MsgDef.Msg1630104 = {}

function MsgDef.Msg1630104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.maskId == nil then msg.maskId = 0 end --[[(int32) 面具id--]]
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	return msg
end

function MsgDef.Msg1630104:encode(sm)
	sm:writeInt32(self.maskId);
	sm:writeInt32(self.maskType);
	return self
end

function MsgDef.Msg1630104:decode(sm)
	self.maskId = sm:readInt32();
	self.maskType = sm:readInt32();
	return self
end

function MsgDef.Msg1630104:opcode()
	return 1630104
end

--[[ 请求面具升星(返回)--]]
MsgDef.Msg5630104 = {}
function MsgDef.Msg5630104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskInfo = MsgDef.MaskSubInfo:create() --[[(MaskSubInfo) 当前面具信息--]]
	return msg
end

function MsgDef.Msg5630104:encode(sm)
	self.maskInfo:encode(sm)
	return self
end

function MsgDef.Msg5630104:decode(sm)
	self.maskInfo:decode(sm)
	return self
end


function MsgDef.Msg5630104:opcode()
	return 5630104
end
--[[ 请求幻化--]]
MsgDef.Msg1630105 = {}

function MsgDef.Msg1630105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：幻化  1：取消幻化--]]
	if msg.maskId == nil then msg.maskId = 0 end --[[(int32) 面具id--]]
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	return msg
end

function MsgDef.Msg1630105:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.maskId);
	sm:writeInt32(self.maskType);
	return self
end

function MsgDef.Msg1630105:decode(sm)
	self.reqType = sm:readInt8();
	self.maskId = sm:readInt32();
	self.maskType = sm:readInt32();
	return self
end

function MsgDef.Msg1630105:opcode()
	return 1630105
end

--[[ 请求幻化(返回)--]]
MsgDef.Msg5630105 = {}
function MsgDef.Msg5630105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskInfos = {} --[[(array<MaskInfo>) 面具信息--]]
	return msg
end

function MsgDef.Msg5630105:encode(sm)
	sm:writeInt16(#self.maskInfos)
	for i,elm in ipairs(self.maskInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5630105:decode(sm)
	local maskInfos_size = sm:readInt16()
	for i = 1,maskInfos_size do
		local element = MsgDef.MaskInfo:create():decode(sm)
		table.insert(self.maskInfos, element)
	end
	return self
end


function MsgDef.Msg5630105:opcode()
	return 5630105
end
--[[ 请求附魔--]]
MsgDef.Msg1630106 = {}

function MsgDef.Msg1630106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：附魔  1：提升--]]
	if msg.maskId == nil then msg.maskId = 0 end --[[(int32) 面具id--]]
	if msg.maskType == nil then msg.maskType = 0 end --[[(int32) 面具类型--]]
	return msg
end

function MsgDef.Msg1630106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.maskId);
	sm:writeInt32(self.maskType);
	return self
end

function MsgDef.Msg1630106:decode(sm)
	self.reqType = sm:readInt8();
	self.maskId = sm:readInt32();
	self.maskType = sm:readInt32();
	return self
end

function MsgDef.Msg1630106:opcode()
	return 1630106
end

--[[ 请求附魔(返回)--]]
MsgDef.Msg5630106 = {}
function MsgDef.Msg5630106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.maskInfo = MsgDef.MaskSubInfo:create() --[[(MaskSubInfo) 面具小类信息--]]
	return msg
end

function MsgDef.Msg5630106:encode(sm)
	self.maskInfo:encode(sm)
	return self
end

function MsgDef.Msg5630106:decode(sm)
	self.maskInfo:decode(sm)
	return self
end


function MsgDef.Msg5630106:opcode()
	return 5630106
end
--[[ 请求遗迹探索信息--]]
MsgDef.Msg1640101 = {}

function MsgDef.Msg1640101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1640101:encode(sm)
	return self
end

function MsgDef.Msg1640101:decode(sm)
	return self
end

function MsgDef.Msg1640101:opcode()
	return 1640101
end

--[[ 请求遗迹探索信息(返回)--]]
MsgDef.Msg5640101 = {}
function MsgDef.Msg5640101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.exploreCount = 0 --[[(int32) 探索次数--]]
	msg.logs = {} --[[(array<string>) 日志--]]
	msg.buyCount = 0 --[[(int32) 探索已购买次数--]]
	msg.robbingCount = 0 --[[(int32) 掠夺次数--]]
	msg.robbingBuyCount = 0 --[[(int32) 掠夺购买次数--]]
	return msg
end

function MsgDef.Msg5640101:encode(sm)
	sm:writeInt32(self.exploreCount);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.buyCount);
	sm:writeInt32(self.robbingCount);
	sm:writeInt32(self.robbingBuyCount);
	return self
end

function MsgDef.Msg5640101:decode(sm)
	self.exploreCount = sm:readInt32();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.buyCount = sm:readInt32();
	self.robbingCount = sm:readInt32();
	self.robbingBuyCount = sm:readInt32();
	return self
end


function MsgDef.Msg5640101:opcode()
	return 5640101
end
--[[ 请求购买次数--]]
MsgDef.Msg1640102 = {}

function MsgDef.Msg1640102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：探索次数  1：掠夺次数--]]
	return msg
end

function MsgDef.Msg1640102:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1640102:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1640102:opcode()
	return 1640102
end

--[[ 请求购买次数(返回)--]]
MsgDef.Msg5640102 = {}
function MsgDef.Msg5640102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.count = 0 --[[(int32) 次数--]]
	msg.buyCount = 0 --[[(int32) 已购次数--]]
	msg.reqType = 0 --[[(int8) 0：探索次数  1：掠夺次数--]]
	return msg
end

function MsgDef.Msg5640102:encode(sm)
	sm:writeInt32(self.count);
	sm:writeInt32(self.buyCount);
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg5640102:decode(sm)
	self.count = sm:readInt32();
	self.buyCount = sm:readInt32();
	self.reqType = sm:readInt8();
	return self
end


function MsgDef.Msg5640102:opcode()
	return 5640102
end
--[[ 请求遗迹探索场景信息--]]
MsgDef.Msg1640103 = {}

function MsgDef.Msg1640103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cityId == nil then msg.cityId = 0 end --[[(int32) 城池id--]]
	return msg
end

function MsgDef.Msg1640103:encode(sm)
	sm:writeInt32(self.cityId);
	return self
end

function MsgDef.Msg1640103:decode(sm)
	self.cityId = sm:readInt32();
	return self
end

function MsgDef.Msg1640103:opcode()
	return 1640103
end

--[[ 请求遗迹探索场景信息(返回)--]]
MsgDef.Msg5640103 = {}
function MsgDef.Msg5640103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.playerInfos = {} --[[(array<YjtsPlayerInfo>) 玩家信息--]]
	msg.myInfo = MsgDef.YjtsPlayerInfo:create() --[[(YjtsPlayerInfo) 我的探索信息--]]
	msg.startTime = 0 --[[(int32) 探索开始时间，若0，则没有探索--]]
	msg.lastRobTime = 0 --[[(int32) 上次掠夺时间--]]
	msg.cityId = 0 --[[(int32) 城池id--]]
	return msg
end

function MsgDef.Msg5640103:encode(sm)
	sm:writeInt16(#self.playerInfos)
	for i,elm in ipairs(self.playerInfos) do
		elm:encode(sm)
	end
	self.myInfo:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.lastRobTime);
	sm:writeInt32(self.cityId);
	return self
end

function MsgDef.Msg5640103:decode(sm)
	local playerInfos_size = sm:readInt16()
	for i = 1,playerInfos_size do
		local element = MsgDef.YjtsPlayerInfo:create():decode(sm)
		table.insert(self.playerInfos, element)
	end
	self.myInfo:decode(sm)
	self.startTime = sm:readInt32();
	self.lastRobTime = sm:readInt32();
	self.cityId = sm:readInt32();
	return self
end


function MsgDef.Msg5640103:opcode()
	return 5640103
end
--[[ 请求开始探索--]]
MsgDef.Msg1640104 = {}

function MsgDef.Msg1640104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cityId == nil then msg.cityId = 0 end --[[(int32) 城池id--]]
	if msg.holeId == nil then msg.holeId = 0 end --[[(int32) 坑id--]]
	return msg
end

function MsgDef.Msg1640104:encode(sm)
	sm:writeInt32(self.cityId);
	sm:writeInt32(self.holeId);
	return self
end

function MsgDef.Msg1640104:decode(sm)
	self.cityId = sm:readInt32();
	self.holeId = sm:readInt32();
	return self
end

function MsgDef.Msg1640104:opcode()
	return 1640104
end

--[[ 请求开始探索(返回)--]]
MsgDef.Msg5640104 = {}
function MsgDef.Msg5640104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.startTime = 0 --[[(int32) 探索开始时间--]]
	msg.cityId = 0 --[[(int32) 城池id--]]
	msg.holeId = 0 --[[(int32) 坑id--]]
	return msg
end

function MsgDef.Msg5640104:encode(sm)
	sm:writeInt32(self.startTime);
	sm:writeInt32(self.cityId);
	sm:writeInt32(self.holeId);
	return self
end

function MsgDef.Msg5640104:decode(sm)
	self.startTime = sm:readInt32();
	self.cityId = sm:readInt32();
	self.holeId = sm:readInt32();
	return self
end


function MsgDef.Msg5640104:opcode()
	return 5640104
end
--[[ 请求快速完成--]]
MsgDef.Msg1640105 = {}

function MsgDef.Msg1640105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cityId == nil then msg.cityId = 0 end --[[(int32) 城池id--]]
	return msg
end

function MsgDef.Msg1640105:encode(sm)
	sm:writeInt32(self.cityId);
	return self
end

function MsgDef.Msg1640105:decode(sm)
	self.cityId = sm:readInt32();
	return self
end

function MsgDef.Msg1640105:opcode()
	return 1640105
end

--[[ 请求快速完成(返回)--]]
MsgDef.Msg5640105 = {}
function MsgDef.Msg5640105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 剩余时间（服务器）--]]
	return msg
end

function MsgDef.Msg5640105:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5640105:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5640105:opcode()
	return 5640105
end
--[[ 请求领取奖励--]]
MsgDef.Msg1640106 = {}

function MsgDef.Msg1640106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1640106:encode(sm)
	return self
end

function MsgDef.Msg1640106:decode(sm)
	return self
end

function MsgDef.Msg1640106:opcode()
	return 1640106
end

--[[ 请求领取奖励(返回)--]]
MsgDef.Msg5640106 = {}
function MsgDef.Msg5640106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 领取奖励--]]
	return msg
end

function MsgDef.Msg5640106:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5640106:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5640106:opcode()
	return 5640106
end
--[[ 请求清除冷却时间--]]
MsgDef.Msg1640108 = {}

function MsgDef.Msg1640108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1640108:encode(sm)
	return self
end

function MsgDef.Msg1640108:decode(sm)
	return self
end

function MsgDef.Msg1640108:opcode()
	return 1640108
end

--[[ 请求清除冷却时间(返回)--]]
MsgDef.Msg5640108 = {}
function MsgDef.Msg5640108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5640108:encode(sm)
	return self
end

function MsgDef.Msg5640108:decode(sm)
	return self
end


function MsgDef.Msg5640108:opcode()
	return 5640108
end
--[[ 请求冬至登录奖励--]]
MsgDef.Msg1030663 = {}

function MsgDef.Msg1030663:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取登录奖励 2：领取充值奖励--]]
	return msg
end

function MsgDef.Msg1030663:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030663:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030663:opcode()
	return 1030663
end

--[[ 请求冬至登录奖励(返回)--]]
MsgDef.Msg5030663 = {}
function MsgDef.Msg5030663:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取登录奖励 2：领取充值奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030663:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030663:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030663:opcode()
	return 5030663
end
--[[ 请求冬至boss剩余时间--]]
MsgDef.Msg1030664 = {}

function MsgDef.Msg1030664:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030664:encode(sm)
	return self
end

function MsgDef.Msg1030664:decode(sm)
	return self
end

function MsgDef.Msg1030664:opcode()
	return 1030664
end

--[[ 请求冬至boss剩余时间(返回)--]]
MsgDef.Msg5030664 = {}
function MsgDef.Msg5030664:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030664:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030664:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030664:opcode()
	return 5030664
end
--[[ 请求冬至兑换活动--]]
MsgDef.Msg1030665 = {}

function MsgDef.Msg1030665:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030665:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030665:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030665:opcode()
	return 1030665
end

--[[ 请求冬至兑换活动(返回)--]]
MsgDef.Msg5030665 = {}
function MsgDef.Msg5030665:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	return msg
end

function MsgDef.Msg5030665:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.actStartTime);
	return self
end

function MsgDef.Msg5030665:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actEndTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030665:opcode()
	return 5030665
end
--[[ 请求冬至抽奖活动--]]
MsgDef.Msg1030666 = {}

function MsgDef.Msg1030666:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次 3：抽五十次 4：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030666:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030666:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030666:opcode()
	return 1030666
end

--[[ 请求冬至抽奖活动(返回)--]]
MsgDef.Msg5030666 = {}
function MsgDef.Msg5030666:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次 3：抽五十次--]]
	msg.lotteryCount = 0 --[[(int32) 已抽奖次数--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.gotSign = {} --[[(array<int32>) 是否已经领取（额度）--]]
	return msg
end

function MsgDef.Msg5030666:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.lotteryCount);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(get_map_size(self.gotSign))
	for i,elm in ipairs(self.gotSign) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030666:decode(sm)
	self.reqType = sm:readInt8();
	self.lotteryCount = sm:readInt32();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local gotSign_size = sm:readInt16()
	for i = 1,gotSign_size do
		local ele = sm:readInt32();
		table.insert(self.gotSign, ele)
	end
	return self
end


function MsgDef.Msg5030666:opcode()
	return 5030666
end
--[[ 请求冬至连充活动--]]
MsgDef.Msg1030667 = {}

function MsgDef.Msg1030667:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030667:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030667:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030667:opcode()
	return 1030667
end

--[[ 请求冬至连充活动(返回)--]]
MsgDef.Msg5030667 = {}
function MsgDef.Msg5030667:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.rechargeSum = 0 --[[(int32) 充值的元宝数--]]
	msg.got = 0 --[[(int8) 当天是否领取--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030667:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.rechargeSum);
	sm:writeInt8(self.got);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030667:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	self.got = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030667:opcode()
	return 5030667
end
--[[ 请求圣诞福利活动--]]
MsgDef.Msg1030668 = {}

function MsgDef.Msg1030668:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cfgId == nil then msg.cfgId = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030668:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	return self
end

function MsgDef.Msg1030668:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	return self
end

function MsgDef.Msg1030668:opcode()
	return 1030668
end

--[[ 请求圣诞福利活动(返回)--]]
MsgDef.Msg5030668 = {}
function MsgDef.Msg5030668:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cfgId = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.czSum = 0 --[[(int32) 累计充值的元宝数--]]
	return msg
end

function MsgDef.Msg5030668:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cfgId);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.czSum);
	return self
end

function MsgDef.Msg5030668:decode(sm)
	self.reqType = sm:readInt8();
	self.cfgId = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.czSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030668:opcode()
	return 5030668
end
--[[ 遗迹探索玩家信息--]]
MsgDef.YjtsPlayerInfo = {}

function MsgDef.YjtsPlayerInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家roleId--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 玩家战力--]]
	if msg.skins == nil then msg.skins = {} end --[[(map<int32,int32>) 玩家皮肤--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 头像--]]
	if msg.currHp == nil then msg.currHp = 0 end --[[(int32) 当前血--]]
	if msg.maxHp == nil then msg.maxHp = 0 end --[[(int32) 最大血--]]
	if msg.packItems == nil then msg.packItems = {} end --[[(array<SimpleItemInfo>) 玩家背包道具--]]
	if msg.holeId == nil then msg.holeId = 0 end --[[(int32) 坑坑坑id--]]
	if msg.cityId == nil then msg.cityId = 0 end --[[(int32) 当前探索城池id--]]
	return msg
end

function MsgDef.YjtsPlayerInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeString(self.roleName);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.skins))
	for kn,elm in ipairs(self.skins) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.currHp);
	sm:writeInt32(self.maxHp);
	sm:writeInt16(#self.packItems)
	for i,elm in ipairs(self.packItems) do
		elm:encode(sm)
	end
	sm:writeInt32(self.holeId);
	sm:writeInt32(self.cityId);
	return self
end

function MsgDef.YjtsPlayerInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.roleName = sm:readString();
	self.power = sm:readInt32();
	local skins_size = sm:readInt16()
	for i = 1,skins_size do
		local kv = sm:readInt32();
		self.skins[kv] = sm:readInt32();
	end
	self.roleIcon = sm:readInt32();
	self.currHp = sm:readInt32();
	self.maxHp = sm:readInt32();
	local packItems_size = sm:readInt16()
	for i = 1,packItems_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.packItems, element)
	end
	self.holeId = sm:readInt32();
	self.cityId = sm:readInt32();
	return self
end

function MsgDef.YjtsPlayerInfo:opcode()
	return "YjtsPlayerInfo"
end

--[[ 请求掠夺--]]
MsgDef.Msg1640107 = {}

function MsgDef.Msg1640107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 掠夺玩家id--]]
	if msg.cityId == nil then msg.cityId = 0 end --[[(int32) 城池id--]]
	return msg
end

function MsgDef.Msg1640107:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.cityId);
	return self
end

function MsgDef.Msg1640107:decode(sm)
	self.roleId = sm:readInt64();
	self.cityId = sm:readInt32();
	return self
end

function MsgDef.Msg1640107:opcode()
	return 1640107
end

--[[ 请求掠夺(返回)--]]
MsgDef.Msg5640107 = {}
function MsgDef.Msg5640107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5640107:encode(sm)
	return self
end

function MsgDef.Msg5640107:decode(sm)
	return self
end


function MsgDef.Msg5640107:opcode()
	return 5640107
end
--[[ 请求许愿圣诞树--]]
MsgDef.Msg1030669 = {}

function MsgDef.Msg1030669:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030669:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030669:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030669:opcode()
	return 1030669
end

--[[ 请求许愿圣诞树(返回)--]]
MsgDef.Msg5030669 = {}
function MsgDef.Msg5030669:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	return msg
end

function MsgDef.Msg5030669:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg5030669:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	return self
end


function MsgDef.Msg5030669:opcode()
	return 5030669
end
--[[ 请求圣诞登录活动--]]
MsgDef.Msg1030670 = {}

function MsgDef.Msg1030670:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取登录奖励 2：领取累充奖励--]]
	return msg
end

function MsgDef.Msg1030670:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030670:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030670:opcode()
	return 1030670
end

--[[ 请求圣诞登录活动(返回)--]]
MsgDef.Msg5030670 = {}
function MsgDef.Msg5030670:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取登录奖励 2：领取累充奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030670:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030670:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030670:opcode()
	return 5030670
end
--[[ 请求圣诞宝树活动--]]
MsgDef.Msg1030671 = {}

function MsgDef.Msg1030671:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030671:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030671:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030671:opcode()
	return 1030671
end

--[[ 请求圣诞宝树活动(返回)--]]
MsgDef.Msg5030671 = {}
function MsgDef.Msg5030671:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.taskInfo = {} --[[(map<int32,int32>) 任务完成情况--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030671:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.taskInfo))
	for kn,elm in ipairs(self.taskInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030671:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local taskInfo_size = sm:readInt16()
	for i = 1,taskInfo_size do
		local kv = sm:readInt32();
		self.taskInfo[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030671:opcode()
	return 5030671
end
--[[ 请求圣诞boss剩余时间--]]
MsgDef.Msg1030672 = {}

function MsgDef.Msg1030672:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030672:encode(sm)
	return self
end

function MsgDef.Msg1030672:decode(sm)
	return self
end

function MsgDef.Msg1030672:opcode()
	return 1030672
end

--[[ 请求圣诞boss剩余时间(返回)--]]
MsgDef.Msg5030672 = {}
function MsgDef.Msg5030672:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030672:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030672:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030672:opcode()
	return 5030672
end
--[[ 请求圣诞兑换--]]
MsgDef.Msg1030673 = {}

function MsgDef.Msg1030673:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030673:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030673:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030673:opcode()
	return 1030673
end

--[[ 请求圣诞兑换(返回)--]]
MsgDef.Msg5030673 = {}
function MsgDef.Msg5030673:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.canExchangeTimes = {} --[[(map<int32,int32>) 可以兑换的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030673:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.canExchangeTimes))
	for kn,elm in ipairs(self.canExchangeTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030673:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local canExchangeTimes_size = sm:readInt16()
	for i = 1,canExchangeTimes_size do
		local kv = sm:readInt32();
		self.canExchangeTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030673:opcode()
	return 5030673
end
--[[ 请求圣诞副本双倍--]]
MsgDef.Msg1030674 = {}

function MsgDef.Msg1030674:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030674:encode(sm)
	return self
end

function MsgDef.Msg1030674:decode(sm)
	return self
end

function MsgDef.Msg1030674:opcode()
	return 1030674
end

--[[ 请求圣诞副本双倍(返回)--]]
MsgDef.Msg5030674 = {}
function MsgDef.Msg5030674:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	return msg
end

function MsgDef.Msg5030674:encode(sm)
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030674:decode(sm)
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030674:opcode()
	return 5030674
end
--[[ 请求记忆饺宴排行信息--]]
MsgDef.Msg1030675 = {}

function MsgDef.Msg1030675:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030675:encode(sm)
	return self
end

function MsgDef.Msg1030675:decode(sm)
	return self
end

function MsgDef.Msg1030675:opcode()
	return 1030675
end

--[[ 请求记忆饺宴排行信息(返回)--]]
MsgDef.Msg5030675 = {}
function MsgDef.Msg5030675:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<WSScoreRankingInfo>) 积分排名--]]
	msg.myRankInfo = MsgDef.WSScoreRankingInfo:create() --[[(WSScoreRankingInfo) 我的排名信息--]]
	return msg
end

function MsgDef.Msg5030675:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	self.myRankInfo:encode(sm)
	return self
end

function MsgDef.Msg5030675:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.WSScoreRankingInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	self.myRankInfo:decode(sm)
	return self
end


function MsgDef.Msg5030675:opcode()
	return 5030675
end
--[[ 请求记忆饺宴活动信息--]]
MsgDef.Msg1030676 = {}

function MsgDef.Msg1030676:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：排行 2：提交--]]
	if msg.answer == nil then msg.answer = {} end --[[(array<int32>) 提交的答案--]]
	return msg
end

function MsgDef.Msg1030676:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.answer))
	for i,elm in ipairs(self.answer) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1030676:decode(sm)
	self.reqType = sm:readInt8();
	local answer_size = sm:readInt16()
	for i = 1,answer_size do
		local elm = sm:readInt32();
		table.insert(self.answer, elm)
	end
	return self
end

function MsgDef.Msg1030676:opcode()
	return 1030676
end

--[[ 请求记忆饺宴活动信息(返回)--]]
MsgDef.Msg5030676 = {}
function MsgDef.Msg5030676:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：提交--]]
	msg.answer = {} --[[(array<int32>) 提交的答案--]]
	msg.curRound = 0 --[[(int32) 当天回合--]]
	msg.curAnswer = {} --[[(array<int32>) 当前回合的答案--]]
	msg.curSec = 0 --[[(int32) 当前回合剩余的秒数--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.actStartTime = 0 --[[(int32) 开始时间--]]
	msg.scoreRankings = {} --[[(array<WSScoreRankingInfo>) 积分排名--]]
	msg.quickRank = 0 --[[(int32) 前三名提交（1-3）不是则为 0--]]
	msg.curAnswerType = {} --[[(array<int32>) 当前回合的答案类型--]]
	msg.canSubmit = 0 --[[(int8) 当前回合是否回答过--]]
	return msg
end

function MsgDef.Msg5030676:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.answer))
	for i,elm in ipairs(self.answer) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curRound);
	sm:writeInt16(get_map_size(self.curAnswer))
	for i,elm in ipairs(self.curAnswer) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curSec);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.actStartTime);
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	sm:writeInt32(self.quickRank);
	sm:writeInt16(get_map_size(self.curAnswerType))
	for i,elm in ipairs(self.curAnswerType) do
		sm:writeInt32(elm);
	end
	sm:writeInt8(self.canSubmit);
	return self
end

function MsgDef.Msg5030676:decode(sm)
	self.reqType = sm:readInt8();
	local answer_size = sm:readInt16()
	for i = 1,answer_size do
		local ele = sm:readInt32();
		table.insert(self.answer, ele)
	end
	self.curRound = sm:readInt32();
	local curAnswer_size = sm:readInt16()
	for i = 1,curAnswer_size do
		local ele = sm:readInt32();
		table.insert(self.curAnswer, ele)
	end
	self.curSec = sm:readInt32();
	self.myScore = sm:readInt32();
	self.ranking = sm:readInt32();
	self.actStartTime = sm:readInt32();
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.WSScoreRankingInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	self.quickRank = sm:readInt32();
	local curAnswerType_size = sm:readInt16()
	for i = 1,curAnswerType_size do
		local ele = sm:readInt32();
		table.insert(self.curAnswerType, ele)
	end
	self.canSubmit = sm:readInt8();
	return self
end


function MsgDef.Msg5030676:opcode()
	return 5030676
end
--[[ 记忆饺宴刷新广播--]]
MsgDef.Msg8240204 = {}

function MsgDef.Msg8240204:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curRound = 0 --[[(int32) 当前回合--]]
	msg.ranking = 0 --[[(int32) 排名--]]
	msg.myScore = 0 --[[(int32) 我的积分--]]
	msg.curSec = 0 --[[(int32) 当前回合剩余秒数--]]
	msg.curAnswer = {} --[[(array<int32>) 当前回合的答案--]]
	return msg
end

function MsgDef.Msg8240204:encode(sm)
	sm:writeInt32(self.curRound);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.myScore);
	sm:writeInt32(self.curSec);
	sm:writeInt16(get_map_size(self.curAnswer))
	for i,elm in ipairs(self.curAnswer) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8240204:decode(sm)
	self.curRound = sm:readInt32();
	self.ranking = sm:readInt32();
	self.myScore = sm:readInt32();
	self.curSec = sm:readInt32();
	local curAnswer_size = sm:readInt16()
	for i = 1,curAnswer_size do
		local elm = sm:readInt32();
		table.insert(self.curAnswer, elm)
	end
	return self
end

function MsgDef.Msg8240204:opcode()
	return 8240204
end

--[[ 记忆饺宴排行刷新广播--]]
MsgDef.Msg8240205 = {}

function MsgDef.Msg8240205:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.scoreRankings = {} --[[(array<WSScoreRankingInfo>) 排行刷新广播--]]
	return msg
end

function MsgDef.Msg8240205:encode(sm)
	sm:writeInt16(#self.scoreRankings)
	for i,elm in ipairs(self.scoreRankings) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8240205:decode(sm)
	local scoreRankings_size = sm:readInt16()
	for i = 1,scoreRankings_size do
		local element = MsgDef.WSScoreRankingInfo:create():decode(sm)
		table.insert(self.scoreRankings, element)
	end
	return self
end

function MsgDef.Msg8240205:opcode()
	return 8240205
end

--[[ 遗迹探索挑战结果广播--]]
MsgDef.Msg8240301 = {}

function MsgDef.Msg8240301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.result = 0 --[[(int8) 挑战结果 1=赢--]]
	msg.name = "" --[[(string) 掠夺玩家名--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg8240301:encode(sm)
	sm:writeInt8(self.result);
	sm:writeString(self.name);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg8240301:decode(sm)
	self.result = sm:readInt8();
	self.name = sm:readString();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end

function MsgDef.Msg8240301:opcode()
	return 8240301
end

--[[ 请求遗迹探索跳过战斗--]]
MsgDef.Msg1640109 = {}

function MsgDef.Msg1640109:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1640109:encode(sm)
	return self
end

function MsgDef.Msg1640109:decode(sm)
	return self
end

function MsgDef.Msg1640109:opcode()
	return 1640109
end

--[[ 请求遗迹探索跳过战斗(返回)--]]
MsgDef.Msg5640109 = {}
function MsgDef.Msg5640109:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5640109:encode(sm)
	return self
end

function MsgDef.Msg5640109:decode(sm)
	return self
end


function MsgDef.Msg5640109:opcode()
	return 5640109
end
--[[ 记忆饺宴积分排名信息--]]
MsgDef.WSScoreRankingInfo = {}

function MsgDef.WSScoreRankingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.roleId == nil then msg.roleId = 0 end --[[(int64) 玩家id--]]
	if msg.ranking == nil then msg.ranking = 0 end --[[(int32) 排名--]]
	if msg.score == nil then msg.score = 0 end --[[(int32) 积分--]]
	if msg.roleName == nil then msg.roleName = "" end --[[(string) 玩家名--]]
	if msg.roleIcon == nil then msg.roleIcon = 0 end --[[(int32) 玩家icon--]]
	if msg.level == nil then msg.level = 0 end --[[(int32) 等级--]]
	return msg
end

function MsgDef.WSScoreRankingInfo:encode(sm)
	sm:writeInt64(self.roleId);
	sm:writeInt32(self.ranking);
	sm:writeInt32(self.score);
	sm:writeString(self.roleName);
	sm:writeInt32(self.roleIcon);
	sm:writeInt32(self.level);
	return self
end

function MsgDef.WSScoreRankingInfo:decode(sm)
	self.roleId = sm:readInt64();
	self.ranking = sm:readInt32();
	self.score = sm:readInt32();
	self.roleName = sm:readString();
	self.roleIcon = sm:readInt32();
	self.level = sm:readInt32();
	return self
end

function MsgDef.WSScoreRankingInfo:opcode()
	return "WSScoreRankingInfo"
end

--[[ 请求元旦登录活动--]]
MsgDef.Msg1030677 = {}

function MsgDef.Msg1030677:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：领取登录奖励 2：领取累充奖励--]]
	return msg
end

function MsgDef.Msg1030677:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030677:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030677:opcode()
	return 1030677
end

--[[ 请求元旦登录活动(返回)--]]
MsgDef.Msg5030677 = {}
function MsgDef.Msg5030677:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示 1：领取登录奖励 2：领取累充奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030677:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030677:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030677:opcode()
	return 5030677
end
--[[ 请求元旦投资--]]
MsgDef.Msg1030678 = {}

function MsgDef.Msg1030678:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：投资  2：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030678:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030678:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030678:opcode()
	return 1030678
end

--[[ 请求元旦投资(返回)--]]
MsgDef.Msg5030678 = {}
function MsgDef.Msg5030678:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：投资  2：领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.investSign = 0 --[[(int8) 是否已经投资 （1 已投资  0 未投资）--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	return msg
end

function MsgDef.Msg5030678:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt8(self.investSign);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.curDay);
	return self
end

function MsgDef.Msg5030678:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.investSign = sm:readInt8();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.curDay = sm:readInt32();
	return self
end


function MsgDef.Msg5030678:opcode()
	return 5030678
end
--[[ 请求元旦boss剩余时间--]]
MsgDef.Msg1030679 = {}

function MsgDef.Msg1030679:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030679:encode(sm)
	return self
end

function MsgDef.Msg1030679:decode(sm)
	return self
end

function MsgDef.Msg1030679:opcode()
	return 1030679
end

--[[ 请求元旦boss剩余时间(返回)--]]
MsgDef.Msg5030679 = {}
function MsgDef.Msg5030679:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030679:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030679:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030679:opcode()
	return 5030679
end
--[[ 请求元旦祈福--]]
MsgDef.Msg1030680 = {}

function MsgDef.Msg1030680:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次  3：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030680:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030680:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030680:opcode()
	return 1030680
end

--[[ 请求元旦祈福(返回)--]]
MsgDef.Msg5030680 = {}
function MsgDef.Msg5030680:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次  3：兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	msg.blessValue = 0 --[[(int32) 祝福值--]]
	msg.crystals = 0 --[[(int32) 水晶数--]]
	msg.exchangeMap = {} --[[(map<int32,int32>) 兑换物品的数量（开始为空）--]]
	msg.logs = {} --[[(array<string>) 抽奖记录--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030680:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.blessValue);
	sm:writeInt32(self.crystals);
	sm:writeInt16(get_map_size(self.exchangeMap))
	for kn,elm in ipairs(self.exchangeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030680:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.blessValue = sm:readInt32();
	self.crystals = sm:readInt32();
	local exchangeMap_size = sm:readInt16()
	for i = 1,exchangeMap_size do
		local kv = sm:readInt32();
		self.exchangeMap[kv] = sm:readInt32();
	end
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030680:opcode()
	return 5030680
end
--[[ 请求元旦转盘--]]
MsgDef.Msg1030681 = {}

function MsgDef.Msg1030681:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽奖--]]
	return msg
end

function MsgDef.Msg1030681:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030681:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030681:opcode()
	return 1030681
end

--[[ 请求元旦转盘(返回)--]]
MsgDef.Msg5030681 = {}
function MsgDef.Msg5030681:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽奖--]]
	msg.rechargeSum = 0 --[[(int32) 充值数--]]
	msg.lotteryCount = 0 --[[(int32) 已经抽奖次数--]]
	msg.logs = {} --[[(array<string>) 日志记录--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.cid = 0 --[[(int32) 获得的配置id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.mulActId = 0 --[[(int32) 多开活动id--]]
	return msg
end

function MsgDef.Msg5030681:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.rechargeSum);
	sm:writeInt32(self.lotteryCount);
	sm:writeInt16(get_map_size(self.logs))
	for i,elm in ipairs(self.logs) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.cid);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.mulActId);
	return self
end

function MsgDef.Msg5030681:decode(sm)
	self.reqType = sm:readInt8();
	self.rechargeSum = sm:readInt32();
	self.lotteryCount = sm:readInt32();
	local logs_size = sm:readInt16()
	for i = 1,logs_size do
		local ele = sm:readString();
		table.insert(self.logs, ele)
	end
	self.leftTime = sm:readInt32();
	self.cid = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.mulActId = sm:readInt32();
	return self
end


function MsgDef.Msg5030681:opcode()
	return 5030681
end
--[[ 请求元旦探索--]]
MsgDef.Msg1030682 = {}

function MsgDef.Msg1030682:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：探索 2：领取 3：领取大奖--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030682:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030682:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030682:opcode()
	return 1030682
end

--[[ 请求元旦探索(返回)--]]
MsgDef.Msg5030682 = {}
function MsgDef.Msg5030682:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：探索 2：领取 3：领取大奖--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.exploreMap = {} --[[(map<int32,int32>) 探索标识（1 已探索  0 未探索）--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取进入标识（1 已领取 0 未领取）--]]
	msg.bigAwardSigns = {} --[[(map<int32,int32>) 大奖领取标识--]]
	msg.record = {} --[[(array<string>) 记录--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.typeMap = {} --[[(map<int32,int32>) 场景是什么类型（1：A  2：B）--]]
	msg.sceneMap = {} --[[(map<int32,int32>) B类型对应的场景id（配置id -- 场景id）--]]
	return msg
end

function MsgDef.Msg5030682:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.exploreMap))
	for kn,elm in ipairs(self.exploreMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.bigAwardSigns))
	for kn,elm in ipairs(self.bigAwardSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(get_map_size(self.typeMap))
	for kn,elm in ipairs(self.typeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.sceneMap))
	for kn,elm in ipairs(self.sceneMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030682:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local exploreMap_size = sm:readInt16()
	for i = 1,exploreMap_size do
		local kv = sm:readInt32();
		self.exploreMap[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local bigAwardSigns_size = sm:readInt16()
	for i = 1,bigAwardSigns_size do
		local kv = sm:readInt32();
		self.bigAwardSigns[kv] = sm:readInt32();
	end
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	local typeMap_size = sm:readInt16()
	for i = 1,typeMap_size do
		local kv = sm:readInt32();
		self.typeMap[kv] = sm:readInt32();
	end
	local sceneMap_size = sm:readInt16()
	for i = 1,sceneMap_size do
		local kv = sm:readInt32();
		self.sceneMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030682:opcode()
	return 5030682
end
--[[ 元旦探索结算广播--]]
MsgDef.Msg8240206 = {}

function MsgDef.Msg8240206:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.sceneId = 0 --[[(int32) 场景id--]]
	msg.pass = 0 --[[(int32) 当前关卡--]]
	msg.state = 0 --[[(int32) 状态--]]
	msg.star = 0 --[[(int8) 星星数--]]
	return msg
end

function MsgDef.Msg8240206:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.sceneId);
	sm:writeInt32(self.pass);
	sm:writeInt32(self.state);
	sm:writeInt8(self.star);
	return self
end

function MsgDef.Msg8240206:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.sceneId = sm:readInt32();
	self.pass = sm:readInt32();
	self.state = sm:readInt32();
	self.star = sm:readInt8();
	return self
end

function MsgDef.Msg8240206:opcode()
	return 8240206
end

--[[ 面具系统战力广播--]]
MsgDef.Msg8240207 = {}

function MsgDef.Msg8240207:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.typePower = {} --[[(map<int32,int32>) 每个类型战力--]]
	msg.maskPower = {} --[[(map<int32,int32>) 每个面具战力--]]
	return msg
end

function MsgDef.Msg8240207:encode(sm)
	sm:writeInt16(get_map_size(self.typePower))
	for kn,elm in ipairs(self.typePower) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.maskPower))
	for kn,elm in ipairs(self.maskPower) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8240207:decode(sm)
	local typePower_size = sm:readInt16()
	for i = 1,typePower_size do
		local kv = sm:readInt32();
		self.typePower[kv] = sm:readInt32();
	end
	local maskPower_size = sm:readInt16()
	for i = 1,maskPower_size do
		local kv = sm:readInt32();
		self.maskPower[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8240207:opcode()
	return 8240207
end

--[[ 奇兵信息--]]
MsgDef.QiBingInfo = {}

function MsgDef.QiBingInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.id == nil then msg.id = 0 end --[[(int32) 奇兵id--]]
	if msg.qhLev == nil then msg.qhLev = 0 end --[[(int32) 强化等级--]]
	if msg.flLev == nil then msg.flLev = 0 end --[[(int32) 附灵等级--]]
	if msg.sxLev == nil then msg.sxLev = 0 end --[[(int32) 升星等级--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战力--]]
	if msg.flAttrLev == nil then msg.flAttrLev = {} end --[[(map<int32,QiBingFlAttrInfo>) 附灵等级--对应属性--]]
	return msg
end

function MsgDef.QiBingInfo:encode(sm)
	sm:writeInt32(self.id);
	sm:writeInt32(self.qhLev);
	sm:writeInt32(self.flLev);
	sm:writeInt32(self.sxLev);
	sm:writeInt32(self.power);
	sm:writeInt16(get_map_size(self.flAttrLev))
	for kn,elm in ipairs(self.flAttrLev) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	return self
end

function MsgDef.QiBingInfo:decode(sm)
	self.id = sm:readInt32();
	self.qhLev = sm:readInt32();
	self.flLev = sm:readInt32();
	self.sxLev = sm:readInt32();
	self.power = sm:readInt32();
	local flAttrLev_size = sm:readInt16()
	for i = 1,flAttrLev_size do
		local kev = sm:readInt32(kn);
		self.flAttrLev[kev] = MsgDef.QiBingFlAttrInfo:create():decode(sm)
	end
	return self
end

function MsgDef.QiBingInfo:opcode()
	return "QiBingInfo"
end

--[[ 请求奇兵系统--]]
MsgDef.Msg1650101 = {}

function MsgDef.Msg1650101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1650101:encode(sm)
	return self
end

function MsgDef.Msg1650101:decode(sm)
	return self
end

function MsgDef.Msg1650101:opcode()
	return 1650101
end

--[[ 请求奇兵系统(返回)--]]
MsgDef.Msg5650101 = {}
function MsgDef.Msg5650101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qiBingInfo = {} --[[(array<QiBingInfo>) 奇兵信息--]]
	msg.qhsMap = {} --[[(map<int32,int32>) 强化石map,key:1紫色2橙色3红色,value:数量--]]
	msg.huanhuaId = 0 --[[(int32) 幻化的奇兵id--]]
	return msg
end

function MsgDef.Msg5650101:encode(sm)
	sm:writeInt16(#self.qiBingInfo)
	for i,elm in ipairs(self.qiBingInfo) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.qhsMap))
	for kn,elm in ipairs(self.qhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.huanhuaId);
	return self
end

function MsgDef.Msg5650101:decode(sm)
	local qiBingInfo_size = sm:readInt16()
	for i = 1,qiBingInfo_size do
		local element = MsgDef.QiBingInfo:create():decode(sm)
		table.insert(self.qiBingInfo, element)
	end
	local qhsMap_size = sm:readInt16()
	for i = 1,qhsMap_size do
		local kv = sm:readInt32();
		self.qhsMap[kv] = sm:readInt32();
	end
	self.huanhuaId = sm:readInt32();
	return self
end


function MsgDef.Msg5650101:opcode()
	return 5650101
end
--[[ 请求奇兵激活强化--]]
MsgDef.Msg1650102 = {}

function MsgDef.Msg1650102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.qiBingId == nil then msg.qiBingId = 0 end --[[(int32) 奇兵id--]]
	return msg
end

function MsgDef.Msg1650102:encode(sm)
	sm:writeInt32(self.qiBingId);
	return self
end

function MsgDef.Msg1650102:decode(sm)
	self.qiBingId = sm:readInt32();
	return self
end

function MsgDef.Msg1650102:opcode()
	return 1650102
end

--[[ 请求奇兵激活强化(返回)--]]
MsgDef.Msg5650102 = {}
function MsgDef.Msg5650102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qiBingId = 0 --[[(int32) 奇兵id--]]
	msg.qhLev = 0 --[[(int32) 强化等级--]]
	return msg
end

function MsgDef.Msg5650102:encode(sm)
	sm:writeInt32(self.qiBingId);
	sm:writeInt32(self.qhLev);
	return self
end

function MsgDef.Msg5650102:decode(sm)
	self.qiBingId = sm:readInt32();
	self.qhLev = sm:readInt32();
	return self
end


function MsgDef.Msg5650102:opcode()
	return 5650102
end
--[[ 请求奇兵附灵--]]
MsgDef.Msg1650103 = {}

function MsgDef.Msg1650103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.qiBingId == nil then msg.qiBingId = 0 end --[[(int32) 奇兵id--]]
	return msg
end

function MsgDef.Msg1650103:encode(sm)
	sm:writeInt32(self.qiBingId);
	return self
end

function MsgDef.Msg1650103:decode(sm)
	self.qiBingId = sm:readInt32();
	return self
end

function MsgDef.Msg1650103:opcode()
	return 1650103
end

--[[ 请求奇兵附灵(返回)--]]
MsgDef.Msg5650103 = {}
function MsgDef.Msg5650103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qiBingId = 0 --[[(int32) 奇兵id--]]
	msg.flLev = 0 --[[(int32) 附灵等级--]]
	msg.flAttrLev = {} --[[(map<int32,QiBingFlAttrInfo>) 附灵等级--对应属性--]]
	return msg
end

function MsgDef.Msg5650103:encode(sm)
	sm:writeInt32(self.qiBingId);
	sm:writeInt32(self.flLev);
	sm:writeInt16(get_map_size(self.flAttrLev))
	for kn,elm in ipairs(self.flAttrLev) do
		sm:writeInt32(kn);
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5650103:decode(sm)
	self.qiBingId = sm:readInt32();
	self.flLev = sm:readInt32();
	local flAttrLev_size = sm:readInt16()
	for i = 1,flAttrLev_size do
		local kev = sm:readInt32(kn);
		self.flAttrLev[kev] = MsgDef.QiBingFlAttrInfo:create():decode(sm)
	end
	return self
end


function MsgDef.Msg5650103:opcode()
	return 5650103
end
--[[ 请求奇兵升星--]]
MsgDef.Msg1650104 = {}

function MsgDef.Msg1650104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.qiBingId == nil then msg.qiBingId = 0 end --[[(int32) 奇兵id--]]
	return msg
end

function MsgDef.Msg1650104:encode(sm)
	sm:writeInt32(self.qiBingId);
	return self
end

function MsgDef.Msg1650104:decode(sm)
	self.qiBingId = sm:readInt32();
	return self
end

function MsgDef.Msg1650104:opcode()
	return 1650104
end

--[[ 请求奇兵升星(返回)--]]
MsgDef.Msg5650104 = {}
function MsgDef.Msg5650104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qiBingId = 0 --[[(int32) 奇兵id--]]
	msg.sxLev = 0 --[[(int32) 升星等级--]]
	return msg
end

function MsgDef.Msg5650104:encode(sm)
	sm:writeInt32(self.qiBingId);
	sm:writeInt32(self.sxLev);
	return self
end

function MsgDef.Msg5650104:decode(sm)
	self.qiBingId = sm:readInt32();
	self.sxLev = sm:readInt32();
	return self
end


function MsgDef.Msg5650104:opcode()
	return 5650104
end
--[[ 请求奇兵分解--]]
MsgDef.Msg1650105 = {}

function MsgDef.Msg1650105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 背包下标--]]
	return msg
end

function MsgDef.Msg1650105:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1650105:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1650105:opcode()
	return 1650105
end

--[[ 请求奇兵分解(返回)--]]
MsgDef.Msg5650105 = {}
function MsgDef.Msg5650105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.gotQhsMap = {} --[[(map<int32,int32>) 本次获得的强化石map，弹窗用--]]
	return msg
end

function MsgDef.Msg5650105:encode(sm)
	sm:writeInt16(get_map_size(self.gotQhsMap))
	for kn,elm in ipairs(self.gotQhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5650105:decode(sm)
	local gotQhsMap_size = sm:readInt16()
	for i = 1,gotQhsMap_size do
		local kv = sm:readInt32();
		self.gotQhsMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5650105:opcode()
	return 5650105
end
--[[ 请求奇兵幻化--]]
MsgDef.Msg1650106 = {}

function MsgDef.Msg1650106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：幻化  1：隐藏--]]
	if msg.qiBingId == nil then msg.qiBingId = 0 end --[[(int32) 奇兵id--]]
	return msg
end

function MsgDef.Msg1650106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.qiBingId);
	return self
end

function MsgDef.Msg1650106:decode(sm)
	self.reqType = sm:readInt8();
	self.qiBingId = sm:readInt32();
	return self
end

function MsgDef.Msg1650106:opcode()
	return 1650106
end

--[[ 请求奇兵幻化(返回)--]]
MsgDef.Msg5650106 = {}
function MsgDef.Msg5650106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：幻化  1：隐藏--]]
	msg.qiBingId = 0 --[[(int32) 奇兵id--]]
	return msg
end

function MsgDef.Msg5650106:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.qiBingId);
	return self
end

function MsgDef.Msg5650106:decode(sm)
	self.reqType = sm:readInt8();
	self.qiBingId = sm:readInt32();
	return self
end


function MsgDef.Msg5650106:opcode()
	return 5650106
end
--[[ 广播奇兵强化石数值--]]
MsgDef.Msg8240302 = {}

function MsgDef.Msg8240302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.qhsMap = {} --[[(map<int32,int32>) 强化石map--]]
	return msg
end

function MsgDef.Msg8240302:encode(sm)
	sm:writeInt16(get_map_size(self.qhsMap))
	for kn,elm in ipairs(self.qhsMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8240302:decode(sm)
	local qhsMap_size = sm:readInt16()
	for i = 1,qhsMap_size do
		local kv = sm:readInt32();
		self.qhsMap[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8240302:opcode()
	return 8240302
end

--[[ 广播奇兵战力--]]
MsgDef.Msg8240303 = {}

function MsgDef.Msg8240303:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = {} --[[(map<int32,int32>) 战力map--]]
	return msg
end

function MsgDef.Msg8240303:encode(sm)
	sm:writeInt16(get_map_size(self.power))
	for kn,elm in ipairs(self.power) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8240303:decode(sm)
	local power_size = sm:readInt16()
	for i = 1,power_size do
		local kv = sm:readInt32();
		self.power[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8240303:opcode()
	return 8240303
end

--[[ 请求自动拒绝好友申请--]]
MsgDef.Msg1070106 = {}

function MsgDef.Msg1070106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0:不拒绝  1 ：拒绝--]]
	return msg
end

function MsgDef.Msg1070106:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1070106:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1070106:opcode()
	return 1070106
end

--[[ 请求自动拒绝好友申请(返回)--]]
MsgDef.Msg5070106 = {}
function MsgDef.Msg5070106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg5070106:encode(sm)
	return self
end

function MsgDef.Msg5070106:decode(sm)
	return self
end


function MsgDef.Msg5070106:opcode()
	return 5070106
end
--[[ 请求奇兵寻宝信息--]]
MsgDef.Msg1030683 = {}

function MsgDef.Msg1030683:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030683:encode(sm)
	return self
end

function MsgDef.Msg1030683:decode(sm)
	return self
end

function MsgDef.Msg1030683:opcode()
	return 1030683
end

--[[ 请求奇兵寻宝信息(返回)--]]
MsgDef.Msg5030683 = {}
function MsgDef.Msg5030683:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030683:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030683:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030683:opcode()
	return 5030683
end
--[[ 请求奇兵寻宝积分商城--]]
MsgDef.Msg1030684 = {}

function MsgDef.Msg1030684:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030684:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030684:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030684:opcode()
	return 1030684
end

--[[ 请求奇兵寻宝积分商城(返回)--]]
MsgDef.Msg5030684 = {}
function MsgDef.Msg5030684:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030684:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030684:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030684:opcode()
	return 5030684
end
--[[ 请求奇兵寻宝--]]
MsgDef.Msg1030685 = {}

function MsgDef.Msg1030685:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030685:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030685:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030685:opcode()
	return 1030685
end

--[[ 请求奇兵寻宝(返回)--]]
MsgDef.Msg5030685 = {}
function MsgDef.Msg5030685:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030685:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030685:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030685:opcode()
	return 5030685
end
--[[ 奇兵附灵属性信息--]]
MsgDef.QiBingFlAttrInfo = {}

function MsgDef.QiBingFlAttrInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.all == nil then msg.all = 0 end --[[(int32) 是否全部属性--]]
	if msg.single == nil then msg.single = 0 end --[[(int32) 单个属性的属性id--]]
	return msg
end

function MsgDef.QiBingFlAttrInfo:encode(sm)
	sm:writeInt32(self.all);
	sm:writeInt32(self.single);
	return self
end

function MsgDef.QiBingFlAttrInfo:decode(sm)
	self.all = sm:readInt32();
	self.single = sm:readInt32();
	return self
end

function MsgDef.QiBingFlAttrInfo:opcode()
	return "QiBingFlAttrInfo"
end

--[[ 请求奇兵寻宝返还--]]
MsgDef.Msg1030686 = {}

function MsgDef.Msg1030686:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 领取id--]]
	return msg
end

function MsgDef.Msg1030686:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030686:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030686:opcode()
	return 1030686
end

--[[ 请求奇兵寻宝返还(返回)--]]
MsgDef.Msg5030686 = {}
function MsgDef.Msg5030686:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 领取id--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.gotSigns = {} --[[(array<int32>) 已经领取的奖励id--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030686:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.times);
	sm:writeInt16(get_map_size(self.gotSigns))
	for i,elm in ipairs(self.gotSigns) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030686:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.leftTime = sm:readInt32();
	self.times = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local ele = sm:readInt32();
		table.insert(self.gotSigns, ele)
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030686:opcode()
	return 5030686
end
--[[ 请求奇兵战力排行--]]
MsgDef.Msg1030687 = {}

function MsgDef.Msg1030687:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030687:encode(sm)
	return self
end

function MsgDef.Msg1030687:decode(sm)
	return self
end

function MsgDef.Msg1030687:opcode()
	return 1030687
end

--[[ 请求奇兵战力排行(返回)--]]
MsgDef.Msg5030687 = {}
function MsgDef.Msg5030687:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.myRankInfo = 0 --[[(int32) 我的排名信息--]]
	msg.power = 0 --[[(int32) 我的战力--]]
	msg.rankInfos = {} --[[(array<SimplePowerRankInfo>) 排名信息--]]
	return msg
end

function MsgDef.Msg5030687:encode(sm)
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.myRankInfo);
	sm:writeInt32(self.power);
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030687:decode(sm)
	self.leftTime = sm:readInt32();
	self.myRankInfo = sm:readInt32();
	self.power = sm:readInt32();
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	return self
end


function MsgDef.Msg5030687:opcode()
	return 5030687
end
--[[ 请求腊八登录领奖--]]
MsgDef.Msg1030688 = {}

function MsgDef.Msg1030688:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	return msg
end

function MsgDef.Msg1030688:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030688:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030688:opcode()
	return 1030688
end

--[[ 请求腊八登录领奖(返回)--]]
MsgDef.Msg5030688 = {}
function MsgDef.Msg5030688:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	msg.normalAwardSign = 0 --[[(int8) 普通奖励领取标识--]]
	msg.vipAwardSign = 0 --[[(int8) vip奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030688:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.normalAwardSign);
	sm:writeInt8(self.vipAwardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030688:decode(sm)
	self.reqType = sm:readInt8();
	self.normalAwardSign = sm:readInt8();
	self.vipAwardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030688:opcode()
	return 5030688
end
--[[ 请求腊八boss剩余时间--]]
MsgDef.Msg1030689 = {}

function MsgDef.Msg1030689:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030689:encode(sm)
	return self
end

function MsgDef.Msg1030689:decode(sm)
	return self
end

function MsgDef.Msg1030689:opcode()
	return 1030689
end

--[[ 请求腊八boss剩余时间(返回)--]]
MsgDef.Msg5030689 = {}
function MsgDef.Msg5030689:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030689:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030689:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030689:opcode()
	return 5030689
end
--[[ 请求腊八粥--]]
MsgDef.Msg1030690 = {}

function MsgDef.Msg1030690:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1030690:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030690:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030690:opcode()
	return 1030690
end

--[[ 请求腊八粥(返回)--]]
MsgDef.Msg5030690 = {}
function MsgDef.Msg5030690:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.times = 0 --[[(int32) 次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.timesMap = {} --[[(map<int32,int32>) 已经兑换的次数（id--次数）--]]
	return msg
end

function MsgDef.Msg5030690:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(get_map_size(self.timesMap))
	for kn,elm in ipairs(self.timesMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030690:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local timesMap_size = sm:readInt16()
	for i = 1,timesMap_size do
		local kv = sm:readInt32();
		self.timesMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030690:opcode()
	return 5030690
end
--[[ 请求腊八消费排行榜--]]
MsgDef.Msg1030691 = {}

function MsgDef.Msg1030691:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030691:encode(sm)
	return self
end

function MsgDef.Msg1030691:decode(sm)
	return self
end

function MsgDef.Msg1030691:opcode()
	return 1030691
end

--[[ 请求腊八消费排行榜(返回)--]]
MsgDef.Msg5030691 = {}
function MsgDef.Msg5030691:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rankingInfos = {} --[[(array<LabaConsumptionRankInfo>) 排行--]]
	msg.mine = MsgDef.LabaConsumptionRankInfo:create() --[[(LabaConsumptionRankInfo) 我的信息--]]
	msg.before = 0 --[[(int32) 前一名的积分--]]
	msg.cid = 0 --[[(int32) 奖励前缀--]]
	return msg
end

function MsgDef.Msg5030691:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	self.mine:encode(sm)
	sm:writeInt32(self.before);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5030691:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.LabaConsumptionRankInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.mine:decode(sm)
	self.before = sm:readInt32();
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5030691:opcode()
	return 5030691
end
--[[ 请求腊八累抽--]]
MsgDef.Msg1030692 = {}

function MsgDef.Msg1030692:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次 3：领取--]]
	return msg
end

function MsgDef.Msg1030692:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030692:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030692:opcode()
	return 1030692
end

--[[ 请求腊八累抽(返回)--]]
MsgDef.Msg5030692 = {}
function MsgDef.Msg5030692:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次 3：领取--]]
	msg.costSum = 0 --[[(int32) 消费总额--]]
	msg.rechargeSum = 0 --[[(int32) 充值总额--]]
	msg.gotCount = 0 --[[(int32) 已经领取的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.record = {} --[[(array<string>) 记录--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.cid = 0 --[[(int32) 获得的奖励id--]]
	return msg
end

function MsgDef.Msg5030692:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.costSum);
	sm:writeInt32(self.rechargeSum);
	sm:writeInt32(self.gotCount);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.record))
	for i,elm in ipairs(self.record) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg5030692:decode(sm)
	self.reqType = sm:readInt8();
	self.costSum = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	self.gotCount = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local record_size = sm:readInt16()
	for i = 1,record_size do
		local ele = sm:readString();
		table.insert(self.record, ele)
	end
	self.leftTime = sm:readInt32();
	self.cid = sm:readInt32();
	return self
end


function MsgDef.Msg5030692:opcode()
	return 5030692
end
--[[ 生肖信息--]]
MsgDef.SXInfo = {}

function MsgDef.SXInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 生肖种类--]]
	if msg.partInfos == nil then msg.partInfos = {} end --[[(array<SXPartInfo>) 部位信息--]]
	if msg.power == nil then msg.power = 0 end --[[(int32) 战斗力--]]
	if msg.state == nil then msg.state = 0 end --[[(int8) 是否激活--]]
	if msg.skillId == nil then msg.skillId = 0 end --[[(int32) 技能id--]]
	return msg
end

function MsgDef.SXInfo:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt16(#self.partInfos)
	for i,elm in ipairs(self.partInfos) do
		elm:encode(sm)
	end
	sm:writeInt32(self.power);
	sm:writeInt8(self.state);
	sm:writeInt32(self.skillId);
	return self
end

function MsgDef.SXInfo:decode(sm)
	self.type = sm:readInt32();
	local partInfos_size = sm:readInt16()
	for i = 1,partInfos_size do
		local element = MsgDef.SXPartInfo:create():decode(sm)
		table.insert(self.partInfos, element)
	end
	self.power = sm:readInt32();
	self.state = sm:readInt8();
	self.skillId = sm:readInt32();
	return self
end

function MsgDef.SXInfo:opcode()
	return "SXInfo"
end

--[[ 生肖部位信息--]]
MsgDef.SXPartInfo = {}

function MsgDef.SXPartInfo:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.itemInfo == nil then msg.itemInfo = MsgDef.ItemInfo:create() end --[[(ItemInfo) 装备信息--]]
	if msg.strenLevel == nil then msg.strenLevel = 0 end --[[(int32) 强化等级--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	if msg.exp  == nil then msg.exp  = 0 end --[[(int32) 经验--]]
	return msg
end

function MsgDef.SXPartInfo:encode(sm)
	self.itemInfo:encode(sm)
	sm:writeInt32(self.strenLevel);
	sm:writeInt32(self.part);
	sm:writeInt32(self.exp );
	return self
end

function MsgDef.SXPartInfo:decode(sm)
	self.itemInfo:decode(sm)
	self.strenLevel = sm:readInt32();
	self.part = sm:readInt32();
	self.exp  = sm:readInt32();
	return self
end

function MsgDef.SXPartInfo:opcode()
	return "SXPartInfo"
end

--[[ 请求生肖信息--]]
MsgDef.Msg1660101 = {}

function MsgDef.Msg1660101:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1660101:encode(sm)
	return self
end

function MsgDef.Msg1660101:decode(sm)
	return self
end

function MsgDef.Msg1660101:opcode()
	return 1660101
end

--[[ 请求生肖信息(返回)--]]
MsgDef.Msg5660101 = {}
function MsgDef.Msg5660101:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sxInfo = {} --[[(array<SXInfo>) 生肖信息--]]
	msg.score = 0 --[[(int32) 强化积分--]]
	msg.skillMax = 0 --[[(int32) 可以激活几个技能--]]
	return msg
end

function MsgDef.Msg5660101:encode(sm)
	sm:writeInt16(#self.sxInfo)
	for i,elm in ipairs(self.sxInfo) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.skillMax);
	return self
end

function MsgDef.Msg5660101:decode(sm)
	local sxInfo_size = sm:readInt16()
	for i = 1,sxInfo_size do
		local element = MsgDef.SXInfo:create():decode(sm)
		table.insert(self.sxInfo, element)
	end
	self.score = sm:readInt32();
	self.skillMax = sm:readInt32();
	return self
end


function MsgDef.Msg5660101:opcode()
	return 5660101
end
--[[ 请求生肖试炼信息--]]
MsgDef.Msg1028301 = {}

function MsgDef.Msg1028301:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1028301:encode(sm)
	return self
end

function MsgDef.Msg1028301:decode(sm)
	return self
end

function MsgDef.Msg1028301:opcode()
	return 1028301
end

--[[ 请求生肖试炼信息(返回)--]]
MsgDef.Msg5028301 = {}
function MsgDef.Msg5028301:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTimes = 0 --[[(int32) 剩余挑战次数--]]
	msg.buyTimes = 0 --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg5028301:encode(sm)
	sm:writeInt32(self.leftPlayTimes);
	sm:writeInt32(self.buyTimes);
	return self
end

function MsgDef.Msg5028301:decode(sm)
	self.leftPlayTimes = sm:readInt32();
	self.buyTimes = sm:readInt32();
	return self
end


function MsgDef.Msg5028301:opcode()
	return 5028301
end
--[[ 请求生肖试炼次数购买--]]
MsgDef.Msg1028302 = {}

function MsgDef.Msg1028302:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1028302:encode(sm)
	return self
end

function MsgDef.Msg1028302:decode(sm)
	return self
end

function MsgDef.Msg1028302:opcode()
	return 1028302
end

--[[ 请求生肖试炼次数购买(返回)--]]
MsgDef.Msg5028302 = {}
function MsgDef.Msg5028302:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftPlayTimes = 0 --[[(int32) 剩余次数--]]
	msg.buyTimes = 0 --[[(int32) 购买次数--]]
	return msg
end

function MsgDef.Msg5028302:encode(sm)
	sm:writeInt32(self.leftPlayTimes);
	sm:writeInt32(self.buyTimes);
	return self
end

function MsgDef.Msg5028302:decode(sm)
	self.leftPlayTimes = sm:readInt32();
	self.buyTimes = sm:readInt32();
	return self
end


function MsgDef.Msg5028302:opcode()
	return 5028302
end
--[[ 请求生肖技能位扩展--]]
MsgDef.Msg1660102 = {}

function MsgDef.Msg1660102:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1660102:encode(sm)
	return self
end

function MsgDef.Msg1660102:decode(sm)
	return self
end

function MsgDef.Msg1660102:opcode()
	return 1660102
end

--[[ 请求生肖技能位扩展(返回)--]]
MsgDef.Msg5660102 = {}
function MsgDef.Msg5660102:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.skillMax = 0 --[[(int32) 最大可激活数量--]]
	return msg
end

function MsgDef.Msg5660102:encode(sm)
	sm:writeInt32(self.skillMax);
	return self
end

function MsgDef.Msg5660102:decode(sm)
	self.skillMax = sm:readInt32();
	return self
end


function MsgDef.Msg5660102:opcode()
	return 5660102
end
--[[ 请求生肖装备穿戴--]]
MsgDef.Msg1660103 = {}

function MsgDef.Msg1660103:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：穿  1：脱--]]
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 0时发背包位置，1时发装备位置（1-4）--]]
	if msg.partInfo == nil then msg.partInfo = {} end --[[(array<int32>) 目标位置（1-4）--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 生肖种类（101-304）--]]
	return msg
end

function MsgDef.Msg1660103:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.partInfo))
	for i,elm in ipairs(self.partInfo) do
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg1660103:decode(sm)
	self.reqType = sm:readInt8();
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	local partInfo_size = sm:readInt16()
	for i = 1,partInfo_size do
		local elm = sm:readInt32();
		table.insert(self.partInfo, elm)
	end
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg1660103:opcode()
	return 1660103
end

--[[ 请求生肖装备穿戴(返回)--]]
MsgDef.Msg5660103 = {}
function MsgDef.Msg5660103:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sxInfo = MsgDef.SXInfo:create() --[[(SXInfo) 生肖信息--]]
	return msg
end

function MsgDef.Msg5660103:encode(sm)
	self.sxInfo:encode(sm)
	return self
end

function MsgDef.Msg5660103:decode(sm)
	self.sxInfo:decode(sm)
	return self
end


function MsgDef.Msg5660103:opcode()
	return 5660103
end
--[[ 请求生肖强化--]]
MsgDef.Msg1660104 = {}

function MsgDef.Msg1660104:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：强化  1：一键强化--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 生肖种类（101-304）--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	return msg
end

function MsgDef.Msg1660104:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.type);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg1660104:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt32();
	self.part = sm:readInt32();
	return self
end

function MsgDef.Msg1660104:opcode()
	return 1660104
end

--[[ 请求生肖强化(返回)--]]
MsgDef.Msg5660104 = {}
function MsgDef.Msg5660104:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.type = 0 --[[(int32) 生肖种类（101-304）--]]
	msg.part = 0 --[[(int32) 部位--]]
	msg.score = 0 --[[(int32) 强化积分--]]
	msg.partInfo = MsgDef.SXPartInfo:create() --[[(SXPartInfo) 部位信息--]]
	return msg
end

function MsgDef.Msg5660104:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.part);
	sm:writeInt32(self.score);
	self.partInfo:encode(sm)
	return self
end

function MsgDef.Msg5660104:decode(sm)
	self.type = sm:readInt32();
	self.part = sm:readInt32();
	self.score = sm:readInt32();
	self.partInfo:decode(sm)
	return self
end


function MsgDef.Msg5660104:opcode()
	return 5660104
end
--[[ 请求生肖分解--]]
MsgDef.Msg1660105 = {}

function MsgDef.Msg1660105:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.indexs == nil then msg.indexs = {} end --[[(array<int32>) 分解列表--]]
	return msg
end

function MsgDef.Msg1660105:encode(sm)
	sm:writeInt16(get_map_size(self.indexs))
	for i,elm in ipairs(self.indexs) do
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg1660105:decode(sm)
	local indexs_size = sm:readInt16()
	for i = 1,indexs_size do
		local elm = sm:readInt32();
		table.insert(self.indexs, elm)
	end
	return self
end

function MsgDef.Msg1660105:opcode()
	return 1660105
end

--[[ 请求生肖分解(返回)--]]
MsgDef.Msg5660105 = {}
function MsgDef.Msg5660105:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 分解后获得--]]
	return msg
end

function MsgDef.Msg5660105:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5660105:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5660105:opcode()
	return 5660105
end
--[[ 请求生肖进阶--]]
MsgDef.Msg1660106 = {}

function MsgDef.Msg1660106:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.type == nil then msg.type = 0 end --[[(int32) 生肖类型（101-304）--]]
	if msg.part == nil then msg.part = 0 end --[[(int32) 部位--]]
	return msg
end

function MsgDef.Msg1660106:encode(sm)
	sm:writeInt32(self.type);
	sm:writeInt32(self.part);
	return self
end

function MsgDef.Msg1660106:decode(sm)
	self.type = sm:readInt32();
	self.part = sm:readInt32();
	return self
end

function MsgDef.Msg1660106:opcode()
	return 1660106
end

--[[ 请求生肖进阶(返回)--]]
MsgDef.Msg5660106 = {}
function MsgDef.Msg5660106:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.sxInfo = MsgDef.SXInfo:create() --[[(SXInfo) 生肖信息--]]
	return msg
end

function MsgDef.Msg5660106:encode(sm)
	self.sxInfo:encode(sm)
	return self
end

function MsgDef.Msg5660106:decode(sm)
	self.sxInfo:decode(sm)
	return self
end


function MsgDef.Msg5660106:opcode()
	return 5660106
end
--[[ 请求生肖拆解--]]
MsgDef.Msg1660107 = {}

function MsgDef.Msg1660107:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.index == nil then msg.index = 0 end --[[(int32) 拆解id--]]
	return msg
end

function MsgDef.Msg1660107:encode(sm)
	sm:writeInt32(self.index);
	return self
end

function MsgDef.Msg1660107:decode(sm)
	self.index = sm:readInt32();
	return self
end

function MsgDef.Msg1660107:opcode()
	return 1660107
end

--[[ 请求生肖拆解(返回)--]]
MsgDef.Msg5660107 = {}
function MsgDef.Msg5660107:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.items = {} --[[(array<SimpleItemInfo>) 拆解后获得--]]
	return msg
end

function MsgDef.Msg5660107:encode(sm)
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5660107:decode(sm)
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5660107:opcode()
	return 5660107
end
--[[ 请求鸿蒙寻宝信息--]]
MsgDef.Msg1030693 = {}

function MsgDef.Msg1030693:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030693:encode(sm)
	return self
end

function MsgDef.Msg1030693:decode(sm)
	return self
end

function MsgDef.Msg1030693:opcode()
	return 1030693
end

--[[ 请求鸿蒙寻宝信息(返回)--]]
MsgDef.Msg5030693 = {}
function MsgDef.Msg5030693:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftFreeTimes = 0 --[[(int32) 剩余免费次数--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.lastUpdateTime = 0 --[[(int32) 上次免费次数更新时间--]]
	msg.allRecords = {} --[[(array<string>) 全服记录--]]
	msg.myRecords = {} --[[(array<string>) 个人记录--]]
	msg.isPackAnyThing = 0 --[[(int8) 临时仓库不为空--]]
	return msg
end

function MsgDef.Msg5030693:encode(sm)
	sm:writeInt32(self.leftFreeTimes);
	sm:writeInt32(self.score);
	sm:writeInt32(self.lastUpdateTime);
	sm:writeInt16(get_map_size(self.allRecords))
	for i,elm in ipairs(self.allRecords) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecords))
	for i,elm in ipairs(self.myRecords) do
		sm:writeString(elm);
	end
	sm:writeInt8(self.isPackAnyThing);
	return self
end

function MsgDef.Msg5030693:decode(sm)
	self.leftFreeTimes = sm:readInt32();
	self.score = sm:readInt32();
	self.lastUpdateTime = sm:readInt32();
	local allRecords_size = sm:readInt16()
	for i = 1,allRecords_size do
		local ele = sm:readString();
		table.insert(self.allRecords, ele)
	end
	local myRecords_size = sm:readInt16()
	for i = 1,myRecords_size do
		local ele = sm:readString();
		table.insert(self.myRecords, ele)
	end
	self.isPackAnyThing = sm:readInt8();
	return self
end


function MsgDef.Msg5030693:opcode()
	return 5030693
end
--[[ 请求鸿蒙寻宝积分商城--]]
MsgDef.Msg1030694 = {}

function MsgDef.Msg1030694:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 积分商城配置id--]]
	if msg.amount == nil then msg.amount = 0 end --[[(int32) 兑换次数--]]
	return msg
end

function MsgDef.Msg1030694:encode(sm)
	sm:writeInt32(self.cid);
	sm:writeInt32(self.amount);
	return self
end

function MsgDef.Msg1030694:decode(sm)
	self.cid = sm:readInt32();
	self.amount = sm:readInt32();
	return self
end

function MsgDef.Msg1030694:opcode()
	return 1030694
end

--[[ 请求鸿蒙寻宝积分商城(返回)--]]
MsgDef.Msg5030694 = {}
function MsgDef.Msg5030694:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.score = 0 --[[(int32) 积分--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换获得道具--]]
	return msg
end

function MsgDef.Msg5030694:encode(sm)
	sm:writeInt32(self.score);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030694:decode(sm)
	self.score = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030694:opcode()
	return 5030694
end
--[[ 请求鸿蒙寻宝--]]
MsgDef.Msg1030695 = {}

function MsgDef.Msg1030695:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.times == nil then msg.times = 0 end --[[(int32) 寻宝次数--]]
	return msg
end

function MsgDef.Msg1030695:encode(sm)
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030695:decode(sm)
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030695:opcode()
	return 1030695
end

--[[ 请求鸿蒙寻宝(返回)--]]
MsgDef.Msg5030695 = {}
function MsgDef.Msg5030695:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.times = 0 --[[(int32) 寻宝次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 寻宝获得道具--]]
	return msg
end

function MsgDef.Msg5030695:encode(sm)
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030695:decode(sm)
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030695:opcode()
	return 5030695
end
--[[ 请求生肖技能激活--]]
MsgDef.Msg1660108 = {}

function MsgDef.Msg1660108:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：取消激活  1：激活--]]
	if msg.type == nil then msg.type = 0 end --[[(int32) 生肖种类--]]
	return msg
end

function MsgDef.Msg1660108:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.type);
	return self
end

function MsgDef.Msg1660108:decode(sm)
	self.reqType = sm:readInt8();
	self.type = sm:readInt32();
	return self
end

function MsgDef.Msg1660108:opcode()
	return 1660108
end

--[[ 请求生肖技能激活(返回)--]]
MsgDef.Msg5660108 = {}
function MsgDef.Msg5660108:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：取消激活  1：激活--]]
	msg.sxInfo = MsgDef.SXInfo:create() --[[(SXInfo) 生肖信息--]]
	return msg
end

function MsgDef.Msg5660108:encode(sm)
	sm:writeInt8(self.reqType);
	self.sxInfo:encode(sm)
	return self
end

function MsgDef.Msg5660108:decode(sm)
	self.reqType = sm:readInt8();
	self.sxInfo:decode(sm)
	return self
end


function MsgDef.Msg5660108:opcode()
	return 5660108
end
--[[ 请求生肖宝藏--]]
MsgDef.Msg1030696 = {}

function MsgDef.Msg1030696:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	if msg.stage == nil then msg.stage = 0 end --[[(int32) 阶段（1-5）--]]
	if msg.moneyType == nil then msg.moneyType = 0 end --[[(int32) 金钱类型--]]
	return msg
end

function MsgDef.Msg1030696:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	sm:writeInt32(self.moneyType);
	return self
end

function MsgDef.Msg1030696:decode(sm)
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	self.moneyType = sm:readInt32();
	return self
end

function MsgDef.Msg1030696:opcode()
	return 1030696
end

--[[ 请求生肖宝藏(返回)--]]
MsgDef.Msg5030696 = {}
function MsgDef.Msg5030696:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.stage = 0 --[[(int32) 阶段（1-5）--]]
	msg.moneyType = 0 --[[(int32) 金钱类型--]]
	msg.freeTimes = 0 --[[(int32) 免费次数--]]
	msg.stageMax = 0 --[[(int32) 当前激活的最高阶段--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 抽奖获得的道具--]]
	return msg
end

function MsgDef.Msg5030696:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.stage);
	sm:writeInt32(self.moneyType);
	sm:writeInt32(self.freeTimes);
	sm:writeInt32(self.stageMax);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030696:decode(sm)
	self.reqType = sm:readInt8();
	self.stage = sm:readInt32();
	self.moneyType = sm:readInt32();
	self.freeTimes = sm:readInt32();
	self.stageMax = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030696:opcode()
	return 5030696
end
--[[ 请求生肖宝藏临时仓库--]]
MsgDef.Msg1030697 = {}

function MsgDef.Msg1030697:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：物品信息  1：一键取出--]]
	return msg
end

function MsgDef.Msg1030697:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030697:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030697:opcode()
	return 1030697
end

--[[ 请求生肖宝藏临时仓库(返回)--]]
MsgDef.Msg5030697 = {}
function MsgDef.Msg5030697:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：物品信息  1：一键取出--]]
	msg.itemInfos = {} --[[(array<ItemInfo>) 物品信息--]]
	msg.gotItems = {} --[[(array<SimpleItemInfo>) 取出获得--]]
	return msg
end

function MsgDef.Msg5030697:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.itemInfos)
	for i,elm in ipairs(self.itemInfos) do
		elm:encode(sm)
	end
	sm:writeInt16(#self.gotItems)
	for i,elm in ipairs(self.gotItems) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030697:decode(sm)
	self.reqType = sm:readInt8();
	local itemInfos_size = sm:readInt16()
	for i = 1,itemInfos_size do
		local element = MsgDef.ItemInfo:create():decode(sm)
		table.insert(self.itemInfos, element)
	end
	local gotItems_size = sm:readInt16()
	for i = 1,gotItems_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.gotItems, element)
	end
	return self
end


function MsgDef.Msg5030697:opcode()
	return 5030697
end
--[[ 请求冰雪节登录活动--]]
MsgDef.Msg1030698 = {}

function MsgDef.Msg1030698:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：领取登录奖励 2：领取累充奖励--]]
	return msg
end

function MsgDef.Msg1030698:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030698:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030698:opcode()
	return 1030698
end

--[[ 请求冰雪节登录活动(返回)--]]
MsgDef.Msg5030698 = {}
function MsgDef.Msg5030698:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示 1：领取登录奖励 2：领取累充奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030698:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030698:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030698:opcode()
	return 5030698
end
--[[ 请求冰雪节登山活动--]]
MsgDef.Msg1030699 = {}

function MsgDef.Msg1030699:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030699:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030699:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030699:opcode()
	return 1030699
end

--[[ 请求冰雪节登山活动(返回)--]]
MsgDef.Msg5030699 = {}
function MsgDef.Msg5030699:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.taskInfo = {} --[[(map<int32,int32>) 任务完成情况--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030699:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.taskInfo))
	for kn,elm in ipairs(self.taskInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030699:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local taskInfo_size = sm:readInt16()
	for i = 1,taskInfo_size do
		local kv = sm:readInt32();
		self.taskInfo[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030699:opcode()
	return 5030699
end
--[[ 请求冰雪节boss剩余时间--]]
MsgDef.Msg1030700 = {}

function MsgDef.Msg1030700:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030700:encode(sm)
	return self
end

function MsgDef.Msg1030700:decode(sm)
	return self
end

function MsgDef.Msg1030700:opcode()
	return 1030700
end

--[[ 请求冰雪节boss剩余时间(返回)--]]
MsgDef.Msg5030700 = {}
function MsgDef.Msg5030700:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030700:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030700:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030700:opcode()
	return 5030700
end
--[[ 请求冰雪节兑换--]]
MsgDef.Msg1030701 = {}

function MsgDef.Msg1030701:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030701:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030701:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030701:opcode()
	return 1030701
end

--[[ 请求冰雪节兑换(返回)--]]
MsgDef.Msg5030701 = {}
function MsgDef.Msg5030701:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.gotTimes = {} --[[(map<int32,int32>) 已经兑换的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030701:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotTimes))
	for kn,elm in ipairs(self.gotTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030701:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotTimes_size = sm:readInt16()
	for i = 1,gotTimes_size do
		local kv = sm:readInt32();
		self.gotTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030701:opcode()
	return 5030701
end
--[[ 请求消费抽抽乐--]]
MsgDef.Msg1030702 = {}

function MsgDef.Msg1030702:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	return msg
end

function MsgDef.Msg1030702:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030702:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030702:opcode()
	return 1030702
end

--[[ 请求消费抽抽乐(返回)--]]
MsgDef.Msg5030702 = {}
function MsgDef.Msg5030702:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.costSum = 0 --[[(int32) 消费总额--]]
	msg.gotTimes = 0 --[[(int32) 已经领取的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 领取的奖励--]]
	return msg
end

function MsgDef.Msg5030702:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.leftTime);
	sm:writeInt32(self.costSum);
	sm:writeInt32(self.gotTimes);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030702:decode(sm)
	self.reqType = sm:readInt8();
	self.leftTime = sm:readInt32();
	self.costSum = sm:readInt32();
	self.gotTimes = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030702:opcode()
	return 5030702
end
--[[ 请求小年登录--]]
MsgDef.Msg1030703 = {}

function MsgDef.Msg1030703:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：翻牌 2：领取--]]
	return msg
end

function MsgDef.Msg1030703:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030703:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030703:opcode()
	return 1030703
end

--[[ 请求小年登录(返回)--]]
MsgDef.Msg5030703 = {}
function MsgDef.Msg5030703:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：翻牌 2：领取--]]
	msg.typeMap = {} --[[(map<int32,int32>) 类型（天数--类型（1-4））--]]
	msg.scoreMap = {} --[[(map<int32,int32>) 积分（天数--积分（1-13））--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.czSum = 0 --[[(int32) 充值总数--]]
	msg.gotSign = 0 --[[(int32) 是否领取（1：领取）--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030703:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.typeMap))
	for kn,elm in ipairs(self.typeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.scoreMap))
	for kn,elm in ipairs(self.scoreMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.gotSign);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030703:decode(sm)
	self.reqType = sm:readInt8();
	local typeMap_size = sm:readInt16()
	for i = 1,typeMap_size do
		local kv = sm:readInt32();
		self.typeMap[kv] = sm:readInt32();
	end
	local scoreMap_size = sm:readInt16()
	for i = 1,scoreMap_size do
		local kv = sm:readInt32();
		self.scoreMap[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	self.czSum = sm:readInt32();
	self.gotSign = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030703:opcode()
	return 5030703
end
--[[ 生肖战斗力广播--]]
MsgDef.Msg8240304 = {}

function MsgDef.Msg8240304:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.power = {} --[[(map<int32,int32>) 每个生肖战力（种类id--战力）--]]
	return msg
end

function MsgDef.Msg8240304:encode(sm)
	sm:writeInt16(get_map_size(self.power))
	for kn,elm in ipairs(self.power) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg8240304:decode(sm)
	local power_size = sm:readInt16()
	for i = 1,power_size do
		local kv = sm:readInt32();
		self.power[kv] = sm:readInt32();
	end
	return self
end

function MsgDef.Msg8240304:opcode()
	return 8240304
end

--[[ 请求小年降妖除尘--]]
MsgDef.Msg1030704 = {}

function MsgDef.Msg1030704:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030704:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030704:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030704:opcode()
	return 1030704
end

--[[ 请求小年降妖除尘(返回)--]]
MsgDef.Msg5030704 = {}
function MsgDef.Msg5030704:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识（id--是否领取）--]]
	msg.rankInfos = {} --[[(array<ScoreRaningInfo>) 排名信息--]]
	msg.mine = MsgDef.ScoreRaningInfo:create() --[[(ScoreRaningInfo) 自身信息--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030704:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.rankInfos)
	for i,elm in ipairs(self.rankInfos) do
		elm:encode(sm)
	end
	self.mine:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030704:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local rankInfos_size = sm:readInt16()
	for i = 1,rankInfos_size do
		local element = MsgDef.ScoreRaningInfo:create():decode(sm)
		table.insert(self.rankInfos, element)
	end
	self.mine:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030704:opcode()
	return 5030704
end
--[[ 请求小年欢乐兑换--]]
MsgDef.Msg1030705 = {}

function MsgDef.Msg1030705:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1030705:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030705:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030705:opcode()
	return 1030705
end

--[[ 请求小年欢乐兑换(返回)--]]
MsgDef.Msg5030705 = {}
function MsgDef.Msg5030705:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.times = 0 --[[(int32) 次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030705:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030705:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030705:opcode()
	return 5030705
end
--[[ 请求小年boss--]]
MsgDef.Msg1030706 = {}

function MsgDef.Msg1030706:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030706:encode(sm)
	return self
end

function MsgDef.Msg1030706:decode(sm)
	return self
end

function MsgDef.Msg1030706:opcode()
	return 1030706
end

--[[ 请求小年boss(返回)--]]
MsgDef.Msg5030706 = {}
function MsgDef.Msg5030706:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030706:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030706:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030706:opcode()
	return 5030706
end
--[[ 请求小年祭灶--]]
MsgDef.Msg1030707 = {}

function MsgDef.Msg1030707:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次 3：抽五十次--]]
	return msg
end

function MsgDef.Msg1030707:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030707:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030707:opcode()
	return 1030707
end

--[[ 请求小年祭灶(返回)--]]
MsgDef.Msg5030707 = {}
function MsgDef.Msg5030707:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次 3：抽五十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.numMap = {} --[[(map<int32,int32>) 已经抽的数量--]]
	msg.allRecord = {} --[[(array<string>) 全服记录--]]
	msg.myRecord = {} --[[(array<string>) 个人记录--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030707:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt16(get_map_size(self.numMap))
	for kn,elm in ipairs(self.numMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.allRecord))
	for i,elm in ipairs(self.allRecord) do
		sm:writeString(elm);
	end
	sm:writeInt16(get_map_size(self.myRecord))
	for i,elm in ipairs(self.myRecord) do
		sm:writeString(elm);
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030707:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	local numMap_size = sm:readInt16()
	for i = 1,numMap_size do
		local kv = sm:readInt32();
		self.numMap[kv] = sm:readInt32();
	end
	local allRecord_size = sm:readInt16()
	for i = 1,allRecord_size do
		local ele = sm:readString();
		table.insert(self.allRecord, ele)
	end
	local myRecord_size = sm:readInt16()
	for i = 1,myRecord_size do
		local ele = sm:readString();
		table.insert(self.myRecord, ele)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030707:opcode()
	return 5030707
end
--[[ 小年豪礼--]]
MsgDef.Msg1030708 = {}

function MsgDef.Msg1030708:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030708:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030708:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030708:opcode()
	return 1030708
end

--[[ 小年豪礼(返回)--]]
MsgDef.Msg5030708 = {}
function MsgDef.Msg5030708:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 奖励领取标识--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.czSum = 0 --[[(int32) 累计充值的元宝数--]]
	return msg
end

function MsgDef.Msg5030708:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.czSum);
	return self
end

function MsgDef.Msg5030708:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.czSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030708:opcode()
	return 5030708
end
--[[ 请求春节活动日程--]]
MsgDef.Msg1030709 = {}

function MsgDef.Msg1030709:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030709:encode(sm)
	return self
end

function MsgDef.Msg1030709:decode(sm)
	return self
end

function MsgDef.Msg1030709:opcode()
	return 1030709
end

--[[ 请求春节活动日程(返回)--]]
MsgDef.Msg5030709 = {}
function MsgDef.Msg5030709:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030709:encode(sm)
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030709:decode(sm)
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030709:opcode()
	return 5030709
end
--[[ 请求春节一阶段登录--]]
MsgDef.Msg1030710 = {}

function MsgDef.Msg1030710:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	return msg
end

function MsgDef.Msg1030710:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030710:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030710:opcode()
	return 1030710
end

--[[ 请求春节一阶段登录(返回)--]]
MsgDef.Msg5030710 = {}
function MsgDef.Msg5030710:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取vip奖励--]]
	msg.normalAwardSign = 0 --[[(int8) 普通奖励领取标识--]]
	msg.vipAwardSign = 0 --[[(int8) vip奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030710:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.normalAwardSign);
	sm:writeInt8(self.vipAwardSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030710:decode(sm)
	self.reqType = sm:readInt8();
	self.normalAwardSign = sm:readInt8();
	self.vipAwardSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030710:opcode()
	return 5030710
end
--[[ 请求春节节节高升--]]
MsgDef.Msg1030711 = {}

function MsgDef.Msg1030711:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030711:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030711:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030711:opcode()
	return 1030711
end

--[[ 请求春节节节高升(返回)--]]
MsgDef.Msg5030711 = {}
function MsgDef.Msg5030711:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.taskInfo = {} --[[(map<int32,int32>) 任务完成情况--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030711:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.taskInfo))
	for kn,elm in ipairs(self.taskInfo) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030711:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local taskInfo_size = sm:readInt16()
	for i = 1,taskInfo_size do
		local kv = sm:readInt32();
		self.taskInfo[kv] = sm:readInt32();
	end
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030711:opcode()
	return 5030711
end
--[[ 请求春节二阶段登录--]]
MsgDef.Msg1030712 = {}

function MsgDef.Msg1030712:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取普通奖励 2：领取累充奖励--]]
	return msg
end

function MsgDef.Msg1030712:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030712:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030712:opcode()
	return 1030712
end

--[[ 请求春节二阶段登录(返回)--]]
MsgDef.Msg5030712 = {}
function MsgDef.Msg5030712:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：领取普通奖励 2：领取累充奖励--]]
	msg.loginSign = 0 --[[(int8) 登录奖励领取标识--]]
	msg.rechargeSign = 0 --[[(int8) 充值奖励领取标识--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rechargeSum = 0 --[[(int32) 已充值数--]]
	return msg
end

function MsgDef.Msg5030712:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt8(self.loginSign);
	sm:writeInt8(self.rechargeSign);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.rechargeSum);
	return self
end

function MsgDef.Msg5030712:decode(sm)
	self.reqType = sm:readInt8();
	self.loginSign = sm:readInt8();
	self.rechargeSign = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.rechargeSum = sm:readInt32();
	return self
end


function MsgDef.Msg5030712:opcode()
	return 5030712
end
--[[ 请求春节二阶段年年有余--]]
MsgDef.Msg1030713 = {}

function MsgDef.Msg1030713:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030713:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030713:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030713:opcode()
	return 1030713
end

--[[ 请求春节二阶段年年有余(返回)--]]
MsgDef.Msg5030713 = {}
function MsgDef.Msg5030713:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.score = 0 --[[(int32) 积分--]]
	msg.czSum = 0 --[[(int32) 充值的元宝数--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030713:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.score);
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030713:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.score = sm:readInt32();
	self.czSum = sm:readInt32();
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030713:opcode()
	return 5030713
end
--[[ 请求春节二阶段BOSS--]]
MsgDef.Msg1030714 = {}

function MsgDef.Msg1030714:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030714:encode(sm)
	return self
end

function MsgDef.Msg1030714:decode(sm)
	return self
end

function MsgDef.Msg1030714:opcode()
	return 1030714
end

--[[ 请求春节二阶段BOSS(返回)--]]
MsgDef.Msg5030714 = {}
function MsgDef.Msg5030714:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030714:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030714:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030714:opcode()
	return 5030714
end
--[[ 请求春节二阶段兑换--]]
MsgDef.Msg1030715 = {}

function MsgDef.Msg1030715:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 兑换id--]]
	return msg
end

function MsgDef.Msg1030715:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030715:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030715:opcode()
	return 1030715
end

--[[ 请求春节二阶段兑换(返回)--]]
MsgDef.Msg5030715 = {}
function MsgDef.Msg5030715:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 兑换id--]]
	msg.gotTimes = {} --[[(map<int32,int32>) 已经兑换的次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	return msg
end

function MsgDef.Msg5030715:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotTimes))
	for kn,elm in ipairs(self.gotTimes) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	return self
end

function MsgDef.Msg5030715:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotTimes_size = sm:readInt16()
	for i = 1,gotTimes_size do
		local kv = sm:readInt32();
		self.gotTimes[kv] = sm:readInt32();
	end
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030715:opcode()
	return 5030715
end
--[[ 请求春节三阶段登录--]]
MsgDef.Msg1030716 = {}

function MsgDef.Msg1030716:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：领取--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	return msg
end

function MsgDef.Msg1030716:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	return self
end

function MsgDef.Msg1030716:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	return self
end

function MsgDef.Msg1030716:opcode()
	return 1030716
end

--[[ 请求春节三阶段登录(返回)--]]
MsgDef.Msg5030716 = {}
function MsgDef.Msg5030716:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:领取--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.gotSigns = {} --[[(map<int32,int32>) 领取标识--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030716:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt16(get_map_size(self.gotSigns))
	for kn,elm in ipairs(self.gotSigns) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030716:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	local gotSigns_size = sm:readInt16()
	for i = 1,gotSigns_size do
		local kv = sm:readInt32();
		self.gotSigns[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030716:opcode()
	return 5030716
end
--[[ 请求春节三阶段爆竹贺岁--]]
MsgDef.Msg1030717 = {}

function MsgDef.Msg1030717:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：购买--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 0:50响  1：一百响--]]
	if msg.num == nil then msg.num = 0 end --[[(int32) 数量--]]
	return msg
end

function MsgDef.Msg1030717:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.num);
	return self
end

function MsgDef.Msg1030717:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.num = sm:readInt32();
	return self
end

function MsgDef.Msg1030717:opcode()
	return 1030717
end

--[[ 请求春节三阶段爆竹贺岁(返回)--]]
MsgDef.Msg5030717 = {}
function MsgDef.Msg5030717:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:购买--]]
	msg.cid = 0 --[[(int32) 0:50响  1：一百响--]]
	msg.num = 0 --[[(int32) 数量--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的道具--]]
	return msg
end

function MsgDef.Msg5030717:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.num);
	sm:writeInt32(self.leftTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030717:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.num = sm:readInt32();
	self.leftTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030717:opcode()
	return 5030717
end
--[[ 请求春节第四阶段登录--]]
MsgDef.Msg1030718 = {}

function MsgDef.Msg1030718:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示 1：翻牌 2：领取--]]
	return msg
end

function MsgDef.Msg1030718:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030718:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030718:opcode()
	return 1030718
end

--[[ 请求春节第四阶段登录(返回)--]]
MsgDef.Msg5030718 = {}
function MsgDef.Msg5030718:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示 1：翻牌 2：领取--]]
	msg.typeMap = {} --[[(map<int32,int32>) 类型（天数--类型（1-4））--]]
	msg.scoreMap = {} --[[(map<int32,int32>) 积分（天数--积分（1-13））--]]
	msg.curDay = 0 --[[(int32) 当前第几天 从1开始--]]
	msg.czSum = 0 --[[(int32) 充值总数--]]
	msg.gotSign = 0 --[[(int32) 是否领取（0 ：未领取 1：已领取 2：已领取两次）--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 奖励--]]
	return msg
end

function MsgDef.Msg5030718:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(get_map_size(self.typeMap))
	for kn,elm in ipairs(self.typeMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.scoreMap))
	for kn,elm in ipairs(self.scoreMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt32(self.curDay);
	sm:writeInt32(self.czSum);
	sm:writeInt32(self.gotSign);
	sm:writeInt32(self.actEndTime);
	sm:writeInt32(self.actStartTime);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	return self
end

function MsgDef.Msg5030718:decode(sm)
	self.reqType = sm:readInt8();
	local typeMap_size = sm:readInt16()
	for i = 1,typeMap_size do
		local kv = sm:readInt32();
		self.typeMap[kv] = sm:readInt32();
	end
	local scoreMap_size = sm:readInt16()
	for i = 1,scoreMap_size do
		local kv = sm:readInt32();
		self.scoreMap[kv] = sm:readInt32();
	end
	self.curDay = sm:readInt32();
	self.czSum = sm:readInt32();
	self.gotSign = sm:readInt32();
	self.actEndTime = sm:readInt32();
	self.actStartTime = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	return self
end


function MsgDef.Msg5030718:opcode()
	return 5030718
end
--[[ 小年祭灶广播--]]
MsgDef.Msg8240305 = {}

function MsgDef.Msg8240305:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.nums = {} --[[(map<int32,int32>) 数量--]]
	msg.allRecord = {} --[[(array<string>) 全服记录--]]
	return msg
end

function MsgDef.Msg8240305:encode(sm)
	sm:writeInt16(get_map_size(self.nums))
	for kn,elm in ipairs(self.nums) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	sm:writeInt16(get_map_size(self.allRecord))
	for i,elm in ipairs(self.allRecord) do
		sm:writeString(elm);
	end
	return self
end

function MsgDef.Msg8240305:decode(sm)
	local nums_size = sm:readInt16()
	for i = 1,nums_size do
		local kv = sm:readInt32();
		self.nums[kv] = sm:readInt32();
	end
	local allRecord_size = sm:readInt16()
	for i = 1,allRecord_size do
		local elm = sm:readString();
		table.insert(self.allRecord, elm)
	end
	return self
end

function MsgDef.Msg8240305:opcode()
	return 8240305
end

--[[ 请求春节四阶段迎拜财神--]]
MsgDef.Msg1030719 = {}

function MsgDef.Msg1030719:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	return msg
end

function MsgDef.Msg1030719:encode(sm)
	sm:writeInt8(self.reqType);
	return self
end

function MsgDef.Msg1030719:decode(sm)
	self.reqType = sm:readInt8();
	return self
end

function MsgDef.Msg1030719:opcode()
	return 1030719
end

--[[ 请求春节四阶段迎拜财神(返回)--]]
MsgDef.Msg5030719 = {}
function MsgDef.Msg5030719:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0：显示  1：抽一次 2：抽十次--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 获得的奖励--]]
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030719:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030719:decode(sm)
	self.reqType = sm:readInt8();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030719:opcode()
	return 5030719
end
--[[ 请求春节四阶段消费排行--]]
MsgDef.Msg1030720 = {}

function MsgDef.Msg1030720:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030720:encode(sm)
	return self
end

function MsgDef.Msg1030720:decode(sm)
	return self
end

function MsgDef.Msg1030720:opcode()
	return 1030720
end

--[[ 请求春节四阶段消费排行(返回)--]]
MsgDef.Msg5030720 = {}
function MsgDef.Msg5030720:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.rankingInfos = {} --[[(array<SimplePowerRankInfo>) 排行--]]
	msg.mine = MsgDef.SimplePowerRankInfo:create() --[[(SimplePowerRankInfo) 自己的信息--]]
	msg.before = 0 --[[(int32) 前一名的积分--]]
	return msg
end

function MsgDef.Msg5030720:encode(sm)
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(#self.rankingInfos)
	for i,elm in ipairs(self.rankingInfos) do
		elm:encode(sm)
	end
	self.mine:encode(sm)
	sm:writeInt32(self.before);
	return self
end

function MsgDef.Msg5030720:decode(sm)
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local rankingInfos_size = sm:readInt16()
	for i = 1,rankingInfos_size do
		local element = MsgDef.SimplePowerRankInfo:create():decode(sm)
		table.insert(self.rankingInfos, element)
	end
	self.mine:decode(sm)
	self.before = sm:readInt32();
	return self
end


function MsgDef.Msg5030720:opcode()
	return 5030720
end
--[[ 请求春节四阶段BOSS--]]
MsgDef.Msg1030721 = {}

function MsgDef.Msg1030721:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	return msg
end

function MsgDef.Msg1030721:encode(sm)
	return self
end

function MsgDef.Msg1030721:decode(sm)
	return self
end

function MsgDef.Msg1030721:opcode()
	return 1030721
end

--[[ 请求春节四阶段BOSS(返回)--]]
MsgDef.Msg5030721 = {}
function MsgDef.Msg5030721:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.leftTime = 0 --[[(int32) 活动剩余时间--]]
	return msg
end

function MsgDef.Msg5030721:encode(sm)
	sm:writeInt32(self.leftTime);
	return self
end

function MsgDef.Msg5030721:decode(sm)
	self.leftTime = sm:readInt32();
	return self
end


function MsgDef.Msg5030721:opcode()
	return 5030721
end
--[[ 请求春节四阶段合成兑换--]]
MsgDef.Msg1030722 = {}

function MsgDef.Msg1030722:create(val_)
	local msg = val_ or {};
	setmetatable(msg,self);
	self.__index = self;
	if msg.reqType == nil then msg.reqType = 0 end --[[(int8) 0：显示  1：兑换--]]
	if msg.cid == nil then msg.cid = 0 end --[[(int32) 配置id--]]
	if msg.times == nil then msg.times = 0 end --[[(int32) 次数--]]
	return msg
end

function MsgDef.Msg1030722:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	return self
end

function MsgDef.Msg1030722:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	return self
end

function MsgDef.Msg1030722:opcode()
	return 1030722
end

--[[ 请求春节四阶段合成兑换(返回)--]]
MsgDef.Msg5030722 = {}
function MsgDef.Msg5030722:create()
	local msg = {};
	setmetatable(msg,self);
	self.__index = self;
	msg.reqType = 0 --[[(int8) 0:显示 1:兑换--]]
	msg.cid = 0 --[[(int32) 配置id--]]
	msg.times = 0 --[[(int32) 次数--]]
	msg.items = {} --[[(array<SimpleItemInfo>) 兑换的物品--]]
	msg.actStartTime = 0 --[[(int32) 活动开始时间--]]
	msg.actEndTime = 0 --[[(int32) 活动结束时间--]]
	msg.timesMap = {} --[[(map<int32,int32>) 已经兑换的次数（id--次数）--]]
	return msg
end

function MsgDef.Msg5030722:encode(sm)
	sm:writeInt8(self.reqType);
	sm:writeInt32(self.cid);
	sm:writeInt32(self.times);
	sm:writeInt16(#self.items)
	for i,elm in ipairs(self.items) do
		elm:encode(sm)
	end
	sm:writeInt32(self.actStartTime);
	sm:writeInt32(self.actEndTime);
	sm:writeInt16(get_map_size(self.timesMap))
	for kn,elm in ipairs(self.timesMap) do
		sm:writeInt32(kn);
		sm:writeInt32(elm);
	end
	return self
end

function MsgDef.Msg5030722:decode(sm)
	self.reqType = sm:readInt8();
	self.cid = sm:readInt32();
	self.times = sm:readInt32();
	local items_size = sm:readInt16()
	for i = 1,items_size do
		local element = MsgDef.SimpleItemInfo:create():decode(sm)
		table.insert(self.items, element)
	end
	self.actStartTime = sm:readInt32();
	self.actEndTime = sm:readInt32();
	local timesMap_size = sm:readInt16()
	for i = 1,timesMap_size do
		local kv = sm:readInt32();
		self.timesMap[kv] = sm:readInt32();
	end
	return self
end


function MsgDef.Msg5030722:opcode()
	return 5030722
end


MsgDef[1010101] = MsgDef.Msg1010101;
MsgDef[5010101] = MsgDef.Msg5010101;
MsgDef[1010102] = MsgDef.Msg1010102;
MsgDef[5010102] = MsgDef.Msg5010102;
MsgDef[1010103] = MsgDef.Msg1010103;
MsgDef[5010103] = MsgDef.Msg5010103;
MsgDef[1010104] = MsgDef.Msg1010104;
MsgDef[5010104] = MsgDef.Msg5010104;
MsgDef[1010201] = MsgDef.Msg1010201;
MsgDef[5010201] = MsgDef.Msg5010201;
MsgDef[1010901] = MsgDef.Msg1010901;
MsgDef[5010901] = MsgDef.Msg5010901;
MsgDef[1019901] = MsgDef.Msg1019901;
MsgDef[5019901] = MsgDef.Msg5019901;
MsgDef[1019902] = MsgDef.Msg1019902;
MsgDef[5019902] = MsgDef.Msg5019902;
MsgDef[1019903] = MsgDef.Msg1019903;
MsgDef[5019903] = MsgDef.Msg5019903;
MsgDef[1020101] = MsgDef.Msg1020101;
MsgDef[5020101] = MsgDef.Msg5020101;
MsgDef[1020102] = MsgDef.Msg1020102;
MsgDef[5020102] = MsgDef.Msg5020102;
MsgDef[1020103] = MsgDef.Msg1020103;
MsgDef[5020103] = MsgDef.Msg5020103;
MsgDef[1020104] = MsgDef.Msg1020104;
MsgDef[5020104] = MsgDef.Msg5020104;
MsgDef[1020105] = MsgDef.Msg1020105;
MsgDef[5020105] = MsgDef.Msg5020105;
MsgDef[1020106] = MsgDef.Msg1020106;
MsgDef[5020106] = MsgDef.Msg5020106;
MsgDef[1020201] = MsgDef.Msg1020201;
MsgDef[5020201] = MsgDef.Msg5020201;
MsgDef[1020202] = MsgDef.Msg1020202;
MsgDef[5020202] = MsgDef.Msg5020202;
MsgDef[1020203] = MsgDef.Msg1020203;
MsgDef[5020203] = MsgDef.Msg5020203;
MsgDef[1020204] = MsgDef.Msg1020204;
MsgDef[5020204] = MsgDef.Msg5020204;
MsgDef[1020205] = MsgDef.Msg1020205;
MsgDef[5020205] = MsgDef.Msg5020205;
MsgDef[1020206] = MsgDef.Msg1020206;
MsgDef[5020206] = MsgDef.Msg5020206;
MsgDef[1020207] = MsgDef.Msg1020207;
MsgDef[5020207] = MsgDef.Msg5020207;
MsgDef[1020301] = MsgDef.Msg1020301;
MsgDef[5020301] = MsgDef.Msg5020301;
MsgDef[1020302] = MsgDef.Msg1020302;
MsgDef[5020302] = MsgDef.Msg5020302;
MsgDef[1020401] = MsgDef.Msg1020401;
MsgDef[5020401] = MsgDef.Msg5020401;
MsgDef[1020402] = MsgDef.Msg1020402;
MsgDef[5020402] = MsgDef.Msg5020402;
MsgDef[1020403] = MsgDef.Msg1020403;
MsgDef[5020403] = MsgDef.Msg5020403;
MsgDef[1020411] = MsgDef.Msg1020411;
MsgDef[5020411] = MsgDef.Msg5020411;
MsgDef[1020412] = MsgDef.Msg1020412;
MsgDef[5020412] = MsgDef.Msg5020412;
MsgDef[1020413] = MsgDef.Msg1020413;
MsgDef[5020413] = MsgDef.Msg5020413;
MsgDef[1020414] = MsgDef.Msg1020414;
MsgDef[5020414] = MsgDef.Msg5020414;
MsgDef[1020415] = MsgDef.Msg1020415;
MsgDef[5020415] = MsgDef.Msg5020415;
MsgDef[1020421] = MsgDef.Msg1020421;
MsgDef[5020421] = MsgDef.Msg5020421;
MsgDef[1020422] = MsgDef.Msg1020422;
MsgDef[5020422] = MsgDef.Msg5020422;
MsgDef[1020423] = MsgDef.Msg1020423;
MsgDef[5020423] = MsgDef.Msg5020423;
MsgDef[1020424] = MsgDef.Msg1020424;
MsgDef[5020424] = MsgDef.Msg5020424;
MsgDef[1020501] = MsgDef.Msg1020501;
MsgDef[5020501] = MsgDef.Msg5020501;
MsgDef[1020502] = MsgDef.Msg1020502;
MsgDef[5020502] = MsgDef.Msg5020502;
MsgDef[1020503] = MsgDef.Msg1020503;
MsgDef[5020503] = MsgDef.Msg5020503;
MsgDef[1020504] = MsgDef.Msg1020504;
MsgDef[5020504] = MsgDef.Msg5020504;
MsgDef[1023101] = MsgDef.Msg1023101;
MsgDef[5023101] = MsgDef.Msg5023101;
MsgDef[1024101] = MsgDef.Msg1024101;
MsgDef[5024101] = MsgDef.Msg5024101;
MsgDef[1024102] = MsgDef.Msg1024102;
MsgDef[5024102] = MsgDef.Msg5024102;
MsgDef[1024103] = MsgDef.Msg1024103;
MsgDef[5024103] = MsgDef.Msg5024103;
MsgDef[1024104] = MsgDef.Msg1024104;
MsgDef[5024104] = MsgDef.Msg5024104;
MsgDef[1024201] = MsgDef.Msg1024201;
MsgDef[5024201] = MsgDef.Msg5024201;
MsgDef[1024202] = MsgDef.Msg1024202;
MsgDef[5024202] = MsgDef.Msg5024202;
MsgDef[1024301] = MsgDef.Msg1024301;
MsgDef[5024301] = MsgDef.Msg5024301;
MsgDef[1024302] = MsgDef.Msg1024302;
MsgDef[5024302] = MsgDef.Msg5024302;
MsgDef[1024311] = MsgDef.Msg1024311;
MsgDef[5024311] = MsgDef.Msg5024311;
MsgDef[1024320] = MsgDef.Msg1024320;
MsgDef[5024320] = MsgDef.Msg5024320;
MsgDef[1024401] = MsgDef.Msg1024401;
MsgDef[5024401] = MsgDef.Msg5024401;
MsgDef[1024402] = MsgDef.Msg1024402;
MsgDef[5024402] = MsgDef.Msg5024402;
MsgDef[1024403] = MsgDef.Msg1024403;
MsgDef[5024403] = MsgDef.Msg5024403;
MsgDef[1024501] = MsgDef.Msg1024501;
MsgDef[5024501] = MsgDef.Msg5024501;
MsgDef[1024502] = MsgDef.Msg1024502;
MsgDef[5024502] = MsgDef.Msg5024502;
MsgDef[1024503] = MsgDef.Msg1024503;
MsgDef[5024503] = MsgDef.Msg5024503;
MsgDef[1025101] = MsgDef.Msg1025101;
MsgDef[5025101] = MsgDef.Msg5025101;
MsgDef[1025102] = MsgDef.Msg1025102;
MsgDef[5025102] = MsgDef.Msg5025102;
MsgDef[1025103] = MsgDef.Msg1025103;
MsgDef[5025103] = MsgDef.Msg5025103;
MsgDef[1025104] = MsgDef.Msg1025104;
MsgDef[5025104] = MsgDef.Msg5025104;
MsgDef[1025105] = MsgDef.Msg1025105;
MsgDef[5025105] = MsgDef.Msg5025105;
MsgDef[1026101] = MsgDef.Msg1026101;
MsgDef[5026101] = MsgDef.Msg5026101;
MsgDef[1027101] = MsgDef.Msg1027101;
MsgDef[5027101] = MsgDef.Msg5027101;
MsgDef[1027102] = MsgDef.Msg1027102;
MsgDef[5027102] = MsgDef.Msg5027102;
MsgDef[1027103] = MsgDef.Msg1027103;
MsgDef[5027103] = MsgDef.Msg5027103;
MsgDef[1027104] = MsgDef.Msg1027104;
MsgDef[5027104] = MsgDef.Msg5027104;
MsgDef[1027105] = MsgDef.Msg1027105;
MsgDef[5027105] = MsgDef.Msg5027105;
MsgDef[1027106] = MsgDef.Msg1027106;
MsgDef[5027106] = MsgDef.Msg5027106;
MsgDef[1027107] = MsgDef.Msg1027107;
MsgDef[5027107] = MsgDef.Msg5027107;
MsgDef[1027201] = MsgDef.Msg1027201;
MsgDef[5027201] = MsgDef.Msg5027201;
MsgDef[1027202] = MsgDef.Msg1027202;
MsgDef[5027202] = MsgDef.Msg5027202;
MsgDef[1027203] = MsgDef.Msg1027203;
MsgDef[5027203] = MsgDef.Msg5027203;
MsgDef[1027204] = MsgDef.Msg1027204;
MsgDef[5027204] = MsgDef.Msg5027204;
MsgDef[1027205] = MsgDef.Msg1027205;
MsgDef[5027205] = MsgDef.Msg5027205;
MsgDef[1027301] = MsgDef.Msg1027301;
MsgDef[5027301] = MsgDef.Msg5027301;
MsgDef[1027302] = MsgDef.Msg1027302;
MsgDef[5027302] = MsgDef.Msg5027302;
MsgDef[1027303] = MsgDef.Msg1027303;
MsgDef[5027303] = MsgDef.Msg5027303;
MsgDef[1027304] = MsgDef.Msg1027304;
MsgDef[5027304] = MsgDef.Msg5027304;
MsgDef[1027305] = MsgDef.Msg1027305;
MsgDef[5027305] = MsgDef.Msg5027305;
MsgDef[1027306] = MsgDef.Msg1027306;
MsgDef[5027306] = MsgDef.Msg5027306;
MsgDef[1027307] = MsgDef.Msg1027307;
MsgDef[5027307] = MsgDef.Msg5027307;
MsgDef[1027308] = MsgDef.Msg1027308;
MsgDef[5027308] = MsgDef.Msg5027308;
MsgDef[1027309] = MsgDef.Msg1027309;
MsgDef[5027309] = MsgDef.Msg5027309;
MsgDef[1027310] = MsgDef.Msg1027310;
MsgDef[5027310] = MsgDef.Msg5027310;
MsgDef[1027401] = MsgDef.Msg1027401;
MsgDef[5027401] = MsgDef.Msg5027401;
MsgDef[1027402] = MsgDef.Msg1027402;
MsgDef[5027402] = MsgDef.Msg5027402;
MsgDef[1027403] = MsgDef.Msg1027403;
MsgDef[5027403] = MsgDef.Msg5027403;
MsgDef[1027404] = MsgDef.Msg1027404;
MsgDef[5027404] = MsgDef.Msg5027404;
MsgDef[1027405] = MsgDef.Msg1027405;
MsgDef[5027405] = MsgDef.Msg5027405;
MsgDef[1027406] = MsgDef.Msg1027406;
MsgDef[5027406] = MsgDef.Msg5027406;
MsgDef[1030101] = MsgDef.Msg1030101;
MsgDef[5030101] = MsgDef.Msg5030101;
MsgDef[1030102] = MsgDef.Msg1030102;
MsgDef[5030102] = MsgDef.Msg5030102;
MsgDef[1030103] = MsgDef.Msg1030103;
MsgDef[5030103] = MsgDef.Msg5030103;
MsgDef[1030104] = MsgDef.Msg1030104;
MsgDef[5030104] = MsgDef.Msg5030104;
MsgDef[1030105] = MsgDef.Msg1030105;
MsgDef[5030105] = MsgDef.Msg5030105;
MsgDef[1030106] = MsgDef.Msg1030106;
MsgDef[5030106] = MsgDef.Msg5030106;
MsgDef[1030107] = MsgDef.Msg1030107;
MsgDef[5030107] = MsgDef.Msg5030107;
MsgDef[1030108] = MsgDef.Msg1030108;
MsgDef[5030108] = MsgDef.Msg5030108;
MsgDef[1030109] = MsgDef.Msg1030109;
MsgDef[5030109] = MsgDef.Msg5030109;
MsgDef[1030110] = MsgDef.Msg1030110;
MsgDef[5030110] = MsgDef.Msg5030110;
MsgDef[1030111] = MsgDef.Msg1030111;
MsgDef[5030111] = MsgDef.Msg5030111;
MsgDef[1030112] = MsgDef.Msg1030112;
MsgDef[5030112] = MsgDef.Msg5030112;
MsgDef[1030113] = MsgDef.Msg1030113;
MsgDef[5030113] = MsgDef.Msg5030113;
MsgDef[1030114] = MsgDef.Msg1030114;
MsgDef[5030114] = MsgDef.Msg5030114;
MsgDef[1030115] = MsgDef.Msg1030115;
MsgDef[5030115] = MsgDef.Msg5030115;
MsgDef[1030116] = MsgDef.Msg1030116;
MsgDef[5030116] = MsgDef.Msg5030116;
MsgDef[1030117] = MsgDef.Msg1030117;
MsgDef[5030117] = MsgDef.Msg5030117;
MsgDef[1030118] = MsgDef.Msg1030118;
MsgDef[5030118] = MsgDef.Msg5030118;
MsgDef[1030119] = MsgDef.Msg1030119;
MsgDef[5030119] = MsgDef.Msg5030119;
MsgDef[1030120] = MsgDef.Msg1030120;
MsgDef[5030120] = MsgDef.Msg5030120;
MsgDef[1030121] = MsgDef.Msg1030121;
MsgDef[5030121] = MsgDef.Msg5030121;
MsgDef[1030122] = MsgDef.Msg1030122;
MsgDef[5030122] = MsgDef.Msg5030122;
MsgDef[1030123] = MsgDef.Msg1030123;
MsgDef[5030123] = MsgDef.Msg5030123;
MsgDef[1030124] = MsgDef.Msg1030124;
MsgDef[5030124] = MsgDef.Msg5030124;
MsgDef[1030125] = MsgDef.Msg1030125;
MsgDef[5030125] = MsgDef.Msg5030125;
MsgDef[1030126] = MsgDef.Msg1030126;
MsgDef[5030126] = MsgDef.Msg5030126;
MsgDef[1030130] = MsgDef.Msg1030130;
MsgDef[5030130] = MsgDef.Msg5030130;
MsgDef[1030131] = MsgDef.Msg1030131;
MsgDef[5030131] = MsgDef.Msg5030131;
MsgDef[1030132] = MsgDef.Msg1030132;
MsgDef[5030132] = MsgDef.Msg5030132;
MsgDef[1030133] = MsgDef.Msg1030133;
MsgDef[5030133] = MsgDef.Msg5030133;
MsgDef[1030134] = MsgDef.Msg1030134;
MsgDef[5030134] = MsgDef.Msg5030134;
MsgDef[1030135] = MsgDef.Msg1030135;
MsgDef[5030135] = MsgDef.Msg5030135;
MsgDef[1030140] = MsgDef.Msg1030140;
MsgDef[5030140] = MsgDef.Msg5030140;
MsgDef[1030141] = MsgDef.Msg1030141;
MsgDef[5030141] = MsgDef.Msg5030141;
MsgDef[1030142] = MsgDef.Msg1030142;
MsgDef[5030142] = MsgDef.Msg5030142;
MsgDef[1030143] = MsgDef.Msg1030143;
MsgDef[5030143] = MsgDef.Msg5030143;
MsgDef[1030145] = MsgDef.Msg1030145;
MsgDef[5030145] = MsgDef.Msg5030145;
MsgDef[1030146] = MsgDef.Msg1030146;
MsgDef[5030146] = MsgDef.Msg5030146;
MsgDef[1030147] = MsgDef.Msg1030147;
MsgDef[5030147] = MsgDef.Msg5030147;
MsgDef[1030148] = MsgDef.Msg1030148;
MsgDef[5030148] = MsgDef.Msg5030148;
MsgDef[1030149] = MsgDef.Msg1030149;
MsgDef[5030149] = MsgDef.Msg5030149;
MsgDef[1030150] = MsgDef.Msg1030150;
MsgDef[5030150] = MsgDef.Msg5030150;
MsgDef[1030151] = MsgDef.Msg1030151;
MsgDef[5030151] = MsgDef.Msg5030151;
MsgDef[1030152] = MsgDef.Msg1030152;
MsgDef[5030152] = MsgDef.Msg5030152;
MsgDef[1030153] = MsgDef.Msg1030153;
MsgDef[5030153] = MsgDef.Msg5030153;
MsgDef[1030154] = MsgDef.Msg1030154;
MsgDef[5030154] = MsgDef.Msg5030154;
MsgDef[1030155] = MsgDef.Msg1030155;
MsgDef[5030155] = MsgDef.Msg5030155;
MsgDef[1030156] = MsgDef.Msg1030156;
MsgDef[5030156] = MsgDef.Msg5030156;
MsgDef[1030157] = MsgDef.Msg1030157;
MsgDef[5030157] = MsgDef.Msg5030157;
MsgDef[1030158] = MsgDef.Msg1030158;
MsgDef[5030158] = MsgDef.Msg5030158;
MsgDef[1030159] = MsgDef.Msg1030159;
MsgDef[5030159] = MsgDef.Msg5030159;
MsgDef[1030160] = MsgDef.Msg1030160;
MsgDef[5030160] = MsgDef.Msg5030160;
MsgDef[1030161] = MsgDef.Msg1030161;
MsgDef[5030161] = MsgDef.Msg5030161;
MsgDef[1030162] = MsgDef.Msg1030162;
MsgDef[5030162] = MsgDef.Msg5030162;
MsgDef[1030163] = MsgDef.Msg1030163;
MsgDef[5030163] = MsgDef.Msg5030163;
MsgDef[1030164] = MsgDef.Msg1030164;
MsgDef[5030164] = MsgDef.Msg5030164;
MsgDef[1030165] = MsgDef.Msg1030165;
MsgDef[5030165] = MsgDef.Msg5030165;
MsgDef[1030166] = MsgDef.Msg1030166;
MsgDef[5030166] = MsgDef.Msg5030166;
MsgDef[1030167] = MsgDef.Msg1030167;
MsgDef[5030167] = MsgDef.Msg5030167;
MsgDef[1030168] = MsgDef.Msg1030168;
MsgDef[5030168] = MsgDef.Msg5030168;
MsgDef[1030169] = MsgDef.Msg1030169;
MsgDef[5030169] = MsgDef.Msg5030169;
MsgDef[1030170] = MsgDef.Msg1030170;
MsgDef[5030170] = MsgDef.Msg5030170;
MsgDef[1030171] = MsgDef.Msg1030171;
MsgDef[5030171] = MsgDef.Msg5030171;
MsgDef[1030172] = MsgDef.Msg1030172;
MsgDef[5030172] = MsgDef.Msg5030172;
MsgDef[1030175] = MsgDef.Msg1030175;
MsgDef[5030175] = MsgDef.Msg5030175;
MsgDef[1030176] = MsgDef.Msg1030176;
MsgDef[5030176] = MsgDef.Msg5030176;
MsgDef[1030177] = MsgDef.Msg1030177;
MsgDef[5030177] = MsgDef.Msg5030177;
MsgDef[1030178] = MsgDef.Msg1030178;
MsgDef[5030178] = MsgDef.Msg5030178;
MsgDef[1030179] = MsgDef.Msg1030179;
MsgDef[5030179] = MsgDef.Msg5030179;
MsgDef[1030181] = MsgDef.Msg1030181;
MsgDef[5030181] = MsgDef.Msg5030181;
MsgDef[1030182] = MsgDef.Msg1030182;
MsgDef[5030182] = MsgDef.Msg5030182;
MsgDef[1030183] = MsgDef.Msg1030183;
MsgDef[5030183] = MsgDef.Msg5030183;
MsgDef[1030201] = MsgDef.Msg1030201;
MsgDef[5030201] = MsgDef.Msg5030201;
MsgDef[1030202] = MsgDef.Msg1030202;
MsgDef[5030202] = MsgDef.Msg5030202;
MsgDef[1030203] = MsgDef.Msg1030203;
MsgDef[5030203] = MsgDef.Msg5030203;
MsgDef[1030204] = MsgDef.Msg1030204;
MsgDef[5030204] = MsgDef.Msg5030204;
MsgDef[1030205] = MsgDef.Msg1030205;
MsgDef[5030205] = MsgDef.Msg5030205;
MsgDef[1030206] = MsgDef.Msg1030206;
MsgDef[5030206] = MsgDef.Msg5030206;
MsgDef[1030207] = MsgDef.Msg1030207;
MsgDef[5030207] = MsgDef.Msg5030207;
MsgDef[1030208] = MsgDef.Msg1030208;
MsgDef[5030208] = MsgDef.Msg5030208;
MsgDef[1030209] = MsgDef.Msg1030209;
MsgDef[5030209] = MsgDef.Msg5030209;
MsgDef[1030210] = MsgDef.Msg1030210;
MsgDef[5030210] = MsgDef.Msg5030210;
MsgDef[1030211] = MsgDef.Msg1030211;
MsgDef[5030211] = MsgDef.Msg5030211;
MsgDef[1030212] = MsgDef.Msg1030212;
MsgDef[5030212] = MsgDef.Msg5030212;
MsgDef[1030301] = MsgDef.Msg1030301;
MsgDef[5030301] = MsgDef.Msg5030301;
MsgDef[1030302] = MsgDef.Msg1030302;
MsgDef[5030302] = MsgDef.Msg5030302;
MsgDef[1030303] = MsgDef.Msg1030303;
MsgDef[5030303] = MsgDef.Msg5030303;
MsgDef[1030304] = MsgDef.Msg1030304;
MsgDef[5030304] = MsgDef.Msg5030304;
MsgDef[1030305] = MsgDef.Msg1030305;
MsgDef[5030305] = MsgDef.Msg5030305;
MsgDef[1030306] = MsgDef.Msg1030306;
MsgDef[5030306] = MsgDef.Msg5030306;
MsgDef[1030307] = MsgDef.Msg1030307;
MsgDef[5030307] = MsgDef.Msg5030307;
MsgDef[1030308] = MsgDef.Msg1030308;
MsgDef[5030308] = MsgDef.Msg5030308;
MsgDef[1030309] = MsgDef.Msg1030309;
MsgDef[5030309] = MsgDef.Msg5030309;
MsgDef[1030310] = MsgDef.Msg1030310;
MsgDef[5030310] = MsgDef.Msg5030310;
MsgDef[1030311] = MsgDef.Msg1030311;
MsgDef[5030311] = MsgDef.Msg5030311;
MsgDef[1030312] = MsgDef.Msg1030312;
MsgDef[5030312] = MsgDef.Msg5030312;
MsgDef[1030313] = MsgDef.Msg1030313;
MsgDef[5030313] = MsgDef.Msg5030313;
MsgDef[1030314] = MsgDef.Msg1030314;
MsgDef[5030314] = MsgDef.Msg5030314;
MsgDef[1030315] = MsgDef.Msg1030315;
MsgDef[5030315] = MsgDef.Msg5030315;
MsgDef[1030316] = MsgDef.Msg1030316;
MsgDef[5030316] = MsgDef.Msg5030316;
MsgDef[1030317] = MsgDef.Msg1030317;
MsgDef[5030317] = MsgDef.Msg5030317;
MsgDef[1030318] = MsgDef.Msg1030318;
MsgDef[5030318] = MsgDef.Msg5030318;
MsgDef[1040101] = MsgDef.Msg1040101;
MsgDef[5040101] = MsgDef.Msg5040101;
MsgDef[1040102] = MsgDef.Msg1040102;
MsgDef[5040102] = MsgDef.Msg5040102;
MsgDef[1040103] = MsgDef.Msg1040103;
MsgDef[5040103] = MsgDef.Msg5040103;
MsgDef[1040104] = MsgDef.Msg1040104;
MsgDef[5040104] = MsgDef.Msg5040104;
MsgDef[1040202] = MsgDef.Msg1040202;
MsgDef[5040202] = MsgDef.Msg5040202;
MsgDef[1040203] = MsgDef.Msg1040203;
MsgDef[5040203] = MsgDef.Msg5040203;
MsgDef[1040301] = MsgDef.Msg1040301;
MsgDef[5040301] = MsgDef.Msg5040301;
MsgDef[1040401] = MsgDef.Msg1040401;
MsgDef[5040401] = MsgDef.Msg5040401;
MsgDef[1040402] = MsgDef.Msg1040402;
MsgDef[5040402] = MsgDef.Msg5040402;
MsgDef[1040403] = MsgDef.Msg1040403;
MsgDef[5040403] = MsgDef.Msg5040403;
MsgDef[1040404] = MsgDef.Msg1040404;
MsgDef[5040404] = MsgDef.Msg5040404;
MsgDef[1040405] = MsgDef.Msg1040405;
MsgDef[5040405] = MsgDef.Msg5040405;
MsgDef[1040501] = MsgDef.Msg1040501;
MsgDef[5040501] = MsgDef.Msg5040501;
MsgDef[1040601] = MsgDef.Msg1040601;
MsgDef[5040601] = MsgDef.Msg5040601;
MsgDef[1050101] = MsgDef.Msg1050101;
MsgDef[5050101] = MsgDef.Msg5050101;
MsgDef[1050102] = MsgDef.Msg1050102;
MsgDef[5050102] = MsgDef.Msg5050102;
MsgDef[1050103] = MsgDef.Msg1050103;
MsgDef[5050103] = MsgDef.Msg5050103;
MsgDef[1050104] = MsgDef.Msg1050104;
MsgDef[5050104] = MsgDef.Msg5050104;
MsgDef[1050201] = MsgDef.Msg1050201;
MsgDef[5050201] = MsgDef.Msg5050201;
MsgDef[1050301] = MsgDef.Msg1050301;
MsgDef[5050301] = MsgDef.Msg5050301;
MsgDef[1050402] = MsgDef.Msg1050402;
MsgDef[5050402] = MsgDef.Msg5050402;
MsgDef[1050403] = MsgDef.Msg1050403;
MsgDef[5050403] = MsgDef.Msg5050403;
MsgDef[1050501] = MsgDef.Msg1050501;
MsgDef[5050501] = MsgDef.Msg5050501;
MsgDef[1060101] = MsgDef.Msg1060101;
MsgDef[5060101] = MsgDef.Msg5060101;
MsgDef[1060102] = MsgDef.Msg1060102;
MsgDef[5060102] = MsgDef.Msg5060102;
MsgDef[1060103] = MsgDef.Msg1060103;
MsgDef[5060103] = MsgDef.Msg5060103;
MsgDef[1060104] = MsgDef.Msg1060104;
MsgDef[5060104] = MsgDef.Msg5060104;
MsgDef[1070101] = MsgDef.Msg1070101;
MsgDef[5070101] = MsgDef.Msg5070101;
MsgDef[1070102] = MsgDef.Msg1070102;
MsgDef[5070102] = MsgDef.Msg5070102;
MsgDef[1070103] = MsgDef.Msg1070103;
MsgDef[5070103] = MsgDef.Msg5070103;
MsgDef[1070104] = MsgDef.Msg1070104;
MsgDef[5070104] = MsgDef.Msg5070104;
MsgDef[1070105] = MsgDef.Msg1070105;
MsgDef[5070105] = MsgDef.Msg5070105;
MsgDef[1070201] = MsgDef.Msg1070201;
MsgDef[5070201] = MsgDef.Msg5070201;
MsgDef[1070202] = MsgDef.Msg1070202;
MsgDef[5070202] = MsgDef.Msg5070202;
MsgDef[1070203] = MsgDef.Msg1070203;
MsgDef[5070203] = MsgDef.Msg5070203;
MsgDef[1070204] = MsgDef.Msg1070204;
MsgDef[5070204] = MsgDef.Msg5070204;
MsgDef[1070301] = MsgDef.Msg1070301;
MsgDef[5070301] = MsgDef.Msg5070301;
MsgDef[1070302] = MsgDef.Msg1070302;
MsgDef[5070302] = MsgDef.Msg5070302;
MsgDef[1070303] = MsgDef.Msg1070303;
MsgDef[5070303] = MsgDef.Msg5070303;
MsgDef[1070304] = MsgDef.Msg1070304;
MsgDef[5070304] = MsgDef.Msg5070304;
MsgDef[1080101] = MsgDef.Msg1080101;
MsgDef[5080101] = MsgDef.Msg5080101;
MsgDef[1080102] = MsgDef.Msg1080102;
MsgDef[5080102] = MsgDef.Msg5080102;
MsgDef[1090101] = MsgDef.Msg1090101;
MsgDef[5090101] = MsgDef.Msg5090101;
MsgDef[1090102] = MsgDef.Msg1090102;
MsgDef[5090102] = MsgDef.Msg5090102;
MsgDef[1090103] = MsgDef.Msg1090103;
MsgDef[5090103] = MsgDef.Msg5090103;
MsgDef[1090104] = MsgDef.Msg1090104;
MsgDef[5090104] = MsgDef.Msg5090104;
MsgDef[1090105] = MsgDef.Msg1090105;
MsgDef[5090105] = MsgDef.Msg5090105;
MsgDef[1100101] = MsgDef.Msg1100101;
MsgDef[5100101] = MsgDef.Msg5100101;
MsgDef[1100102] = MsgDef.Msg1100102;
MsgDef[5100102] = MsgDef.Msg5100102;
MsgDef[1100103] = MsgDef.Msg1100103;
MsgDef[5100103] = MsgDef.Msg5100103;
MsgDef[1100104] = MsgDef.Msg1100104;
MsgDef[5100104] = MsgDef.Msg5100104;
MsgDef[1100105] = MsgDef.Msg1100105;
MsgDef[5100105] = MsgDef.Msg5100105;
MsgDef[1100106] = MsgDef.Msg1100106;
MsgDef[5100106] = MsgDef.Msg5100106;
MsgDef[1100107] = MsgDef.Msg1100107;
MsgDef[5100107] = MsgDef.Msg5100107;
MsgDef[1100108] = MsgDef.Msg1100108;
MsgDef[5100108] = MsgDef.Msg5100108;
MsgDef[1100109] = MsgDef.Msg1100109;
MsgDef[5100109] = MsgDef.Msg5100109;
MsgDef[1100110] = MsgDef.Msg1100110;
MsgDef[5100110] = MsgDef.Msg5100110;
MsgDef[1100111] = MsgDef.Msg1100111;
MsgDef[5100111] = MsgDef.Msg5100111;
MsgDef[1100112] = MsgDef.Msg1100112;
MsgDef[5100112] = MsgDef.Msg5100112;
MsgDef[1100113] = MsgDef.Msg1100113;
MsgDef[5100113] = MsgDef.Msg5100113;
MsgDef[1100114] = MsgDef.Msg1100114;
MsgDef[5100114] = MsgDef.Msg5100114;
MsgDef[1100115] = MsgDef.Msg1100115;
MsgDef[5100115] = MsgDef.Msg5100115;
MsgDef[1100116] = MsgDef.Msg1100116;
MsgDef[5100116] = MsgDef.Msg5100116;
MsgDef[1110101] = MsgDef.Msg1110101;
MsgDef[5110101] = MsgDef.Msg5110101;
MsgDef[1110102] = MsgDef.Msg1110102;
MsgDef[5110102] = MsgDef.Msg5110102;
MsgDef[1110103] = MsgDef.Msg1110103;
MsgDef[5110103] = MsgDef.Msg5110103;
MsgDef[1110104] = MsgDef.Msg1110104;
MsgDef[5110104] = MsgDef.Msg5110104;
MsgDef[1110105] = MsgDef.Msg1110105;
MsgDef[5110105] = MsgDef.Msg5110105;
MsgDef[1110106] = MsgDef.Msg1110106;
MsgDef[5110106] = MsgDef.Msg5110106;
MsgDef[1120101] = MsgDef.Msg1120101;
MsgDef[5120101] = MsgDef.Msg5120101;
MsgDef[1120102] = MsgDef.Msg1120102;
MsgDef[5120102] = MsgDef.Msg5120102;
MsgDef[1120103] = MsgDef.Msg1120103;
MsgDef[5120103] = MsgDef.Msg5120103;
MsgDef[1120104] = MsgDef.Msg1120104;
MsgDef[5120104] = MsgDef.Msg5120104;
MsgDef[1120105] = MsgDef.Msg1120105;
MsgDef[5120105] = MsgDef.Msg5120105;
MsgDef[1120201] = MsgDef.Msg1120201;
MsgDef[5120201] = MsgDef.Msg5120201;
MsgDef[1130101] = MsgDef.Msg1130101;
MsgDef[5130101] = MsgDef.Msg5130101;
MsgDef[1130102] = MsgDef.Msg1130102;
MsgDef[5130102] = MsgDef.Msg5130102;
MsgDef[1130103] = MsgDef.Msg1130103;
MsgDef[5130103] = MsgDef.Msg5130103;
MsgDef[1130104] = MsgDef.Msg1130104;
MsgDef[5130104] = MsgDef.Msg5130104;
MsgDef[1130105] = MsgDef.Msg1130105;
MsgDef[5130105] = MsgDef.Msg5130105;
MsgDef[1130106] = MsgDef.Msg1130106;
MsgDef[5130106] = MsgDef.Msg5130106;
MsgDef[1140101] = MsgDef.Msg1140101;
MsgDef[5140101] = MsgDef.Msg5140101;
MsgDef[1140102] = MsgDef.Msg1140102;
MsgDef[5140102] = MsgDef.Msg5140102;
MsgDef[1140103] = MsgDef.Msg1140103;
MsgDef[5140103] = MsgDef.Msg5140103;
MsgDef[1140104] = MsgDef.Msg1140104;
MsgDef[5140104] = MsgDef.Msg5140104;
MsgDef[1140105] = MsgDef.Msg1140105;
MsgDef[5140105] = MsgDef.Msg5140105;
MsgDef[1150101] = MsgDef.Msg1150101;
MsgDef[5150101] = MsgDef.Msg5150101;
MsgDef[1150102] = MsgDef.Msg1150102;
MsgDef[5150102] = MsgDef.Msg5150102;
MsgDef[1160101] = MsgDef.Msg1160101;
MsgDef[5160101] = MsgDef.Msg5160101;
MsgDef[1160102] = MsgDef.Msg1160102;
MsgDef[5160102] = MsgDef.Msg5160102;
MsgDef[1160103] = MsgDef.Msg1160103;
MsgDef[5160103] = MsgDef.Msg5160103;
MsgDef[1160104] = MsgDef.Msg1160104;
MsgDef[5160104] = MsgDef.Msg5160104;
MsgDef[1160105] = MsgDef.Msg1160105;
MsgDef[5160105] = MsgDef.Msg5160105;
MsgDef[1170101] = MsgDef.Msg1170101;
MsgDef[5170101] = MsgDef.Msg5170101;
MsgDef[1170102] = MsgDef.Msg1170102;
MsgDef[5170102] = MsgDef.Msg5170102;
MsgDef[1170103] = MsgDef.Msg1170103;
MsgDef[5170103] = MsgDef.Msg5170103;
MsgDef[1170104] = MsgDef.Msg1170104;
MsgDef[5170104] = MsgDef.Msg5170104;
MsgDef[1170105] = MsgDef.Msg1170105;
MsgDef[5170105] = MsgDef.Msg5170105;
MsgDef[1180101] = MsgDef.Msg1180101;
MsgDef[5180101] = MsgDef.Msg5180101;
MsgDef[1180102] = MsgDef.Msg1180102;
MsgDef[5180102] = MsgDef.Msg5180102;
MsgDef[1180103] = MsgDef.Msg1180103;
MsgDef[5180103] = MsgDef.Msg5180103;
MsgDef[1180104] = MsgDef.Msg1180104;
MsgDef[5180104] = MsgDef.Msg5180104;
MsgDef[1180105] = MsgDef.Msg1180105;
MsgDef[5180105] = MsgDef.Msg5180105;
MsgDef[1190101] = MsgDef.Msg1190101;
MsgDef[5190101] = MsgDef.Msg5190101;
MsgDef[1190102] = MsgDef.Msg1190102;
MsgDef[5190102] = MsgDef.Msg5190102;
MsgDef[1190201] = MsgDef.Msg1190201;
MsgDef[5190201] = MsgDef.Msg5190201;
MsgDef[1200101] = MsgDef.Msg1200101;
MsgDef[5200101] = MsgDef.Msg5200101;
MsgDef[1200102] = MsgDef.Msg1200102;
MsgDef[5200102] = MsgDef.Msg5200102;
MsgDef[1200103] = MsgDef.Msg1200103;
MsgDef[5200103] = MsgDef.Msg5200103;
MsgDef[1200104] = MsgDef.Msg1200104;
MsgDef[5200104] = MsgDef.Msg5200104;
MsgDef[1200105] = MsgDef.Msg1200105;
MsgDef[5200105] = MsgDef.Msg5200105;
MsgDef[1200106] = MsgDef.Msg1200106;
MsgDef[5200106] = MsgDef.Msg5200106;
MsgDef[1200107] = MsgDef.Msg1200107;
MsgDef[5200107] = MsgDef.Msg5200107;
MsgDef[1200201] = MsgDef.Msg1200201;
MsgDef[5200201] = MsgDef.Msg5200201;
MsgDef[1210101] = MsgDef.Msg1210101;
MsgDef[5210101] = MsgDef.Msg5210101;
MsgDef[1210102] = MsgDef.Msg1210102;
MsgDef[5210102] = MsgDef.Msg5210102;
MsgDef[1210103] = MsgDef.Msg1210103;
MsgDef[5210103] = MsgDef.Msg5210103;
MsgDef[1210104] = MsgDef.Msg1210104;
MsgDef[5210104] = MsgDef.Msg5210104;
MsgDef[1210105] = MsgDef.Msg1210105;
MsgDef[5210105] = MsgDef.Msg5210105;
MsgDef[1220102] = MsgDef.Msg1220102;
MsgDef[5220102] = MsgDef.Msg5220102;
MsgDef[1220103] = MsgDef.Msg1220103;
MsgDef[5220103] = MsgDef.Msg5220103;
MsgDef[1220104] = MsgDef.Msg1220104;
MsgDef[5220104] = MsgDef.Msg5220104;
MsgDef[1220105] = MsgDef.Msg1220105;
MsgDef[5220105] = MsgDef.Msg5220105;
MsgDef[1220106] = MsgDef.Msg1220106;
MsgDef[5220106] = MsgDef.Msg5220106;
MsgDef[1230101] = MsgDef.Msg1230101;
MsgDef[5230101] = MsgDef.Msg5230101;
MsgDef[1230102] = MsgDef.Msg1230102;
MsgDef[5230102] = MsgDef.Msg5230102;
MsgDef[1230103] = MsgDef.Msg1230103;
MsgDef[5230103] = MsgDef.Msg5230103;
MsgDef[1230104] = MsgDef.Msg1230104;
MsgDef[5230104] = MsgDef.Msg5230104;
MsgDef[1230105] = MsgDef.Msg1230105;
MsgDef[5230105] = MsgDef.Msg5230105;
MsgDef[1240101] = MsgDef.Msg1240101;
MsgDef[5240101] = MsgDef.Msg5240101;
MsgDef[1240102] = MsgDef.Msg1240102;
MsgDef[5240102] = MsgDef.Msg5240102;
MsgDef[1240103] = MsgDef.Msg1240103;
MsgDef[5240103] = MsgDef.Msg5240103;
MsgDef[1240104] = MsgDef.Msg1240104;
MsgDef[5240104] = MsgDef.Msg5240104;
MsgDef[1240105] = MsgDef.Msg1240105;
MsgDef[5240105] = MsgDef.Msg5240105;
MsgDef[1250101] = MsgDef.Msg1250101;
MsgDef[5250101] = MsgDef.Msg5250101;
MsgDef[1250102] = MsgDef.Msg1250102;
MsgDef[5250102] = MsgDef.Msg5250102;
MsgDef[1250103] = MsgDef.Msg1250103;
MsgDef[5250103] = MsgDef.Msg5250103;
MsgDef[1250104] = MsgDef.Msg1250104;
MsgDef[5250104] = MsgDef.Msg5250104;
MsgDef[1250105] = MsgDef.Msg1250105;
MsgDef[5250105] = MsgDef.Msg5250105;
MsgDef[1250106] = MsgDef.Msg1250106;
MsgDef[5250106] = MsgDef.Msg5250106;
MsgDef[1250107] = MsgDef.Msg1250107;
MsgDef[5250107] = MsgDef.Msg5250107;
MsgDef[1250108] = MsgDef.Msg1250108;
MsgDef[5250108] = MsgDef.Msg5250108;
MsgDef[1250201] = MsgDef.Msg1250201;
MsgDef[5250201] = MsgDef.Msg5250201;
MsgDef[1250202] = MsgDef.Msg1250202;
MsgDef[5250202] = MsgDef.Msg5250202;
MsgDef[1250203] = MsgDef.Msg1250203;
MsgDef[5250203] = MsgDef.Msg5250203;
MsgDef[1250204] = MsgDef.Msg1250204;
MsgDef[5250204] = MsgDef.Msg5250204;
MsgDef[1250205] = MsgDef.Msg1250205;
MsgDef[5250205] = MsgDef.Msg5250205;
MsgDef[1250206] = MsgDef.Msg1250206;
MsgDef[5250206] = MsgDef.Msg5250206;
MsgDef[1250207] = MsgDef.Msg1250207;
MsgDef[5250207] = MsgDef.Msg5250207;
MsgDef[1250208] = MsgDef.Msg1250208;
MsgDef[5250208] = MsgDef.Msg5250208;
MsgDef[1250209] = MsgDef.Msg1250209;
MsgDef[5250209] = MsgDef.Msg5250209;
MsgDef[1250210] = MsgDef.Msg1250210;
MsgDef[5250210] = MsgDef.Msg5250210;
MsgDef[1250301] = MsgDef.Msg1250301;
MsgDef[5250301] = MsgDef.Msg5250301;
MsgDef[1250302] = MsgDef.Msg1250302;
MsgDef[5250302] = MsgDef.Msg5250302;
MsgDef[1250303] = MsgDef.Msg1250303;
MsgDef[5250303] = MsgDef.Msg5250303;
MsgDef[1250304] = MsgDef.Msg1250304;
MsgDef[5250304] = MsgDef.Msg5250304;
MsgDef[1250305] = MsgDef.Msg1250305;
MsgDef[5250305] = MsgDef.Msg5250305;
MsgDef[1250306] = MsgDef.Msg1250306;
MsgDef[5250306] = MsgDef.Msg5250306;
MsgDef[1250307] = MsgDef.Msg1250307;
MsgDef[5250307] = MsgDef.Msg5250307;
MsgDef[1250308] = MsgDef.Msg1250308;
MsgDef[5250308] = MsgDef.Msg5250308;
MsgDef[1250309] = MsgDef.Msg1250309;
MsgDef[5250309] = MsgDef.Msg5250309;
MsgDef[1250310] = MsgDef.Msg1250310;
MsgDef[5250310] = MsgDef.Msg5250310;
MsgDef[1250311] = MsgDef.Msg1250311;
MsgDef[5250311] = MsgDef.Msg5250311;
MsgDef[1250312] = MsgDef.Msg1250312;
MsgDef[5250312] = MsgDef.Msg5250312;
MsgDef[1250313] = MsgDef.Msg1250313;
MsgDef[5250313] = MsgDef.Msg5250313;
MsgDef[1250314] = MsgDef.Msg1250314;
MsgDef[5250314] = MsgDef.Msg5250314;
MsgDef[1250401] = MsgDef.Msg1250401;
MsgDef[5250401] = MsgDef.Msg5250401;
MsgDef[1250402] = MsgDef.Msg1250402;
MsgDef[5250402] = MsgDef.Msg5250402;
MsgDef[1250403] = MsgDef.Msg1250403;
MsgDef[5250403] = MsgDef.Msg5250403;
MsgDef[1250404] = MsgDef.Msg1250404;
MsgDef[5250404] = MsgDef.Msg5250404;
MsgDef[1250405] = MsgDef.Msg1250405;
MsgDef[5250405] = MsgDef.Msg5250405;
MsgDef[1250406] = MsgDef.Msg1250406;
MsgDef[5250406] = MsgDef.Msg5250406;
MsgDef[1250407] = MsgDef.Msg1250407;
MsgDef[5250407] = MsgDef.Msg5250407;
MsgDef[1250408] = MsgDef.Msg1250408;
MsgDef[5250408] = MsgDef.Msg5250408;
MsgDef[1250501] = MsgDef.Msg1250501;
MsgDef[5250501] = MsgDef.Msg5250501;
MsgDef[1250502] = MsgDef.Msg1250502;
MsgDef[5250502] = MsgDef.Msg5250502;
MsgDef[1250503] = MsgDef.Msg1250503;
MsgDef[5250503] = MsgDef.Msg5250503;
MsgDef[1250504] = MsgDef.Msg1250504;
MsgDef[5250504] = MsgDef.Msg5250504;
MsgDef[1250505] = MsgDef.Msg1250505;
MsgDef[5250505] = MsgDef.Msg5250505;
MsgDef[1250506] = MsgDef.Msg1250506;
MsgDef[5250506] = MsgDef.Msg5250506;
MsgDef[1250507] = MsgDef.Msg1250507;
MsgDef[5250507] = MsgDef.Msg5250507;
MsgDef[1250601] = MsgDef.Msg1250601;
MsgDef[5250601] = MsgDef.Msg5250601;
MsgDef[1260101] = MsgDef.Msg1260101;
MsgDef[5260101] = MsgDef.Msg5260101;
MsgDef[1260102] = MsgDef.Msg1260102;
MsgDef[5260102] = MsgDef.Msg5260102;
MsgDef[1260103] = MsgDef.Msg1260103;
MsgDef[5260103] = MsgDef.Msg5260103;
MsgDef[1260104] = MsgDef.Msg1260104;
MsgDef[5260104] = MsgDef.Msg5260104;
MsgDef[1260105] = MsgDef.Msg1260105;
MsgDef[5260105] = MsgDef.Msg5260105;
MsgDef[1260106] = MsgDef.Msg1260106;
MsgDef[5260106] = MsgDef.Msg5260106;
MsgDef[1260107] = MsgDef.Msg1260107;
MsgDef[5260107] = MsgDef.Msg5260107;
MsgDef[1260108] = MsgDef.Msg1260108;
MsgDef[5260108] = MsgDef.Msg5260108;
MsgDef[1260109] = MsgDef.Msg1260109;
MsgDef[5260109] = MsgDef.Msg5260109;
MsgDef[1260201] = MsgDef.Msg1260201;
MsgDef[5260201] = MsgDef.Msg5260201;
MsgDef[1260202] = MsgDef.Msg1260202;
MsgDef[5260202] = MsgDef.Msg5260202;
MsgDef[1260203] = MsgDef.Msg1260203;
MsgDef[5260203] = MsgDef.Msg5260203;
MsgDef[1260204] = MsgDef.Msg1260204;
MsgDef[5260204] = MsgDef.Msg5260204;
MsgDef[1260205] = MsgDef.Msg1260205;
MsgDef[5260205] = MsgDef.Msg5260205;
MsgDef[1260206] = MsgDef.Msg1260206;
MsgDef[5260206] = MsgDef.Msg5260206;
MsgDef[1270101] = MsgDef.Msg1270101;
MsgDef[5270101] = MsgDef.Msg5270101;
MsgDef[1270102] = MsgDef.Msg1270102;
MsgDef[5270102] = MsgDef.Msg5270102;
MsgDef[1270103] = MsgDef.Msg1270103;
MsgDef[5270103] = MsgDef.Msg5270103;
MsgDef[1270104] = MsgDef.Msg1270104;
MsgDef[5270104] = MsgDef.Msg5270104;
MsgDef[1270105] = MsgDef.Msg1270105;
MsgDef[5270105] = MsgDef.Msg5270105;
MsgDef[1270106] = MsgDef.Msg1270106;
MsgDef[5270106] = MsgDef.Msg5270106;
MsgDef[1270201] = MsgDef.Msg1270201;
MsgDef[5270201] = MsgDef.Msg5270201;
MsgDef[1270202] = MsgDef.Msg1270202;
MsgDef[5270202] = MsgDef.Msg5270202;
MsgDef[1270203] = MsgDef.Msg1270203;
MsgDef[5270203] = MsgDef.Msg5270203;
MsgDef[1280101] = MsgDef.Msg1280101;
MsgDef[5280101] = MsgDef.Msg5280101;
MsgDef[1280102] = MsgDef.Msg1280102;
MsgDef[5280102] = MsgDef.Msg5280102;
MsgDef[1280103] = MsgDef.Msg1280103;
MsgDef[5280103] = MsgDef.Msg5280103;
MsgDef[1280104] = MsgDef.Msg1280104;
MsgDef[5280104] = MsgDef.Msg5280104;
MsgDef[1290101] = MsgDef.Msg1290101;
MsgDef[5290101] = MsgDef.Msg5290101;
MsgDef[1290102] = MsgDef.Msg1290102;
MsgDef[5290102] = MsgDef.Msg5290102;
MsgDef[1290103] = MsgDef.Msg1290103;
MsgDef[5290103] = MsgDef.Msg5290103;
MsgDef[1290201] = MsgDef.Msg1290201;
MsgDef[5290201] = MsgDef.Msg5290201;
MsgDef[1290202] = MsgDef.Msg1290202;
MsgDef[5290202] = MsgDef.Msg5290202;
MsgDef[1290203] = MsgDef.Msg1290203;
MsgDef[5290203] = MsgDef.Msg5290203;
MsgDef[1300101] = MsgDef.Msg1300101;
MsgDef[5300101] = MsgDef.Msg5300101;
MsgDef[1300102] = MsgDef.Msg1300102;
MsgDef[5300102] = MsgDef.Msg5300102;
MsgDef[1300103] = MsgDef.Msg1300103;
MsgDef[5300103] = MsgDef.Msg5300103;
MsgDef[1300104] = MsgDef.Msg1300104;
MsgDef[5300104] = MsgDef.Msg5300104;
MsgDef[1300105] = MsgDef.Msg1300105;
MsgDef[5300105] = MsgDef.Msg5300105;
MsgDef[1300106] = MsgDef.Msg1300106;
MsgDef[5300106] = MsgDef.Msg5300106;
MsgDef[1300107] = MsgDef.Msg1300107;
MsgDef[5300107] = MsgDef.Msg5300107;
MsgDef[1300108] = MsgDef.Msg1300108;
MsgDef[5300108] = MsgDef.Msg5300108;
MsgDef[1300109] = MsgDef.Msg1300109;
MsgDef[5300109] = MsgDef.Msg5300109;
MsgDef[1300110] = MsgDef.Msg1300110;
MsgDef[5300110] = MsgDef.Msg5300110;
MsgDef[1300111] = MsgDef.Msg1300111;
MsgDef[5300111] = MsgDef.Msg5300111;
MsgDef[1300112] = MsgDef.Msg1300112;
MsgDef[5300112] = MsgDef.Msg5300112;
MsgDef[1300113] = MsgDef.Msg1300113;
MsgDef[5300113] = MsgDef.Msg5300113;
MsgDef[1300114] = MsgDef.Msg1300114;
MsgDef[5300114] = MsgDef.Msg5300114;
MsgDef[1310101] = MsgDef.Msg1310101;
MsgDef[5310101] = MsgDef.Msg5310101;
MsgDef[1310102] = MsgDef.Msg1310102;
MsgDef[5310102] = MsgDef.Msg5310102;
MsgDef[1310103] = MsgDef.Msg1310103;
MsgDef[5310103] = MsgDef.Msg5310103;
MsgDef[1310104] = MsgDef.Msg1310104;
MsgDef[5310104] = MsgDef.Msg5310104;
MsgDef[1310105] = MsgDef.Msg1310105;
MsgDef[5310105] = MsgDef.Msg5310105;
MsgDef[1310106] = MsgDef.Msg1310106;
MsgDef[5310106] = MsgDef.Msg5310106;
MsgDef[1310107] = MsgDef.Msg1310107;
MsgDef[5310107] = MsgDef.Msg5310107;
MsgDef[1310201] = MsgDef.Msg1310201;
MsgDef[5310201] = MsgDef.Msg5310201;
MsgDef[1310202] = MsgDef.Msg1310202;
MsgDef[5310202] = MsgDef.Msg5310202;
MsgDef[1320101] = MsgDef.Msg1320101;
MsgDef[5320101] = MsgDef.Msg5320101;
MsgDef[1320102] = MsgDef.Msg1320102;
MsgDef[5320102] = MsgDef.Msg5320102;
MsgDef[1320103] = MsgDef.Msg1320103;
MsgDef[5320103] = MsgDef.Msg5320103;
MsgDef[1330101] = MsgDef.Msg1330101;
MsgDef[5330101] = MsgDef.Msg5330101;
MsgDef[1330102] = MsgDef.Msg1330102;
MsgDef[5330102] = MsgDef.Msg5330102;
MsgDef[1330103] = MsgDef.Msg1330103;
MsgDef[5330103] = MsgDef.Msg5330103;
MsgDef[1330104] = MsgDef.Msg1330104;
MsgDef[5330104] = MsgDef.Msg5330104;
MsgDef[1330201] = MsgDef.Msg1330201;
MsgDef[5330201] = MsgDef.Msg5330201;
MsgDef[1330202] = MsgDef.Msg1330202;
MsgDef[5330202] = MsgDef.Msg5330202;
MsgDef[1330203] = MsgDef.Msg1330203;
MsgDef[5330203] = MsgDef.Msg5330203;
MsgDef[1330204] = MsgDef.Msg1330204;
MsgDef[5330204] = MsgDef.Msg5330204;
MsgDef[1330301] = MsgDef.Msg1330301;
MsgDef[5330301] = MsgDef.Msg5330301;
MsgDef[1330302] = MsgDef.Msg1330302;
MsgDef[5330302] = MsgDef.Msg5330302;
MsgDef[1330303] = MsgDef.Msg1330303;
MsgDef[5330303] = MsgDef.Msg5330303;
MsgDef[1330304] = MsgDef.Msg1330304;
MsgDef[5330304] = MsgDef.Msg5330304;
MsgDef[1330401] = MsgDef.Msg1330401;
MsgDef[5330401] = MsgDef.Msg5330401;
MsgDef[1330402] = MsgDef.Msg1330402;
MsgDef[5330402] = MsgDef.Msg5330402;
MsgDef[1330403] = MsgDef.Msg1330403;
MsgDef[5330403] = MsgDef.Msg5330403;
MsgDef[1330404] = MsgDef.Msg1330404;
MsgDef[5330404] = MsgDef.Msg5330404;
MsgDef[1330501] = MsgDef.Msg1330501;
MsgDef[5330501] = MsgDef.Msg5330501;
MsgDef[1330502] = MsgDef.Msg1330502;
MsgDef[5330502] = MsgDef.Msg5330502;
MsgDef[1330503] = MsgDef.Msg1330503;
MsgDef[5330503] = MsgDef.Msg5330503;
MsgDef[1330601] = MsgDef.Msg1330601;
MsgDef[5330601] = MsgDef.Msg5330601;
MsgDef[1330602] = MsgDef.Msg1330602;
MsgDef[5330602] = MsgDef.Msg5330602;
MsgDef[1330603] = MsgDef.Msg1330603;
MsgDef[5330603] = MsgDef.Msg5330603;
MsgDef[1330701] = MsgDef.Msg1330701;
MsgDef[5330701] = MsgDef.Msg5330701;
MsgDef[1330702] = MsgDef.Msg1330702;
MsgDef[5330702] = MsgDef.Msg5330702;
MsgDef[1340101] = MsgDef.Msg1340101;
MsgDef[5340101] = MsgDef.Msg5340101;
MsgDef[1340102] = MsgDef.Msg1340102;
MsgDef[5340102] = MsgDef.Msg5340102;
MsgDef[1350101] = MsgDef.Msg1350101;
MsgDef[5350101] = MsgDef.Msg5350101;
MsgDef[1350102] = MsgDef.Msg1350102;
MsgDef[5350102] = MsgDef.Msg5350102;
MsgDef[1350103] = MsgDef.Msg1350103;
MsgDef[5350103] = MsgDef.Msg5350103;
MsgDef[1350104] = MsgDef.Msg1350104;
MsgDef[5350104] = MsgDef.Msg5350104;
MsgDef[1350105] = MsgDef.Msg1350105;
MsgDef[5350105] = MsgDef.Msg5350105;
MsgDef[1360101] = MsgDef.Msg1360101;
MsgDef[5360101] = MsgDef.Msg5360101;
MsgDef[1360102] = MsgDef.Msg1360102;
MsgDef[5360102] = MsgDef.Msg5360102;
MsgDef[1360103] = MsgDef.Msg1360103;
MsgDef[5360103] = MsgDef.Msg5360103;
MsgDef[1360104] = MsgDef.Msg1360104;
MsgDef[5360104] = MsgDef.Msg5360104;
MsgDef[1360105] = MsgDef.Msg1360105;
MsgDef[5360105] = MsgDef.Msg5360105;
MsgDef[1360201] = MsgDef.Msg1360201;
MsgDef[5360201] = MsgDef.Msg5360201;
MsgDef[1360202] = MsgDef.Msg1360202;
MsgDef[5360202] = MsgDef.Msg5360202;
MsgDef[1360203] = MsgDef.Msg1360203;
MsgDef[5360203] = MsgDef.Msg5360203;
MsgDef[1360204] = MsgDef.Msg1360204;
MsgDef[5360204] = MsgDef.Msg5360204;
MsgDef[1360205] = MsgDef.Msg1360205;
MsgDef[5360205] = MsgDef.Msg5360205;
MsgDef[1360206] = MsgDef.Msg1360206;
MsgDef[5360206] = MsgDef.Msg5360206;
MsgDef[1360207] = MsgDef.Msg1360207;
MsgDef[5360207] = MsgDef.Msg5360207;
MsgDef[1370101] = MsgDef.Msg1370101;
MsgDef[5370101] = MsgDef.Msg5370101;
MsgDef[1370102] = MsgDef.Msg1370102;
MsgDef[5370102] = MsgDef.Msg5370102;
MsgDef[1380101] = MsgDef.Msg1380101;
MsgDef[5380101] = MsgDef.Msg5380101;
MsgDef[1380102] = MsgDef.Msg1380102;
MsgDef[5380102] = MsgDef.Msg5380102;
MsgDef[1380103] = MsgDef.Msg1380103;
MsgDef[5380103] = MsgDef.Msg5380103;
MsgDef[1380104] = MsgDef.Msg1380104;
MsgDef[5380104] = MsgDef.Msg5380104;
MsgDef[1380105] = MsgDef.Msg1380105;
MsgDef[5380105] = MsgDef.Msg5380105;
MsgDef[1380106] = MsgDef.Msg1380106;
MsgDef[5380106] = MsgDef.Msg5380106;
MsgDef[1380107] = MsgDef.Msg1380107;
MsgDef[5380107] = MsgDef.Msg5380107;
MsgDef[1380201] = MsgDef.Msg1380201;
MsgDef[5380201] = MsgDef.Msg5380201;
MsgDef[1390101] = MsgDef.Msg1390101;
MsgDef[5390101] = MsgDef.Msg5390101;
MsgDef[1390102] = MsgDef.Msg1390102;
MsgDef[5390102] = MsgDef.Msg5390102;
MsgDef[1390103] = MsgDef.Msg1390103;
MsgDef[5390103] = MsgDef.Msg5390103;
MsgDef[1390104] = MsgDef.Msg1390104;
MsgDef[5390104] = MsgDef.Msg5390104;
MsgDef[1390105] = MsgDef.Msg1390105;
MsgDef[5390105] = MsgDef.Msg5390105;
MsgDef[1390106] = MsgDef.Msg1390106;
MsgDef[5390106] = MsgDef.Msg5390106;
MsgDef[1390107] = MsgDef.Msg1390107;
MsgDef[5390107] = MsgDef.Msg5390107;
MsgDef[1390108] = MsgDef.Msg1390108;
MsgDef[5390108] = MsgDef.Msg5390108;
MsgDef[1390201] = MsgDef.Msg1390201;
MsgDef[5390201] = MsgDef.Msg5390201;
MsgDef[1390202] = MsgDef.Msg1390202;
MsgDef[5390202] = MsgDef.Msg5390202;
MsgDef[1390203] = MsgDef.Msg1390203;
MsgDef[5390203] = MsgDef.Msg5390203;
MsgDef[1390204] = MsgDef.Msg1390204;
MsgDef[5390204] = MsgDef.Msg5390204;
MsgDef[1390301] = MsgDef.Msg1390301;
MsgDef[5390301] = MsgDef.Msg5390301;
MsgDef[1390302] = MsgDef.Msg1390302;
MsgDef[5390302] = MsgDef.Msg5390302;
MsgDef[1390303] = MsgDef.Msg1390303;
MsgDef[5390303] = MsgDef.Msg5390303;
MsgDef[1390304] = MsgDef.Msg1390304;
MsgDef[5390304] = MsgDef.Msg5390304;
MsgDef[1390305] = MsgDef.Msg1390305;
MsgDef[5390305] = MsgDef.Msg5390305;
MsgDef[1390306] = MsgDef.Msg1390306;
MsgDef[5390306] = MsgDef.Msg5390306;
MsgDef[1390307] = MsgDef.Msg1390307;
MsgDef[5390307] = MsgDef.Msg5390307;
MsgDef[1390308] = MsgDef.Msg1390308;
MsgDef[5390308] = MsgDef.Msg5390308;
MsgDef[1390309] = MsgDef.Msg1390309;
MsgDef[5390309] = MsgDef.Msg5390309;
MsgDef[1390401] = MsgDef.Msg1390401;
MsgDef[5390401] = MsgDef.Msg5390401;
MsgDef[1390402] = MsgDef.Msg1390402;
MsgDef[5390402] = MsgDef.Msg5390402;
MsgDef[1390403] = MsgDef.Msg1390403;
MsgDef[5390403] = MsgDef.Msg5390403;
MsgDef[1400101] = MsgDef.Msg1400101;
MsgDef[5400101] = MsgDef.Msg5400101;
MsgDef[1410101] = MsgDef.Msg1410101;
MsgDef[5410101] = MsgDef.Msg5410101;
MsgDef[1410102] = MsgDef.Msg1410102;
MsgDef[5410102] = MsgDef.Msg5410102;
MsgDef[1410104] = MsgDef.Msg1410104;
MsgDef[5410104] = MsgDef.Msg5410104;
MsgDef[1410201] = MsgDef.Msg1410201;
MsgDef[5410201] = MsgDef.Msg5410201;
MsgDef[1410202] = MsgDef.Msg1410202;
MsgDef[5410202] = MsgDef.Msg5410202;
MsgDef[1410203] = MsgDef.Msg1410203;
MsgDef[5410203] = MsgDef.Msg5410203;
MsgDef[1410204] = MsgDef.Msg1410204;
MsgDef[5410204] = MsgDef.Msg5410204;
MsgDef[1420101] = MsgDef.Msg1420101;
MsgDef[5420101] = MsgDef.Msg5420101;
MsgDef[1420102] = MsgDef.Msg1420102;
MsgDef[5420102] = MsgDef.Msg5420102;
MsgDef[1420103] = MsgDef.Msg1420103;
MsgDef[5420103] = MsgDef.Msg5420103;
MsgDef[1420104] = MsgDef.Msg1420104;
MsgDef[5420104] = MsgDef.Msg5420104;
MsgDef[1420105] = MsgDef.Msg1420105;
MsgDef[5420105] = MsgDef.Msg5420105;
MsgDef[1430101] = MsgDef.Msg1430101;
MsgDef[5430101] = MsgDef.Msg5430101;
MsgDef[1430102] = MsgDef.Msg1430102;
MsgDef[5430102] = MsgDef.Msg5430102;
MsgDef[1430103] = MsgDef.Msg1430103;
MsgDef[5430103] = MsgDef.Msg5430103;
MsgDef[1430104] = MsgDef.Msg1430104;
MsgDef[5430104] = MsgDef.Msg5430104;
MsgDef[1430105] = MsgDef.Msg1430105;
MsgDef[5430105] = MsgDef.Msg5430105;
MsgDef[1440101] = MsgDef.Msg1440101;
MsgDef[5440101] = MsgDef.Msg5440101;
MsgDef[1440102] = MsgDef.Msg1440102;
MsgDef[5440102] = MsgDef.Msg5440102;
MsgDef[1440103] = MsgDef.Msg1440103;
MsgDef[5440103] = MsgDef.Msg5440103;
MsgDef[1450101] = MsgDef.Msg1450101;
MsgDef[5450101] = MsgDef.Msg5450101;
MsgDef[1450102] = MsgDef.Msg1450102;
MsgDef[5450102] = MsgDef.Msg5450102;
MsgDef[1450103] = MsgDef.Msg1450103;
MsgDef[5450103] = MsgDef.Msg5450103;
MsgDef[1460101] = MsgDef.Msg1460101;
MsgDef[5460101] = MsgDef.Msg5460101;
MsgDef[1460102] = MsgDef.Msg1460102;
MsgDef[5460102] = MsgDef.Msg5460102;
MsgDef[1460103] = MsgDef.Msg1460103;
MsgDef[5460103] = MsgDef.Msg5460103;
MsgDef[1460104] = MsgDef.Msg1460104;
MsgDef[5460104] = MsgDef.Msg5460104;
MsgDef[1460105] = MsgDef.Msg1460105;
MsgDef[5460105] = MsgDef.Msg5460105;
MsgDef[1460106] = MsgDef.Msg1460106;
MsgDef[5460106] = MsgDef.Msg5460106;
MsgDef[1460107] = MsgDef.Msg1460107;
MsgDef[5460107] = MsgDef.Msg5460107;
MsgDef[1460108] = MsgDef.Msg1460108;
MsgDef[5460108] = MsgDef.Msg5460108;
MsgDef[1460109] = MsgDef.Msg1460109;
MsgDef[5460109] = MsgDef.Msg5460109;
MsgDef[1460110] = MsgDef.Msg1460110;
MsgDef[5460110] = MsgDef.Msg5460110;
MsgDef[1460111] = MsgDef.Msg1460111;
MsgDef[5460111] = MsgDef.Msg5460111;
MsgDef[1460112] = MsgDef.Msg1460112;
MsgDef[5460112] = MsgDef.Msg5460112;
MsgDef[1460113] = MsgDef.Msg1460113;
MsgDef[5460113] = MsgDef.Msg5460113;
MsgDef[1460114] = MsgDef.Msg1460114;
MsgDef[5460114] = MsgDef.Msg5460114;
MsgDef[1470101] = MsgDef.Msg1470101;
MsgDef[5470101] = MsgDef.Msg5470101;
MsgDef[1470102] = MsgDef.Msg1470102;
MsgDef[5470102] = MsgDef.Msg5470102;
MsgDef[1470103] = MsgDef.Msg1470103;
MsgDef[5470103] = MsgDef.Msg5470103;
MsgDef[1480101] = MsgDef.Msg1480101;
MsgDef[5480101] = MsgDef.Msg5480101;
MsgDef[1480102] = MsgDef.Msg1480102;
MsgDef[5480102] = MsgDef.Msg5480102;
MsgDef[1480103] = MsgDef.Msg1480103;
MsgDef[5480103] = MsgDef.Msg5480103;
MsgDef[1480104] = MsgDef.Msg1480104;
MsgDef[5480104] = MsgDef.Msg5480104;
MsgDef[1480105] = MsgDef.Msg1480105;
MsgDef[5480105] = MsgDef.Msg5480105;
MsgDef[1480106] = MsgDef.Msg1480106;
MsgDef[5480106] = MsgDef.Msg5480106;
MsgDef[1480107] = MsgDef.Msg1480107;
MsgDef[5480107] = MsgDef.Msg5480107;
MsgDef[1480108] = MsgDef.Msg1480108;
MsgDef[5480108] = MsgDef.Msg5480108;
MsgDef[1480201] = MsgDef.Msg1480201;
MsgDef[5480201] = MsgDef.Msg5480201;
MsgDef[1480202] = MsgDef.Msg1480202;
MsgDef[5480202] = MsgDef.Msg5480202;
MsgDef[1480203] = MsgDef.Msg1480203;
MsgDef[5480203] = MsgDef.Msg5480203;
MsgDef[1480204] = MsgDef.Msg1480204;
MsgDef[5480204] = MsgDef.Msg5480204;
MsgDef[1480205] = MsgDef.Msg1480205;
MsgDef[5480205] = MsgDef.Msg5480205;
MsgDef[1480206] = MsgDef.Msg1480206;
MsgDef[5480206] = MsgDef.Msg5480206;
MsgDef[1480207] = MsgDef.Msg1480207;
MsgDef[5480207] = MsgDef.Msg5480207;
MsgDef[1480208] = MsgDef.Msg1480208;
MsgDef[5480208] = MsgDef.Msg5480208;
MsgDef[1480209] = MsgDef.Msg1480209;
MsgDef[5480209] = MsgDef.Msg5480209;
MsgDef[1480210] = MsgDef.Msg1480210;
MsgDef[5480210] = MsgDef.Msg5480210;
MsgDef[1480211] = MsgDef.Msg1480211;
MsgDef[5480211] = MsgDef.Msg5480211;
MsgDef[1480212] = MsgDef.Msg1480212;
MsgDef[5480212] = MsgDef.Msg5480212;
MsgDef[1480213] = MsgDef.Msg1480213;
MsgDef[5480213] = MsgDef.Msg5480213;
MsgDef[1480214] = MsgDef.Msg1480214;
MsgDef[5480214] = MsgDef.Msg5480214;
MsgDef[1480301] = MsgDef.Msg1480301;
MsgDef[5480301] = MsgDef.Msg5480301;
MsgDef[1480302] = MsgDef.Msg1480302;
MsgDef[5480302] = MsgDef.Msg5480302;
MsgDef[1480303] = MsgDef.Msg1480303;
MsgDef[5480303] = MsgDef.Msg5480303;
MsgDef[1480304] = MsgDef.Msg1480304;
MsgDef[5480304] = MsgDef.Msg5480304;
MsgDef[1490101] = MsgDef.Msg1490101;
MsgDef[5490101] = MsgDef.Msg5490101;
MsgDef[1490102] = MsgDef.Msg1490102;
MsgDef[5490102] = MsgDef.Msg5490102;
MsgDef[1490103] = MsgDef.Msg1490103;
MsgDef[5490103] = MsgDef.Msg5490103;
MsgDef[1490104] = MsgDef.Msg1490104;
MsgDef[5490104] = MsgDef.Msg5490104;
MsgDef[1490105] = MsgDef.Msg1490105;
MsgDef[5490105] = MsgDef.Msg5490105;
MsgDef[1490106] = MsgDef.Msg1490106;
MsgDef[5490106] = MsgDef.Msg5490106;
MsgDef[1490107] = MsgDef.Msg1490107;
MsgDef[5490107] = MsgDef.Msg5490107;
MsgDef[1490108] = MsgDef.Msg1490108;
MsgDef[5490108] = MsgDef.Msg5490108;
MsgDef[1490109] = MsgDef.Msg1490109;
MsgDef[5490109] = MsgDef.Msg5490109;
MsgDef[1490110] = MsgDef.Msg1490110;
MsgDef[5490110] = MsgDef.Msg5490110;
MsgDef[1490111] = MsgDef.Msg1490111;
MsgDef[5490111] = MsgDef.Msg5490111;
MsgDef[1500101] = MsgDef.Msg1500101;
MsgDef[5500101] = MsgDef.Msg5500101;
MsgDef[1500102] = MsgDef.Msg1500102;
MsgDef[5500102] = MsgDef.Msg5500102;
MsgDef[1500103] = MsgDef.Msg1500103;
MsgDef[5500103] = MsgDef.Msg5500103;
MsgDef[1500104] = MsgDef.Msg1500104;
MsgDef[5500104] = MsgDef.Msg5500104;
MsgDef[1500105] = MsgDef.Msg1500105;
MsgDef[5500105] = MsgDef.Msg5500105;
MsgDef[1500201] = MsgDef.Msg1500201;
MsgDef[5500201] = MsgDef.Msg5500201;
MsgDef[1500202] = MsgDef.Msg1500202;
MsgDef[5500202] = MsgDef.Msg5500202;
MsgDef[1500203] = MsgDef.Msg1500203;
MsgDef[5500203] = MsgDef.Msg5500203;
MsgDef[1510101] = MsgDef.Msg1510101;
MsgDef[5510101] = MsgDef.Msg5510101;
MsgDef[1510102] = MsgDef.Msg1510102;
MsgDef[5510102] = MsgDef.Msg5510102;
MsgDef[1510103] = MsgDef.Msg1510103;
MsgDef[5510103] = MsgDef.Msg5510103;
MsgDef[1510104] = MsgDef.Msg1510104;
MsgDef[5510104] = MsgDef.Msg5510104;
MsgDef[1510105] = MsgDef.Msg1510105;
MsgDef[5510105] = MsgDef.Msg5510105;
MsgDef[168002] = MsgDef.Msg168002;
MsgDef[568002] = MsgDef.Msg568002;
MsgDef[168003] = MsgDef.Msg168003;
MsgDef[568003] = MsgDef.Msg568003;
MsgDef[168004] = MsgDef.Msg168004;
MsgDef[568004] = MsgDef.Msg568004;
MsgDef[168008] = MsgDef.Msg168008;
MsgDef[568008] = MsgDef.Msg568008;
MsgDef[168009] = MsgDef.Msg168009;
MsgDef[568009] = MsgDef.Msg568009;
MsgDef[168010] = MsgDef.Msg168010;
MsgDef[568010] = MsgDef.Msg568010;
MsgDef[168011] = MsgDef.Msg168011;
MsgDef[568011] = MsgDef.Msg568011;
MsgDef[168101] = MsgDef.Msg168101;
MsgDef[568101] = MsgDef.Msg568101;
MsgDef[168102] = MsgDef.Msg168102;
MsgDef[568102] = MsgDef.Msg568102;
MsgDef[168103] = MsgDef.Msg168103;
MsgDef[568103] = MsgDef.Msg568103;
MsgDef[168201] = MsgDef.Msg168201;
MsgDef[568201] = MsgDef.Msg568201;
MsgDef[168301] = MsgDef.Msg168301;
MsgDef[568301] = MsgDef.Msg568301;
MsgDef[168902] = MsgDef.Msg168902;
MsgDef[568902] = MsgDef.Msg568902;
MsgDef[168903] = MsgDef.Msg168903;
MsgDef[568903] = MsgDef.Msg568903;
MsgDef[168904] = MsgDef.Msg168904;
MsgDef[568904] = MsgDef.Msg568904;
MsgDef[168906] = MsgDef.Msg168906;
MsgDef[568906] = MsgDef.Msg568906;
MsgDef[168907] = MsgDef.Msg168907;
MsgDef[568907] = MsgDef.Msg568907;
MsgDef[168908] = MsgDef.Msg168908;
MsgDef[568908] = MsgDef.Msg568908;
MsgDef[1810101] = MsgDef.Msg1810101;
MsgDef[5810101] = MsgDef.Msg5810101;
MsgDef[1810102] = MsgDef.Msg1810102;
MsgDef[5810102] = MsgDef.Msg5810102;
MsgDef[1810103] = MsgDef.Msg1810103;
MsgDef[5810103] = MsgDef.Msg5810103;
MsgDef[1810104] = MsgDef.Msg1810104;
MsgDef[5810104] = MsgDef.Msg5810104;
MsgDef[1810105] = MsgDef.Msg1810105;
MsgDef[5810105] = MsgDef.Msg5810105;
MsgDef[1810201] = MsgDef.Msg1810201;
MsgDef[5810201] = MsgDef.Msg5810201;
MsgDef[1810202] = MsgDef.Msg1810202;
MsgDef[5810202] = MsgDef.Msg5810202;
MsgDef[1810203] = MsgDef.Msg1810203;
MsgDef[5810203] = MsgDef.Msg5810203;
MsgDef[1810204] = MsgDef.Msg1810204;
MsgDef[5810204] = MsgDef.Msg5810204;
MsgDef[1810205] = MsgDef.Msg1810205;
MsgDef[5810205] = MsgDef.Msg5810205;
MsgDef[1810206] = MsgDef.Msg1810206;
MsgDef[5810206] = MsgDef.Msg5810206;
MsgDef[1810301] = MsgDef.Msg1810301;
MsgDef[5810301] = MsgDef.Msg5810301;
MsgDef[1810302] = MsgDef.Msg1810302;
MsgDef[5810302] = MsgDef.Msg5810302;
MsgDef[1810303] = MsgDef.Msg1810303;
MsgDef[5810303] = MsgDef.Msg5810303;
MsgDef[1810401] = MsgDef.Msg1810401;
MsgDef[5810401] = MsgDef.Msg5810401;
MsgDef[1810402] = MsgDef.Msg1810402;
MsgDef[5810402] = MsgDef.Msg5810402;
MsgDef[1810501] = MsgDef.Msg1810501;
MsgDef[5810501] = MsgDef.Msg5810501;
MsgDef[1810502] = MsgDef.Msg1810502;
MsgDef[5810502] = MsgDef.Msg5810502;
MsgDef[1810601] = MsgDef.Msg1810601;
MsgDef[5810601] = MsgDef.Msg5810601;
MsgDef[1820101] = MsgDef.Msg1820101;
MsgDef[5820101] = MsgDef.Msg5820101;
MsgDef[1820102] = MsgDef.Msg1820102;
MsgDef[5820102] = MsgDef.Msg5820102;
MsgDef[1820103] = MsgDef.Msg1820103;
MsgDef[5820103] = MsgDef.Msg5820103;
MsgDef[1820104] = MsgDef.Msg1820104;
MsgDef[5820104] = MsgDef.Msg5820104;
MsgDef[1820201] = MsgDef.Msg1820201;
MsgDef[5820201] = MsgDef.Msg5820201;
MsgDef[1820202] = MsgDef.Msg1820202;
MsgDef[5820202] = MsgDef.Msg5820202;
MsgDef[1820203] = MsgDef.Msg1820203;
MsgDef[5820203] = MsgDef.Msg5820203;
MsgDef[1820204] = MsgDef.Msg1820204;
MsgDef[5820204] = MsgDef.Msg5820204;
MsgDef[1820205] = MsgDef.Msg1820205;
MsgDef[5820205] = MsgDef.Msg5820205;
MsgDef[1820206] = MsgDef.Msg1820206;
MsgDef[5820206] = MsgDef.Msg5820206;
MsgDef[1820207] = MsgDef.Msg1820207;
MsgDef[5820207] = MsgDef.Msg5820207;
MsgDef[8010101] = MsgDef.Msg8010101;
MsgDef[8020101] = MsgDef.Msg8020101;
MsgDef[8020102] = MsgDef.Msg8020102;
MsgDef[8020103] = MsgDef.Msg8020103;
MsgDef[8020104] = MsgDef.Msg8020104;
MsgDef[8020105] = MsgDef.Msg8020105;
MsgDef[8020106] = MsgDef.Msg8020106;
MsgDef[8020107] = MsgDef.Msg8020107;
MsgDef[8020108] = MsgDef.Msg8020108;
MsgDef[8020109] = MsgDef.Msg8020109;
MsgDef[8020110] = MsgDef.Msg8020110;
MsgDef[8020111] = MsgDef.Msg8020111;
MsgDef[8020112] = MsgDef.Msg8020112;
MsgDef[8020113] = MsgDef.Msg8020113;
MsgDef[8020114] = MsgDef.Msg8020114;
MsgDef[8020115] = MsgDef.Msg8020115;
MsgDef[8020116] = MsgDef.Msg8020116;
MsgDef[8020201] = MsgDef.Msg8020201;
MsgDef[8020202] = MsgDef.Msg8020202;
MsgDef[8020203] = MsgDef.Msg8020203;
MsgDef[8020204] = MsgDef.Msg8020204;
MsgDef[8030101] = MsgDef.Msg8030101;
MsgDef[8030102] = MsgDef.Msg8030102;
MsgDef[8030103] = MsgDef.Msg8030103;
MsgDef[8030104] = MsgDef.Msg8030104;
MsgDef[8030105] = MsgDef.Msg8030105;
MsgDef[8030106] = MsgDef.Msg8030106;
MsgDef[8030107] = MsgDef.Msg8030107;
MsgDef[8030201] = MsgDef.Msg8030201;
MsgDef[8040101] = MsgDef.Msg8040101;
MsgDef[8040102] = MsgDef.Msg8040102;
MsgDef[8040201] = MsgDef.Msg8040201;
MsgDef[8040202] = MsgDef.Msg8040202;
MsgDef[8040203] = MsgDef.Msg8040203;
MsgDef[8040204] = MsgDef.Msg8040204;
MsgDef[8040205] = MsgDef.Msg8040205;
MsgDef[8040206] = MsgDef.Msg8040206;
MsgDef[8050101] = MsgDef.Msg8050101;
MsgDef[8050201] = MsgDef.Msg8050201;
MsgDef[8050301] = MsgDef.Msg8050301;
MsgDef[8050401] = MsgDef.Msg8050401;
MsgDef[8060101] = MsgDef.Msg8060101;
MsgDef[8070101] = MsgDef.Msg8070101;
MsgDef[8070102] = MsgDef.Msg8070102;
MsgDef[8070103] = MsgDef.Msg8070103;
MsgDef[8080101] = MsgDef.Msg8080101;
MsgDef[8080102] = MsgDef.Msg8080102;
MsgDef[8080103] = MsgDef.Msg8080103;
MsgDef[8080104] = MsgDef.Msg8080104;
MsgDef[8080105] = MsgDef.Msg8080105;
MsgDef[8080106] = MsgDef.Msg8080106;
MsgDef[8090101] = MsgDef.Msg8090101;
MsgDef[8100101] = MsgDef.Msg8100101;
MsgDef[8100102] = MsgDef.Msg8100102;
MsgDef[8110101] = MsgDef.Msg8110101;
MsgDef[8110102] = MsgDef.Msg8110102;
MsgDef[8110103] = MsgDef.Msg8110103;
MsgDef[8110111] = MsgDef.Msg8110111;
MsgDef[8110112] = MsgDef.Msg8110112;
MsgDef[8110113] = MsgDef.Msg8110113;
MsgDef[8110114] = MsgDef.Msg8110114;
MsgDef[8110115] = MsgDef.Msg8110115;
MsgDef[8110116] = MsgDef.Msg8110116;
MsgDef[8110117] = MsgDef.Msg8110117;
MsgDef[8110118] = MsgDef.Msg8110118;
MsgDef[8110201] = MsgDef.Msg8110201;
MsgDef[8110202] = MsgDef.Msg8110202;
MsgDef[8110301] = MsgDef.Msg8110301;
MsgDef[8110302] = MsgDef.Msg8110302;
MsgDef[8110303] = MsgDef.Msg8110303;
MsgDef[8110304] = MsgDef.Msg8110304;
MsgDef[8110305] = MsgDef.Msg8110305;
MsgDef[8110306] = MsgDef.Msg8110306;
MsgDef[8110401] = MsgDef.Msg8110401;
MsgDef[8110402] = MsgDef.Msg8110402;
MsgDef[8110501] = MsgDef.Msg8110501;
MsgDef[8120101] = MsgDef.Msg8120101;
MsgDef[8120102] = MsgDef.Msg8120102;
MsgDef[8120103] = MsgDef.Msg8120103;
MsgDef[8120104] = MsgDef.Msg8120104;
MsgDef[8130101] = MsgDef.Msg8130101;
MsgDef[8130102] = MsgDef.Msg8130102;
MsgDef[8130103] = MsgDef.Msg8130103;
MsgDef[8140101] = MsgDef.Msg8140101;
MsgDef[8140102] = MsgDef.Msg8140102;
MsgDef[8140103] = MsgDef.Msg8140103;
MsgDef[8140104] = MsgDef.Msg8140104;
MsgDef[8140105] = MsgDef.Msg8140105;
MsgDef[8140201] = MsgDef.Msg8140201;
MsgDef[8140202] = MsgDef.Msg8140202;
MsgDef[8150101] = MsgDef.Msg8150101;
MsgDef[8150102] = MsgDef.Msg8150102;
MsgDef[8160101] = MsgDef.Msg8160101;
MsgDef[8160102] = MsgDef.Msg8160102;
MsgDef[8170101] = MsgDef.Msg8170101;
MsgDef[8170102] = MsgDef.Msg8170102;
MsgDef[8170103] = MsgDef.Msg8170103;
MsgDef[8170104] = MsgDef.Msg8170104;
MsgDef[8170105] = MsgDef.Msg8170105;
MsgDef[8170106] = MsgDef.Msg8170106;
MsgDef[8170107] = MsgDef.Msg8170107;
MsgDef[8180101] = MsgDef.Msg8180101;
MsgDef[8180102] = MsgDef.Msg8180102;
MsgDef[8180103] = MsgDef.Msg8180103;
MsgDef[8180201] = MsgDef.Msg8180201;
MsgDef[8180202] = MsgDef.Msg8180202;
MsgDef[8180301] = MsgDef.Msg8180301;
MsgDef[8180302] = MsgDef.Msg8180302;
MsgDef[8180303] = MsgDef.Msg8180303;
MsgDef[8180304] = MsgDef.Msg8180304;
MsgDef[8180401] = MsgDef.Msg8180401;
MsgDef[8180402] = MsgDef.Msg8180402;
MsgDef[8180403] = MsgDef.Msg8180403;
MsgDef[8180404] = MsgDef.Msg8180404;
MsgDef[8180501] = MsgDef.Msg8180501;
MsgDef[8180502] = MsgDef.Msg8180502;
MsgDef[8180601] = MsgDef.Msg8180601;
MsgDef[8180602] = MsgDef.Msg8180602;
MsgDef[8180701] = MsgDef.Msg8180701;
MsgDef[8180702] = MsgDef.Msg8180702;
MsgDef[8180703] = MsgDef.Msg8180703;
MsgDef[8180801] = MsgDef.Msg8180801;
MsgDef[8180802] = MsgDef.Msg8180802;
MsgDef[8180901] = MsgDef.Msg8180901;
MsgDef[8190101] = MsgDef.Msg8190101;
MsgDef[8190201] = MsgDef.Msg8190201;
MsgDef[8190202] = MsgDef.Msg8190202;
MsgDef[8190203] = MsgDef.Msg8190203;
MsgDef[8200101] = MsgDef.Msg8200101;
MsgDef[8200102] = MsgDef.Msg8200102;
MsgDef[8210101] = MsgDef.Msg8210101;
MsgDef[8220101] = MsgDef.Msg8220101;
MsgDef[8220102] = MsgDef.Msg8220102;
MsgDef[8220103] = MsgDef.Msg8220103;
MsgDef[8230101] = MsgDef.Msg8230101;
MsgDef[8230102] = MsgDef.Msg8230102;
MsgDef[8230201] = MsgDef.Msg8230201;
MsgDef[8230202] = MsgDef.Msg8230202;
MsgDef[8230203] = MsgDef.Msg8230203;
MsgDef[8230204] = MsgDef.Msg8230204;
MsgDef[8230205] = MsgDef.Msg8230205;
MsgDef[8230206] = MsgDef.Msg8230206;
MsgDef[8230207] = MsgDef.Msg8230207;
MsgDef[8230301] = MsgDef.Msg8230301;
MsgDef[8230302] = MsgDef.Msg8230302;
MsgDef[8230401] = MsgDef.Msg8230401;
MsgDef[1030184] = MsgDef.Msg1030184;
MsgDef[5030184] = MsgDef.Msg5030184;
MsgDef[1030185] = MsgDef.Msg1030185;
MsgDef[5030185] = MsgDef.Msg5030185;
MsgDef[1030186] = MsgDef.Msg1030186;
MsgDef[5030186] = MsgDef.Msg5030186;
MsgDef[1030401] = MsgDef.Msg1030401;
MsgDef[5030401] = MsgDef.Msg5030401;
MsgDef[1030402] = MsgDef.Msg1030402;
MsgDef[5030402] = MsgDef.Msg5030402;
MsgDef[1030187] = MsgDef.Msg1030187;
MsgDef[5030187] = MsgDef.Msg5030187;
MsgDef[1030403] = MsgDef.Msg1030403;
MsgDef[5030403] = MsgDef.Msg5030403;
MsgDef[1030404] = MsgDef.Msg1030404;
MsgDef[5030404] = MsgDef.Msg5030404;
MsgDef[1030405] = MsgDef.Msg1030405;
MsgDef[5030405] = MsgDef.Msg5030405;
MsgDef[1030406] = MsgDef.Msg1030406;
MsgDef[5030406] = MsgDef.Msg5030406;
MsgDef[1030188] = MsgDef.Msg1030188;
MsgDef[5030188] = MsgDef.Msg5030188;
MsgDef[1330801] = MsgDef.Msg1330801;
MsgDef[5330801] = MsgDef.Msg5330801;
MsgDef[1330802] = MsgDef.Msg1330802;
MsgDef[5330802] = MsgDef.Msg5330802;
MsgDef[1330803] = MsgDef.Msg1330803;
MsgDef[5330803] = MsgDef.Msg5330803;
MsgDef[1520101] = MsgDef.Msg1520101;
MsgDef[5520101] = MsgDef.Msg5520101;
MsgDef[1520102] = MsgDef.Msg1520102;
MsgDef[5520102] = MsgDef.Msg5520102;
MsgDef[1520103] = MsgDef.Msg1520103;
MsgDef[5520103] = MsgDef.Msg5520103;
MsgDef[1520104] = MsgDef.Msg1520104;
MsgDef[5520104] = MsgDef.Msg5520104;
MsgDef[1520105] = MsgDef.Msg1520105;
MsgDef[5520105] = MsgDef.Msg5520105;
MsgDef[8020205] = MsgDef.Msg8020205;
MsgDef[1030189] = MsgDef.Msg1030189;
MsgDef[5030189] = MsgDef.Msg5030189;
MsgDef[1030190] = MsgDef.Msg1030190;
MsgDef[5030190] = MsgDef.Msg5030190;
MsgDef[1030191] = MsgDef.Msg1030191;
MsgDef[5030191] = MsgDef.Msg5030191;
MsgDef[8110601] = MsgDef.Msg8110601;
MsgDef[8110602] = MsgDef.Msg8110602;
MsgDef[8110603] = MsgDef.Msg8110603;
MsgDef[1030192] = MsgDef.Msg1030192;
MsgDef[5030192] = MsgDef.Msg5030192;
MsgDef[1030193] = MsgDef.Msg1030193;
MsgDef[5030193] = MsgDef.Msg5030193;
MsgDef[1030194] = MsgDef.Msg1030194;
MsgDef[5030194] = MsgDef.Msg5030194;
MsgDef[1030320] = MsgDef.Msg1030320;
MsgDef[5030320] = MsgDef.Msg5030320;
MsgDef[1030407] = MsgDef.Msg1030407;
MsgDef[5030407] = MsgDef.Msg5030407;
MsgDef[1030408] = MsgDef.Msg1030408;
MsgDef[5030408] = MsgDef.Msg5030408;
MsgDef[1030409] = MsgDef.Msg1030409;
MsgDef[5030409] = MsgDef.Msg5030409;
MsgDef[1030410] = MsgDef.Msg1030410;
MsgDef[5030410] = MsgDef.Msg5030410;
MsgDef[1030411] = MsgDef.Msg1030411;
MsgDef[5030411] = MsgDef.Msg5030411;
MsgDef[1030501] = MsgDef.Msg1030501;
MsgDef[5030501] = MsgDef.Msg5030501;
MsgDef[1030412] = MsgDef.Msg1030412;
MsgDef[5030412] = MsgDef.Msg5030412;
MsgDef[168401] = MsgDef.Msg168401;
MsgDef[568401] = MsgDef.Msg568401;
MsgDef[168402] = MsgDef.Msg168402;
MsgDef[568402] = MsgDef.Msg568402;
MsgDef[1030502] = MsgDef.Msg1030502;
MsgDef[5030502] = MsgDef.Msg5030502;
MsgDef[1030413] = MsgDef.Msg1030413;
MsgDef[5030413] = MsgDef.Msg5030413;
MsgDef[168403] = MsgDef.Msg168403;
MsgDef[568403] = MsgDef.Msg568403;
MsgDef[8020206] = MsgDef.Msg8020206;
MsgDef[1030321] = MsgDef.Msg1030321;
MsgDef[5030321] = MsgDef.Msg5030321;
MsgDef[1030322] = MsgDef.Msg1030322;
MsgDef[5030322] = MsgDef.Msg5030322;
MsgDef[1030323] = MsgDef.Msg1030323;
MsgDef[5030323] = MsgDef.Msg5030323;
MsgDef[1250701] = MsgDef.Msg1250701;
MsgDef[5250701] = MsgDef.Msg5250701;
MsgDef[8060102] = MsgDef.Msg8060102;
MsgDef[1030324] = MsgDef.Msg1030324;
MsgDef[5030324] = MsgDef.Msg5030324;
MsgDef[1330305] = MsgDef.Msg1330305;
MsgDef[5330305] = MsgDef.Msg5330305;
MsgDef[1070205] = MsgDef.Msg1070205;
MsgDef[5070205] = MsgDef.Msg5070205;
MsgDef[1030325] = MsgDef.Msg1030325;
MsgDef[5030325] = MsgDef.Msg5030325;
MsgDef[1030503] = MsgDef.Msg1030503;
MsgDef[5030503] = MsgDef.Msg5030503;
MsgDef[8020207] = MsgDef.Msg8020207;
MsgDef[1030504] = MsgDef.Msg1030504;
MsgDef[5030504] = MsgDef.Msg5030504;
MsgDef[1530101] = MsgDef.Msg1530101;
MsgDef[5530101] = MsgDef.Msg5530101;
MsgDef[1530102] = MsgDef.Msg1530102;
MsgDef[5530102] = MsgDef.Msg5530102;
MsgDef[1530103] = MsgDef.Msg1530103;
MsgDef[5530103] = MsgDef.Msg5530103;
MsgDef[1530104] = MsgDef.Msg1530104;
MsgDef[5530104] = MsgDef.Msg5530104;
MsgDef[1530105] = MsgDef.Msg1530105;
MsgDef[5530105] = MsgDef.Msg5530105;
MsgDef[1030195] = MsgDef.Msg1030195;
MsgDef[5030195] = MsgDef.Msg5030195;
MsgDef[1030196] = MsgDef.Msg1030196;
MsgDef[5030196] = MsgDef.Msg5030196;
MsgDef[1030197] = MsgDef.Msg1030197;
MsgDef[5030197] = MsgDef.Msg5030197;
MsgDef[1030213] = MsgDef.Msg1030213;
MsgDef[5030213] = MsgDef.Msg5030213;
MsgDef[1330901] = MsgDef.Msg1330901;
MsgDef[5330901] = MsgDef.Msg5330901;
MsgDef[1330902] = MsgDef.Msg1330902;
MsgDef[5330902] = MsgDef.Msg5330902;
MsgDef[1330903] = MsgDef.Msg1330903;
MsgDef[5330903] = MsgDef.Msg5330903;
MsgDef[1030214] = MsgDef.Msg1030214;
MsgDef[5030214] = MsgDef.Msg5030214;
MsgDef[1030215] = MsgDef.Msg1030215;
MsgDef[5030215] = MsgDef.Msg5030215;
MsgDef[1030216] = MsgDef.Msg1030216;
MsgDef[5030216] = MsgDef.Msg5030216;
MsgDef[1810106] = MsgDef.Msg1810106;
MsgDef[5810106] = MsgDef.Msg5810106;
MsgDef[1030217] = MsgDef.Msg1030217;
MsgDef[5030217] = MsgDef.Msg5030217;
MsgDef[1030505] = MsgDef.Msg1030505;
MsgDef[5030505] = MsgDef.Msg5030505;
MsgDef[1030218] = MsgDef.Msg1030218;
MsgDef[5030218] = MsgDef.Msg5030218;
MsgDef[168012] = MsgDef.Msg168012;
MsgDef[568012] = MsgDef.Msg568012;
MsgDef[1030219] = MsgDef.Msg1030219;
MsgDef[5030219] = MsgDef.Msg5030219;
MsgDef[1331001] = MsgDef.Msg1331001;
MsgDef[5331001] = MsgDef.Msg5331001;
MsgDef[1490201] = MsgDef.Msg1490201;
MsgDef[5490201] = MsgDef.Msg5490201;
MsgDef[1490202] = MsgDef.Msg1490202;
MsgDef[5490202] = MsgDef.Msg5490202;
MsgDef[1030220] = MsgDef.Msg1030220;
MsgDef[5030220] = MsgDef.Msg5030220;
MsgDef[1030221] = MsgDef.Msg1030221;
MsgDef[5030221] = MsgDef.Msg5030221;
MsgDef[1540101] = MsgDef.Msg1540101;
MsgDef[5540101] = MsgDef.Msg5540101;
MsgDef[1030222] = MsgDef.Msg1030222;
MsgDef[5030222] = MsgDef.Msg5030222;
MsgDef[1540102] = MsgDef.Msg1540102;
MsgDef[5540102] = MsgDef.Msg5540102;
MsgDef[1540103] = MsgDef.Msg1540103;
MsgDef[5540103] = MsgDef.Msg5540103;
MsgDef[1540104] = MsgDef.Msg1540104;
MsgDef[5540104] = MsgDef.Msg5540104;
MsgDef[1030223] = MsgDef.Msg1030223;
MsgDef[5030223] = MsgDef.Msg5030223;
MsgDef[1540105] = MsgDef.Msg1540105;
MsgDef[5540105] = MsgDef.Msg5540105;
MsgDef[1540106] = MsgDef.Msg1540106;
MsgDef[5540106] = MsgDef.Msg5540106;
MsgDef[1030326] = MsgDef.Msg1030326;
MsgDef[5030326] = MsgDef.Msg5030326;
MsgDef[1030224] = MsgDef.Msg1030224;
MsgDef[5030224] = MsgDef.Msg5030224;
MsgDef[1540107] = MsgDef.Msg1540107;
MsgDef[5540107] = MsgDef.Msg5540107;
MsgDef[1550101] = MsgDef.Msg1550101;
MsgDef[5550101] = MsgDef.Msg5550101;
MsgDef[1550102] = MsgDef.Msg1550102;
MsgDef[5550102] = MsgDef.Msg5550102;
MsgDef[1550103] = MsgDef.Msg1550103;
MsgDef[5550103] = MsgDef.Msg5550103;
MsgDef[1550104] = MsgDef.Msg1550104;
MsgDef[5550104] = MsgDef.Msg5550104;
MsgDef[1030225] = MsgDef.Msg1030225;
MsgDef[5030225] = MsgDef.Msg5030225;
MsgDef[8100201] = MsgDef.Msg8100201;
MsgDef[8100202] = MsgDef.Msg8100202;
MsgDef[1560101] = MsgDef.Msg1560101;
MsgDef[5560101] = MsgDef.Msg5560101;
MsgDef[1560102] = MsgDef.Msg1560102;
MsgDef[5560102] = MsgDef.Msg5560102;
MsgDef[1560103] = MsgDef.Msg1560103;
MsgDef[5560103] = MsgDef.Msg5560103;
MsgDef[1560104] = MsgDef.Msg1560104;
MsgDef[5560104] = MsgDef.Msg5560104;
MsgDef[1560105] = MsgDef.Msg1560105;
MsgDef[5560105] = MsgDef.Msg5560105;
MsgDef[1540108] = MsgDef.Msg1540108;
MsgDef[5540108] = MsgDef.Msg5540108;
MsgDef[8230501] = MsgDef.Msg8230501;
MsgDef[1030226] = MsgDef.Msg1030226;
MsgDef[5030226] = MsgDef.Msg5030226;
MsgDef[1030227] = MsgDef.Msg1030227;
MsgDef[5030227] = MsgDef.Msg5030227;
MsgDef[1030506] = MsgDef.Msg1030506;
MsgDef[5030506] = MsgDef.Msg5030506;
MsgDef[1030228] = MsgDef.Msg1030228;
MsgDef[5030228] = MsgDef.Msg5030228;
MsgDef[8230502] = MsgDef.Msg8230502;
MsgDef[1030229] = MsgDef.Msg1030229;
MsgDef[5030229] = MsgDef.Msg5030229;
MsgDef[8230503] = MsgDef.Msg8230503;
MsgDef[1540109] = MsgDef.Msg1540109;
MsgDef[5540109] = MsgDef.Msg5540109;
MsgDef[1030507] = MsgDef.Msg1030507;
MsgDef[5030507] = MsgDef.Msg5030507;
MsgDef[1030508] = MsgDef.Msg1030508;
MsgDef[5030508] = MsgDef.Msg5030508;
MsgDef[1570101] = MsgDef.Msg1570101;
MsgDef[5570101] = MsgDef.Msg5570101;
MsgDef[1570102] = MsgDef.Msg1570102;
MsgDef[5570102] = MsgDef.Msg5570102;
MsgDef[1030509] = MsgDef.Msg1030509;
MsgDef[5030509] = MsgDef.Msg5030509;
MsgDef[1030230] = MsgDef.Msg1030230;
MsgDef[5030230] = MsgDef.Msg5030230;
MsgDef[1030510] = MsgDef.Msg1030510;
MsgDef[5030510] = MsgDef.Msg5030510;
MsgDef[1030231] = MsgDef.Msg1030231;
MsgDef[5030231] = MsgDef.Msg5030231;
MsgDef[1030511] = MsgDef.Msg1030511;
MsgDef[5030511] = MsgDef.Msg5030511;
MsgDef[1030232] = MsgDef.Msg1030232;
MsgDef[5030232] = MsgDef.Msg5030232;
MsgDef[1540110] = MsgDef.Msg1540110;
MsgDef[5540110] = MsgDef.Msg5540110;
MsgDef[1030233] = MsgDef.Msg1030233;
MsgDef[5030233] = MsgDef.Msg5030233;
MsgDef[8230504] = MsgDef.Msg8230504;
MsgDef[8230505] = MsgDef.Msg8230505;
MsgDef[1030234] = MsgDef.Msg1030234;
MsgDef[5030234] = MsgDef.Msg5030234;
MsgDef[1540111] = MsgDef.Msg1540111;
MsgDef[5540111] = MsgDef.Msg5540111;
MsgDef[1390501] = MsgDef.Msg1390501;
MsgDef[5390501] = MsgDef.Msg5390501;
MsgDef[1390502] = MsgDef.Msg1390502;
MsgDef[5390502] = MsgDef.Msg5390502;
MsgDef[8170201] = MsgDef.Msg8170201;
MsgDef[8170202] = MsgDef.Msg8170202;
MsgDef[1390601] = MsgDef.Msg1390601;
MsgDef[5390601] = MsgDef.Msg5390601;
MsgDef[1390602] = MsgDef.Msg1390602;
MsgDef[5390602] = MsgDef.Msg5390602;
MsgDef[1390603] = MsgDef.Msg1390603;
MsgDef[5390603] = MsgDef.Msg5390603;
MsgDef[1390604] = MsgDef.Msg1390604;
MsgDef[5390604] = MsgDef.Msg5390604;
MsgDef[1390605] = MsgDef.Msg1390605;
MsgDef[5390605] = MsgDef.Msg5390605;
MsgDef[1390606] = MsgDef.Msg1390606;
MsgDef[5390606] = MsgDef.Msg5390606;
MsgDef[1390607] = MsgDef.Msg1390607;
MsgDef[5390607] = MsgDef.Msg5390607;
MsgDef[1390608] = MsgDef.Msg1390608;
MsgDef[5390608] = MsgDef.Msg5390608;
MsgDef[1390609] = MsgDef.Msg1390609;
MsgDef[5390609] = MsgDef.Msg5390609;
MsgDef[8230506] = MsgDef.Msg8230506;
MsgDef[1030235] = MsgDef.Msg1030235;
MsgDef[5030235] = MsgDef.Msg5030235;
MsgDef[1030236] = MsgDef.Msg1030236;
MsgDef[5030236] = MsgDef.Msg5030236;
MsgDef[1030237] = MsgDef.Msg1030237;
MsgDef[5030237] = MsgDef.Msg5030237;
MsgDef[8170203] = MsgDef.Msg8170203;
MsgDef[1030238] = MsgDef.Msg1030238;
MsgDef[5030238] = MsgDef.Msg5030238;
MsgDef[1030239] = MsgDef.Msg1030239;
MsgDef[5030239] = MsgDef.Msg5030239;
MsgDef[1030512] = MsgDef.Msg1030512;
MsgDef[5030512] = MsgDef.Msg5030512;
MsgDef[1020505] = MsgDef.Msg1020505;
MsgDef[5020505] = MsgDef.Msg5020505;
MsgDef[1020506] = MsgDef.Msg1020506;
MsgDef[5020506] = MsgDef.Msg5020506;
MsgDef[1030240] = MsgDef.Msg1030240;
MsgDef[5030240] = MsgDef.Msg5030240;
MsgDef[1030241] = MsgDef.Msg1030241;
MsgDef[5030241] = MsgDef.Msg5030241;
MsgDef[1030513] = MsgDef.Msg1030513;
MsgDef[5030513] = MsgDef.Msg5030513;
MsgDef[1030514] = MsgDef.Msg1030514;
MsgDef[5030514] = MsgDef.Msg5030514;
MsgDef[1028101] = MsgDef.Msg1028101;
MsgDef[5028101] = MsgDef.Msg5028101;
MsgDef[8190301] = MsgDef.Msg8190301;
MsgDef[1580101] = MsgDef.Msg1580101;
MsgDef[5580101] = MsgDef.Msg5580101;
MsgDef[1580102] = MsgDef.Msg1580102;
MsgDef[5580102] = MsgDef.Msg5580102;
MsgDef[1580201] = MsgDef.Msg1580201;
MsgDef[5580201] = MsgDef.Msg5580201;
MsgDef[1580202] = MsgDef.Msg1580202;
MsgDef[5580202] = MsgDef.Msg5580202;
MsgDef[8190302] = MsgDef.Msg8190302;
MsgDef[1331101] = MsgDef.Msg1331101;
MsgDef[5331101] = MsgDef.Msg5331101;
MsgDef[1331102] = MsgDef.Msg1331102;
MsgDef[5331102] = MsgDef.Msg5331102;
MsgDef[1331103] = MsgDef.Msg1331103;
MsgDef[5331103] = MsgDef.Msg5331103;
MsgDef[1580103] = MsgDef.Msg1580103;
MsgDef[5580103] = MsgDef.Msg5580103;
MsgDef[1030242] = MsgDef.Msg1030242;
MsgDef[5030242] = MsgDef.Msg5030242;
MsgDef[1030243] = MsgDef.Msg1030243;
MsgDef[5030243] = MsgDef.Msg5030243;
MsgDef[1030515] = MsgDef.Msg1030515;
MsgDef[5030515] = MsgDef.Msg5030515;
MsgDef[1030516] = MsgDef.Msg1030516;
MsgDef[5030516] = MsgDef.Msg5030516;
MsgDef[1030517] = MsgDef.Msg1030517;
MsgDef[5030517] = MsgDef.Msg5030517;
MsgDef[1510106] = MsgDef.Msg1510106;
MsgDef[5510106] = MsgDef.Msg5510106;
MsgDef[1510107] = MsgDef.Msg1510107;
MsgDef[5510107] = MsgDef.Msg5510107;
MsgDef[1030518] = MsgDef.Msg1030518;
MsgDef[5030518] = MsgDef.Msg5030518;
MsgDef[1100201] = MsgDef.Msg1100201;
MsgDef[5100201] = MsgDef.Msg5100201;
MsgDef[1030519] = MsgDef.Msg1030519;
MsgDef[5030519] = MsgDef.Msg5030519;
MsgDef[1590101] = MsgDef.Msg1590101;
MsgDef[5590101] = MsgDef.Msg5590101;
MsgDef[1590102] = MsgDef.Msg1590102;
MsgDef[5590102] = MsgDef.Msg5590102;
MsgDef[1590103] = MsgDef.Msg1590103;
MsgDef[5590103] = MsgDef.Msg5590103;
MsgDef[1590104] = MsgDef.Msg1590104;
MsgDef[5590104] = MsgDef.Msg5590104;
MsgDef[1590105] = MsgDef.Msg1590105;
MsgDef[5590105] = MsgDef.Msg5590105;
MsgDef[1331201] = MsgDef.Msg1331201;
MsgDef[5331201] = MsgDef.Msg5331201;
MsgDef[1331202] = MsgDef.Msg1331202;
MsgDef[5331202] = MsgDef.Msg5331202;
MsgDef[1331203] = MsgDef.Msg1331203;
MsgDef[5331203] = MsgDef.Msg5331203;
MsgDef[1030520] = MsgDef.Msg1030520;
MsgDef[5030520] = MsgDef.Msg5030520;
MsgDef[1030244] = MsgDef.Msg1030244;
MsgDef[5030244] = MsgDef.Msg5030244;
MsgDef[1030245] = MsgDef.Msg1030245;
MsgDef[5030245] = MsgDef.Msg5030245;
MsgDef[1030521] = MsgDef.Msg1030521;
MsgDef[5030521] = MsgDef.Msg5030521;
MsgDef[1030246] = MsgDef.Msg1030246;
MsgDef[5030246] = MsgDef.Msg5030246;
MsgDef[1030247] = MsgDef.Msg1030247;
MsgDef[5030247] = MsgDef.Msg5030247;
MsgDef[1030248] = MsgDef.Msg1030248;
MsgDef[5030248] = MsgDef.Msg5030248;
MsgDef[1030249] = MsgDef.Msg1030249;
MsgDef[5030249] = MsgDef.Msg5030249;
MsgDef[1030522] = MsgDef.Msg1030522;
MsgDef[5030522] = MsgDef.Msg5030522;
MsgDef[8230601] = MsgDef.Msg8230601;
MsgDef[1030250] = MsgDef.Msg1030250;
MsgDef[5030250] = MsgDef.Msg5030250;
MsgDef[1030601] = MsgDef.Msg1030601;
MsgDef[5030601] = MsgDef.Msg5030601;
MsgDef[1030602] = MsgDef.Msg1030602;
MsgDef[5030602] = MsgDef.Msg5030602;
MsgDef[1030603] = MsgDef.Msg1030603;
MsgDef[5030603] = MsgDef.Msg5030603;
MsgDef[1030604] = MsgDef.Msg1030604;
MsgDef[5030604] = MsgDef.Msg5030604;
MsgDef[1030605] = MsgDef.Msg1030605;
MsgDef[5030605] = MsgDef.Msg5030605;
MsgDef[1030606] = MsgDef.Msg1030606;
MsgDef[5030606] = MsgDef.Msg5030606;
MsgDef[1100301] = MsgDef.Msg1100301;
MsgDef[5100301] = MsgDef.Msg5100301;
MsgDef[1020507] = MsgDef.Msg1020507;
MsgDef[5020507] = MsgDef.Msg5020507;
MsgDef[8230602] = MsgDef.Msg8230602;
MsgDef[8230603] = MsgDef.Msg8230603;
MsgDef[8230604] = MsgDef.Msg8230604;
MsgDef[1030607] = MsgDef.Msg1030607;
MsgDef[5030607] = MsgDef.Msg5030607;
MsgDef[1030608] = MsgDef.Msg1030608;
MsgDef[5030608] = MsgDef.Msg5030608;
MsgDef[1030609] = MsgDef.Msg1030609;
MsgDef[5030609] = MsgDef.Msg5030609;
MsgDef[1540201] = MsgDef.Msg1540201;
MsgDef[5540201] = MsgDef.Msg5540201;
MsgDef[1540202] = MsgDef.Msg1540202;
MsgDef[5540202] = MsgDef.Msg5540202;
MsgDef[1540203] = MsgDef.Msg1540203;
MsgDef[5540203] = MsgDef.Msg5540203;
MsgDef[1540204] = MsgDef.Msg1540204;
MsgDef[5540204] = MsgDef.Msg5540204;
MsgDef[1540205] = MsgDef.Msg1540205;
MsgDef[5540205] = MsgDef.Msg5540205;
MsgDef[1030610] = MsgDef.Msg1030610;
MsgDef[5030610] = MsgDef.Msg5030610;
MsgDef[1540206] = MsgDef.Msg1540206;
MsgDef[5540206] = MsgDef.Msg5540206;
MsgDef[1540207] = MsgDef.Msg1540207;
MsgDef[5540207] = MsgDef.Msg5540207;
MsgDef[1540208] = MsgDef.Msg1540208;
MsgDef[5540208] = MsgDef.Msg5540208;
MsgDef[1540209] = MsgDef.Msg1540209;
MsgDef[5540209] = MsgDef.Msg5540209;
MsgDef[1540210] = MsgDef.Msg1540210;
MsgDef[5540210] = MsgDef.Msg5540210;
MsgDef[1540211] = MsgDef.Msg1540211;
MsgDef[5540211] = MsgDef.Msg5540211;
MsgDef[1030611] = MsgDef.Msg1030611;
MsgDef[5030611] = MsgDef.Msg5030611;
MsgDef[1600101] = MsgDef.Msg1600101;
MsgDef[5600101] = MsgDef.Msg5600101;
MsgDef[1600102] = MsgDef.Msg1600102;
MsgDef[5600102] = MsgDef.Msg5600102;
MsgDef[1600103] = MsgDef.Msg1600103;
MsgDef[5600103] = MsgDef.Msg5600103;
MsgDef[1600104] = MsgDef.Msg1600104;
MsgDef[5600104] = MsgDef.Msg5600104;
MsgDef[1600105] = MsgDef.Msg1600105;
MsgDef[5600105] = MsgDef.Msg5600105;
MsgDef[1030612] = MsgDef.Msg1030612;
MsgDef[5030612] = MsgDef.Msg5030612;
MsgDef[1030613] = MsgDef.Msg1030613;
MsgDef[5030613] = MsgDef.Msg5030613;
MsgDef[1331301] = MsgDef.Msg1331301;
MsgDef[5331301] = MsgDef.Msg5331301;
MsgDef[1331302] = MsgDef.Msg1331302;
MsgDef[5331302] = MsgDef.Msg5331302;
MsgDef[1331303] = MsgDef.Msg1331303;
MsgDef[5331303] = MsgDef.Msg5331303;
MsgDef[8230701] = MsgDef.Msg8230701;
MsgDef[8230605] = MsgDef.Msg8230605;
MsgDef[1030614] = MsgDef.Msg1030614;
MsgDef[5030614] = MsgDef.Msg5030614;
MsgDef[1030615] = MsgDef.Msg1030615;
MsgDef[5030615] = MsgDef.Msg5030615;
MsgDef[1030616] = MsgDef.Msg1030616;
MsgDef[5030616] = MsgDef.Msg5030616;
MsgDef[1030251] = MsgDef.Msg1030251;
MsgDef[5030251] = MsgDef.Msg5030251;
MsgDef[1030327] = MsgDef.Msg1030327;
MsgDef[5030327] = MsgDef.Msg5030327;
MsgDef[1030617] = MsgDef.Msg1030617;
MsgDef[5030617] = MsgDef.Msg5030617;
MsgDef[1030618] = MsgDef.Msg1030618;
MsgDef[5030618] = MsgDef.Msg5030618;
MsgDef[1030619] = MsgDef.Msg1030619;
MsgDef[5030619] = MsgDef.Msg5030619;
MsgDef[1030620] = MsgDef.Msg1030620;
MsgDef[5030620] = MsgDef.Msg5030620;
MsgDef[1600106] = MsgDef.Msg1600106;
MsgDef[5600106] = MsgDef.Msg5600106;
MsgDef[1331401] = MsgDef.Msg1331401;
MsgDef[5331401] = MsgDef.Msg5331401;
MsgDef[1331402] = MsgDef.Msg1331402;
MsgDef[5331402] = MsgDef.Msg5331402;
MsgDef[1331403] = MsgDef.Msg1331403;
MsgDef[5331403] = MsgDef.Msg5331403;
MsgDef[1030252] = MsgDef.Msg1030252;
MsgDef[5030252] = MsgDef.Msg5030252;
MsgDef[8230606] = MsgDef.Msg8230606;
MsgDef[8230702] = MsgDef.Msg8230702;
MsgDef[1030621] = MsgDef.Msg1030621;
MsgDef[5030621] = MsgDef.Msg5030621;
MsgDef[8110502] = MsgDef.Msg8110502;
MsgDef[1030622] = MsgDef.Msg1030622;
MsgDef[5030622] = MsgDef.Msg5030622;
MsgDef[1030623] = MsgDef.Msg1030623;
MsgDef[5030623] = MsgDef.Msg5030623;
MsgDef[1030624] = MsgDef.Msg1030624;
MsgDef[5030624] = MsgDef.Msg5030624;
MsgDef[1030625] = MsgDef.Msg1030625;
MsgDef[5030625] = MsgDef.Msg5030625;
MsgDef[1030626] = MsgDef.Msg1030626;
MsgDef[5030626] = MsgDef.Msg5030626;
MsgDef[1190202] = MsgDef.Msg1190202;
MsgDef[5190202] = MsgDef.Msg5190202;
MsgDef[1030630] = MsgDef.Msg1030630;
MsgDef[5030630] = MsgDef.Msg5030630;
MsgDef[1030631] = MsgDef.Msg1030631;
MsgDef[5030631] = MsgDef.Msg5030631;
MsgDef[1030632] = MsgDef.Msg1030632;
MsgDef[5030632] = MsgDef.Msg5030632;
MsgDef[1030633] = MsgDef.Msg1030633;
MsgDef[5030633] = MsgDef.Msg5030633;
MsgDef[1030253] = MsgDef.Msg1030253;
MsgDef[5030253] = MsgDef.Msg5030253;
MsgDef[8230801] = MsgDef.Msg8230801;
MsgDef[1190203] = MsgDef.Msg1190203;
MsgDef[5190203] = MsgDef.Msg5190203;
MsgDef[1030635] = MsgDef.Msg1030635;
MsgDef[5030635] = MsgDef.Msg5030635;
MsgDef[1030636] = MsgDef.Msg1030636;
MsgDef[5030636] = MsgDef.Msg5030636;
MsgDef[1100401] = MsgDef.Msg1100401;
MsgDef[5100401] = MsgDef.Msg5100401;
MsgDef[1100402] = MsgDef.Msg1100402;
MsgDef[5100402] = MsgDef.Msg5100402;
MsgDef[1030637] = MsgDef.Msg1030637;
MsgDef[5030637] = MsgDef.Msg5030637;
MsgDef[1030638] = MsgDef.Msg1030638;
MsgDef[5030638] = MsgDef.Msg5030638;
MsgDef[1030639] = MsgDef.Msg1030639;
MsgDef[5030639] = MsgDef.Msg5030639;
MsgDef[1028201] = MsgDef.Msg1028201;
MsgDef[5028201] = MsgDef.Msg5028201;
MsgDef[1030640] = MsgDef.Msg1030640;
MsgDef[5030640] = MsgDef.Msg5030640;
MsgDef[1028202] = MsgDef.Msg1028202;
MsgDef[5028202] = MsgDef.Msg5028202;
MsgDef[1030641] = MsgDef.Msg1030641;
MsgDef[5030641] = MsgDef.Msg5030641;
MsgDef[1030642] = MsgDef.Msg1030642;
MsgDef[5030642] = MsgDef.Msg5030642;
MsgDef[1590106] = MsgDef.Msg1590106;
MsgDef[5590106] = MsgDef.Msg5590106;
MsgDef[1030643] = MsgDef.Msg1030643;
MsgDef[5030643] = MsgDef.Msg5030643;
MsgDef[1030644] = MsgDef.Msg1030644;
MsgDef[5030644] = MsgDef.Msg5030644;
MsgDef[1570201] = MsgDef.Msg1570201;
MsgDef[5570201] = MsgDef.Msg5570201;
MsgDef[1570202] = MsgDef.Msg1570202;
MsgDef[5570202] = MsgDef.Msg5570202;
MsgDef[1570203] = MsgDef.Msg1570203;
MsgDef[5570203] = MsgDef.Msg5570203;
MsgDef[1030645] = MsgDef.Msg1030645;
MsgDef[5030645] = MsgDef.Msg5030645;
MsgDef[1030254] = MsgDef.Msg1030254;
MsgDef[5030254] = MsgDef.Msg5030254;
MsgDef[1030255] = MsgDef.Msg1030255;
MsgDef[5030255] = MsgDef.Msg5030255;
MsgDef[1030646] = MsgDef.Msg1030646;
MsgDef[5030646] = MsgDef.Msg5030646;
MsgDef[1030647] = MsgDef.Msg1030647;
MsgDef[5030647] = MsgDef.Msg5030647;
MsgDef[1331501] = MsgDef.Msg1331501;
MsgDef[5331501] = MsgDef.Msg5331501;
MsgDef[1331502] = MsgDef.Msg1331502;
MsgDef[5331502] = MsgDef.Msg5331502;
MsgDef[1331503] = MsgDef.Msg1331503;
MsgDef[5331503] = MsgDef.Msg5331503;
MsgDef[8240101] = MsgDef.Msg8240101;
MsgDef[8240102] = MsgDef.Msg8240102;
MsgDef[8240103] = MsgDef.Msg8240103;
MsgDef[1610101] = MsgDef.Msg1610101;
MsgDef[5610101] = MsgDef.Msg5610101;
MsgDef[1610102] = MsgDef.Msg1610102;
MsgDef[5610102] = MsgDef.Msg5610102;
MsgDef[1610103] = MsgDef.Msg1610103;
MsgDef[5610103] = MsgDef.Msg5610103;
MsgDef[1610104] = MsgDef.Msg1610104;
MsgDef[5610104] = MsgDef.Msg5610104;
MsgDef[1610105] = MsgDef.Msg1610105;
MsgDef[5610105] = MsgDef.Msg5610105;
MsgDef[1610106] = MsgDef.Msg1610106;
MsgDef[5610106] = MsgDef.Msg5610106;
MsgDef[1610107] = MsgDef.Msg1610107;
MsgDef[5610107] = MsgDef.Msg5610107;
MsgDef[1030648] = MsgDef.Msg1030648;
MsgDef[5030648] = MsgDef.Msg5030648;
MsgDef[1030649] = MsgDef.Msg1030649;
MsgDef[5030649] = MsgDef.Msg5030649;
MsgDef[8240104] = MsgDef.Msg8240104;
MsgDef[1270107] = MsgDef.Msg1270107;
MsgDef[5270107] = MsgDef.Msg5270107;
MsgDef[8020208] = MsgDef.Msg8020208;
MsgDef[1030650] = MsgDef.Msg1030650;
MsgDef[5030650] = MsgDef.Msg5030650;
MsgDef[1270301] = MsgDef.Msg1270301;
MsgDef[5270301] = MsgDef.Msg5270301;
MsgDef[1030651] = MsgDef.Msg1030651;
MsgDef[5030651] = MsgDef.Msg5030651;
MsgDef[1390610] = MsgDef.Msg1390610;
MsgDef[5390610] = MsgDef.Msg5390610;
MsgDef[1390611] = MsgDef.Msg1390611;
MsgDef[5390611] = MsgDef.Msg5390611;
MsgDef[1030652] = MsgDef.Msg1030652;
MsgDef[5030652] = MsgDef.Msg5030652;
MsgDef[1030653] = MsgDef.Msg1030653;
MsgDef[5030653] = MsgDef.Msg5030653;
MsgDef[1030654] = MsgDef.Msg1030654;
MsgDef[5030654] = MsgDef.Msg5030654;
MsgDef[1030655] = MsgDef.Msg1030655;
MsgDef[5030655] = MsgDef.Msg5030655;
MsgDef[1030656] = MsgDef.Msg1030656;
MsgDef[5030656] = MsgDef.Msg5030656;
MsgDef[1580104] = MsgDef.Msg1580104;
MsgDef[5580104] = MsgDef.Msg5580104;
MsgDef[8240201] = MsgDef.Msg8240201;
MsgDef[8240202] = MsgDef.Msg8240202;
MsgDef[1030657] = MsgDef.Msg1030657;
MsgDef[5030657] = MsgDef.Msg5030657;
MsgDef[1030658] = MsgDef.Msg1030658;
MsgDef[5030658] = MsgDef.Msg5030658;
MsgDef[1030328] = MsgDef.Msg1030328;
MsgDef[5030328] = MsgDef.Msg5030328;
MsgDef[1030414] = MsgDef.Msg1030414;
MsgDef[5030414] = MsgDef.Msg5030414;
MsgDef[1030415] = MsgDef.Msg1030415;
MsgDef[5030415] = MsgDef.Msg5030415;
MsgDef[1030416] = MsgDef.Msg1030416;
MsgDef[5030416] = MsgDef.Msg5030416;
MsgDef[1030417] = MsgDef.Msg1030417;
MsgDef[5030417] = MsgDef.Msg5030417;
MsgDef[1030418] = MsgDef.Msg1030418;
MsgDef[5030418] = MsgDef.Msg5030418;
MsgDef[1030419] = MsgDef.Msg1030419;
MsgDef[5030419] = MsgDef.Msg5030419;
MsgDef[1620101] = MsgDef.Msg1620101;
MsgDef[5620101] = MsgDef.Msg5620101;
MsgDef[1620102] = MsgDef.Msg1620102;
MsgDef[5620102] = MsgDef.Msg5620102;
MsgDef[1620103] = MsgDef.Msg1620103;
MsgDef[5620103] = MsgDef.Msg5620103;
MsgDef[1620104] = MsgDef.Msg1620104;
MsgDef[5620104] = MsgDef.Msg5620104;
MsgDef[1620105] = MsgDef.Msg1620105;
MsgDef[5620105] = MsgDef.Msg5620105;
MsgDef[1620106] = MsgDef.Msg1620106;
MsgDef[5620106] = MsgDef.Msg5620106;
MsgDef[1620107] = MsgDef.Msg1620107;
MsgDef[5620107] = MsgDef.Msg5620107;
MsgDef[1620108] = MsgDef.Msg1620108;
MsgDef[5620108] = MsgDef.Msg5620108;
MsgDef[1030659] = MsgDef.Msg1030659;
MsgDef[5030659] = MsgDef.Msg5030659;
MsgDef[1100117] = MsgDef.Msg1100117;
MsgDef[5100117] = MsgDef.Msg5100117;
MsgDef[1030660] = MsgDef.Msg1030660;
MsgDef[5030660] = MsgDef.Msg5030660;
MsgDef[1030661] = MsgDef.Msg1030661;
MsgDef[5030661] = MsgDef.Msg5030661;
MsgDef[1030662] = MsgDef.Msg1030662;
MsgDef[5030662] = MsgDef.Msg5030662;
MsgDef[1630101] = MsgDef.Msg1630101;
MsgDef[5630101] = MsgDef.Msg5630101;
MsgDef[1630102] = MsgDef.Msg1630102;
MsgDef[5630102] = MsgDef.Msg5630102;
MsgDef[1630103] = MsgDef.Msg1630103;
MsgDef[5630103] = MsgDef.Msg5630103;
MsgDef[1630104] = MsgDef.Msg1630104;
MsgDef[5630104] = MsgDef.Msg5630104;
MsgDef[1630105] = MsgDef.Msg1630105;
MsgDef[5630105] = MsgDef.Msg5630105;
MsgDef[1630106] = MsgDef.Msg1630106;
MsgDef[5630106] = MsgDef.Msg5630106;
MsgDef[1640101] = MsgDef.Msg1640101;
MsgDef[5640101] = MsgDef.Msg5640101;
MsgDef[1640102] = MsgDef.Msg1640102;
MsgDef[5640102] = MsgDef.Msg5640102;
MsgDef[1640103] = MsgDef.Msg1640103;
MsgDef[5640103] = MsgDef.Msg5640103;
MsgDef[1640104] = MsgDef.Msg1640104;
MsgDef[5640104] = MsgDef.Msg5640104;
MsgDef[1640105] = MsgDef.Msg1640105;
MsgDef[5640105] = MsgDef.Msg5640105;
MsgDef[1640106] = MsgDef.Msg1640106;
MsgDef[5640106] = MsgDef.Msg5640106;
MsgDef[1640108] = MsgDef.Msg1640108;
MsgDef[5640108] = MsgDef.Msg5640108;
MsgDef[1030663] = MsgDef.Msg1030663;
MsgDef[5030663] = MsgDef.Msg5030663;
MsgDef[1030664] = MsgDef.Msg1030664;
MsgDef[5030664] = MsgDef.Msg5030664;
MsgDef[1030665] = MsgDef.Msg1030665;
MsgDef[5030665] = MsgDef.Msg5030665;
MsgDef[1030666] = MsgDef.Msg1030666;
MsgDef[5030666] = MsgDef.Msg5030666;
MsgDef[1030667] = MsgDef.Msg1030667;
MsgDef[5030667] = MsgDef.Msg5030667;
MsgDef[1030668] = MsgDef.Msg1030668;
MsgDef[5030668] = MsgDef.Msg5030668;
MsgDef[1640107] = MsgDef.Msg1640107;
MsgDef[5640107] = MsgDef.Msg5640107;
MsgDef[1030669] = MsgDef.Msg1030669;
MsgDef[5030669] = MsgDef.Msg5030669;
MsgDef[1030670] = MsgDef.Msg1030670;
MsgDef[5030670] = MsgDef.Msg5030670;
MsgDef[1030671] = MsgDef.Msg1030671;
MsgDef[5030671] = MsgDef.Msg5030671;
MsgDef[1030672] = MsgDef.Msg1030672;
MsgDef[5030672] = MsgDef.Msg5030672;
MsgDef[1030673] = MsgDef.Msg1030673;
MsgDef[5030673] = MsgDef.Msg5030673;
MsgDef[1030674] = MsgDef.Msg1030674;
MsgDef[5030674] = MsgDef.Msg5030674;
MsgDef[1030675] = MsgDef.Msg1030675;
MsgDef[5030675] = MsgDef.Msg5030675;
MsgDef[1030676] = MsgDef.Msg1030676;
MsgDef[5030676] = MsgDef.Msg5030676;
MsgDef[8240204] = MsgDef.Msg8240204;
MsgDef[8240205] = MsgDef.Msg8240205;
MsgDef[8240301] = MsgDef.Msg8240301;
MsgDef[1640109] = MsgDef.Msg1640109;
MsgDef[5640109] = MsgDef.Msg5640109;
MsgDef[1030677] = MsgDef.Msg1030677;
MsgDef[5030677] = MsgDef.Msg5030677;
MsgDef[1030678] = MsgDef.Msg1030678;
MsgDef[5030678] = MsgDef.Msg5030678;
MsgDef[1030679] = MsgDef.Msg1030679;
MsgDef[5030679] = MsgDef.Msg5030679;
MsgDef[1030680] = MsgDef.Msg1030680;
MsgDef[5030680] = MsgDef.Msg5030680;
MsgDef[1030681] = MsgDef.Msg1030681;
MsgDef[5030681] = MsgDef.Msg5030681;
MsgDef[1030682] = MsgDef.Msg1030682;
MsgDef[5030682] = MsgDef.Msg5030682;
MsgDef[8240206] = MsgDef.Msg8240206;
MsgDef[8240207] = MsgDef.Msg8240207;
MsgDef[1650101] = MsgDef.Msg1650101;
MsgDef[5650101] = MsgDef.Msg5650101;
MsgDef[1650102] = MsgDef.Msg1650102;
MsgDef[5650102] = MsgDef.Msg5650102;
MsgDef[1650103] = MsgDef.Msg1650103;
MsgDef[5650103] = MsgDef.Msg5650103;
MsgDef[1650104] = MsgDef.Msg1650104;
MsgDef[5650104] = MsgDef.Msg5650104;
MsgDef[1650105] = MsgDef.Msg1650105;
MsgDef[5650105] = MsgDef.Msg5650105;
MsgDef[1650106] = MsgDef.Msg1650106;
MsgDef[5650106] = MsgDef.Msg5650106;
MsgDef[8240302] = MsgDef.Msg8240302;
MsgDef[8240303] = MsgDef.Msg8240303;
MsgDef[1070106] = MsgDef.Msg1070106;
MsgDef[5070106] = MsgDef.Msg5070106;
MsgDef[1030683] = MsgDef.Msg1030683;
MsgDef[5030683] = MsgDef.Msg5030683;
MsgDef[1030684] = MsgDef.Msg1030684;
MsgDef[5030684] = MsgDef.Msg5030684;
MsgDef[1030685] = MsgDef.Msg1030685;
MsgDef[5030685] = MsgDef.Msg5030685;
MsgDef[1030686] = MsgDef.Msg1030686;
MsgDef[5030686] = MsgDef.Msg5030686;
MsgDef[1030687] = MsgDef.Msg1030687;
MsgDef[5030687] = MsgDef.Msg5030687;
MsgDef[1030688] = MsgDef.Msg1030688;
MsgDef[5030688] = MsgDef.Msg5030688;
MsgDef[1030689] = MsgDef.Msg1030689;
MsgDef[5030689] = MsgDef.Msg5030689;
MsgDef[1030690] = MsgDef.Msg1030690;
MsgDef[5030690] = MsgDef.Msg5030690;
MsgDef[1030691] = MsgDef.Msg1030691;
MsgDef[5030691] = MsgDef.Msg5030691;
MsgDef[1030692] = MsgDef.Msg1030692;
MsgDef[5030692] = MsgDef.Msg5030692;
MsgDef[1660101] = MsgDef.Msg1660101;
MsgDef[5660101] = MsgDef.Msg5660101;
MsgDef[1028301] = MsgDef.Msg1028301;
MsgDef[5028301] = MsgDef.Msg5028301;
MsgDef[1028302] = MsgDef.Msg1028302;
MsgDef[5028302] = MsgDef.Msg5028302;
MsgDef[1660102] = MsgDef.Msg1660102;
MsgDef[5660102] = MsgDef.Msg5660102;
MsgDef[1660103] = MsgDef.Msg1660103;
MsgDef[5660103] = MsgDef.Msg5660103;
MsgDef[1660104] = MsgDef.Msg1660104;
MsgDef[5660104] = MsgDef.Msg5660104;
MsgDef[1660105] = MsgDef.Msg1660105;
MsgDef[5660105] = MsgDef.Msg5660105;
MsgDef[1660106] = MsgDef.Msg1660106;
MsgDef[5660106] = MsgDef.Msg5660106;
MsgDef[1660107] = MsgDef.Msg1660107;
MsgDef[5660107] = MsgDef.Msg5660107;
MsgDef[1030693] = MsgDef.Msg1030693;
MsgDef[5030693] = MsgDef.Msg5030693;
MsgDef[1030694] = MsgDef.Msg1030694;
MsgDef[5030694] = MsgDef.Msg5030694;
MsgDef[1030695] = MsgDef.Msg1030695;
MsgDef[5030695] = MsgDef.Msg5030695;
MsgDef[1660108] = MsgDef.Msg1660108;
MsgDef[5660108] = MsgDef.Msg5660108;
MsgDef[1030696] = MsgDef.Msg1030696;
MsgDef[5030696] = MsgDef.Msg5030696;
MsgDef[1030697] = MsgDef.Msg1030697;
MsgDef[5030697] = MsgDef.Msg5030697;
MsgDef[1030698] = MsgDef.Msg1030698;
MsgDef[5030698] = MsgDef.Msg5030698;
MsgDef[1030699] = MsgDef.Msg1030699;
MsgDef[5030699] = MsgDef.Msg5030699;
MsgDef[1030700] = MsgDef.Msg1030700;
MsgDef[5030700] = MsgDef.Msg5030700;
MsgDef[1030701] = MsgDef.Msg1030701;
MsgDef[5030701] = MsgDef.Msg5030701;
MsgDef[1030702] = MsgDef.Msg1030702;
MsgDef[5030702] = MsgDef.Msg5030702;
MsgDef[1030703] = MsgDef.Msg1030703;
MsgDef[5030703] = MsgDef.Msg5030703;
MsgDef[8240304] = MsgDef.Msg8240304;
MsgDef[1030704] = MsgDef.Msg1030704;
MsgDef[5030704] = MsgDef.Msg5030704;
MsgDef[1030705] = MsgDef.Msg1030705;
MsgDef[5030705] = MsgDef.Msg5030705;
MsgDef[1030706] = MsgDef.Msg1030706;
MsgDef[5030706] = MsgDef.Msg5030706;
MsgDef[1030707] = MsgDef.Msg1030707;
MsgDef[5030707] = MsgDef.Msg5030707;
MsgDef[1030708] = MsgDef.Msg1030708;
MsgDef[5030708] = MsgDef.Msg5030708;
MsgDef[1030709] = MsgDef.Msg1030709;
MsgDef[5030709] = MsgDef.Msg5030709;
MsgDef[1030710] = MsgDef.Msg1030710;
MsgDef[5030710] = MsgDef.Msg5030710;
MsgDef[1030711] = MsgDef.Msg1030711;
MsgDef[5030711] = MsgDef.Msg5030711;
MsgDef[1030712] = MsgDef.Msg1030712;
MsgDef[5030712] = MsgDef.Msg5030712;
MsgDef[1030713] = MsgDef.Msg1030713;
MsgDef[5030713] = MsgDef.Msg5030713;
MsgDef[1030714] = MsgDef.Msg1030714;
MsgDef[5030714] = MsgDef.Msg5030714;
MsgDef[1030715] = MsgDef.Msg1030715;
MsgDef[5030715] = MsgDef.Msg5030715;
MsgDef[1030716] = MsgDef.Msg1030716;
MsgDef[5030716] = MsgDef.Msg5030716;
MsgDef[1030717] = MsgDef.Msg1030717;
MsgDef[5030717] = MsgDef.Msg5030717;
MsgDef[1030718] = MsgDef.Msg1030718;
MsgDef[5030718] = MsgDef.Msg5030718;
MsgDef[8240305] = MsgDef.Msg8240305;
MsgDef[1030719] = MsgDef.Msg1030719;
MsgDef[5030719] = MsgDef.Msg5030719;
MsgDef[1030720] = MsgDef.Msg1030720;
MsgDef[5030720] = MsgDef.Msg5030720;
MsgDef[1030721] = MsgDef.Msg1030721;
MsgDef[5030721] = MsgDef.Msg5030721;
MsgDef[1030722] = MsgDef.Msg1030722;
MsgDef[5030722] = MsgDef.Msg5030722;

return MsgDef